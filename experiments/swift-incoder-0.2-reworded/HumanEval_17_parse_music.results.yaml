language: swift
name: HumanEval_17_parse_music
results:
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var current_note = \"\"\n    var current_beat\
    \ = 0\n    var current_beats = 0\n    var current_note_index = 0\n    var current_note_length\
    \ = 0\n    var current_note_octave = 0\n    var current_note_octave_length = 0\n\
    \    var current_note_octave_octave = 0\n    var current_note_octave_octave_length\
    \ = 0\n    var current_note_octave_octave_octave = 0\n    var current_note_octave_octave_octave_length\
    \ = 0\n    var current_note_octave_octave_octave_octave = 0\n    var current_note_octave_octave_octave_octave_length\
    \ = 0\n    var current_note_octave_octave_octave_octave_octave = 0\n    var current_note_octave_octave_octave_octave_octave_length\
    \ = 0\n    var current_note_octave_octave_octave_octave_octave_octave = 0\n  \
    \  var current_note_octave_octave_octave_octave_octave_length = 0\n    var current_note_octave_octave_octave_octave_octave_octave\
    \ = 0\n    var current_note_octave_octave_octave_octave_octave_octave_length =\
    \ 0\n    var current_note_octave_octave_octave_octave_octave_octave_octave = 0\n\
    \    var current_note_octave_octave_octave_octave_octave_octave_octave_length\
    \ = 0\n    var current_note_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = 0\n    var current_note_octave_octave_octave_octave_octave_octave_octave_octave_length\
    \ = 0\n    var current_note_octave_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = 0\n    var current_note_octave_octave_octave_octave_octave_octave_octave_octave_octave_length\
    \ = 0\n    var current_note_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = 0\n    var current_note_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_length\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_pdj77t8.swift:30:9: error: invalid redeclaration of 'current_note_octave_octave_octave_octave_octave_length'\n\
    \    var current_note_octave_octave_octave_octave_octave_length = 0\n        ^\n\
    /tmp/tmp_pdj77t8.swift:28:9: note: 'current_note_octave_octave_octave_octave_octave_length'\
    \ previously declared here\n    var current_note_octave_octave_octave_octave_octave_length\
    \ = 0\n        ^\n/tmp/tmp_pdj77t8.swift:31:9: error: invalid redeclaration of\
    \ 'current_note_octave_octave_octave_octave_octave_octave'\n    var current_note_octave_octave_octave_octave_octave_octave\
    \ = 0\n        ^\n/tmp/tmp_pdj77t8.swift:29:9: note: 'current_note_octave_octave_octave_octave_octave_octave'\
    \ previously declared here\n    var current_note_octave_octave_octave_octave_octave_octave\
    \ = 0\n        ^\n/tmp/tmp_pdj77t8.swift:40:9: error: type annotation missing\
    \ in pattern\n    var current_note_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_length\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    for char\
    \ in music_string {\n        if char == \"o\" {\n            if note != \"\" {\n\
    \                notes.append(note)\n                note = \"\"\n           \
    \ }\n            beats.append(beat)\n            beat = 0\n        } else if char\
    \ == \"|\" {\n            if note != \"\" {\n                notes.append(note)\n\
    \                note = \"\"\n            }\n            beats.append(beat)\n\
    \            beat = 0\n        } else if char == \".\" {\n            if note\
    \ != \"\" {\n                notes.append(note)\n                note = \"\"\n\
    \            }\n            beats.append(beat)\n            beat = 0\n       \
    \ } else {\n            note += char\n        }\n    }\n    if note != \"\" {\n\
    \        notes.append(note)\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8yctfi9p.swift:39:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            note += char\n             \
    \       ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beats_count = 0\n    var notes_count = 0\n\
    \    var note_index = 0\n    var note = String()\n    var last_note = String()\n\
    \    var last_beat = Int()\n    var last_beat_index = 0\n    var last_beat_count\
    \ = 0\n    var last_note_index = 0\n    var last_note_count = 0\n    var last_note_beat\
    \ = 0\n    var last_note_beat_index = 0\n    var last_note_beat_count = 0\n  \
    \  var last_note_note = 0\n    var last_note_note_index = 0\n    var last_note_note_count\
    \ = 0\n    var last_note_note_beat = 0\n    var last_note_note_beat_index = 0\n\
    \    var last_note_note_beat_count = 0\n    var last_note_note_note = 0\n    var\
    \ last_note_note_note_index = 0\n    var last_note_note_note_count = 0\n    var\
    \ last_note_note_note_beat = 0\n    var last_note_note_note_beat_index = 0\n \
    \   var last_note_note_note_beat_count = 0\n    var last_note_note_note_note =\
    \ 0\n    var last_note_note_note_note_index = 0\n    var last_note_note_note_note_count\
    \ = 0\n    var last_note_note_note_beat = 0\n    var last_note_note_note_beat_index\
    \ = 0\n    var last_note_note_note_beat_count = 0\n    var last_note_note_note_note\
    \ = 0\n    var last_note_note_note_note_index = 0\n    var last_note_note_note_note_count\
    \ = 0\n    var last_note_note_note_note_beat = 0\n    var last_note_note_note_note_beat_index\
    \ = 0\n    var last_note_note_note_note_beat_count = 0\n    var last_note_note_note_note_note\
    \ = 0\n    var last_note_note_note_note_note_index = 0\n    var last_note_note_note_note_note_count\
    \ = 0\n    var last_note_note_note_note_note_beat = 0\n    var last_note_note_note_note_note_beat_index\
    \ = 0\n    var last_note_note_note_note_beat_count = 0\n    var last_note_note_note_note_note\
    \ = 0\n    var last_note_note_note_note_note_index = 0\n    var last_note_note_note_note_note_count\
    \ = 0\n    var last_note_note_note_note_note_beat = 0\n    var last_note_note_note_note_note_beat_index\
    \ = 0\n    var last_note_note_note_note_beat_count = 0\n    var last_note_note_note_note_note\
    \ = 0\n    var last_note_note_note_note_note_index = 0\n    var last_note_note_note_note_note_count\
    \ = 0\n    var last_note_note_note_note_note_beat = 0\n    var last_note_note_note_note_note_beat_index\
    \ = 0\n    var last_note_note_note_note_beat_count = 0\n    var last_note_note_note_note_note\
    \ = 0\n    var last_note_note_note_note_note_index = 0\n    var last_note_note_note_note_note_count\
    \ = 0\n    var last_note_note_note_note_note_beat = 0\n    var \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpb68_mocp.swift:73:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpb68_mocp.swift:42:9: error: invalid redeclaration of 'last_note_note_note_beat'\n\
    \    var last_note_note_note_beat = 0\n        ^\n/tmp/tmpb68_mocp.swift:36:9:\
    \ note: 'last_note_note_note_beat' previously declared here\n    var last_note_note_note_beat\
    \ = 0\n        ^\n/tmp/tmpb68_mocp.swift:43:9: error: invalid redeclaration of\
    \ 'last_note_note_note_beat_index'\n    var last_note_note_note_beat_index = 0\n\
    \        ^\n/tmp/tmpb68_mocp.swift:37:9: note: 'last_note_note_note_beat_index'\
    \ previously declared here\n    var last_note_note_note_beat_index = 0\n     \
    \   ^\n/tmp/tmpb68_mocp.swift:44:9: error: invalid redeclaration of 'last_note_note_note_beat_count'\n\
    \    var last_note_note_note_beat_count = 0\n        ^\n/tmp/tmpb68_mocp.swift:38:9:\
    \ note: 'last_note_note_note_beat_count' previously declared here\n    var last_note_note_note_beat_count\
    \ = 0\n        ^\n/tmp/tmpb68_mocp.swift:45:9: error: invalid redeclaration of\
    \ 'last_note_note_note_note'\n    var last_note_note_note_note = 0\n        ^\n\
    /tmp/tmpb68_mocp.swift:39:9: note: 'last_note_note_note_note' previously declared\
    \ here\n    var last_note_note_note_note = 0\n        ^\n/tmp/tmpb68_mocp.swift:46:9:\
    \ error: invalid redeclaration of 'last_note_note_note_note_index'\n    var last_note_note_note_note_index\
    \ = 0\n        ^\n/tmp/tmpb68_mocp.swift:40:9: note: 'last_note_note_note_note_index'\
    \ previously declared here\n    var last_note_note_note_note_index = 0\n     \
    \   ^\n/tmp/tmpb68_mocp.swift:47:9: error: invalid redeclaration of 'last_note_note_note_note_count'\n\
    \    var last_note_note_note_note_count = 0\n        ^\n/tmp/tmpb68_mocp.swift:41:9:\
    \ note: 'last_note_note_note_note_count' previously declared here\n    var last_note_note_note_note_count\
    \ = 0\n        ^\n/tmp/tmpb68_mocp.swift:56:9: error: invalid redeclaration of\
    \ 'last_note_note_note_note_beat_count'\n    var last_note_note_note_note_beat_count\
    \ = 0\n        ^\n/tmp/tmpb68_mocp.swift:50:9: note: 'last_note_note_note_note_beat_count'\
    \ previously declared here\n    var last"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var notes = [String]()\n    var notes_length\
    \ = 0\n    var note_length = 0\n    var note_lengths = [Int]()\n    var note_lengths_length\
    \ = 0\n    var note_lengths_index = 0\n    var note_lengths_length_index = 0\n\
    \    var note_lengths_lengths = [Int]()\n    var note_lengths_lengths_length =\
    \ 0\n    var note_lengths_lengths_index = 0\n    var note_lengths_lengths_length_index\
    \ = 0\n    var note_lengths_lengths_lengths = [Int]()\n    var note_lengths_lengths_lengths_length\
    \ = 0\n    var note_lengths_lengths_lengths_index = 0\n    var note_lengths_lengths_lengths_length_index\
    \ = 0\n    var note_lengths_lengths_lengths_lengths = [Int]()\n    var note_lengths_lengths_lengths_lengths_length\
    \ = 0\n    var note_lengths_lengths_lengths_lengths_index = 0\n    var note_lengths_lengths_lengths_lengths_length_index\
    \ = 0\n    var note_lengths_lengths_lengths_lengths_lengths = [Int]()\n    var\
    \ note_lengths_lengths_lengths_lengths_lengths_length = 0\n    var note_lengths_lengths_lengths_lengths_lengths_index\
    \ = 0\n    var note_lengths_lengths_lengths_lengths_lengths_length_index = 0\n\
    \    var note_lengths_lengths_lengths_lengths_lengths_lengths = [Int]()\n    var\
    \ note_lengths_lengths_lengths_lengths_lengths_lengths_length = 0\n    var note_lengths_lengths_lengths_lengths_lengths_lengths_index\
    \ = 0\n    var note_lengths_lengths_lengths_lengths_lengths_lengths_length_index\
    \ = 0\n    var note_lengths_lengths_lengths_lengths_lengths_lengths_lengths =\
    \ [Int]()\n    var note_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length\
    \ = 0\n    var note_lengths_lengths_lengths_lengths_lengths_lengths_lengths_index\
    \ = 0\n    var note_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length_index\
    \ = 0\n    var note_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths\
    \ = [Int]()\n    var note_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length\
    \ = 0\n    var note_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_index\
    \ = 0\n    var note_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length_index\
    \ = 0\n    var note_lengths_lengths_lengths_lengths_lengths_lengths_length\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbyqoe3mt.swift:50:9: error: type annotation missing in pattern\n\
    \    var note_lengths_lengths_lengths_lengths_lengths_lengths_length\n       \
    \ ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var beats_count\
    \ = 0\n    var note_count = 0\n    var note_length = 0\n    var note_length_count\
    \ = 0\n    var note_length_index = 0\n    var note_length_index2 = 0\n    var\
    \ note_length_index3 = 0\n    var note_length_index4 = 0\n    var note_length_index5\
    \ = 0\n    var note_length_index6 = 0\n    var note_length_index7 = 0\n    var\
    \ note_length_index8 = 0\n    var note_length_index9 = 0\n    var note_length_index10\
    \ = 0\n    var note_length_index11 = 0\n    var note_length_index12 = 0\n    var\
    \ note_length_index13 = 0\n    var note_length_index14 = 0\n    var note_length_index15\
    \ = 0\n    var note_length_index16 = 0\n    var note_length_index17 = 0\n    var\
    \ note_length_index18 = 0\n    var note_length_index19 = 0\n    var note_length_index20\
    \ = 0\n    var note_length_index21 = 0\n    var note_length_index22 = 0\n    var\
    \ note_length_index23 = 0\n    var note_length_index24 = 0\n    var note_length_index25\
    \ = 0\n    var note_length_index26 = 0\n    var note_length_index27 = 0\n    var\
    \ note_length_index28 = 0\n    var note_length_index29 = 0\n    var note_length_index30\
    \ = 0\n    var note_length_index31 = 0\n    var note_length_index32 = 0\n    var\
    \ note_length_index33 = 0\n    var note_length_index34 = 0\n    var note_length_index35\
    \ = 0\n    var note_length_index36 = 0\n    var note_length_index37 = 0\n    var\
    \ note_length_index38 = 0\n    var note_length_index39 = 0\n    var note_length_index40\
    \ = 0\n    var note_length_index41 = 0\n    var note_length_index42 = 0\n    var\
    \ note_length_index43 = 0\n    var note_length_index44 = 0\n    var note_length_index45\
    \ = 0\n    var note_length_index46 = 0\n    var note_length_index47 = 0\n    var\
    \ note_length_index48 = 0\n    var note_length_index49 = 0\n    var note_length_index50\
    \ = 0\n    var note_length_index51 = 0\n    var note_length_index52 = 0\n    var\
    \ note_length_index53 = 0\n    var note_length_index54 = 0\n    var note_length_index55\
    \ = 0\n    var note_length_index56 = 0\n    var note_length_index57 = 0\n    var\
    \ note_length_index58 = 0\n    var note_length_index59 = 0\n    var note_length_index60\
    \ = 0\n    var note_length_index61 = 0\n    var note_length_index62 = 0\n    var\
    \ note_length_index63 = 0\n    var note_length_index64 = 0\n    var note_length_index65\
    \ = 0\n    var note_length_index66 = 0\n    var note_length_index67 = 0\n    var\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(parse_music(music_string: \"\"\
    ) == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4, 4, 4,\
    \ 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string:\
    \ \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmptzx2tr87.swift:87:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmptzx2tr87.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmptzx2tr87.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmptzx2tr87.swift:14:9:\
    \ warning: initialization of variable 'beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmptzx2tr87.swift:15:9: warning: initialization of variable 'note' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var note\
    \ = \"\"\n    ~~~~^~~~\n    _\n/tmp/tmptzx2tr87.swift:16:9: warning: initialization\
    \ of variable 'beats_count' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var beats_count = 0\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmptzx2tr87.swift:17:9: warning: initialization of variable 'note_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_count = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmptzx2tr87.swift:18:9:\
    \ warning: initialization of variable 'note_length' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_length = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmptzx2tr87.swift:19:9: warning: initialization of variable 'note_length_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_length_count = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmptzx2tr87.swift:20:9:\
    \ warning: initialization of variable 'note_length_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var note_length_index =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmptzx2tr87.swift:21:9: warning: initialization\
    \ of variable 'note_length_index2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_length_index2 = "
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var note_index\
    \ = 0\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_beat\
    \ = 0\n    var last_beat_index = 0\n    for char in music_string {\n        if\
    \ char == \"o\" {\n            beat = 0\n            note = \"\"\n           \
    \ note_index = 0\n            last_note = \"\"\n            last_note_index =\
    \ 0\n            last_beat = 0\n            last_beat_index = 0\n        } else\
    \ if char == \"|\" {\n            beat = 0\n            note = \"\"\n        \
    \    note_index = 0\n            last_note = \"\"\n            last_note_index\
    \ = 0\n            last_beat = 0\n            last_beat_index = 0\n        } else\
    \ if char == \".\" {\n            beat = 0\n            note = \"\"\n        \
    \    note_index = 0\n            last_note = \"\"\n            last_note_index\
    \ = 0\n            last_beat = 0\n            last_beat_index = 0\n        } else\
    \ {\n            note = String(char)\n            notes.append(note)\n       \
    \ }\n    }\n    for note in notes {\n        if note_index == 0 {\n          \
    \  beats.append(beat)\n            beat = 0\n            note_index = 0\n    \
    \        last_note = \"\"\n            last_note_index = 0\n            last_beat\
    \ = 0\n            last_beat_index = 0\n        } else {\n            if note_index\
    \ == 1 {\n                beat = beat + 1\n                note_index = 0\n  \
    \              last_note = \"\"\n                last_note_index = 0\n       \
    \         last_beat = 0\n                last_beat_index = 0\n            } else\
    \ {\n                if note_index == 2 {\n                    beat = beat + 2\n\
    \                    note_index = 0\n                    last_note = \"\"\n  \
    \                  last_note_index = 0\n                    last_beat = 0\n  \
    \                  last_beat_index = 0\n                } else {\n           \
    \         if note_index == 3 {\n                        beat = beat + 4\n    \
    \                    note_index = 0\n                        last_note = \"\"\n\
    \                        last_note_index = 0\n                        last_beat\
    \ = 0\n                        last_beat_index = 0\n                    } else\
    \ {\n                        if note_index == 4 {\n                          \
    \  beat = beat + 8\n                            note_index = 0\n             \
    \               last_note = \"\"\n                            last_note_index\
    \ = 0\n                            last_beat = 0\n                           \
    \ last_beat_index = 0\n                        } else {\n                    \
    \        if note_index == 5 {\n                                beat = beat + 16\n\
    \                                note_index = 0\n                            \
    \    last_note = \"\"\n                                last_note_index = 0\n \
    \                               last_beat = 0\n                              \
    \  last_beat_index = 0\n                            } else {\n               \
    \                 if note_index == 6 || note_index == 7 || note_index == 8 ||\
    \ note_index == 9 || note_index == 10 {\n                                    beat\
    \ = beat + 32\n                                    note_index = 0\n          \
    \                          last_note = \"\"\n                                \
    \    last_note_index = 0\n                                    last_beat = 0\n\
    \                                    last_beat_index = 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpzo61v3_p.swift:127:87: error: expected '}' at end of brace statement\n\
    assert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\n                                                                \
    \                      ^\n/tmp/tmpzo61v3_p.swift:100:36: note: to match this opening\
    \ '{'\n                            } else {\n                                \
    \   ^\n/tmp/tmpzo61v3_p.swift:127:87: error: expected '}' at end of brace statement\n\
    assert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\n                                                                \
    \                      ^\n/tmp/tmpzo61v3_p.swift:92:32: note: to match this opening\
    \ '{'\n                        } else {\n                               ^\n/tmp/tmpzo61v3_p.swift:127:87:\
    \ error: expected '}' at end of brace statement\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\n                  \
    \                                                                    ^\n/tmp/tmpzo61v3_p.swift:84:28:\
    \ note: to match this opening '{'\n                    } else {\n            \
    \               ^\n/tmp/tmpzo61v3_p.swift:127:87: error: expected '}' at end of\
    \ brace statement\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\"\
    ) == [2, 1, 2, 1, 4, 2, 4, 2])\n                                             \
    \                                         ^\n/tmp/tmpzo61v3_p.swift:76:24: note:\
    \ to match this opening '{'\n                } else {\n                      \
    \ ^\n/tmp/tmpzo61v3_p.swift:127:87: error: expected '}' at end of brace statement\n\
    assert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\n                                                                \
    \                      ^\n/tmp/tmpzo61v3_p.swift:68:20: note: to match this opening\
    \ '{'\n            } else {\n                   ^\n/tmp/tmpzo61v3_p.swift:127:87:\
    \ error: expected '}' at end of brace statement\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\n                  \
    \     "
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array: [Int]\
    \ = []\n    var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_string\
    \ = \"\"\n    var current_note_length_string_length = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_value = 0\n    var current_note_length_string_value_length\
    \ = 0\n    var current_note_length_string_value_length_index = 0\n    var current_note_length_string_value_length_value\
    \ = 0\n    var current_note_length_string_value_length_value_index = 0\n    var\
    \ current_note_length_string_value_length_value_index = 0\n    var current_note_length_string_value_length_value_index\
    \ = 0\n    var current_note_length_string_value_length_value_index = 0\n    var\
    \ current_note_length_string_value_length_value_index = 0\n    var current_note_length_string_value_length_value_index\
    \ = 0\n    var current_note_length_string_value_length_value_index = 0\n    var\
    \ current_note_length_string_value_length_value_index = 0\n    var current_note_length_string_value_length_value_index\
    \ = 0\n    var current_note_length_string_value_length_value_index = 0\n    var\
    \ current_note_length_string_value_length_value_index = 0\n    var current_note_length_string_value_length_value_index\
    \ = 0\n    var current_note_length_string_value_length_value_index = 0\n    var\
    \ current_note_length_string_value_length_value_index = 0\n    var current_note_length_string_value_length_value_index\
    \ = 0\n    var current_note_length_string_value_length_value_index = 0\n    var\
    \ current_note_length_string_value_length_value_index = 0\n    var current_note_length_string_value_length_value_index\
    \ = 0\n    var current_note_length_string_value_length_value_index = 0\n    var\
    \ current_note_length_string_value_length_value_index = 0\n    var current_note_length_string_value_length_value_index\
    \ = 0\n    var current_note_length_string_value_length_value_index = 0\n    var\
    \ current_note_length_string_value_length_value_index = 0\n    var current_note_length_string_value_length_value_index\
    \ = 0\n    var current_note_length_string_value_length_value_index = 0\n    var\
    \ current_note_length_string_value_length_value_index = 0\n    var current_note_length_string_value_length_value_index\
    \ = 0\n    var current_note_length_string_value_length_value_index = 0\n    var\
    \ current_note_length_string_value_length_value_index = 0\n    var current_note_length_string_value_length_value_index\
    \ = 0\n    var current_note_length_string_value_length_value_index = 0\n    var\
    \ current_note_length_string_value_length_value_index = 0\n    var current_note_length_string_value_length_value_index\
    \ = 0\n    var current_note_length_string_value_length_value_index = 0\n    var\
    \ current_note_length_string_value_length_value_index = 0\n    var current_note_length_string_value_length_value_index\
    \ = 0\n    var current_note_length_string_value_length_value_index = 0\n    var\
    \ current_note_length_string_value_length_value_index = 0\n    var current_note_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp5l6e7rr7.swift:25:9: error: invalid redeclaration of 'current_note_length_string_value_length_value_index'\n\
    \    var current_note_length_string_value_length_value_index = 0\n        ^\n\
    /tmp/tmp5l6e7rr7.swift:24:9: note: 'current_note_length_string_value_length_value_index'\
    \ previously declared here\n    var current_note_length_string_value_length_value_index\
    \ = 0\n        ^\n/tmp/tmp5l6e7rr7.swift:26:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_length_value_index'\n    var current_note_length_string_value_length_value_index\
    \ = 0\n        ^\n/tmp/tmp5l6e7rr7.swift:24:9: note: 'current_note_length_string_value_length_value_index'\
    \ previously declared here\n    var current_note_length_string_value_length_value_index\
    \ = 0\n        ^\n/tmp/tmp5l6e7rr7.swift:27:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_length_value_index'\n    var current_note_length_string_value_length_value_index\
    \ = 0\n        ^\n/tmp/tmp5l6e7rr7.swift:24:9: note: 'current_note_length_string_value_length_value_index'\
    \ previously declared here\n    var current_note_length_string_value_length_value_index\
    \ = 0\n        ^\n/tmp/tmp5l6e7rr7.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_length_value_index'\n    var current_note_length_string_value_length_value_index\
    \ = 0\n        ^\n/tmp/tmp5l6e7rr7.swift:24:9: note: 'current_note_length_string_value_length_value_index'\
    \ previously declared here\n    var current_note_length_string_value_length_value_index\
    \ = 0\n        ^\n/tmp/tmp5l6e7rr7.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_length_value_index'\n    var current_note_length_string_value_length_value_index\
    \ = 0\n        ^\n/tmp/tmp5l6e7rr7.swift:24:9: note: 'current_note_length_string_value_length_value_index'\
    \ previously declared here\n    var current_note_length_string_value_length_value_index\
    \ = 0\n        ^\n/tmp/tmp5l6e7rr7.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_length_value_index'\n    var current_note_length_string_value_length_"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array = [Int]()\n\
    \    var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_value\
    \ = 0\n    var current_note_length_value_index = 0\n    var current_note_length_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp96i7ssda.swift:24:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp96i7ssda.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp96i7ssda.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp96i7ssda.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp96i7ssda.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp96i7ssda.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp96i7ssda.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp96i7ssda.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp96i7ssda.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp96i7ssda.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp96i7ssda.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp96i7ssda.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_valu"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var notes: [String] = []\n    var beats_counter: Int = 0\n    var note_counter:\
    \ Int = 0\n    var notes_counter: Int = 0\n    var last_notes_counter: Int = 0\n\
    \    var last_beats_counter: Int = 0\n    var last_note_counter: Int = 0\n   \
    \ var last_notes_counter: Int = 0\n    var last_beats_counter: Int = 0\n    var\
    \ last_note_counter: Int = 0\n    var last_notes_counter: Int = 0\n    var last_beats_counter:\
    \ Int = 0\n    var last_note_counter: Int = 0\n    var last_notes_counter: Int\
    \ = 0\n    var last_beats_counter: Int = 0\n    var last_note_counter: Int = 0\n\
    \    var last_notes_counter: Int = 0\n    var last_beats_counter: Int = 0\n  \
    \  var last_note_counter: Int = 0\n    var last_notes_counter: Int = 0\n    var\
    \ last_beats_counter: Int = 0\n    var last_note_counter: Int = 0\n    var last_notes_counter:\
    \ Int = 0\n    var last_beats_counter: Int = 0\n    var last_note_counter: Int\
    \ = 0\n    var last_notes_counter: Int = 0\n    var last_beats_counter: Int =\
    \ 0\n    var last_note_counter: Int = 0\n    var last_notes_counter: Int = 0\n\
    \    var last_beats_counter: Int = 0\n    var last_note_counter: Int = 0\n   \
    \ var last_notes_counter: Int = 0\n    var last_beats_counter: Int = 0\n    var\
    \ last_note_counter: Int = 0\n    var last_notes_counter: Int = 0\n    var last_beats_counter:\
    \ Int = 0\n    var last_note_counter: Int = 0\n    var last_notes_counter: Int\
    \ = 0\n    var last_beats_counter: Int = 0\n    var last_note_counter: Int = 0\n\
    \    var last_notes_counter: Int = 0\n    var last_beats_counter: Int = 0\n  \
    \  var last_note_counter: Int = 0\n    var last_notes_counter: Int = 0\n    var\
    \ last_beats_counter: Int = 0\n    var last_note_counter: Int = 0\n    var last_notes_counter:\
    \ Int = 0\n    var last_beats_counter: Int = 0\n    var last_note_counter: Int\
    \ = 0\n    var last_notes_counter: Int = 0\n    var last_beats_counter: Int =\
    \ 0\n    var last_note_counter: Int = 0\n    var last_notes_counter: Int = 0\n\
    \    var last_beats_counter: Int = 0\n    var last_note_counter: Int = 0\n   \
    \ var last_notes_counter: Int = 0\n    var last_beats_counter: Int = 0\n    var\
    \ last_note_counter: Int = 0\n    var last_notes_counter: Int = 0\n\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpibqk_ptj.swift:20:9: error: invalid redeclaration of 'last_notes_counter'\n\
    \    var last_notes_counter: Int = 0\n        ^\n/tmp/tmpibqk_ptj.swift:17:9:\
    \ note: 'last_notes_counter' previously declared here\n    var last_notes_counter:\
    \ Int = 0\n        ^\n/tmp/tmpibqk_ptj.swift:21:9: error: invalid redeclaration\
    \ of 'last_beats_counter'\n    var last_beats_counter: Int = 0\n        ^\n/tmp/tmpibqk_ptj.swift:18:9:\
    \ note: 'last_beats_counter' previously declared here\n    var last_beats_counter:\
    \ Int = 0\n        ^\n/tmp/tmpibqk_ptj.swift:22:9: error: invalid redeclaration\
    \ of 'last_note_counter'\n    var last_note_counter: Int = 0\n        ^\n/tmp/tmpibqk_ptj.swift:19:9:\
    \ note: 'last_note_counter' previously declared here\n    var last_note_counter:\
    \ Int = 0\n        ^\n/tmp/tmpibqk_ptj.swift:23:9: error: invalid redeclaration\
    \ of 'last_notes_counter'\n    var last_notes_counter: Int = 0\n        ^\n/tmp/tmpibqk_ptj.swift:17:9:\
    \ note: 'last_notes_counter' previously declared here\n    var last_notes_counter:\
    \ Int = 0\n        ^\n/tmp/tmpibqk_ptj.swift:24:9: error: invalid redeclaration\
    \ of 'last_beats_counter'\n    var last_beats_counter: Int = 0\n        ^\n/tmp/tmpibqk_ptj.swift:18:9:\
    \ note: 'last_beats_counter' previously declared here\n    var last_beats_counter:\
    \ Int = 0\n        ^\n/tmp/tmpibqk_ptj.swift:25:9: error: invalid redeclaration\
    \ of 'last_note_counter'\n    var last_note_counter: Int = 0\n        ^\n/tmp/tmpibqk_ptj.swift:19:9:\
    \ note: 'last_note_counter' previously declared here\n    var last_note_counter:\
    \ Int = 0\n        ^\n/tmp/tmpibqk_ptj.swift:26:9: error: invalid redeclaration\
    \ of 'last_notes_counter'\n    var last_notes_counter: Int = 0\n        ^\n/tmp/tmpibqk_ptj.swift:17:9:\
    \ note: 'last_notes_counter' previously declared here\n    var last_notes_counter:\
    \ Int = 0\n        ^\n/tmp/tmpibqk_ptj.swift:27:9: error: invalid redeclaration\
    \ of 'last_beats_counter'\n    var last_beats_counter: Int = 0\n        ^\n/tmp/tmpibqk_ptj.swift:18:9:\
    \ note: 'last_beats_counter' previously declared here\n    var last_beats_counter:\
    \ Int = 0\n        ^\n/tmp/tmpibqk_ptj"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = String()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1i2wovyq.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_value\
    \ = 0\n    var current_note_length_value_index = 0\n    var current_note_length_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp040yfjdm.swift:66:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp040yfjdm.swift:24:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp040yfjdm.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp040yfjdm.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp040yfjdm.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp040yfjdm.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp040yfjdm.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp040yfjdm.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp040yfjdm.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp040yfjdm.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp040yfjdm.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp040yfjdm.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp040yfjdm.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var note_index\
    \ = 0\n    var note_length = 0\n    var note_length_index = 0\n    var note_length_index2\
    \ = 0\n    var note_length_index3 = 0\n    var note_length_index4 = 0\n    var\
    \ note_length_index5 = 0\n    var note_length_index6 = 0\n    var note_length_index7\
    \ = 0\n    var note_length_index8 = 0\n    var note_length_index9 = 0\n    var\
    \ note_length_index10 = 0\n    var note_length_index11 = 0\n    var note_length_index12\
    \ = 0\n    var note_length_index13 = 0\n    var note_length_index14 = 0\n    var\
    \ note_length_index15 = 0\n    var note_length_index16 = 0\n    var note_length_index17\
    \ = 0\n    var note_length_index18 = 0\n    var note_length_index19 = 0\n    var\
    \ note_length_index20 = 0\n    var note_length_index21 = 0\n    var note_length_index22\
    \ = 0\n    var note_length_index23 = 0\n    var note_length_index24 = 0\n    var\
    \ note_length_index25 = 0\n    var note_length_index26 = 0\n    var note_length_index27\
    \ = 0\n    var note_length_index28 = 0\n    var note_length_index29 = 0\n    var\
    \ note_length_index30 = 0\n    var note_length_index31 = 0\n    var note_length_index32\
    \ = 0\n    var note_length_index33 = 0\n    var note_length_index34 = 0\n    var\
    \ note_length_index35 = 0\n    var note_length_index36 = 0\n    var note_length_index37\
    \ = 0\n    var note_length_index38 = 0\n    var note_length_index39 = 0\n    var\
    \ note_length_index40 = 0\n    var note_length_index41 = 0\n    var note_length_index42\
    \ = 0\n    var note_length_index43 = 0\n    var note_length_index44 = 0\n    var\
    \ note_length_index45 = 0\n    var note_length_index46 = 0\n    var note_length_index47\
    \ = 0\n    var note_length_index48 = 0\n    var note_length_index49 = 0\n    var\
    \ note_length_index50 = 0\n    var note_length_index51 = 0\n    var note_length_index52\
    \ = 0\n    var note_length_index53 = 0\n    var note_length_index54 = 0\n    var\
    \ note_length_index55 = 0\n    var note_length_index56 = 0\n    var note_length_index57\
    \ = 0\n    var note_length_index58 = 0\n    var note_length_index59 = 0\n    var\
    \ note_length_index60 = 0\n    var note_length_index61 = 0\n    var note_length_index62\
    \ = 0\n    var note_length_index63 = 0\n    var note_length_index64 = 0\n    var\
    \ note_length_index65 = 0\n    var note_length_index66 = 0\n    var note_length_index67\
    \ = 0\n    var note_length_index68 = 0\n    var note_length_index69\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpw3qfzgtg.swift:86:9: error: type annotation missing in pattern\n\
    \    var note_length_index69\n        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = music_string.characters\n    var beat = 0\n    var note = 0\n\
    \    var last_note = 0\n    var last_beat = 0\n    var last_beats = 0\n    var\
    \ last_beats_count = 0\n    var last_beats_count_count = 0\n    var last_beats_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count = 0\n    var last_beats_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count = 0\n    var last_beats_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count = 0\n\
    \    var last_beats_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp5gtuzhwh.swift:13:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var notes = music_string.characters\n             \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp5gtuzhwh.swift:33:9: error: type annotation missing in pattern\n\
    \    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beats_count = 0\n    var notes_count = 0\n\
    \    var note_index = 0\n    var note_string = \"\"\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp6yq_jkhr.swift:113:22: error: expected initial value after '='\n\
    \    var note_length = \n                     ^\n/tmp/tmp6yq_jkhr.swift:19:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = -1\n  \
    \      ^\n/tmp/tmp6yq_jkhr.swift:18:9: note: 'note_length' previously declared\
    \ here\n    var note_length = -1\n        ^\n/tmp/tmp6yq_jkhr.swift:20:9: error:\
    \ invalid redeclaration of 'note_length'\n    var note_length = -1\n        ^\n\
    /tmp/tmp6yq_jkhr.swift:18:9: note: 'note_length' previously declared here\n  \
    \  var note_length = -1\n        ^\n/tmp/tmp6yq_jkhr.swift:21:9: error: invalid\
    \ redeclaration of 'note_length'\n    var note_length = -1\n        ^\n/tmp/tmp6yq_jkhr.swift:18:9:\
    \ note: 'note_length' previously declared here\n    var note_length = -1\n   \
    \     ^\n/tmp/tmp6yq_jkhr.swift:22:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = -1\n        ^\n/tmp/tmp6yq_jkhr.swift:18:9: note: 'note_length'\
    \ previously declared here\n    var note_length = -1\n        ^\n/tmp/tmp6yq_jkhr.swift:23:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = -1\n  \
    \      ^\n/tmp/tmp6yq_jkhr.swift:18:9: note: 'note_length' previously declared\
    \ here\n    var note_length = -1\n        ^\n/tmp/tmp6yq_jkhr.swift:24:9: error:\
    \ invalid redeclaration of 'note_length'\n    var note_length = -1\n        ^\n\
    /tmp/tmp6yq_jkhr.swift:18:9: note: 'note_length' previously declared here\n  \
    \  var note_length = -1\n        ^\n/tmp/tmp6yq_jkhr.swift:25:9: error: invalid\
    \ redeclaration of 'note_length'\n    var note_length = -1\n        ^\n/tmp/tmp6yq_jkhr.swift:18:9:\
    \ note: 'note_length' previously declared here\n    var note_length = -1\n   \
    \     ^\n/tmp/tmp6yq_jkhr.swift:26:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = -1\n        ^\n/tmp/tmp6yq_jkhr.swift:18:9: note: 'note_length'\
    \ previously declared here\n    var note_length = -1\n        ^\n/tmp/tmp6yq_jkhr.swift:27:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = -1\n  \
    \      ^\n/tmp/tmp6yq_jkhr.swift:18:9: note: 'note_length' previously declared "
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    for char\
    \ in music_string {\n        switch char {\n        case \"o\":\n            notes.append(note)\n\
    \            note = \"\"\n            beat += 4\n        case \"o|\":\n      \
    \      notes.append(note)\n            note = \"\"\n            beat += 2\n  \
    \      case \"|\":\n            notes.append(note)\n            note = \"\"\n\
    \            beat = 1\n        default:\n            note += char\n        }\n\
    \    }\n    for note in notes {\n        beats.append(beat)\n    }\n    return\
    \ beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpuzev8h5_.swift:22:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n/tmp/tmpuzev8h5_.swift:31:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            note += char\n             \
    \       ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var notes_count = 0\n    var notes_length = 0\n \
    \   var notes_length_count = 0\n    var notes_length_index = 0\n    var notes_length_index2\
    \ = 0\n    var notes_length_index3 = 0\n    var notes_length_index4 = 0\n    var\
    \ notes_length_index5 = 0\n    var notes_length_index6 = 0\n    var notes_length_index7\
    \ = 0\n    var notes_length_index8 = 0\n    var notes_length_index9 = 0\n    var\
    \ notes_length_index10 = 0\n    var notes_length_index11 = 0\n    var notes_length_index12\
    \ = 0\n    var notes_length_index13 = 0\n    var notes_length_index14 = 0\n  \
    \  var notes_length_index15 = 0\n    var notes_length_index16 = 0\n    var notes_length_index17\
    \ = 0\n    var notes_length_index18 = 0\n    var notes_length_index19 = 0\n  \
    \  var notes_length_index20 = 0\n    var notes_length_index21 = 0\n    var notes_length_index22\
    \ = 0\n    var notes_length_index23 = 0\n    var notes_length_index24 = 0\n  \
    \  var notes_length_index25 = 0\n    var notes_length_index26 = 0\n    var notes_length_index27\
    \ = 0\n    var notes_length_index28 = 0\n    var notes_length_index29 = 0\n  \
    \  var notes_length_index30 = 0\n    var notes_length_index31 = 0\n    var notes_length_index32\
    \ = 0\n    var notes_length_index33 = 0\n    var notes_length_index34 = 0\n  \
    \  var notes_length_index35 = 0\n    var notes_length_index36 = 0\n    var notes_length_index37\
    \ = 0\n    var notes_length_index38 = 0\n    var notes_length_index39 = 0\n  \
    \  var notes_length_index40 = 0\n    var notes_length_index41 = 0\n    var notes_length_index42\
    \ = 0\n    var notes_length_index43 = 0\n    var notes_length_index44 = 0\n  \
    \  var notes_length_index45 = 0\n    var notes_length_index46 = 0\n    var notes_length_index47\
    \ = 0\n    var notes_length_index48 = 0\n    var notes_length_index49 = 0\n  \
    \  var notes_length_index50 = 0\n    var notes_length_index51 = 0\n    var notes_length_index52\
    \ = 0\n    var notes_length_index53 = 0\n    var notes_length_index54 = 0\n  \
    \  var notes_length_index55 = 0\n    var notes_length_index56 = 0\n    var notes_length_index57\
    \ = 0\n    var notes_length_index58 = 0\n    var notes_length_index59 = 0\n  \
    \  var notes_length_index60 = 0\n    var notes_\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpnce8hxcx.swift:77:9: error: type annotation missing in pattern\n\
    \    var notes_\n        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var lastbeat = 0\n    var lastnote = \"\"\n    var lastlast = 0\n \
    \   var lastlastbeat = 0\n    var lastlastnote = \"\"\n    var lastlastlast =\
    \ 0\n    var lastlastlastbeat = 0\n    var lastlastlastnote = \"\"\n    var lastlastlastlast\
    \ = 0\n    var lastlastlastlastbeat = 0\n    var lastlastlastlastnote = \"\"\n\
    \    var lastlastlastlastlast = 0\n    var lastlastlastlastlastbeat = 0\n    var\
    \ lastlastlastlastlastnote = \"\"\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlastbeat\
    \ = 0\n    var lastlastlastlastlastnote = \"\"\n    var lastlastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlastbeat = 0\n    var lastlastlastlastlastnote\
    \ = \"\"\n    var lastlastlastlastlastlast = 0\n    var lastlastlastlastlastbeat\
    \ = 0\n    var lastlastlastlastlastnote = \"\"\n    var lastlastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlastbeat = 0\n    var lastlastlastlastlastnote\
    \ = \"\"\n    var lastlastlastlastlastlast = 0\n    var lastlastlastlastlastbeat\
    \ = 0\n    var lastlastlastlastlastnote = \"\"\n    var lastlastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlastbeat = 0\n    var lastlastlastlastlastnote\
    \ = \"\"\n    var lastlastlastlastlastlast = 0\n    var lastlastlastlastlastbeat\
    \ = 0\n    var lastlastlastlastlastnote = \"\"\n    var lastlastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlastbeat = 0\n    var lastlastlastlastlastnote\
    \ = \"\"\n    var lastlastlastlastlastlast = 0\n    var lastlastlastlastlastbeat\
    \ = 0\n    var lastlastlastlastlastnote = \"\"\n    var lastlastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlastbeat = 0\n    var lastlastlastlastlastnote\
    \ = \"\"\n    var lastlastlastlastlastlast = 0\n    var lastlastlastlastlastbeat\
    \ = 0\n    var lastlastlastlastlastnote = \"\"\n    var lastlastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlastbeat = 0\n    var lastlastlastlastlastnote\
    \ = \"\"\n    var lastlastlastlastlastlast = 0\n    var lastlastlastlastlastbeat\
    \ = 0\n    var lastlastlastlastlastnote = \"\"\n    var lastlastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlastbeat = 0\n    var lastlastlastlastlastnote\
    \ = \"\"\n    var lastlastlastlastlastlast = 0\n    var lastlastlast\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp87z24gb3.swift:31:9: error: invalid redeclaration of 'lastlastlastlastlast'\n\
    \    var lastlastlastlastlast = 0\n        ^\n/tmp/tmp87z24gb3.swift:28:9: note:\
    \ 'lastlastlastlastlast' previously declared here\n    var lastlastlastlastlast\
    \ = 0\n        ^\n/tmp/tmp87z24gb3.swift:32:9: error: invalid redeclaration of\
    \ 'lastlastlastlastlastbeat'\n    var lastlastlastlastlastbeat = 0\n        ^\n\
    /tmp/tmp87z24gb3.swift:29:9: note: 'lastlastlastlastlastbeat' previously declared\
    \ here\n    var lastlastlastlastlastbeat = 0\n        ^\n/tmp/tmp87z24gb3.swift:33:9:\
    \ error: invalid redeclaration of 'lastlastlastlastlastnote'\n    var lastlastlastlastlastnote\
    \ = \"\"\n        ^\n/tmp/tmp87z24gb3.swift:30:9: note: 'lastlastlastlastlastnote'\
    \ previously declared here\n    var lastlastlastlastlastnote = \"\"\n        ^\n\
    /tmp/tmp87z24gb3.swift:35:9: error: invalid redeclaration of 'lastlastlastlastlastbeat'\n\
    \    var lastlastlastlastlastbeat = 0\n        ^\n/tmp/tmp87z24gb3.swift:29:9:\
    \ note: 'lastlastlastlastlastbeat' previously declared here\n    var lastlastlastlastlastbeat\
    \ = 0\n        ^\n/tmp/tmp87z24gb3.swift:36:9: error: invalid redeclaration of\
    \ 'lastlastlastlastlastnote'\n    var lastlastlastlastlastnote = \"\"\n      \
    \  ^\n/tmp/tmp87z24gb3.swift:30:9: note: 'lastlastlastlastlastnote' previously\
    \ declared here\n    var lastlastlastlastlastnote = \"\"\n        ^\n/tmp/tmp87z24gb3.swift:37:9:\
    \ error: invalid redeclaration of 'lastlastlastlastlastlast'\n    var lastlastlastlastlastlast\
    \ = 0\n        ^\n/tmp/tmp87z24gb3.swift:34:9: note: 'lastlastlastlastlastlast'\
    \ previously declared here\n    var lastlastlastlastlastlast = 0\n        ^\n\
    /tmp/tmp87z24gb3.swift:38:9: error: invalid redeclaration of 'lastlastlastlastlastbeat'\n\
    \    var lastlastlastlastlastbeat = 0\n        ^\n/tmp/tmp87z24gb3.swift:29:9:\
    \ note: 'lastlastlastlastlastbeat' previously declared here\n    var lastlastlastlastlastbeat\
    \ = 0\n        ^\n/tmp/tmp87z24gb3.swift:39:9: error: invalid redeclaration of\
    \ 'lastlastlastlastlastnote'\n    var lastlastlastlastlastnote = \"\"\n      \
    \  ^\n/tmp/tmp87z24gb3.swift:30:9: note: 'lastl"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var lastNote = \"\"\n    var lastNoteBeat = 0\n    var lastNoteBeatCount\
    \ = 0\n    var lastNoteBeatCount2 = 0\n    var lastNoteBeatCount3 = 0\n    var\
    \ lastNoteBeatCount4 = 0\n    var lastNoteBeatCount5 = 0\n    var lastNoteBeatCount6\
    \ = 0\n    var lastNoteBeatCount7 = 0\n    var lastNoteBeatCount8 = 0\n    var\
    \ lastNoteBeatCount9 = 0\n    var lastNoteBeatCount10 = 0\n    var lastNoteBeatCount11\
    \ = 0\n    var lastNoteBeatCount12 = 0\n    var lastNoteBeatCount13 = 0\n    var\
    \ lastNoteBeatCount14 = 0\n    var lastNoteBeatCount15 = 0\n    var lastNoteBeatCount16\
    \ = 0\n    var lastNoteBeatCount17 = 0\n    var lastNoteBeatCount18 = 0\n    var\
    \ lastNoteBeatCount19 = 0\n    var lastNoteBeatCount20 = 0\n    var lastNoteBeatCount21\
    \ = 0\n    var lastNoteBeatCount22 = 0\n    var lastNoteBeatCount23 = 0\n    var\
    \ lastNoteBeatCount24 = 0\n    var lastNoteBeatCount25 = 0\n    var lastNoteBeatCount26\
    \ = 0\n    var lastNoteBeatCount27 = 0\n    var lastNoteBeatCount28 = 0\n    var\
    \ lastNoteBeatCount29 = 0\n    var lastNoteBeatCount30 = 0\n    var lastNoteBeatCount31\
    \ = 0\n    var lastNoteBeatCount32 = 0\n    var lastNoteBeatCount33 = 0\n    var\
    \ lastNoteBeatCount34 = 0\n    var lastNoteBeatCount35 = 0\n    var lastNoteBeatCount36\
    \ = 0\n    var lastNoteBeatCount37 = 0\n    var lastNoteBeatCount38 = 0\n    var\
    \ lastNoteBeatCount39 = 0\n    var lastNoteBeatCount40 = 0\n    var lastNoteBeatCount41\
    \ = 0\n    var lastNoteBeatCount42 = 0\n    var lastNoteBeatCount43 = 0\n    var\
    \ lastNoteBeatCount44 = 0\n    var lastNoteBeatCount45 = 0\n    var lastNoteBeatCount46\
    \ = 0\n    var lastNoteBeatCount47 = 0\n    var lastNoteBeatCount48 = 0\n    var\
    \ lastNoteBeatCount49 = 0\n    var lastNoteBeatCount50 = 0\n    var lastNoteBeatCount51\
    \ = 0\n    var lastNoteBeatCount52 = 0\n    var lastNoteBeatCount53\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpga2n9aym.swift:71:9: error: type annotation missing in pattern\n\
    \    var lastNoteBeatCount53\n        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var last = 0\n    var lastNote = 0\n \
    \   var lastNoteBeat = 0\n    var lastNoteBeatBeat = 0\n    var lastNoteBeatBeatBeat\
    \ = 0\n    var lastNoteBeatBeatBeatBeat = 0\n    var lastNoteBeatBeatBeatBeatBeat\
    \ = 0\n    var lastNoteBeatBeatBeatBeatBeat = 0\n    var lastNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastNoteBe\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp4cjf1cgp.swift:22:9: error: invalid redeclaration of 'lastNoteBeatBeatBeatBeatBeat'\n\
    \    var lastNoteBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp4cjf1cgp.swift:21:9:\
    \ note: 'lastNoteBeatBeatBeatBeatBeat' previously declared here\n    var lastNoteBeatBeatBeatBeatBeat\
    \ = 0\n        ^\n/tmp/tmp4cjf1cgp.swift:24:9: error: invalid redeclaration of\
    \ 'lastNoteBeatBeatBeatBeatBeatBeat'\n    var lastNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n        ^\n/tmp/tmp4cjf1cgp.swift:23:9: note: 'lastNoteBeatBeatBeatBeatBeatBeat'\
    \ previously declared here\n    var lastNoteBeatBeatBeatBeatBeatBeat = 0\n   \
    \     ^\n/tmp/tmp4cjf1cgp.swift:26:9: error: invalid redeclaration of 'lastNoteBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp4cjf1cgp.swift:25:9:\
    \ note: 'lastNoteBeatBeatBeatBeatBeatBeatBeat' previously declared here\n    var\
    \ lastNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp4cjf1cgp.swift:27:9:\
    \ error: invalid redeclaration of 'lastNoteBeatBeatBeatBeatBeatBeatBeat'\n   \
    \ var lastNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp4cjf1cgp.swift:25:9:\
    \ note: 'lastNoteBeatBeatBeatBeatBeatBeatBeat' previously declared here\n    var\
    \ lastNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp4cjf1cgp.swift:28:9:\
    \ error: invalid redeclaration of 'lastNoteBeatBeatBeatBeatBeatBeatBeat'\n   \
    \ var lastNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp4cjf1cgp.swift:25:9:\
    \ note: 'lastNoteBeatBeatBeatBeatBeatBeatBeat' previously declared here\n    var\
    \ lastNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp4cjf1cgp.swift:29:9:\
    \ error: invalid redeclaration of 'lastNoteBeatBeatBeatBeatBeatBeatBeat'\n   \
    \ var lastNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp4cjf1cgp.swift:25:9:\
    \ note: 'lastNoteBeatBeatBeatBeatBeatBeatBeat' previously declared here\n    var\
    \ lastNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp4cjf1cgp.swift:30:9:\
    \ error: invalid redeclaration of 'lastNoteBeatBeatBeatBeatBeatBeatBeat'\n   \
    \ var lastNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp4cjf1cgp.swift:25:9:\
    \ note: "
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_string\
    \ = \"\"\n    var current_note_length_string_index = 0\n    var current_note_length_string_value\
    \ = 0\n    var current_note_length_string_length = 0\n    var current_note_length_string_length_index\
    \ = 0\n    var current_note_length_string_length_value = 0\n    var current_note_length_string_length_string\
    \ = \"\"\n    var current_note_length_string_length_string_index = 0\n    var\
    \ current_note_length_string_length_string_value = 0\n    var current_note_length_string_length_string_length\
    \ = 0\n    var current_note_length_string_length_string_length_index = 0\n   \
    \ var current_note_length_string_length_string_length_value = 0\n    var current_note_length_string_length_string_length_string\
    \ = \"\"\n    var current_note_length_string_length_string_length_string_index\
    \ = 0\n    var current_note_length_string_length_string_length_string_value =\
    \ 0\n    var current_note_length_string_length_string_length_string_length = 0\n\
    \    var current_note_length_string_length_string_length_string_length_index =\
    \ 0\n    var current_note_length_string_length_string_length_string_length_value\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string\
    \ = \"\"\n    var current_note_length_string_length_string_length_string_length_string_index\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_value\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_value\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string\
    \ = \"\"\n    var current_note_length_string_length_string_length_string_length_string_length_string_index\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string_value\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string_length_value\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string_length_string\
    \ = \"\"\n    var current_note_length_string_length_string_length_string_length_string_length_string_length_string_index\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string_length_value\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string_length_value_length\
    \ = 0\n    var current_note_length_string_length_string_length_string_length\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpn2wpf3o1.swift:49:9: error: invalid redeclaration of 'current_note_length_string_length_string_length_string_length_string_length_string_length_value'\n\
    \    var current_note_length_string_length_string_length_string_length_string_length_string_length_value\
    \ = 0\n        ^\n/tmp/tmpn2wpf3o1.swift:46:9: note: 'current_note_length_string_length_string_length_string_length_string_length_string_length_value'\
    \ previously declared here\n    var current_note_length_string_length_string_length_string_length_string_length_string_length_value\
    \ = 0\n        ^\n/tmp/tmpn2wpf3o1.swift:53:9: error: type annotation missing\
    \ in pattern\n    var current_note_length_string_length_string_length_string_length\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastBeatNote = \"\
    \"\n    var lastBeatNoteBeat = 0\n    var lastBeatNoteBeatNote = \"\"\n    var\
    \ lastBeatNoteBeatNoteBeat = 0\n    var lastBeatNoteBeatNoteBeatNote = \"\"\n\
    \    var lastBeatNoteBeatNoteBeatNoteBeat = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatNote\
    \ = \"\"\n    var lastBeatNoteBeatNoteBeatNoteBeatNoteBeat = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatNoteBeatNote\
    \ = \"\"\n    var lastBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeat = 0\n    var\
    \ lastBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNote = \"\"\n    var lastBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeat\
    \ = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNote =\
    \ \"\"\n    var lastBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeat\
    \ = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNote\
    \ = \"\"\n    var lastBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeat\
    \ = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNote\
    \ = \"\"\n    var lastBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeat\
    \ = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNote\
    \ = \"\"\n    var lastBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeat\
    \ = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNote\
    \ = \"\"\n    var lastBeatNoteBeatNote\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpordqxmpa.swift:40:9: error: type annotation missing in pattern\n\
    \    var lastBeatNoteBeatNote\n        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var beats_count = 0\n    var note_count = 0\n    var note = String()\n  \
    \  var note_count = 0\n    var note = String()\n    var note_count = 0\n    var\
    \ note = String()\n    var note_count = 0\n    var note = String()\n    var note_count\
    \ = 0\n    var note = String()\n    var note_count = 0\n    var note = String()\n\
    \    var note_count = 0\n    var note = String()\n    var note_count = 0\n   \
    \ var note = String()\n    var note_count = 0\n    var note = String()\n    var\
    \ note_count = 0\n    var note = String()\n    var note_count = 0\n    var note\
    \ = String()\n    var note_count = 0\n    var note = String()\n    var note_count\
    \ = 0\n    var note = String()\n    var note_count = 0\n    var note = String()\n\
    \    var note_count = 0\n    var note = String()\n    var note_count = 0\n   \
    \ var note = String()\n    var note_count = 0\n    var note = String()\n    var\
    \ note_count = 0\n    var note = String()\n    var note_count = 0\n    var note\
    \ = String()\n    var note_count = 0\n    var note = String()\n    var note_count\
    \ = 0\n    var note = String()\n    var note_count = 0\n    var note = String()\n\
    \    var note_count = 0\n    var note = String()\n    var note_count = 0\n   \
    \ var note = String()\n    var note_count = 0\n    var note = String()\n    var\
    \ note_count = 0\n    var note = String()\n    var note_count = 0\n    var note\
    \ = String()\n    var note_count = 0\n    var note = String()\n    var note_count\
    \ = 0\n    var note = String()\n    var note_count = 0\n    var note = String()\n\
    \    var note_count = 0\n    var note = String()\n    var note_count = 0\n   \
    \ var note = String()\n    var note_count = 0\n    var note = String()\n    var\
    \ note_count = 0\n    var note = String()\n    var note_count = 0\n    var note\
    \ = String()\n    var note_count = 0\n    var note = String()\n    var note_count\
    \ = 0\n    var note = String()\n    var note_count = 0\n    var note = String()\n\
    \    var note_count = 0\n    var note = String()\n    var note_count = 0\n   \
    \ var note = String()\n    var note_count = 0\n    var note = String()\n    var\
    \ note_count = 0\n    var note = String()\n    var note_count = 0\n    var note\
    \ = String()\n    var note_count = 0\n    var note = String()\n    var note_count\
    \ = 0\n    var note = String()\n    var note_count = 0\n    var \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp32g7gfp6.swift:105:8: error: expected pattern\n    var \n     \
    \  ^\n/tmp/tmp32g7gfp6.swift:16:9: error: invalid redeclaration of 'note_count'\n\
    \    var note_count = 0\n        ^\n/tmp/tmp32g7gfp6.swift:14:9: note: 'note_count'\
    \ previously declared here\n    var note_count = 0\n        ^\n/tmp/tmp32g7gfp6.swift:17:9:\
    \ error: invalid redeclaration of 'note'\n    var note = String()\n        ^\n\
    /tmp/tmp32g7gfp6.swift:15:9: note: 'note' previously declared here\n    var note\
    \ = String()\n        ^\n/tmp/tmp32g7gfp6.swift:18:9: error: invalid redeclaration\
    \ of 'note_count'\n    var note_count = 0\n        ^\n/tmp/tmp32g7gfp6.swift:14:9:\
    \ note: 'note_count' previously declared here\n    var note_count = 0\n      \
    \  ^\n/tmp/tmp32g7gfp6.swift:19:9: error: invalid redeclaration of 'note'\n  \
    \  var note = String()\n        ^\n/tmp/tmp32g7gfp6.swift:15:9: note: 'note' previously\
    \ declared here\n    var note = String()\n        ^\n/tmp/tmp32g7gfp6.swift:20:9:\
    \ error: invalid redeclaration of 'note_count'\n    var note_count = 0\n     \
    \   ^\n/tmp/tmp32g7gfp6.swift:14:9: note: 'note_count' previously declared here\n\
    \    var note_count = 0\n        ^\n/tmp/tmp32g7gfp6.swift:21:9: error: invalid\
    \ redeclaration of 'note'\n    var note = String()\n        ^\n/tmp/tmp32g7gfp6.swift:15:9:\
    \ note: 'note' previously declared here\n    var note = String()\n        ^\n\
    /tmp/tmp32g7gfp6.swift:22:9: error: invalid redeclaration of 'note_count'\n  \
    \  var note_count = 0\n        ^\n/tmp/tmp32g7gfp6.swift:14:9: note: 'note_count'\
    \ previously declared here\n    var note_count = 0\n        ^\n/tmp/tmp32g7gfp6.swift:23:9:\
    \ error: invalid redeclaration of 'note'\n    var note = String()\n        ^\n\
    /tmp/tmp32g7gfp6.swift:15:9: note: 'note' previously declared here\n    var note\
    \ = String()\n        ^\n/tmp/tmp32g7gfp6.swift:24:9: error: invalid redeclaration\
    \ of 'note_count'\n    var note_count = 0\n        ^\n/tmp/tmp32g7gfp6.swift:14:9:\
    \ note: 'note_count' previously declared here\n    var note_count = 0\n      \
    \  ^\n/tmp/tmp32g7gfp6.swift:25:9: error: invalid redeclaration of 'note'\n  \
    \  var note = String()\n       "
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = String()\n    var current_note_index\
    \ = 0\n    var current_note_length = 0\n    var current_note_octave = 0\n    var\
    \ current_note_duration = 0\n    var current_note_octave_duration = 0\n    var\
    \ current_note_octave_duration_index = 0\n    var current_note_octave_duration_length\
    \ = 0\n    var current_note_octave_duration_octave = 0\n    var current_note_octave_duration_duration\
    \ = 0\n    var current_note_octave_duration_duration_index = 0\n    var current_note_octave_duration_duration_length\
    \ = 0\n    var current_note_octave_duration_duration_octave = 0\n    var current_note_octave_duration_duration_duration\
    \ = 0\n    var current_note_octave_duration_duration_duration_index = 0\n    var\
    \ current_note_octave_duration_duration_duration_length = 0\n    var current_note_octave_duration_duration_duration_octave\
    \ = 0\n    var current_note_octave_duration_duration_duration_duration = 0\n \
    \   var current_note_octave_duration_duration_duration_duration_index = 0\n  \
    \  var current_note_octave_duration_duration_duration_duration_length = 0\n  \
    \  var current_note_octave_duration_duration_duration_duration_octave = 0\n  \
    \  var current_note_octave_duration_duration_duration_duration_duration = 0\n\
    \    var current_note_octave_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_note_octave_duration_duration_duration_duration_duration_length\
    \ = 0\n    var current_note_octave_duration_duration_duration_duration_duration_octave\
    \ = 0\n    var current_note_octave_duration_duration_duration_duration_duration_duration\
    \ = 0\n    var current_note_octave_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_note_octave_duration_duration_duration_duration_duration_duration_length\
    \ = 0\n    var current_note_octave_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n    var current_note_octave_duration_duration_duration_duration_duration_duration_duration\
    \ = 0\n    var current_note_octave_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_note_octave_duration_duration_duration_duration_duration_duration_duration_length\
    \ = 0\n    var current_note_octave_duration_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n    var current_note_octave_duration_duration_duration_duration_duration_duration_duration_duration\
    \ = 0\n    var current_note_octave_duration_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_note_octave_duration_duration_duration_duration_duration_duration_duration_duration_length\
    \ = 0\n    var current_note_octave_duration_duration_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n    var current_note_octave_duration_duration_duration_duration_duration_duration_duration_duration\
    \ = 0\n    var current_note_octave_duration_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_note_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpx_byue36.swift:51:9: error: invalid redeclaration of 'current_note_octave_duration_duration_duration_duration_duration_duration_duration_duration'\n\
    \    var current_note_octave_duration_duration_duration_duration_duration_duration_duration_duration\
    \ = 0\n        ^\n/tmp/tmpx_byue36.swift:47:9: note: 'current_note_octave_duration_duration_duration_duration_duration_duration_duration_duration'\
    \ previously declared here\n    var current_note_octave_duration_duration_duration_duration_duration_duration_duration_duration\
    \ = 0\n        ^\n/tmp/tmpx_byue36.swift:52:9: error: invalid redeclaration of\
    \ 'current_note_octave_duration_duration_duration_duration_duration_duration_duration_duration_index'\n\
    \    var current_note_octave_duration_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n        ^\n/tmp/tmpx_byue36.swift:48:9: note: 'current_note_octave_duration_duration_duration_duration_duration_duration_duration_duration_index'\
    \ previously declared here\n    var current_note_octave_duration_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n        ^\n/tmp/tmpx_byue36.swift:53:9: error: type annotation missing\
    \ in pattern\n    var current_note_\n        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var current_note = \"\"\n    var current_beat\
    \ = 0\n    var current_beat_count = 0\n    var current_note_length = 0\n    var\
    \ current_note_length_count = 0\n    var current_note_length_index = 0\n    var\
    \ current_note_length_index2 = 0\n    var current_note_length_index3 = 0\n   \
    \ var current_note_length_index4 = 0\n    var current_note_length_index5 = 0\n\
    \    var current_note_length_index6 = 0\n    var current_note_length_index7 =\
    \ 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpv6m7ledv.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_note_length_index59\n        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var current_note = \"\"\n    var current_beat\
    \ = 0\n    var current_position = 0\n    var last_position = 0\n    var last_note\
    \ = \"\"\n    var last_beat = 0\n    var last_note_index = 0\n    var last_note_index2\
    \ = 0\n    var last_note_index3 = 0\n    var last_note_index4 = 0\n    var last_note_index5\
    \ = 0\n    var last_note_index6 = 0\n    var last_note_index7 = 0\n    var last_note_index8\
    \ = 0\n    var last_note_index9 = 0\n    var last_note_index10 = 0\n    var last_note_index11\
    \ = 0\n    var last_note_index12 = 0\n    var last_note_index13 = 0\n    var last_note_index14\
    \ = 0\n    var last_note_index15 = 0\n    var last_note_index16 = 0\n    var last_note_index17\
    \ = 0\n    var last_note_index18 = 0\n    var last_note_index19 = 0\n    var last_note_index20\
    \ = 0\n    var last_note_index21 = 0\n    var last_note_index22 = 0\n    var last_note_index23\
    \ = 0\n    var last_note_index24 = 0\n    var last_note_index25 = 0\n    var last_note_index26\
    \ = 0\n    var last_note_index27 = 0\n    var last_note_index28 = 0\n    var last_note_index29\
    \ = 0\n    var last_note_index30 = 0\n    var last_note_index31 = 0\n    var last_note_index32\
    \ = 0\n    var last_note_index33 = 0\n    var last_note_index34 = 0\n    var last_note_index35\
    \ = 0\n    var last_note_index36 = 0\n    var last_note_index37 = 0\n    var last_note_index38\
    \ = 0\n    var last_note_index39 = 0\n    var last_note_index40 = 0\n    var last_note_index41\
    \ = 0\n    var last_note_index42 = 0\n    var last_note_index43 = 0\n    var last_note_index44\
    \ = 0\n    var last_note_index45 = 0\n    var last_note_index46 = 0\n    var last_note_index47\
    \ = 0\n    var last_note_index48 = 0\n    var last_note_index49 = 0\n    var last_note_index50\
    \ = 0\n    var last_note_index51 = 0\n    var last_note_index52 = 0\n    var last_note_index53\
    \ = 0\n    var last_note_index54 = 0\n    var last_note_index55 = 0\n    var last_note_index56\
    \ = 0\n    var last_note_index57 = 0\n    var last_note_index58 = 0\n    var last_note_index59\
    \ = 0\n    var last_note_index60 = 0\n    var last_note_index61 = 0\n    var last_note_index62\
    \ = 0\n    var last_note_index63 = 0\n    var last_note_index64 = 0\n    var last_note_index65\
    \ = 0\n    var last_note_index66 = 0\n    var last_note_index67 = 0\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpxiqqb24f.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpxiqqb24f.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmpxiqqb24f.swift:14:9:\
    \ warning: initialization of variable 'current_note' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var current_note = \"\"\
    \n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpxiqqb24f.swift:15:9: warning: initialization\
    \ of variable 'current_beat' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var current_beat = 0\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmpxiqqb24f.swift:16:9: warning: initialization of variable 'current_position'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var current_position = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpxiqqb24f.swift:17:9:\
    \ warning: initialization of variable 'last_position' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var last_position = 0\n\
    \    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmpxiqqb24f.swift:18:9: warning: initialization\
    \ of variable 'last_note' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var last_note = \"\"\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmpxiqqb24f.swift:19:9:\
    \ warning: initialization of variable 'last_beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var last_beat = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpxiqqb24f.swift:20:9: warning: initialization of variable 'last_note_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_note_index = 0\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpxiqqb24f.swift:21:9:\
    \ warning: initialization of variable 'last_note_index2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var last_note_index2 =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = 0\n    var last =\
    \ 0\n    var lastNote = \"\"\n    var lastNoteBeat = 0\n    var lastNoteNote =\
    \ 0\n    var lastNoteNoteBeat = 0\n    var lastNoteNoteNote = 0\n    var lastNoteNoteNoteBeat\
    \ = 0\n    var lastNoteNoteNoteNote = 0\n    var lastNoteNoteNoteNoteBeat = 0\n\
    \    var lastNoteNoteNoteNoteNote = 0\n    var lastNoteNoteNoteNoteBeat = 0\n\
    \    var lastNoteNoteNoteNoteNote = 0\n    var lastNoteNoteNoteNoteBeat = 0\n\
    \    var lastNoteNoteNoteNoteNote = 0\n    var lastNoteNoteNoteNoteBeat = 0\n\
    \    var lastNoteNoteNoteNoteNote = 0\n    var lastNoteNoteNoteNoteBeat = 0\n\
    \    var lastNoteNoteNoteNoteNote = 0\n    var lastNoteNoteNoteNoteBeat = 0\n\
    \    var lastNoteNoteNoteNoteNote = 0\n    var lastNoteNoteNoteNoteBeat = 0\n\
    \    var lastNoteNoteNoteNoteNote = 0\n    var lastNoteNoteNoteNoteBeat = 0\n\
    \    var lastNoteNoteNoteNoteNote = 0\n    var lastNoteNoteNoteNoteBeat = 0\n\
    \    var lastNoteNoteNoteNote = 0\n    var lastNoteNoteNoteNoteBeat = 0\n    var\
    \ lastNoteNoteNoteNote = 0\n    var lastNoteNoteNoteNoteBeat = 0\n    var lastNoteNoteNoteNote\
    \ = 0\n    var lastNoteNoteNoteNoteBeat = 0\n    var lastNoteNoteNoteNote = 0\n\
    \    var lastNoteNoteNoteNoteBeat = 0\n    var lastNoteNoteNoteNote = 0\n    var\
    \ lastNoteNoteNoteNoteBeat = 0\n    var lastNoteNoteNoteNote = 0\n    var lastNoteNoteNoteNoteBeat\
    \ = 0\n    var lastNoteNoteNoteNote = 0\n    var lastNoteNoteNoteNoteBeat = 0\n\
    \    var lastNoteNoteNoteNote = 0\n    var lastNoteNoteNoteNoteBeat = 0\n    var\
    \ lastNoteNoteNoteNote = 0\n    var lastNoteNoteNoteNoteBeat = 0\n    var lastNoteNoteNoteNote\
    \ = 0\n    var lastNoteNoteNoteNoteBeat = 0\n    var lastNoteNoteNoteNote = 0\n\
    \    var lastNoteNoteNoteNoteBeat = 0\n    var lastNoteNoteNoteNote = 0\n    var\
    \ lastNoteNoteNoteNoteBeat = 0\n    var lastNoteNoteNoteNote = 0\n    var lastNoteNoteNoteNoteBeat\
    \ = 0\n    var lastNoteNoteNoteNote = 0\n    var lastNoteNoteNoteNoteBeat = 0\n\
    \    var lastNoteNoteNoteNote = 0\n    var lastNoteNoteNoteNoteBeat = 0\n    var\
    \ lastNoteNote\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmphvyq5aug.swift:26:9: error: invalid redeclaration of 'lastNoteNoteNoteNoteBeat'\n\
    \    var lastNoteNoteNoteNoteBeat = 0\n        ^\n/tmp/tmphvyq5aug.swift:24:9:\
    \ note: 'lastNoteNoteNoteNoteBeat' previously declared here\n    var lastNoteNoteNoteNoteBeat\
    \ = 0\n        ^\n/tmp/tmphvyq5aug.swift:27:9: error: invalid redeclaration of\
    \ 'lastNoteNoteNoteNoteNote'\n    var lastNoteNoteNoteNoteNote = 0\n        ^\n\
    /tmp/tmphvyq5aug.swift:25:9: note: 'lastNoteNoteNoteNoteNote' previously declared\
    \ here\n    var lastNoteNoteNoteNoteNote = 0\n        ^\n/tmp/tmphvyq5aug.swift:28:9:\
    \ error: invalid redeclaration of 'lastNoteNoteNoteNoteBeat'\n    var lastNoteNoteNoteNoteBeat\
    \ = 0\n        ^\n/tmp/tmphvyq5aug.swift:24:9: note: 'lastNoteNoteNoteNoteBeat'\
    \ previously declared here\n    var lastNoteNoteNoteNoteBeat = 0\n        ^\n\
    /tmp/tmphvyq5aug.swift:29:9: error: invalid redeclaration of 'lastNoteNoteNoteNoteNote'\n\
    \    var lastNoteNoteNoteNoteNote = 0\n        ^\n/tmp/tmphvyq5aug.swift:25:9:\
    \ note: 'lastNoteNoteNoteNoteNote' previously declared here\n    var lastNoteNoteNoteNoteNote\
    \ = 0\n        ^\n/tmp/tmphvyq5aug.swift:30:9: error: invalid redeclaration of\
    \ 'lastNoteNoteNoteNoteBeat'\n    var lastNoteNoteNoteNoteBeat = 0\n        ^\n\
    /tmp/tmphvyq5aug.swift:24:9: note: 'lastNoteNoteNoteNoteBeat' previously declared\
    \ here\n    var lastNoteNoteNoteNoteBeat = 0\n        ^\n/tmp/tmphvyq5aug.swift:31:9:\
    \ error: invalid redeclaration of 'lastNoteNoteNoteNoteNote'\n    var lastNoteNoteNoteNoteNote\
    \ = 0\n        ^\n/tmp/tmphvyq5aug.swift:25:9: note: 'lastNoteNoteNoteNoteNote'\
    \ previously declared here\n    var lastNoteNoteNoteNoteNote = 0\n        ^\n\
    /tmp/tmphvyq5aug.swift:32:9: error: invalid redeclaration of 'lastNoteNoteNoteNoteBeat'\n\
    \    var lastNoteNoteNoteNoteBeat = 0\n        ^\n/tmp/tmphvyq5aug.swift:24:9:\
    \ note: 'lastNoteNoteNoteNoteBeat' previously declared here\n    var lastNoteNoteNoteNoteBeat\
    \ = 0\n        ^\n/tmp/tmphvyq5aug.swift:33:9: error: invalid redeclaration of\
    \ 'lastNoteNoteNoteNoteNote'\n    var lastNoteNoteNoteNoteNote = 0\n        ^\n\
    /tmp/tmphvyq5aug.swift:25:9: n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = Int()\n    var current_note_is_last\
    \ = false\n    for char in music_string {\n        switch char {\n        case\
    \ \"o\":\n            current_note = Int(char.unicodeScalars.first!.value)\n \
    \           current_note_is_last = false\n        case \"o|\":\n            current_note\
    \ = Int(char.unicodeScalars.first!.value)\n            current_note_is_last =\
    \ true\n        case \"|\":\n            current_note = Int(char.unicodeScalars.first!.value)\n\
    \            current_note_is_last = false\n        default:\n            if current_note_is_last\
    \ {\n                beats.append(current_beat)\n                current_beat\
    \ = 0\n                current_note_is_last = false\n            } else {\n  \
    \              current_beat += 1\n            }\n        }\n    }\n    beats.append(current_beat)\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpg9wf1opw.swift:21:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = 0\n    var note_index\
    \ = 0\n    var note_length = 0\n    var note_length_index = 0\n    var note_length_string\
    \ = \"\"\n    var note_length_index = 0\n    var note_length_string = \"\"\n \
    \   var note_length_index = 0\n    var note_length_string = \"\"\n    var note_length_index\
    \ = 0\n    var note_length_string = \"\"\n    var note_length_index = 0\n    var\
    \ note_length_string = \"\"\n    var note_length_index = 0\n    var note_length_string\
    \ = \"\"\n    var note_length_index = 0\n    var note_length_string = \"\"\n \
    \   var note_length_index = 0\n    var note_length_string = \"\"\n    var note_length_index\
    \ = 0\n    var note_length_string = \"\"\n    var note_length_index = 0\n    var\
    \ note_length_string = \"\"\n    var note_length_index = 0\n    var note_length_string\
    \ = \"\"\n    var note_length_index = 0\n    var note_length_string = \"\"\n \
    \   var note_length_index = 0\n    var note_length_string = \"\"\n    var note_length_index\
    \ = 0\n    var note_length_string = \"\"\n    var note_length_index = 0\n    var\
    \ note_length_string = \"\"\n    var note_length_index = 0\n    var note_length_string\
    \ = \"\"\n    var note_length_index = 0\n    var note_length_string = \"\"\n \
    \   var note_length_index = 0\n    var note_length_string = \"\"\n    var note_length_index\
    \ = 0\n    var note_length_string = \"\"\n    var note_length_index = 0\n    var\
    \ note_length_string = \"\"\n    var note_length_index = 0\n    var note_length_string\
    \ = \"\"\n    var note_length_index = 0\n    var note_length_string = \"\"\n \
    \   var note_length_index = 0\n    var note_length_string = \"\"\n    var note_length_index\
    \ = 0\n    var note_length_string = \"\"\n    var note_length_index = 0\n    var\
    \ note_length_string = \"\"\n    var note_length_index = 0\n    var note_length_string\
    \ = \"\"\n    var note_length_index = 0\n    var note_length_string = \"\"\n \
    \   var note_length_index = 0\n    var note_length_string = \"\"\n    var note_length_index\
    \ = 0\n    var note_length_string = \"\"\n    var note_length_index = 0\n    var\
    \ note_length_string = \"\"\n    var note_length_index = 0\n    var note_length_string\
    \ = \"\"\n    var note_length_index = 0\n    var note_length_string = \"\"\n \
    \   var note_length_index = 0\n    var note_length_string = \"\"\n    var note_length_index\
    \ = 0\n    var note_length_string = \"\"\n    var note_length_index = 0\n    var\
    \ note_length_string = \"\"\n    var note_length_index = 0\n    var note_length_string\
    \ = \"\"\n    var note_length_index = 0\n    var note_length_string = \"\"\n \
    \   var note_length_index = 0\n    var note_length_string = \"\"\n    var note_length_index\
    \ = 0\n    var note_length_string = \"\"\n    var note_length_index = 0\n    var\
    \ note_length_string = \"\"\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpvla96tm_.swift:20:9: error: invalid redeclaration of 'note_length_index'\n\
    \    var note_length_index = 0\n        ^\n/tmp/tmpvla96tm_.swift:18:9: note:\
    \ 'note_length_index' previously declared here\n    var note_length_index = 0\n\
    \        ^\n/tmp/tmpvla96tm_.swift:21:9: error: invalid redeclaration of 'note_length_string'\n\
    \    var note_length_string = \"\"\n        ^\n/tmp/tmpvla96tm_.swift:19:9: note:\
    \ 'note_length_string' previously declared here\n    var note_length_string =\
    \ \"\"\n        ^\n/tmp/tmpvla96tm_.swift:22:9: error: invalid redeclaration of\
    \ 'note_length_index'\n    var note_length_index = 0\n        ^\n/tmp/tmpvla96tm_.swift:18:9:\
    \ note: 'note_length_index' previously declared here\n    var note_length_index\
    \ = 0\n        ^\n/tmp/tmpvla96tm_.swift:23:9: error: invalid redeclaration of\
    \ 'note_length_string'\n    var note_length_string = \"\"\n        ^\n/tmp/tmpvla96tm_.swift:19:9:\
    \ note: 'note_length_string' previously declared here\n    var note_length_string\
    \ = \"\"\n        ^\n/tmp/tmpvla96tm_.swift:24:9: error: invalid redeclaration\
    \ of 'note_length_index'\n    var note_length_index = 0\n        ^\n/tmp/tmpvla96tm_.swift:18:9:\
    \ note: 'note_length_index' previously declared here\n    var note_length_index\
    \ = 0\n        ^\n/tmp/tmpvla96tm_.swift:25:9: error: invalid redeclaration of\
    \ 'note_length_string'\n    var note_length_string = \"\"\n        ^\n/tmp/tmpvla96tm_.swift:19:9:\
    \ note: 'note_length_string' previously declared here\n    var note_length_string\
    \ = \"\"\n        ^\n/tmp/tmpvla96tm_.swift:26:9: error: invalid redeclaration\
    \ of 'note_length_index'\n    var note_length_index = 0\n        ^\n/tmp/tmpvla96tm_.swift:18:9:\
    \ note: 'note_length_index' previously declared here\n    var note_length_index\
    \ = 0\n        ^\n/tmp/tmpvla96tm_.swift:27:9: error: invalid redeclaration of\
    \ 'note_length_string'\n    var note_length_string = \"\"\n        ^\n/tmp/tmpvla96tm_.swift:19:9:\
    \ note: 'note_length_string' previously declared here\n    var note_length_string\
    \ = \"\"\n        ^\n/tmp/tmpvla96tm_.swift:28:9: error: invalid redeclaration\
    \ of 'note_length_index'\n    var note_le"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastBeatNote = \"\
    \"\n    var lastBeatNoteIndex = 0\n    var lastBeatNoteIndex2 = 0\n    var lastBeatNoteIndex3\
    \ = 0\n    var lastBeatNoteIndex4 = 0\n    var lastBeatNoteIndex5 = 0\n    var\
    \ lastBeatNoteIndex6 = 0\n    var lastBeatNoteIndex7 = 0\n    var lastBeatNoteIndex8\
    \ = 0\n    var lastBeatNoteIndex9 = 0\n    var lastBeatNoteIndex10 = 0\n    var\
    \ lastBeatNoteIndex11 = 0\n    var lastBeatNoteIndex12 = 0\n    var lastBeatNoteIndex13\
    \ = 0\n    var lastBeatNoteIndex14 = 0\n    var lastBeatNoteIndex15 = 0\n    var\
    \ lastBeatNoteIndex16 = 0\n    var lastBeatNoteIndex17 = 0\n    var lastBeatNoteIndex18\
    \ = 0\n    var lastBeatNoteIndex19 = 0\n    var lastBeatNoteIndex20 = 0\n    var\
    \ lastBeatNoteIndex21 = 0\n    var lastBeatNoteIndex22 = 0\n    var lastBeatNoteIndex23\
    \ = 0\n    var lastBeatNoteIndex24 = 0\n    var lastBeatNoteIndex25 = 0\n    var\
    \ lastBeatNoteIndex26 = 0\n    var lastBeatNoteIndex27 = 0\n    var lastBeatNoteIndex28\
    \ = 0\n    var lastBeatNoteIndex29 = 0\n    var lastBeatNoteIndex30 = 0\n    var\
    \ lastBeatNoteIndex31 = 0\n    var lastBeatNoteIndex32 = 0\n    var lastBeatNoteIndex33\
    \ = 0\n    var lastBeatNoteIndex34 = 0\n    var lastBeatNoteIndex35 = 0\n    var\
    \ lastBeatNoteIndex36 = 0\n    var lastBeatNoteIndex37 = 0\n    var lastBeatNoteIndex38\
    \ = 0\n    var lastBeatNoteIndex39 = 0\n    var lastBeatNoteIndex40 = 0\n    var\
    \ lastBeatNoteIndex41 = 0\n    var lastBeatNoteIndex42 = 0\n    var lastBeatNoteIndex43\
    \ = 0\n    var lastBeatNoteIndex44 = 0\n    var lastBeatNoteIndex45 = 0\n    var\
    \ lastBeatNoteIndex46 = 0\n    var lastBeatNoteIndex47 = 0\n    var lastBeatNoteIndex48\
    \ = 0\n    var lastBeatNoteIndex49 = 0\n    var lastBeatNoteIndex50 = 0\n    var\
    \ lastBeatNoteIndex51 = 0\n    var lastBeatNoteIndex52 = 0\n    var \n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpjiqs59c5.swift:72:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpjiqs59c5.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpjiqs59c5.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmpjiqs59c5.swift:14:9:\
    \ warning: initialization of variable 'beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmpjiqs59c5.swift:15:9: warning: initialization of variable 'note' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var note\
    \ = \"\"\n    ~~~~^~~~\n    _\n/tmp/tmpjiqs59c5.swift:16:9: warning: initialization\
    \ of variable 'last' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var last = 0\n    ~~~~^~~~\n    _\n/tmp/tmpjiqs59c5.swift:17:9:\
    \ warning: initialization of variable 'lastNote' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var lastNote = \"\"\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpjiqs59c5.swift:18:9: warning: initialization of variable 'lastBeat'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var lastBeat = 0\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpjiqs59c5.swift:19:9: warning:\
    \ initialization of variable 'lastBeatNote' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var lastBeatNote = \"\"\n    ~~~~^~~~~~~~~~~~\n\
    \    _\n/tmp/tmpjiqs59c5.swift:20:9: warning: initialization of variable 'lastBeatNoteIndex'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var lastBeatNoteIndex = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpjiqs59c5.swift:21:9:\
    \ warning: initialization of variable 'lastBeatNoteIndex2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var lastBeatNoteIndex2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpjiqs59"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_beats = [String]()\n    var beats_notes\
    \ = [String]()\n    var beats_notes_beats = [String]()\n    var beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats = [String]()\n    var beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats = [String]()\n\
    \    var beats_notes_beats_notes_beats_notes_beats_notes = [String]()\n    var\
    \ beats_notes_beats_notes_beats_notes_beats_notes_beats = [String]()\n    var\
    \ beats_notes_beats_notes_beats_notes_beats_notes_beats_notes = [String]()\n \
    \   var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes = [String]()\n\
    \    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats = [String]()\n\
    \    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beat\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpuu00c47y.swift:24:9: error: invalid redeclaration of 'beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\n\
    \    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes = [String]()\n\
    \        ^\n/tmp/tmpuu00c47y.swift:23:9: note: 'beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\
    \ previously declared here\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n        ^\n/tmp/tmpuu00c47y.swift:29:9: error: invalid redeclaration\
    \ of 'beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\n\
    \    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n        ^\n/tmp/tmpuu00c47y.swift:28:9: note: 'beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\
    \ previously declared here\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n        ^\n/tmp/tmpuu00c47y.swift:34:9: error: type annotation\
    \ missing in pattern\n    var beats_notes_beat\n        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = \"\"\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_index2\
    \ = 0\n    var current_note_length_index3 = 0\n    var current_note_length_index4\
    \ = 0\n    var current_note_length_index5 = 0\n    var current_note_length_index6\
    \ = 0\n    var current_note_length_index7 = 0\n    var current_note_length_index8\
    \ = 0\n    var current_note_length_index9 = 0\n    var current_note_length_index10\
    \ = 0\n    var current_note_length_index11 = 0\n    var current_note_length_index12\
    \ = 0\n    var current_note_length_index13 = 0\n    var current_note_length_index14\
    \ = 0\n    var current_note_length_index15 = 0\n    var current_note_length_index16\
    \ = 0\n    var current_note_length_index17 = 0\n    var current_note_length_index18\
    \ = 0\n    var current_note_length_index19 = 0\n    var current_note_length_index20\
    \ = 0\n    var current_note_length_index21 = 0\n    var current_note_length_index22\
    \ = 0\n    var current_note_length_index23 = 0\n    var current_note_length_index24\
    \ = 0\n    var current_note_length_index25 = 0\n    var current_note_length_index26\
    \ = 0\n    var current_note_length_index27 = 0\n    var current_note_length_index28\
    \ = 0\n    var current_note_length_index29 = 0\n    var current_note_length_index30\
    \ = 0\n    var current_note_length_index31 = 0\n    var current_note_length_index32\
    \ = 0\n    var current_note_length_index33 = 0\n    var current_note_length_index34\
    \ = 0\n    var current_note_length_index35 = 0\n    var current_note_length_index36\
    \ = 0\n    var current_note_length_index37 = 0\n    var current_note_length_index38\
    \ = 0\n    var current_note_length_index39 = 0\n    var current_note_length_index40\
    \ = 0\n    var current_note_length_index41 = 0\n    var current_note_length_index42\
    \ = 0\n    var current_note_length_index43 = 0\n    var current_note_length_index44\
    \ = 0\n    var current_note_length_index45 = 0\n    var current_note_length_index46\
    \ = 0\n    var current_note_length_index47 = 0\n    var current_note_length_index48\
    \ = 0\n    var current_note_length_index49 = 0\n    var current_note_length_index50\
    \ = 0\n    var current_note_length_index51 = 0\n    var current_note_length_index52\
    \ = 0\n    var current_note_length_index53 = 0\n    var current_note_length_index54\
    \ = 0\n    var current_note_length_index55 = 0\n    var current_note_length_index56\
    \ = 0\n    var current_note_length_index57 = 0\n    var current_note_length_index58\
    \ = 0\n    var current_note_length_index59 = 0\n    var current_note_length_index60\
    \ = 0\n    var current_note_length_index61 = 0\n    var current_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp93ukai9l.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beats_count = 0\n    var note_length = -1\n\
    \    var note_count = 0\n    var note_char = \"\"\n    var note_char_count = 0\n\
    \    var note_char_length = 0\n    var note_char_char = \"\"\n    var note_char_char_count\
    \ = 0\n    var note_char_char_length = 0\n    var note_char_char_char = \"\"\n\
    \    var note_char_char_char_count = 0\n    var note_char_char_char_length = 0\n\
    \    var note_char_char_char_char = \"\"\n    var note_char_char_char_char_count\
    \ = 0\n    var note_char_char_char_char_length = 0\n    var note_char_char_char_char_char\
    \ = \"\"\n    var note_char_char_char_char_char_count = 0\n    var note_char_char_char_char_char_length\
    \ = 0\n    var note_char_char_char_char_char_char = \"\"\n    var note_char_char_char_char_char_char_count\
    \ = 0\n    var note_char_char_char_char_char_char_length = 0\n    var note_char_char_char_char_char_char_char\
    \ = \"\"\n    var note_char_char_char_char_char_char_char_count = 0\n    var note_char_char_char_char_char_char_char_length\
    \ = 0\n    var note_char_char_char_char_char_char_char_char = \"\"\n    var note_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var note_char_char_char_char_char_char_char_char_length = 0\n    var\
    \ note_char_char_char_char_char_char_char_char_char = \"\"\n    var note_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var note_char_char_char_char_char_char_char_char_char_length = 0\n\
    \    var note_char_char_char_char_char_char_char_char_char_char = \"\"\n    var\
    \ note_char_char_char_char_char_char_char_char_char_char_count = 0\n    var note_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var note_char_char_char_char_char_char_char_char_char_char = \"\"\n\
    \    var note_char_char_char_char_char_char_char_char_char_char_char_count = 0\n\
    \    var note_char_char_char_char_char_char_char_char_char_char_length = 0\n \
    \   var note_char_char_char_char_char_char_char_char_char_char_char = \"\"\n \
    \   var note_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var note_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var note_char_char_char_char_char_char_char_char_char_char_char_char\
    \ = \"\"\n    var note_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var note_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var note_char_char_char_char_char_char_char_char_char_char_char_char_char\
    \ = \"\"\n    var note_char_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var note_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpt4vkbsbh.swift:46:9: error: invalid redeclaration of 'note_char_char_char_char_char_char_char_char_char_length'\n\
    \    var note_char_char_char_char_char_char_char_char_char_length = 0\n      \
    \  ^\n/tmp/tmpt4vkbsbh.swift:43:9: note: 'note_char_char_char_char_char_char_char_char_char_length'\
    \ previously declared here\n    var note_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n        ^\n/tmp/tmpt4vkbsbh.swift:47:9: error: invalid redeclaration of\
    \ 'note_char_char_char_char_char_char_char_char_char_char'\n    var note_char_char_char_char_char_char_char_char_char_char\
    \ = \"\"\n        ^\n/tmp/tmpt4vkbsbh.swift:44:9: note: 'note_char_char_char_char_char_char_char_char_char_char'\
    \ previously declared here\n    var note_char_char_char_char_char_char_char_char_char_char\
    \ = \"\"\n        ^\n/tmp/tmpt4vkbsbh.swift:54:9: error: invalid redeclaration\
    \ of 'note_char_char_char_char_char_char_char_char_char_char_char_char_count'\n\
    \    var note_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n        ^\n/tmp/tmpt4vkbsbh.swift:51:9: note: 'note_char_char_char_char_char_char_char_char_char_char_char_char_count'\
    \ previously declared here\n    var note_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n        ^\n/tmp/tmpt4vkbsbh.swift:55:9: error: invalid redeclaration of\
    \ 'note_char_char_char_char_char_char_char_char_char_char_char_length'\n    var\
    \ note_char_char_char_char_char_char_char_char_char_char_char_length = 0\n   \
    \     ^\n/tmp/tmpt4vkbsbh.swift:52:9: note: 'note_char_char_char_char_char_char_char_char_char_char_char_length'\
    \ previously declared here\n    var note_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n        ^\n/tmp/tmpt4vkbsbh.swift:58:9: error: type annotation missing\
    \ in pattern\n    var note_\n        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var beats_counter = 0\n    var notes_counter = 0\n    var notes_length =\
    \ 0\n    var notes_string = \"\"\n    var notes_last_beat = 0\n    var notes_last_beat_counter\
    \ = 0\n    var notes_last_beat_length = 0\n    var notes_last_beat_string = \"\
    \"\n    var notes_last_beat_last_beat = 0\n    var notes_last_beat_last_beat_counter\
    \ = 0\n    var notes_last_beat_last_beat_length = 0\n    var notes_last_beat_last_beat_string\
    \ = \"\"\n    var notes_last_beat_last_beat_last_beat = 0\n    var notes_last_beat_last_beat_last_beat_counter\
    \ = 0\n    var notes_last_beat_last_beat_last_beat_length = 0\n    var notes_last_beat_last_beat_last_beat_string\
    \ = \"\"\n    var notes_last_beat_last_beat_last_beat_last_beat = 0\n    var notes_last_beat_last_beat_last_beat_last_beat_counter\
    \ = 0\n    var notes_last_beat_last_beat_last_beat_last_beat_length = 0\n    var\
    \ notes_last_beat_last_beat_last_beat_last_beat_string = \"\"\n    var notes_last_beat_last_beat_last_beat_last_beat_last_beat\
    \ = 0\n    var notes_last_beat_last_beat_last_beat_last_beat_last_beat_counter\
    \ = 0\n    var notes_last_beat_last_beat_last_beat_last_beat_last_beat_length\
    \ = 0\n    var notes_last_beat_last_beat_last_beat_last_beat_last_beat_string\
    \ = \"\"\n    var notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat\
    \ = 0\n    var notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_counter\
    \ = 0\n    var notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_length\
    \ = 0\n    var notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_string\
    \ = \"\"\n    var notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat\
    \ = 0\n    var notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_counter\
    \ = 0\n    var notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_length\
    \ = 0\n    var notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpyo7irtfg.swift:44:9: error: type annotation missing in pattern\n\
    \    var notes_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_last_beat_string\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var current_beat = 0\n    var current_note = 0\n\
    \    var current_note_length = 0\n    var current_note_length_index = 0\n    var\
    \ current_note_length_value = 0\n    var current_note_length_value_index = 0\n\
    \    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp51gy553a.swift:25:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp51gy553a.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp51gy553a.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp51gy553a.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp51gy553a.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp51gy553a.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp51gy553a.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp51gy553a.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp51gy553a.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp51gy553a.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp51gy553a.swift:30:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp51gy553a.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_valu"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var last = 0\n    var notes = [String]()\n\
    \    var notes_index = 0\n    var notes_string = \"\"\n    var notes_string_index\
    \ = 0\n    var notes_string_length = 0\n    var notes_string_length_index = 0\n\
    \    var notes_string_length_string = \"\"\n    var notes_string_length_string_index\
    \ = 0\n    var notes_string_length_string_length = 0\n    var notes_string_length_string_length_index\
    \ = 0\n    var notes_string_length_string_length_string = \"\"\n    var notes_string_length_string_length_string_index\
    \ = 0\n    var notes_string_length_string_length_string_length = 0\n    var notes_string_length_string_length_string_length_index\
    \ = 0\n    var notes_string_length_string_length_string_length_string = \"\"\n\
    \    var notes_string_length_string_length_string_length_string_index = 0\n  \
    \  var notes_string_length_string_length_string_length_string_length = 0\n   \
    \ var notes_string_length_string_length_string_length_string_length_index = 0\n\
    \    var notes_string_length_string_length_string_length_string_length_string\
    \ = \"\"\n    var notes_string_length_string_length_string_length_string_length_string_index\
    \ = 0\n    var notes_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    var notes_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    var notes_string_length_string_length_string_length_string_length_string_length_string\
    \ = \"\"\n    var notes_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    var notes_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    var notes_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    var notes_string_length_string_length_string_length_string_length_string_length_string_length_string\
    \ = \"\"\n    var notes_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    var notes_string_length_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    var notes_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    var notes_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string\
    \ = \"\"\n    var notes_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    var notes_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    var notes_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    var notes_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    var notes_string_length_string_length_string_length_string_length_string_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpo8n2u9gu.swift:39:9: error: invalid redeclaration of 'notes_string_length_string_length_string_length_string_length_string_length_index'\n\
    \    var notes_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n        ^\n/tmp/tmpo8n2u9gu.swift:37:9: note: 'notes_string_length_string_length_string_length_string_length_string_length_index'\
    \ previously declared here\n    var notes_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n        ^\n/tmp/tmpo8n2u9gu.swift:43:9: error: invalid redeclaration of\
    \ 'notes_string_length_string_length_string_length_string_length_string_length_string_length_index'\n\
    \    var notes_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n        ^\n/tmp/tmpo8n2u9gu.swift:41:9: note: 'notes_string_length_string_length_string_length_string_length_string_length_string_length_index'\
    \ previously declared here\n    var notes_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n        ^\n/tmp/tmpo8n2u9gu.swift:47:9: error: invalid redeclaration of\
    \ 'notes_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index'\n\
    \    var notes_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n        ^\n/tmp/tmpo8n2u9gu.swift:45:9: note: 'notes_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index'\
    \ previously declared here\n    var notes_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n        ^\n/tmp/tmpo8n2u9gu.swift:51:9: error: type annotation missing\
    \ in pattern\n    var notes_string_length_string_length_string_length_string_length_string_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var beats_count = 0\n    var note_count = 0\n    var note_char = \"\"\n \
    \   var note_char_count = 0\n    var note_char_index = 0\n    var note_char_length\
    \ = 0\n    var note_char_length_count = 0\n    var note_char_length_index = 0\n\
    \    var note_char_length_char = \"\"\n    var note_char_length_char_count = 0\n\
    \    var note_char_length_char_index = 0\n    var note_char_length_char_length\
    \ = 0\n    var note_char_length_char_length_count = 0\n    var note_char_length_char_length_index\
    \ = 0\n    var note_char_length_char_length_char = \"\"\n    var note_char_length_char_length_char_count\
    \ = 0\n    var note_char_length_char_length_char_index = 0\n    var note_char_length_char_length_char_length\
    \ = 0\n    var note_char_length_char_length_char_count = 0\n    var note_char_length_char_length_char_index\
    \ = 0\n    var note_char_length_char_length_char_length_char = \"\"\n    var note_char_length_char_length_char_length_char_count\
    \ = 0\n    var note_char_length_char_length_char_length_index = 0\n    var note_char_length_char_length_char_length_char_index\
    \ = 0\n    var note_char_length_char_length_char_length_char_length = 0\n    var\
    \ note_char_length_char_length_char_length_char_count = 0\n    var note_char_length_char_length_char_length_char_index\
    \ = 0\n    var note_char_length_char_length_char_length_char_length_index = 0\n\
    \    var note_char_length_char_length_char_length_char_length_char = \"\"\n  \
    \  var note_char_length_char_length_char_length_char_length_char_count = 0\n \
    \   var note_char_length_char_length_char_length_char_length_char_index = 0\n\
    \    var note_char_length_char_length_char_length_char_length_char_length_index\
    \ = 0\n    var note_char_length_char_length_char_length_char_length_char_length\
    \ = \"\"\n    var note_char_length_char_length_char_length_char_length_char_count\
    \ = 0\n    var note_char_length_char_length_char_length_char_length_char_index\
    \ = 0\n    var note_char_length_char_length_char_length_char_length_char_length_index\
    \ = 0\n    var note_char_length_char_length_char_length_char_length_char_length_char\
    \ = \"\"\n    var note_char_length_char_length_char_length_char_length_char_length_char_count\
    \ = 0\n    var note_char_length_char_length_char_length_char_length_char_length_char_index\
    \ = 0\n    var note_char_length_char_length_char_length_char_length_char_length_char_length_index\
    \ = 0\n    var note_char_length_char_length_char_length_char_length_char_length_char_length_char\
    \ = \"\"\n    var note_char_length_char_length_char_length_char_length_char_length_char_length_char_count\
    \ = 0\n    var note_char_length_char_length_char_length_char_length_char_length_char_length_char_index\
    \ = 0\n    var note_char_length_char_length_char_length_char_length_char_length_char_length_char_length_index\
    \ = 0\n    var note_char_length_char_length_char_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmphv2wvnz0.swift:31:9: error: invalid redeclaration of 'note_char_length_char_length_char_count'\n\
    \    var note_char_length_char_length_char_count = 0\n        ^\n/tmp/tmphv2wvnz0.swift:28:9:\
    \ note: 'note_char_length_char_length_char_count' previously declared here\n \
    \   var note_char_length_char_length_char_count = 0\n        ^\n/tmp/tmphv2wvnz0.swift:32:9:\
    \ error: invalid redeclaration of 'note_char_length_char_length_char_index'\n\
    \    var note_char_length_char_length_char_index = 0\n        ^\n/tmp/tmphv2wvnz0.swift:29:9:\
    \ note: 'note_char_length_char_length_char_index' previously declared here\n \
    \   var note_char_length_char_length_char_index = 0\n        ^\n/tmp/tmphv2wvnz0.swift:38:9:\
    \ error: invalid redeclaration of 'note_char_length_char_length_char_length_char_count'\n\
    \    var note_char_length_char_length_char_length_char_count = 0\n        ^\n\
    /tmp/tmphv2wvnz0.swift:34:9: note: 'note_char_length_char_length_char_length_char_count'\
    \ previously declared here\n    var note_char_length_char_length_char_length_char_count\
    \ = 0\n        ^\n/tmp/tmphv2wvnz0.swift:39:9: error: invalid redeclaration of\
    \ 'note_char_length_char_length_char_length_char_index'\n    var note_char_length_char_length_char_length_char_index\
    \ = 0\n        ^\n/tmp/tmphv2wvnz0.swift:36:9: note: 'note_char_length_char_length_char_length_char_index'\
    \ previously declared here\n    var note_char_length_char_length_char_length_char_index\
    \ = 0\n        ^\n/tmp/tmphv2wvnz0.swift:46:9: error: invalid redeclaration of\
    \ 'note_char_length_char_length_char_length_char_length_char_count'\n    var note_char_length_char_length_char_length_char_length_char_count\
    \ = 0\n        ^\n/tmp/tmphv2wvnz0.swift:42:9: note: 'note_char_length_char_length_char_length_char_length_char_count'\
    \ previously declared here\n    var note_char_length_char_length_char_length_char_length_char_count\
    \ = 0\n        ^\n/tmp/tmphv2wvnz0.swift:47:9: error: invalid redeclaration of\
    \ 'note_char_length_char_length_char_length_char_length_char_index'\n    var note_char_length_char_length_char_length_char_length_char_index\
    \ = 0\n        "
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = String()\n    var notes = [String]()\n    var\
    \ note_count = 0\n    var note_length = String()\n    var note_length = String()\n\
    \    var note_length = String()\n    var note_length = String()\n    var note_length\
    \ = String()\n    var note_length = String()\n    var note_length = String()\n\
    \    var note_length = String()\n    var note_length = String()\n    var note_length\
    \ = String()\n    var note_length = String()\n    var note_length = String()\n\
    \    var note_length = String()\n    var note_length = String()\n    var note_length\
    \ = String()\n    var note_length = String()\n    var note_length = String()\n\
    \    var note_length = String()\n    var note_length = String()\n    var note_length\
    \ = String()\n    var note_length = String()\n    var note_length = String()\n\
    \    var note_length = String()\n    var note_length = String()\n    var note_length\
    \ = String()\n    var note_length = String()\n    var note_length = String()\n\
    \    var note_length = String()\n    var note_length = String()\n    var note_length\
    \ = String()\n    var note_length = String()\n    var note_length = String()\n\
    \    var note_length = String()\n    var note_length = String()\n    var note_length\
    \ = String()\n    var note_length = String()\n    var note_length = String()\n\
    \    var note_length = String()\n    var note_length = String()\n    var note_length\
    \ = String()\n    var note_length = String()\n    var note_length = String()\n\
    \    var note_length = String()\n    var note_length = String()\n    var note_length\
    \ = String()\n    var note_length = String()\n    var note_length = String()\n\
    \    var note_length = String()\n    var note_length = String()\n    var note_length\
    \ = String()\n    var note_length = String()\n    var note_length = String()\n\
    \    var note_length = String()\n    var note_length = String()\n    var note_length\
    \ = String()\n    var note_length = String()\n    var note_length = String()\n\
    \    var note_length = String()\n    var note_length = String()\n    var note_length\
    \ = String()\n    var note_length = String()\n    var note_length = String()\n\
    \    var note_length = String()\n    var note_length = String()\n    var note_length\
    \ = String()\n    var note_length = String()\n    var note_length = String()\n\
    \    var note_length = String()\n    var note_length = String()\n    var note_length\
    \ = String()\n    var note_length = String()\n    var note_length = String()\n\
    \    var note_length = String()\n    var note_length = String()\n    var note_length\
    \ = String()\n    var note_length = String()\n    var note_length = String()\n\
    \    var note_length = String()\n    var note_length = String()\n    var note_length\
    \ = String()\n    var note_length = \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbu32q5r1.swift:97:22: error: expected initial value after '='\n\
    \    var note_length = \n                     ^\n/tmp/tmpbu32q5r1.swift:18:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = String()\n\
    \        ^\n/tmp/tmpbu32q5r1.swift:17:9: note: 'note_length' previously declared\
    \ here\n    var note_length = String()\n        ^\n/tmp/tmpbu32q5r1.swift:19:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = String()\n\
    \        ^\n/tmp/tmpbu32q5r1.swift:17:9: note: 'note_length' previously declared\
    \ here\n    var note_length = String()\n        ^\n/tmp/tmpbu32q5r1.swift:20:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = String()\n\
    \        ^\n/tmp/tmpbu32q5r1.swift:17:9: note: 'note_length' previously declared\
    \ here\n    var note_length = String()\n        ^\n/tmp/tmpbu32q5r1.swift:21:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = String()\n\
    \        ^\n/tmp/tmpbu32q5r1.swift:17:9: note: 'note_length' previously declared\
    \ here\n    var note_length = String()\n        ^\n/tmp/tmpbu32q5r1.swift:22:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = String()\n\
    \        ^\n/tmp/tmpbu32q5r1.swift:17:9: note: 'note_length' previously declared\
    \ here\n    var note_length = String()\n        ^\n/tmp/tmpbu32q5r1.swift:23:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = String()\n\
    \        ^\n/tmp/tmpbu32q5r1.swift:17:9: note: 'note_length' previously declared\
    \ here\n    var note_length = String()\n        ^\n/tmp/tmpbu32q5r1.swift:24:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = String()\n\
    \        ^\n/tmp/tmpbu32q5r1.swift:17:9: note: 'note_length' previously declared\
    \ here\n    var note_length = String()\n        ^\n/tmp/tmpbu32q5r1.swift:25:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = String()\n\
    \        ^\n/tmp/tmpbu32q5r1.swift:17:9: note: 'note_length' previously declared\
    \ here\n    var note_length = String()\n        ^\n/tmp/tmpbu32q5r1.swift:26:9:\
    \ error: invalid redeclaration of 'note_length'\n    var n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array: [Int]\
    \ = []\n    var current_beat = 0\n    var current_note = \"\"\n    var current_note_index\
    \ = 0\n    var current_note_length = 0\n    var current_note_length_index = 0\n\
    \    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp6xeup9zb.swift:25:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp6xeup9zb.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp6xeup9zb.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp6xeup9zb.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp6xeup9zb.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp6xeup9zb.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp6xeup9zb.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp6xeup9zb.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp6xeup9zb.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp6xeup9zb.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp6xeup9zb.swift:30:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp6xeup9zb.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_valu"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var note_index\
    \ = 0\n    var note_length = 0\n    var note_index = 0\n    var note_length =\
    \ 0\n    var note_length = 0\n    var note_length = 0\n    var note_length = 0\n\
    \    var note_length = 0\n    var note_length = 0\n    var note_length = 0\n \
    \   var note_length = 0\n    var note_length = 0\n    var note_length = 0\n  \
    \  var note_length = 0\n    var note_length = 0\n    var note_length = 0\n   \
    \ var note_length = 0\n    var note_length = 0\n    var note_length = 0\n    var\
    \ note_length = 0\n    var note_length = 0\n    var note_length = 0\n    var note_length\
    \ = 0\n    var note_length = 0\n    var note_length = 0\n    var note_length =\
    \ 0\n    var note_length = 0\n    var note_length = 0\n    var note_length = 0\n\
    \    var note_length = 0\n    var note_length = 0\n    var note_length = 0\n \
    \   var note_length = 0\n    var note_length = 0\n    var note_length = 0\n  \
    \  var note_length = 0\n    var note_length = 0\n    var note_length = 0\n   \
    \ var note_length = 0\n    var note_length = 0\n    var note_length = 0\n    var\
    \ note_length = 0\n    var note_length = 0\n    var note_length = 0\n    var note_length\
    \ = 0\n    var note_length = 0\n    var note_length = 0\n    var note_length =\
    \ 0\n    var note_length = 0\n    var note_length = 0\n    var note_length = 0\n\
    \    var note_length = 0\n    var note_length = 0\n    var note_length = 0\n \
    \   var note_length = 0\n    var note_length = 0\n    var note_length = 0\n  \
    \  var note_length = 0\n    var note_length = 0\n    var note_length = 0\n   \
    \ var note_length = 0\n    var note_length = 0\n    var note_length = 0\n    var\
    \ note_length = 0\n    var note_length = 0\n    var note_length = 0\n    var note_length\
    \ = 0\n    var note_length = 0\n    var note_length = 0\n    var note_length =\
    \ 0\n    var note_length = 0\n    var note_length = 0\n    var note_length = 0\n\
    \    var note_length = 0\n    var note_length = 0\n    var note_length = 0\n \
    \   var note_length = 0\n    var note_length = 0\n    var note_length = 0\n  \
    \  var note_length = 0\n    var note_length = 0\n    var note_length = 0\n   \
    \ var note_length = 0\n    var note_length = 0\n    var note_length = 0\n    var\
    \ note_length = 0\n    var note_length = 0\n    var note_length = 0\n    var note_length\
    \ = 0\n    var note_length = 0\n    var note_length = 0\n    var note_length =\
    \ 0\n    var note_length = 0\n    var note_length = 0\n    var note_length = 0\n\
    \    var note_length = 0\n    var note_length = 0\n    var note_length = 0\n\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp2sy5k0o9.swift:18:9: error: invalid redeclaration of 'note_index'\n\
    \    var note_index = 0\n        ^\n/tmp/tmp2sy5k0o9.swift:16:9: note: 'note_index'\
    \ previously declared here\n    var note_index = 0\n        ^\n/tmp/tmp2sy5k0o9.swift:19:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = 0\n   \
    \     ^\n/tmp/tmp2sy5k0o9.swift:17:9: note: 'note_length' previously declared\
    \ here\n    var note_length = 0\n        ^\n/tmp/tmp2sy5k0o9.swift:20:9: error:\
    \ invalid redeclaration of 'note_length'\n    var note_length = 0\n        ^\n\
    /tmp/tmp2sy5k0o9.swift:17:9: note: 'note_length' previously declared here\n  \
    \  var note_length = 0\n        ^\n/tmp/tmp2sy5k0o9.swift:21:9: error: invalid\
    \ redeclaration of 'note_length'\n    var note_length = 0\n        ^\n/tmp/tmp2sy5k0o9.swift:17:9:\
    \ note: 'note_length' previously declared here\n    var note_length = 0\n    \
    \    ^\n/tmp/tmp2sy5k0o9.swift:22:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = 0\n        ^\n/tmp/tmp2sy5k0o9.swift:17:9: note: 'note_length'\
    \ previously declared here\n    var note_length = 0\n        ^\n/tmp/tmp2sy5k0o9.swift:23:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = 0\n   \
    \     ^\n/tmp/tmp2sy5k0o9.swift:17:9: note: 'note_length' previously declared\
    \ here\n    var note_length = 0\n        ^\n/tmp/tmp2sy5k0o9.swift:24:9: error:\
    \ invalid redeclaration of 'note_length'\n    var note_length = 0\n        ^\n\
    /tmp/tmp2sy5k0o9.swift:17:9: note: 'note_length' previously declared here\n  \
    \  var note_length = 0\n        ^\n/tmp/tmp2sy5k0o9.swift:25:9: error: invalid\
    \ redeclaration of 'note_length'\n    var note_length = 0\n        ^\n/tmp/tmp2sy5k0o9.swift:17:9:\
    \ note: 'note_length' previously declared here\n    var note_length = 0\n    \
    \    ^\n/tmp/tmp2sy5k0o9.swift:26:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = 0\n        ^\n/tmp/tmp2sy5k0o9.swift:17:9: note: 'note_length'\
    \ previously declared here\n    var note_length = 0\n        ^\n/tmp/tmp2sy5k0o9.swift:27:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = 0\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_index2\
    \ = 0\n    var current_note_length_index3 = 0\n    var current_note_length_index4\
    \ = 0\n    var current_note_length_index5 = 0\n    var current_note_length_index6\
    \ = 0\n    var current_note_length_index7 = 0\n    var current_note_length_index8\
    \ = 0\n    var current_note_length_index9 = 0\n    var current_note_length_index10\
    \ = 0\n    var current_note_length_index11 = 0\n    var current_note_length_index12\
    \ = 0\n    var current_note_length_index13 = 0\n    var current_note_length_index14\
    \ = 0\n    var current_note_length_index15 = 0\n    var current_note_length_index16\
    \ = 0\n    var current_note_length_index17 = 0\n    var current_note_length_index18\
    \ = 0\n    var current_note_length_index19 = 0\n    var current_note_length_index20\
    \ = 0\n    var current_note_length_index21 = 0\n    var current_note_length_index22\
    \ = 0\n    var current_note_length_index23 = 0\n    var current_note_length_index24\
    \ = 0\n    var current_note_length_index25 = 0\n    var current_note_length_index26\
    \ = 0\n    var current_note_length_index27 = 0\n    var current_note_length_index28\
    \ = 0\n    var current_note_length_index29 = 0\n    var current_note_length_index30\
    \ = 0\n    var current_note_length_index31 = 0\n    var current_note_length_index32\
    \ = 0\n    var current_note_length_index33 = 0\n    var current_note_length_index34\
    \ = 0\n    var current_note_length_index35 = 0\n    var current_note_length_index36\
    \ = 0\n    var current_note_length_index37 = 0\n    var current_note_length_index38\
    \ = 0\n    var current_note_length_index39 = 0\n    var current_note_length_index40\
    \ = 0\n    var current_note_length_index41 = 0\n    var current_note_length_index42\
    \ = 0\n    var current_note_length_index43 = 0\n    var current_note_length_index44\
    \ = 0\n    var current_note_length_index45 = 0\n    var current_note_length_index46\
    \ = 0\n    var current_note_length_index47 = 0\n    var current_note_length_index48\
    \ = 0\n    var current_note_length_index49 = 0\n    var current_note_length_index50\
    \ = 0\n    var current_note_length_index51 = 0\n    var current_note_length_index52\
    \ = 0\n    var current_note_length_index53 = 0\n    var current_note_length_index54\
    \ = 0\n    var current_note_length_index55 = 0\n    var current_note_length_index56\
    \ = 0\n    var current_note_length_index57 = 0\n    var current_note_length_index58\
    \ = 0\n    var current_note_length_index59 = 0\n    var current_note_length_index60\
    \ = 0\n    var current_note_length_index61 = 0\n    var current_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp0wy14t_z.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var current_beat = 0\n    var current_note = 0\n\
    \    var current_note_length = 0\n    var current_note_length_count = 0\n    var\
    \ current_note_length_index = 0\n    var current_note_length_index2 = 0\n    var\
    \ current_note_length_index3 = 0\n    var current_note_length_index4 = 0\n   \
    \ var current_note_length_index5 = 0\n    var current_note_length_index6 = 0\n\
    \    var current_note_length_index7 = 0\n    var current_note_length_index8 =\
    \ 0\n    var current_note_length_index9 = 0\n    var current_note_length_index10\
    \ = 0\n    var current_note_length_index11 = 0\n    var current_note_length_index12\
    \ = 0\n    var current_note_length_index13 = 0\n    var current_note_length_index14\
    \ = 0\n    var current_note_length_index15 = 0\n    var current_note_length_index16\
    \ = 0\n    var current_note_length_index17 = 0\n    var current_note_length_index18\
    \ = 0\n    var current_note_length_index19 = 0\n    var current_note_length_index20\
    \ = 0\n    var current_note_length_index21 = 0\n    var current_note_length_index22\
    \ = 0\n    var current_note_length_index23 = 0\n    var current_note_length_index24\
    \ = 0\n    var current_note_length_index25 = 0\n    var current_note_length_index26\
    \ = 0\n    var current_note_length_index27 = 0\n    var current_note_length_index28\
    \ = 0\n    var current_note_length_index29 = 0\n    var current_note_length_index30\
    \ = 0\n    var current_note_length_index31 = 0\n    var current_note_length_index32\
    \ = 0\n    var current_note_length_index33 = 0\n    var current_note_length_index34\
    \ = 0\n    var current_note_length_index35 = 0\n    var current_note_length_index36\
    \ = 0\n    var current_note_length_index37 = 0\n    var current_note_length_index38\
    \ = 0\n    var current_note_length_index39 = 0\n    var current_note_length_index40\
    \ = 0\n    var current_note_length_index41 = 0\n    var current_note_length_index42\
    \ = 0\n    var current_note_length_index43 = 0\n    var current_note_length_index44\
    \ = 0\n    var current_note_length_index45 = 0\n    var current_note_length_index46\
    \ = 0\n    var current_note_length_index47 = 0\n    var current_note_length_index48\
    \ = 0\n    var current_note_length_index49 = 0\n    var current_note_length_index50\
    \ = 0\n    var current_note_length_index51 = 0\n    var current_note_length_index52\
    \ = 0\n    var current_note_length_index53 = 0\n    var current_note_length_index54\
    \ = 0\n    var current_note_length_index55 = 0\n    var current_note_length_index56\
    \ = 0\n    var current_note_length_index57 = 0\n    var current_note_length_index58\
    \ = 0\n    var current_note_length_index59 = 0\n    var current_note_length_index60\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmprh8wi6_c.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_note_length_index60\n        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var current_beat = 0\n    var current_note = \"\"\n    var current_note_length\
    \ = 0\n    for c in music_string {\n        switch c {\n        case \"o\":\n\
    \            if current_note != \"\" {\n                beats.append(current_beat)\n\
    \                current_beat = 0\n                current_note = \"\"\n     \
    \           current_note_length = 0\n            }\n        case \"o|\":\n   \
    \         if current_note != \"\" {\n                beats.append(current_beat)\n\
    \                current_beat = 0\n                current_note = \"\"\n     \
    \           current_note_length = 0\n            }\n        case \"|\":\n    \
    \        if current_note != \"\" {\n                beats.append(current_beat)\n\
    \                current_beat = 0\n                current_note = \"\"\n     \
    \           current_note_length = 0\n            }\n        default:\n       \
    \     if current_note != \"\" {\n                current_note += c\n         \
    \       current_note_length += 1\n            } else {\n                current_note\
    \ = c\n                current_note_length = 1\n            }\n        }\n   \
    \ }\n    beats.append(current_beat)\n    return beats\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmptito4i00.swift:25:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n/tmp/tmptito4i00.swift:41:33: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n                current_note += c\n    \
    \                            ^\n/tmp/tmptito4i00.swift:44:32: error: cannot assign\
    \ value of type 'Character' to type 'String'\n                current_note = c\n\
    \                               ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = String()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1i2wovyq.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var note_index\
    \ = 0\n    var note_length = 0\n    var note_length_index = 0\n    var note_length_index2\
    \ = 0\n    var note_length_index3 = 0\n    var note_length_index4 = 0\n    var\
    \ note_length_index5 = 0\n    var note_length_index6 = 0\n    var note_length_index7\
    \ = 0\n    var note_length_index8 = 0\n    var note_length_index9 = 0\n    var\
    \ note_length_index10 = 0\n    var note_length_index11 = 0\n    var note_length_index12\
    \ = 0\n    var note_length_index13 = 0\n    var note_length_index14 = 0\n    var\
    \ note_length_index15 = 0\n    var note_length_index16 = 0\n    var note_length_index17\
    \ = 0\n    var note_length_index18 = 0\n    var note_length_index19 = 0\n    var\
    \ note_length_index20 = 0\n    var note_length_index21 = 0\n    var note_length_index22\
    \ = 0\n    var note_length_index23 = 0\n    var note_length_index24 = 0\n    var\
    \ note_length_index25 = 0\n    var note_length_index26 = 0\n    var note_length_index27\
    \ = 0\n    var note_length_index28 = 0\n    var note_length_index29 = 0\n    var\
    \ note_length_index30 = 0\n    var note_length_index31 = 0\n    var note_length_index32\
    \ = 0\n    var note_length_index33 = 0\n    var note_length_index34 = 0\n    var\
    \ note_length_index35 = 0\n    var note_length_index36 = 0\n    var note_length_index37\
    \ = 0\n    var note_length_index38 = 0\n    var note_length_index39 = 0\n    var\
    \ note_length_index40 = 0\n    var note_length_index41 = 0\n    var note_length_index42\
    \ = 0\n    var note_length_index43 = 0\n    var note_length_index44 = 0\n    var\
    \ note_length_index45 = 0\n    var note_length_index46 = 0\n    var note_length_index47\
    \ = 0\n    var note_length_index48 = 0\n    var note_length_index49 = 0\n    var\
    \ note_length_index50 = 0\n    var note_length_index51 = 0\n    var note_length_index52\
    \ = 0\n    var note_length_index53 = 0\n    var note_length_index54 = 0\n    var\
    \ note_length_index55 = 0\n    var note_length_index56 = 0\n    var note_length_index57\
    \ = 0\n    var note_length_index58 = 0\n    var note_length_index59 = 0\n    var\
    \ note_length_index60 = 0\n    var note_length_index61 = 0\n    var note_length_index62\
    \ = 0\n    var note_length_index63 = 0\n    var note_length_index64 = 0\n    var\
    \ note_length_index65 = 0\n    var note_length_index66 = 0\n    var note_length_index67\
    \ = 0\n    var note_length_index68 = 0\n    var note_length_index69\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpw3qfzgtg.swift:86:9: error: type annotation missing in pattern\n\
    \    var note_length_index69\n        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = 0\n    var last =\
    \ 0\n    var lastNote = 0\n    var lastBeat = 0\n    var lastBeatNote = 0\n  \
    \  var lastBeatNoteBeat = 0\n    var lastBeatNoteBeatNote = 0\n    var lastBeatNoteBeatNoteBeat\
    \ = 0\n    var lastBeatNoteBeatNoteBeatNote = 0\n    var lastBeatNoteBeatNoteBeatNoteBeat\
    \ = 0\n    var lastBeatNoteBeatNoteBeatNoteBeat = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatBeat\
    \ = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatBeat = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatBeat\
    \ = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatBeat = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatBeat\
    \ = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatBeat = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatBeat\
    \ = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatBeat = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatBeat\
    \ = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatBeat = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatBeat\
    \ = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatBeat = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatBeat\
    \ = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatBeat = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatBeat\
    \ = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatBeat = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatBeat\
    \ = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatBeat = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatBeat\
    \ = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatBeat = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatBeat\
    \ = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatBeat = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatBeat\
    \ = 0\n    var lastBe\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmphrm5b0w3.swift:25:9: error: invalid redeclaration of 'lastBeatNoteBeatNoteBeatNoteBeat'\n\
    \    var lastBeatNoteBeatNoteBeatNoteBeat = 0\n        ^\n/tmp/tmphrm5b0w3.swift:24:9:\
    \ note: 'lastBeatNoteBeatNoteBeatNoteBeat' previously declared here\n    var lastBeatNoteBeatNoteBeatNoteBeat\
    \ = 0\n        ^\n/tmp/tmphrm5b0w3.swift:27:9: error: invalid redeclaration of\
    \ 'lastBeatNoteBeatNoteBeatNoteBeatBeat'\n    var lastBeatNoteBeatNoteBeatNoteBeatBeat\
    \ = 0\n        ^\n/tmp/tmphrm5b0w3.swift:26:9: note: 'lastBeatNoteBeatNoteBeatNoteBeatBeat'\
    \ previously declared here\n    var lastBeatNoteBeatNoteBeatNoteBeatBeat = 0\n\
    \        ^\n/tmp/tmphrm5b0w3.swift:28:9: error: invalid redeclaration of 'lastBeatNoteBeatNoteBeatNoteBeatBeat'\n\
    \    var lastBeatNoteBeatNoteBeatNoteBeatBeat = 0\n        ^\n/tmp/tmphrm5b0w3.swift:26:9:\
    \ note: 'lastBeatNoteBeatNoteBeatNoteBeatBeat' previously declared here\n    var\
    \ lastBeatNoteBeatNoteBeatNoteBeatBeat = 0\n        ^\n/tmp/tmphrm5b0w3.swift:29:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatNoteBeatNoteBeatBeat'\n   \
    \ var lastBeatNoteBeatNoteBeatNoteBeatBeat = 0\n        ^\n/tmp/tmphrm5b0w3.swift:26:9:\
    \ note: 'lastBeatNoteBeatNoteBeatNoteBeatBeat' previously declared here\n    var\
    \ lastBeatNoteBeatNoteBeatNoteBeatBeat = 0\n        ^\n/tmp/tmphrm5b0w3.swift:30:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatNoteBeatNoteBeatBeat'\n   \
    \ var lastBeatNoteBeatNoteBeatNoteBeatBeat = 0\n        ^\n/tmp/tmphrm5b0w3.swift:26:9:\
    \ note: 'lastBeatNoteBeatNoteBeatNoteBeatBeat' previously declared here\n    var\
    \ lastBeatNoteBeatNoteBeatNoteBeatBeat = 0\n        ^\n/tmp/tmphrm5b0w3.swift:31:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatNoteBeatNoteBeatBeat'\n   \
    \ var lastBeatNoteBeatNoteBeatNoteBeatBeat = 0\n        ^\n/tmp/tmphrm5b0w3.swift:26:9:\
    \ note: 'lastBeatNoteBeatNoteBeatNoteBeatBeat' previously declared here\n    var\
    \ lastBeatNoteBeatNoteBeatNoteBeatBeat = 0\n        ^\n/tmp/tmphrm5b0w3.swift:32:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatNoteBeatNoteBeatBeat'\n   \
    \ var lastBeatNoteBeatNoteBeatNoteBeatBeat = 0\n        ^\n/tm"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var beats_count = 0\n    var current_beat = 0\n    var current_note = \"\"\
    \n    var current_note_length = 0\n    var current_note_length_index = 0\n   \
    \ var current_note_length_index2 = 0\n    var current_note_length_index3 = 0\n\
    \    var current_note_length_index4 = 0\n    var current_note_length_index5 =\
    \ 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\
    \ = 0\n    var current_note_length_index60 = 0\n    var current_note_length_index61\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpld2ehzxj.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_note_length_index61\n        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var current_note = \"\"\n    var current_beat\
    \ = 0\n    var current_note_length = 0\n    var current_note_length_index = 0\n\
    \    var current_note_length_index2 = 0\n    var current_note_length_index3 =\
    \ 0\n    var current_note_length_index4 = 0\n    var current_note_length_index5\
    \ = 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\
    \ = 0\n    var current_note_length_index60 = 0\n    var current_note_\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp3gf1k4jl.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_note_\n        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = \"\"\n    var last = 0\n    for c in music_string\
    \ {\n        if c == '.' {\n            if note != \"\" {\n                beats.append(beat)\n\
    \                beat = 0\n                note = \"\"\n            }\n      \
    \      last = 0\n        } else if c == 'o' {\n            if note != \"\" {\n\
    \                beats.append(beat)\n                beat = 0\n              \
    \  note = \"\"\n            }\n            last = 1\n        } else if c == '|'\
    \ {\n            if note != \"\" {\n                beats.append(beat)\n     \
    \           beat = 0\n                note = \"\"\n            }\n           \
    \ last = 2\n        } else {\n            if note != \"\" {\n                beats.append(beat)\n\
    \                beat = 0\n                note = \"\"\n            }\n      \
    \      last = 0\n            note += c\n        }\n    }\n    if note != \"\"\
    \ {\n        beats.append(beat)\n    }\n    return beats\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpxsdj77wa.swift:17:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '.' {\n                ^~~\n                \".\"\n\
    /tmp/tmpxsdj77wa.swift:24:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == 'o' {\n                       ^~~\n                \
    \       \"o\"\n/tmp/tmpxsdj77wa.swift:31:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '|' {\n                       ^~~\n\
    \                       \"|\"\n/tmp/tmpxsdj77wa.swift:45:21: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            note\
    \ += c\n                    ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var current_beat = 0\n    var current_note = String()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp4g0wxi5q.swift:17:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:24:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var notes = [String]()\n    var notes_length\
    \ = music_string.characters.count\n    var notes_index = 0\n    var notes_string\
    \ = \"\"\n    var notes_string_index = 0\n    var notes_string_length = music_string.characters.count\n\
    \    var notes_string_length_index = 0\n    var notes_string_length_index2 = 0\n\
    \    var notes_string_length_index3 = 0\n    var notes_string_length_index4 =\
    \ 0\n    var notes_string_length_index5 = 0\n    var notes_string_length_index6\
    \ = 0\n    var notes_string_length_index7 = 0\n    var notes_string_length_index8\
    \ = 0\n    var notes_string_length_index9 = 0\n    var notes_string_length_index10\
    \ = 0\n    var notes_string_length_index11 = 0\n    var notes_string_length_index12\
    \ = 0\n    var notes_string_length_index13 = 0\n    var notes_string_length_index14\
    \ = 0\n    var notes_string_length_index15 = 0\n    var notes_string_length_index16\
    \ = 0\n    var notes_string_length_index17 = 0\n    var notes_string_length_index18\
    \ = 0\n    var notes_string_length_index19 = 0\n    var notes_string_length_index20\
    \ = 0\n    var notes_string_length_index21 = 0\n    var notes_string_length_index22\
    \ = 0\n    var notes_string_length_index23 = 0\n    var notes_string_length_index24\
    \ = 0\n    var notes_string_length_index25 = 0\n    var notes_string_length_index26\
    \ = 0\n    var notes_string_length_index27 = 0\n    var notes_string_length_index28\
    \ = 0\n    var notes_string_length_index29 = 0\n    var notes_string_length_index30\
    \ = 0\n    var notes_string_length_index31 = 0\n    var notes_string_length_index32\
    \ = 0\n    var notes_string_length_index33 = 0\n    var notes_string_length_index34\
    \ = 0\n    var notes_string_length_index35 = 0\n    var notes_string_length_index36\
    \ = 0\n    var notes_string_length_index37 = 0\n    var notes_string_length_index38\
    \ = 0\n    var notes_string_length_index39 = 0\n    var notes_string_length_index40\
    \ = 0\n    var notes_string_length_index41 = 0\n    var notes_string_length_index42\
    \ = 0\n    var notes_string_length_index43 = 0\n    var notes_string_length_index44\
    \ = 0\n    var notes_string_length_index45 = 0\n    var notes_string_length_index46\
    \ = 0\n    var notes_string_length_index47 = 0\n    var notes_string_length_index48\
    \ = 0\n    var notes_string_length_index49 = 0\n    var notes_string_length_index50\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmprbgp3jt_.swift:71:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmprbgp3jt_.swift:16:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var notes_length = music_string.characters.count\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmprbgp3jt_.swift:20:44: error: 'characters' is unavailable:\
    \ Please use String directly\n    var notes_string_length = music_string.characters.count\n\
    \                                           ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmprbgp3jt_.swift:12:9: warning: initialization\
    \ of variable 'beats' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmprbgp3jt_.swift:13:9:\
    \ warning: initialization of variable 'beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmprbgp3jt_.swift:14:9: warning: initialization of variable 'note' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var note\
    \ = 0\n    ~~~~^~~~\n    _\n/tmp/tmprbgp3jt_.swift:15:9: warning: initialization\
    \ of variable 'notes' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmprbgp3jt_.swift:16:9:\
    \ warning: initialization of variable 'notes_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length = music_string.characters.count\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmprbgp3jt_.swift:17:9: warning: initialization\
    \ of variable 'notes_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_index = 0\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmprbgp3jt_.swift:18:9: warning: initialization of variable 'notes_string'\
    \ was never used; consider replacing with assignment to '_' or "
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var beats_counter: Int = 0\n    var current_beat: Int = 0\n    var current_note\
    \ = String()\n    var current_note_length = Int()\n    var current_note_length_index\
    \ = 0\n    var current_note_length_index2 = 0\n    var current_note_length_index3\
    \ = 0\n    var current_note_length_index4 = 0\n    var current_note_length_index5\
    \ = 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\
    \ = 0\n    var current_note_length_index60\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmprzpqtrxh.swift:76:9: error: type annotation missing in pattern\n\
    \    var current_note_length_index60\n        ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    for c in\
    \ music_string {\n        if c == 'o' {\n            notes.append(note)\n    \
    \        note = \"\"\n            beat = 0\n        } else if c == '|' {\n   \
    \         notes.append(note)\n            note = \"\"\n            beat = 0\n\
    \        } else {\n            note += String(c)\n        }\n        beats.append(beat)\n\
    \        beat += 1\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpo0kx38vp.swift:17:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpo0kx38vp.swift:21:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var last_note = 0\n    var last_beat =\
    \ 0\n    var last_beats = 0\n    var last_notes = 0\n    var last_notes_beat =\
    \ 0\n    var last_notes_beats = 0\n    var last_notes_beats_beat = 0\n    var\
    \ last_notes_beats_beats = 0\n    var last_notes_beats_beats_beat = 0\n    var\
    \ last_notes_beats_beats_beats = 0\n    var last_notes_beats_beats_beats_beat\
    \ = 0\n    var last_notes_beats_beats_beats_beats = 0\n    var last_notes_beats_beats_beats_beats_beat\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats = 0\n    var last_notes_beats_beats_beats_beats_beats_beat\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats = 0\n    var last_notes_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats = 0\n    var last_notes_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats = 0\n    var\
    \ last_notes_beats_beats_beats_beats_beats_beats_beats_beats = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats = 0\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats = 0\n    var\
    \ last_notes_beats_beats_beats_beats_beats_beats_beats_beats = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpafiulxjb.swift:31:9: error: invalid redeclaration of 'last_notes_beats_beats_beats_beats_beats_beats'\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats = 0\n        ^\n/tmp/tmpafiulxjb.swift:30:9:\
    \ note: 'last_notes_beats_beats_beats_beats_beats_beats' previously declared here\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats = 0\n        ^\n/tmp/tmpafiulxjb.swift:32:9:\
    \ error: invalid redeclaration of 'last_notes_beats_beats_beats_beats_beats_beats'\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats = 0\n        ^\n/tmp/tmpafiulxjb.swift:30:9:\
    \ note: 'last_notes_beats_beats_beats_beats_beats_beats' previously declared here\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats = 0\n        ^\n/tmp/tmpafiulxjb.swift:33:9:\
    \ error: invalid redeclaration of 'last_notes_beats_beats_beats_beats_beats_beats'\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats = 0\n        ^\n/tmp/tmpafiulxjb.swift:30:9:\
    \ note: 'last_notes_beats_beats_beats_beats_beats_beats' previously declared here\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats = 0\n        ^\n/tmp/tmpafiulxjb.swift:36:9:\
    \ error: invalid redeclaration of 'last_notes_beats_beats_beats_beats_beats_beats_beats_beats'\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats = 0\n    \
    \    ^\n/tmp/tmpafiulxjb.swift:35:9: note: 'last_notes_beats_beats_beats_beats_beats_beats_beats_beats'\
    \ previously declared here\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n        ^\n/tmp/tmpafiulxjb.swift:37:9: error: invalid redeclaration of\
    \ 'last_notes_beats_beats_beats_beats_beats_beats_beats_beats'\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n        ^\n/tmp/tmpafiulxjb.swift:35:9: note: 'last_notes_beats_beats_beats_beats_beats_beats_beats_beats'\
    \ previously declared here\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n        ^\n/tmp/tmpafiulxjb.swift:38:9: error: invalid redeclaration of\
    \ 'last_notes_beats_beats_beats_beats_beats_beats_beats_beats'\n    var last_notes_beats_beats_beats_beats_be"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var notes: [String] = []\n    var beats_cnt = 0\n    var notes_cnt = 0\n\
    \    var notes_str = \"\"\n    var notes_str_cnt = 0\n    var notes_str_cnt2 =\
    \ 0\n    var notes_str_cnt3 = 0\n    var notes_str_cnt4 = 0\n    var notes_str_cnt5\
    \ = 0\n    var notes_str_cnt6 = 0\n    var notes_str_cnt7 = 0\n    var notes_str_cnt8\
    \ = 0\n    var notes_str_cnt9 = 0\n    var notes_str_cnt10 = 0\n    var notes_str_cnt11\
    \ = 0\n    var notes_str_cnt12 = 0\n    var notes_str_cnt13 = 0\n    var notes_str_cnt14\
    \ = 0\n    var notes_str_cnt15 = 0\n    var notes_str_cnt16 = 0\n    var notes_str_cnt17\
    \ = 0\n    var notes_str_cnt18 = 0\n    var notes_str_cnt19 = 0\n    var notes_str_cnt20\
    \ = 0\n    var notes_str_cnt21 = 0\n    var notes_str_cnt22 = 0\n    var notes_str_cnt23\
    \ = 0\n    var notes_str_cnt24 = 0\n    var notes_str_cnt25 = 0\n    var notes_str_cnt26\
    \ = 0\n    var notes_str_cnt27 = 0\n    var notes_str_cnt28 = 0\n    var notes_str_cnt29\
    \ = 0\n    var notes_str_cnt30 = 0\n    var notes_str_cnt31 = 0\n    var notes_str_cnt32\
    \ = 0\n    var notes_str_cnt33 = 0\n    var notes_str_cnt34 = 0\n    var notes_str_cnt35\
    \ = 0\n    var notes_str_cnt36 = 0\n    var notes_str_cnt37 = 0\n    var notes_str_cnt38\
    \ = 0\n    var notes_str_cnt39 = 0\n    var notes_str_cnt40 = 0\n    var notes_str_cnt41\
    \ = 0\n    var notes_str_cnt42 = 0\n    var notes_str_cnt43 = 0\n    var notes_str_cnt44\
    \ = 0\n    var notes_str_cnt45 = 0\n    var notes_str_cnt46 = 0\n    var notes_str_cnt47\
    \ = 0\n    var notes_str_cnt48 = 0\n    var notes_str_cnt49 = 0\n    var notes_str_cnt50\
    \ = 0\n    var notes_str_cnt51 = 0\n    var notes_str_cnt52 = 0\n    var notes_str_cnt53\
    \ = 0\n    var notes_str_cnt\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpfjlrrsx9.swift:70:9: error: type annotation missing in pattern\n\
    \    var notes_str_cnt\n        ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var lastNote = \"\"\n    var lastNoteBeat = 0\n    var lastNoteBeatCount\
    \ = 0\n    var lastNoteBeatCount2 = 0\n    var lastNoteBeatCount3 = 0\n    var\
    \ lastNoteBeatCount4 = 0\n    var lastNoteBeatCount5 = 0\n    var lastNoteBeatCount6\
    \ = 0\n    var lastNoteBeatCount7 = 0\n    var lastNoteBeatCount8 = 0\n    var\
    \ lastNoteBeatCount9 = 0\n    var lastNoteBeatCount10 = 0\n    var lastNoteBeatCount11\
    \ = 0\n    var lastNoteBeatCount12 = 0\n    var lastNoteBeatCount13 = 0\n    var\
    \ lastNoteBeatCount14 = 0\n    var lastNoteBeatCount15 = 0\n    var lastNoteBeatCount16\
    \ = 0\n    var lastNoteBeatCount17 = 0\n    var lastNoteBeatCount18 = 0\n    var\
    \ lastNoteBeatCount19 = 0\n    var lastNoteBeatCount20 = 0\n    var lastNoteBeatCount21\
    \ = 0\n    var lastNoteBeatCount22 = 0\n    var lastNoteBeatCount23 = 0\n    var\
    \ lastNoteBeatCount24 = 0\n    var lastNoteBeatCount25 = 0\n    var lastNoteBeatCount26\
    \ = 0\n    var lastNoteBeatCount27 = 0\n    var lastNoteBeatCount28 = 0\n    var\
    \ lastNoteBeatCount29 = 0\n    var lastNoteBeatCount30 = 0\n    var lastNoteBeatCount31\
    \ = 0\n    var lastNoteBeatCount32 = 0\n    var lastNoteBeatCount33 = 0\n    var\
    \ lastNoteBeatCount34 = 0\n    var lastNoteBeatCount35 = 0\n    var lastNoteBeatCount36\
    \ = 0\n    var lastNoteBeatCount37 = 0\n    var lastNoteBeatCount38 = 0\n    var\
    \ lastNoteBeatCount39 = 0\n    var lastNoteBeatCount40 = 0\n    var lastNoteBeatCount41\
    \ = 0\n    var lastNoteBeatCount42 = 0\n    var lastNoteBeatCount43 = 0\n    var\
    \ lastNoteBeatCount44 = 0\n    var lastNoteBeatCount45 = 0\n    var lastNoteBeatCount46\
    \ = 0\n    var lastNoteBeatCount47 = 0\n    var lastNoteBeatCount48 = 0\n    var\
    \ lastNoteBeatCount49 = 0\n    var lastNoteBeatCount50 = 0\n    var lastNoteBeatCount51\
    \ = 0\n    var lastNoteBeatCount52 = 0\n    var lastNoteBeatCount53\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpga2n9aym.swift:71:9: error: type annotation missing in pattern\n\
    \    var lastNoteBeatCount53\n        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array: [Int]\
    \ = []\n    var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_string\
    \ = \"\"\n    var current_note_length_string_index = 0\n    var current_note_length_string_value\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_index = 0\n    var current_note_length_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string = \"\"\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpa4bo90my.swift:26:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_index = 0\n        ^\n\
    /tmp/tmpa4bo90my.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpa4bo90my.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpa4bo90my.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpa4bo90my.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpa4bo90my.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpa4bo90my.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpa4bo90my.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpa4bo90my.swift:31:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpa4bo90my.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpa4bo90my.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = \"\"\n    var current_note_index\
    \ = 0\n    var current_note_length = 0\n    var current_note_length_index = 0\n\
    \    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpc8fhz9gw.swift:25:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpc8fhz9gw.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpc8fhz9gw.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpc8fhz9gw.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpc8fhz9gw.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpc8fhz9gw.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpc8fhz9gw.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpc8fhz9gw.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpc8fhz9gw.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpc8fhz9gw.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpc8fhz9gw.swift:30:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpc8fhz9gw.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_valu"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var beats_counter: Int = 0\n    var current_note = String()\n    var current_beat:\
    \ Int = 0\n    var current_beat_counter: Int = 0\n    var current_beat_counter_reset:\
    \ Int = 0\n    var current_beat_counter_reset_value: Int = 0\n    var current_beat_counter_reset_value_2:\
    \ Int = 0\n    var current_beat_counter_reset_value_3: Int = 0\n    var current_beat_counter_reset_value_4:\
    \ Int = 0\n    var current_beat_counter_reset_value_5: Int = 0\n    var current_beat_counter_reset_value_6:\
    \ Int = 0\n    var current_beat_counter_reset_value_7: Int = 0\n    var current_beat_counter_reset_value_8:\
    \ Int = 0\n    var current_beat_counter_reset_value_9: Int = 0\n    var current_beat_counter_reset_value_10:\
    \ Int = 0\n    var current_beat_counter_reset_value_11: Int = 0\n    var current_beat_counter_reset_value_12:\
    \ Int = 0\n    var current_beat_counter_reset_value_13: Int = 0\n    var current_beat_counter_reset_value_14:\
    \ Int = 0\n    var current_beat_counter_reset_value_15: Int = 0\n    var current_beat_counter_reset_value_16:\
    \ Int = 0\n    var current_beat_counter_reset_value_17: Int = 0\n    var current_beat_counter_reset_value_18:\
    \ Int = 0\n    var current_beat_counter_reset_value_19: Int = 0\n    var current_beat_counter_reset_value_20:\
    \ Int = 0\n    var current_beat_counter_reset_value_21: Int = 0\n    var current_beat_counter_reset_value_22:\
    \ Int = 0\n    var current_beat_counter_reset_value_23: Int = 0\n    var current_beat_counter_reset_value_24:\
    \ Int = 0\n    var current_beat_counter_reset_value_25: Int = 0\n    var current_beat_counter_reset_value_26:\
    \ Int = 0\n    var current_beat_counter_reset_value_27: Int = 0\n    var current_beat_counter_reset_value_28:\
    \ Int = 0\n    var current_beat_counter_reset_value_29: Int = 0\n    var current_beat_counter_reset_value_30:\
    \ Int = 0\n    var current_beat_counter_reset_value_31: Int = 0\n    var current_beat_counter_reset_value_32:\
    \ Int = 0\n    var current_beat_counter_reset_value_33: Int = 0\n    var current_beat_counter_reset_value_34:\
    \ Int = 0\n    var current_beat_counter_reset_value_35: Int = 0\n    var current_beat_counter_reset_value_36:\
    \ Int = 0\n    var current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmphv4dtzgp.swift:54:9: error: type annotation missing in pattern\n\
    \    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = 0\n    var note_count\
    \ = 0\n    var last_note = String()\n    var last_beat = 0\n    var last_beat_count\
    \ = 0\n    var last_note_beat = 0\n    var last_note_beat_count = 0\n    var last_note_note\
    \ = 0\n    var last_note_note_count = 0\n    var last_note_note_beat = 0\n   \
    \ var last_note_note_beat_count = 0\n    var last_note_note_note = 0\n    var\
    \ last_note_note_note_count = 0\n    var last_note_note_note_beat = 0\n    var\
    \ last_note_note_note_beat_count = 0\n    var last_note_note_note_note = 0\n \
    \   var last_note_note_note_note_count = 0\n    var last_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_beat_count = 0\n    var last_note_note_note_note_note\
    \ = 0\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_beat_count = 0\n    var last_note_note_note_note_note\
    \ = 0\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_beat_count = 0\n    var last_note_note_note_note_note\
    \ = 0\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_beat_count = 0\n    var last_note_note_note_note_note\
    \ = 0\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_beat_count = 0\n    var last_note_note_note_note_note\
    \ = 0\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_beat_count = 0\n    var last_note_note_note_note_note\
    \ = 0\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_beat_count = 0\n    var last_note_note_note_note_note\
    \ = 0\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_beat_count = 0\n    var last_note_note_note_note_note\
    \ = 0\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_beat_count = 0\n    var last_note_note_note_note_note\
    \ = 0\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_beat_count = 0\n    var last_note_note_note_note_note\
    \ = 0\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note_beat\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmptje7wszn.swift:35:9: error: invalid redeclaration of 'last_note_note_note_note_count'\n\
    \    var last_note_note_note_note_count = 0\n        ^\n/tmp/tmptje7wszn.swift:31:9:\
    \ note: 'last_note_note_note_note_count' previously declared here\n    var last_note_note_note_note_count\
    \ = 0\n        ^\n/tmp/tmptje7wszn.swift:36:9: error: invalid redeclaration of\
    \ 'last_note_note_note_note_beat'\n    var last_note_note_note_note_beat = 0\n\
    \        ^\n/tmp/tmptje7wszn.swift:32:9: note: 'last_note_note_note_note_beat'\
    \ previously declared here\n    var last_note_note_note_note_beat = 0\n      \
    \  ^\n/tmp/tmptje7wszn.swift:37:9: error: invalid redeclaration of 'last_note_note_note_note_beat_count'\n\
    \    var last_note_note_note_note_beat_count = 0\n        ^\n/tmp/tmptje7wszn.swift:33:9:\
    \ note: 'last_note_note_note_note_beat_count' previously declared here\n    var\
    \ last_note_note_note_note_beat_count = 0\n        ^\n/tmp/tmptje7wszn.swift:38:9:\
    \ error: invalid redeclaration of 'last_note_note_note_note_note'\n    var last_note_note_note_note_note\
    \ = 0\n        ^\n/tmp/tmptje7wszn.swift:34:9: note: 'last_note_note_note_note_note'\
    \ previously declared here\n    var last_note_note_note_note_note = 0\n      \
    \  ^\n/tmp/tmptje7wszn.swift:39:9: error: invalid redeclaration of 'last_note_note_note_note_count'\n\
    \    var last_note_note_note_note_count = 0\n        ^\n/tmp/tmptje7wszn.swift:31:9:\
    \ note: 'last_note_note_note_note_count' previously declared here\n    var last_note_note_note_note_count\
    \ = 0\n        ^\n/tmp/tmptje7wszn.swift:40:9: error: invalid redeclaration of\
    \ 'last_note_note_note_note_beat'\n    var last_note_note_note_note_beat = 0\n\
    \        ^\n/tmp/tmptje7wszn.swift:32:9: note: 'last_note_note_note_note_beat'\
    \ previously declared here\n    var last_note_note_note_note_beat = 0\n      \
    \  ^\n/tmp/tmptje7wszn.swift:41:9: error: invalid redeclaration of 'last_note_note_note_note_beat_count'\n\
    \    var last_note_note_note_note_beat_count = 0\n        ^\n/tmp/tmptje7wszn.swift:33:9:\
    \ note: 'last_note_note_note_note_beat_count' previously declared here\n    var\
    \ last_note_note_note"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = Int()\n    var note_count = 0\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpwvh8krw6.swift:17:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = Int()\n        ^\n/tmp/tmpwvh8krw6.swift:16:9: note: 'note_length'\
    \ previously declared here\n    var note_length = Int()\n        ^\n/tmp/tmpwvh8krw6.swift:18:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = Int()\n\
    \        ^\n/tmp/tmpwvh8krw6.swift:16:9: note: 'note_length' previously declared\
    \ here\n    var note_length = Int()\n        ^\n/tmp/tmpwvh8krw6.swift:19:9: error:\
    \ invalid redeclaration of 'note_length'\n    var note_length = Int()\n      \
    \  ^\n/tmp/tmpwvh8krw6.swift:16:9: note: 'note_length' previously declared here\n\
    \    var note_length = Int()\n        ^\n/tmp/tmpwvh8krw6.swift:20:9: error: invalid\
    \ redeclaration of 'note_length'\n    var note_length = Int()\n        ^\n/tmp/tmpwvh8krw6.swift:16:9:\
    \ note: 'note_length' previously declared here\n    var note_length = Int()\n\
    \        ^\n/tmp/tmpwvh8krw6.swift:21:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = Int()\n        ^\n/tmp/tmpwvh8krw6.swift:16:9: note: 'note_length'\
    \ previously declared here\n    var note_length = Int()\n        ^\n/tmp/tmpwvh8krw6.swift:22:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = Int()\n\
    \        ^\n/tmp/tmpwvh8krw6.swift:16:9: note: 'note_length' previously declared\
    \ here\n    var note_length = Int()\n        ^\n/tmp/tmpwvh8krw6.swift:23:9: error:\
    \ invalid redeclaration of 'note_length'\n    var note_length = Int()\n      \
    \  ^\n/tmp/tmpwvh8krw6.swift:16:9: note: 'note_length' previously declared here\n\
    \    var note_length = Int()\n        ^\n/tmp/tmpwvh8krw6.swift:24:9: error: invalid\
    \ redeclaration of 'note_length'\n    var note_length = Int()\n        ^\n/tmp/tmpwvh8krw6.swift:16:9:\
    \ note: 'note_length' previously declared here\n    var note_length = Int()\n\
    \        ^\n/tmp/tmpwvh8krw6.swift:25:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = Int()\n        ^\n/tmp/tmpwvh8krw6.swift:16:9: note: 'note_length'\
    \ previously declared here\n    var note_length = Int()\n        ^\n/tmp/tmpwvh8krw6.swift:"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var note_index\
    \ = 0\n    var note_index2 = 0\n    var note_index3 = 0\n    var note_index4 =\
    \ 0\n    var note_index5 = 0\n    var note_index6 = 0\n    var note_index7 = 0\n\
    \    var note_index8 = 0\n    var note_index9 = 0\n    var note_index10 = 0\n\
    \    var note_index11 = 0\n    var note_index12 = 0\n    var note_index13 = 0\n\
    \    var note_index14 = 0\n    var note_index15 = 0\n    var note_index16 = 0\n\
    \    var note_index17 = 0\n    var note_index18 = 0\n    var note_index19 = 0\n\
    \    var note_index20 = 0\n    var note_index21 = 0\n    var note_index22 = 0\n\
    \    var note_index23 = 0\n    var note_index24 = 0\n    var note_index25 = 0\n\
    \    var note_index26 = 0\n    var note_index27 = 0\n    var note_index28 = 0\n\
    \    var note_index29 = 0\n    var note_index30 = 0\n    var note_index31 = 0\n\
    \    var note_index32 = 0\n    var note_index33 = 0\n    var note_index34 = 0\n\
    \    var note_index35 = 0\n    var note_index36 = 0\n    var note_index37 = 0\n\
    \    var note_index38 = 0\n    var note_index39 = 0\n    var note_index40 = 0\n\
    \    var note_index41 = 0\n    var note_index42 = 0\n    var note_index43 = 0\n\
    \    var note_index44 = 0\n    var note_index45 = 0\n    var note_index46 = 0\n\
    \    var note_index47 = 0\n    var note_index48 = 0\n    var note_index49 = 0\n\
    \    var note_index50 = 0\n    var note_index51 = 0\n    var note_index52 = 0\n\
    \    var note_index53 = 0\n    var note_index54 = 0\n    var note_index55 = 0\n\
    \    var note_index56 = 0\n    var note_index57 = 0\n    var note_index58 = 0\n\
    \    var note_index59 = 0\n    var note_index60 = 0\n    var note_index61 = 0\n\
    \    var note_index62 = 0\n    var note_index63 = 0\n    var note_index64 = 0\n\
    \    var note_index65 = 0\n    var note_index66 = 0\n    var note_index67 = 0\n\
    \    var note_index68 = 0\n    var note_index69 = 0\n    var note_index70 = 0\n\
    \    var note_index71 = 0\n    var note_index72 = 0\n    var note_index73 = 0\n\
    \    var note_index74 = 0\n    var note_index75 = 0\n    var note_index76 = 0\n\
    \    var note_index77 = 0\n    var note_index78 = 0\n    var note_index79 = 0\n\
    \    var note_index80 = 0\n    var note_index81 = 0\n    var note_index82 = 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpfznnfw3c.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpfznnfw3c.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmpfznnfw3c.swift:14:9:\
    \ warning: initialization of variable 'beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmpfznnfw3c.swift:15:9: warning: initialization of variable 'note' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var note\
    \ = \"\"\n    ~~~~^~~~\n    _\n/tmp/tmpfznnfw3c.swift:16:9: warning: initialization\
    \ of variable 'note_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_index = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpfznnfw3c.swift:17:9:\
    \ warning: initialization of variable 'note_index2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_index2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpfznnfw3c.swift:18:9: warning: initialization of variable 'note_index3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_index3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpfznnfw3c.swift:19:9:\
    \ warning: initialization of variable 'note_index4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_index4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpfznnfw3c.swift:20:9: warning: initialization of variable 'note_index5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_index5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpfznnfw3c.swift:21:9:\
    \ warning: initialization of variable 'note_index6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_index6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpfznnfw3c.swift:22:9: warning: initialization of variable 'note_index7'\
    \ was never used"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var beats_count = 0\n    var note_count = 0\n    var note_char = \"\"\n \
    \   var note_char_count = 0\n    var note_char_index = 0\n    var note_char_index2\
    \ = 0\n    var note_char_index3 = 0\n    var note_char_index4 = 0\n    var note_char_index5\
    \ = 0\n    var note_char_index6 = 0\n    var note_char_index7 = 0\n    var note_char_index8\
    \ = 0\n    var note_char_index9 = 0\n    var note_char_index10 = 0\n    var note_char_index11\
    \ = 0\n    var note_char_index12 = 0\n    var note_char_index13 = 0\n    var note_char_index14\
    \ = 0\n    var note_char_index15 = 0\n    var note_char_index16 = 0\n    var note_char_index17\
    \ = 0\n    var note_char_index18 = 0\n    var note_char_index19 = 0\n    var note_char_index20\
    \ = 0\n    var note_char_index21 = 0\n    var note_char_index22 = 0\n    var note_char_index23\
    \ = 0\n    var note_char_index24 = 0\n    var note_char_index25 = 0\n    var note_char_index26\
    \ = 0\n    var note_char_index27 = 0\n    var note_char_index28 = 0\n    var note_char_index29\
    \ = 0\n    var note_char_index30 = 0\n    var note_char_index31 = 0\n    var note_char_index32\
    \ = 0\n    var note_char_index33 = 0\n    var note_char_index34 = 0\n    var note_char_index35\
    \ = 0\n    var note_char_index36 = 0\n    var note_char_index37 = 0\n    var note_char_index38\
    \ = 0\n    var note_char_index39 = 0\n    var note_char_index40 = 0\n    var note_char_index41\
    \ = 0\n    var note_char_index42 = 0\n    var note_char_index43 = 0\n    var note_char_index44\
    \ = 0\n    var note_char_index45 = 0\n    var note_char_index46 = 0\n    var note_char_index47\
    \ = 0\n    var note_char_index48 = 0\n    var note_char_index49 = 0\n    var note_char_index50\
    \ = 0\n    var note_char_index51 = 0\n    var note_char_index52 = 0\n    var note_char_index53\
    \ = 0\n    var note_char_index54 = 0\n    var note_char_index55 = 0\n    var note_char_index56\
    \ = 0\n    var note_char_index57 = 0\n    var note_char_index58 = 0\n    var note_char_index59\
    \ = 0\n    var note_char_index60 = 0\n    var note_char_index61 = 0\n    var note_char_index62\
    \ = 0\n    var note_char_index63 = 0\n    var note_char_index64 = 0\n    var note_char_index65\
    \ = 0\n    var note_char_index66 = 0\n    var note_char_index67 = 0\n    var note_char_index68\
    \ = 0\n    var note_char_index69 = 0\n    var note_char\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbnlcaio2.swift:86:9: error: type annotation missing in pattern\n\
    \    var note_char\n        ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = String()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1i2wovyq.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array: [Int]\
    \ = []\n    var current_beat = 0\n    var current_note = \"\"\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_index2\
    \ = 0\n    var current_note_length_index3 = 0\n    var current_note_length_index4\
    \ = 0\n    var current_note_length_index5 = 0\n    var current_note_length_index6\
    \ = 0\n    var current_note_length_index7 = 0\n    var current_note_length_index8\
    \ = 0\n    var current_note_length_index9 = 0\n    var current_note_length_index10\
    \ = 0\n    var current_note_length_index11 = 0\n    var current_note_length_index12\
    \ = 0\n    var current_note_length_index13 = 0\n    var current_note_length_index14\
    \ = 0\n    var current_note_length_index15 = 0\n    var current_note_length_index16\
    \ = 0\n    var current_note_length_index17 = 0\n    var current_note_length_index18\
    \ = 0\n    var current_note_length_index19 = 0\n    var current_note_length_index20\
    \ = 0\n    var current_note_length_index21 = 0\n    var current_note_length_index22\
    \ = 0\n    var current_note_length_index23 = 0\n    var current_note_length_index24\
    \ = 0\n    var current_note_length_index25 = 0\n    var current_note_length_index26\
    \ = 0\n    var current_note_length_index27 = 0\n    var current_note_length_index28\
    \ = 0\n    var current_note_length_index29 = 0\n    var current_note_length_index30\
    \ = 0\n    var current_note_length_index31 = 0\n    var current_note_length_index32\
    \ = 0\n    var current_note_length_index33 = 0\n    var current_note_length_index34\
    \ = 0\n    var current_note_length_index35 = 0\n    var current_note_length_index36\
    \ = 0\n    var current_note_length_index37 = 0\n    var current_note_length_index38\
    \ = 0\n    var current_note_length_index39 = 0\n    var current_note_length_index40\
    \ = 0\n    var current_note_length_index41 = 0\n    var current_note_length_index42\
    \ = 0\n    var current_note_length_index43 = 0\n    var current_note_length_index44\
    \ = 0\n    var current_note_length_index45 = 0\n    var current_note_length_index46\
    \ = 0\n    var current_note_length_index47 = 0\n    var current_note_length_index48\
    \ = 0\n    var current_note_length_index49 = 0\n    var current_note_length_index50\
    \ = 0\n    var current_note_length_index51 = 0\n    var current_note_length_index52\
    \ = 0\n    var current_note_length_index53 = 0\n    var current_note_length_index54\
    \ = 0\n    var current_note_length_index55 = 0\n    var current_note_length_index56\
    \ = 0\n    var current_note_length_index57 = 0\n    var current_note_length_index58\
    \ = 0\n    var current_note_length_index59 = 0\n    var current_note_length_index60\
    \ = 0\n    var current_note_length_index61 = 0\n    var \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpjzfap1md.swift:77:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpjzfap1md.swift:12:9: warning: variable 'beats_array' was never used;\
    \ consider replacing with '_' or removing it\n    var beats_array: [Int] = []\n\
    \        ^~~~~~~~~~~\n        _\n/tmp/tmpjzfap1md.swift:13:9: warning: initialization\
    \ of variable 'current_beat' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var current_beat = 0\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmpjzfap1md.swift:14:9: warning: initialization of variable 'current_note'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var current_note = \"\"\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpjzfap1md.swift:15:9:\
    \ warning: initialization of variable 'current_note_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var current_note_length\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpjzfap1md.swift:16:9: warning:\
    \ initialization of variable 'current_note_length_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var current_note_length_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpjzfap1md.swift:17:9:\
    \ warning: initialization of variable 'current_note_length_index2' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpjzfap1md.swift:18:9:\
    \ warning: initialization of variable 'current_note_length_index3' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_index3\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpjzfap1md.swift:19:9:\
    \ warning: initialization of variable 'current_note_length_index4' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_index4\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpjzfap1md.swift:20:9:\
    \ warning: initialization of variable 'current_note_length_index5' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    va"
  stdout: ''
  timestamp: 1660013790
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array = [Int]()\n\
    \    var current_beat = 0\n    var current_note = \"\"\n    for character in music_string\
    \ {\n        if character == \"o\" {\n            beats_array.append(current_beat)\n\
    \            current_beat = 0\n            current_note = \"o\"\n        } else\
    \ if character == \"|\" {\n            beats_array.append(current_beat)\n    \
    \        current_beat = 0\n            current_note = \"|\"\n        } else if\
    \ character == \".\" {\n            beats_array.append(current_beat)\n       \
    \     current_beat = 0\n            current_note = \".\"\n        } else {\n \
    \           current_beat += 1\n        }\n    }\n    beats_array.append(current_beat)\n\
    \    return beats_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpiv8okj52/tmpiv8okj52.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a345d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a342ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a342ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a342cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiv8okj52                        0x000055c647c8865e <unavailable> + 5726

    5    libc.so.6                          0x00002b0a347c3460 __libc_start_main +
    245

    6    tmpiv8okj52                        0x000055c647c882a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var note = String()\n    var last_note = String()\n\
    \    var last_beat = Int()\n    var last_beat_count = 0\n    var last_note_count\
    \ = 0\n    var last_note_beat = Int()\n    var last_note_beat_count = 0\n    var\
    \ last_note_beat_note = String()\n    var last_note_beat_note_count = 0\n    var\
    \ last_note_beat_note_beat = Int()\n    var last_note_beat_note_beat_count = 0\n\
    \    var last_note_beat_note_beat_note = String()\n    var last_note_beat_note_beat_note_count\
    \ = 0\n    var last_note_beat_note_beat_note_beat = Int()\n    var last_note_beat_note_beat_note_beat_count\
    \ = 0\n    var last_note_beat_note_beat_note_beat_note = String()\n    var last_note_beat_note_beat_note_beat_note_count\
    \ = 0\n    var last_note_beat_note_beat_note_beat_note_beat = Int()\n    var last_note_beat_note_beat_note_beat_note_beat_count\
    \ = 0\n    var last_note_beat_note_beat_note_beat_note_beat_note = String()\n\
    \    var last_note_beat_note_beat_note_beat_note_beat_note_count = 0\n    var\
    \ last_note_beat_note_beat_note_beat_note_beat_note_beat = Int()\n    var last_note_beat_note_beat_note_beat_note_beat_note_count\
    \ = 0\n    var last_note_beat_note_beat_note_beat_note_beat_note_beat_note = String()\n\
    \    var last_note_beat_note_beat_note_beat_note_beat_note_beat_note_count = 0\n\
    \    var last_note_beat_note_beat_note_beat_note_beat_note_beat_note_beat = Int()\n\
    \    var last_note_beat_note_beat_note_beat_note_beat_note_beat_note_count = 0\n\
    \    var last_note_beat_note_beat_note_beat_note_beat_note_beat_note_beat_note\
    \ = String()\n    var last_note_beat_note_beat_note_beat_note_beat_note_beat_note_beat_note_count\
    \ = 0\n    var last_note_beat_note_beat_note_beat_note_beat_note_beat_note_beat_note_beat\
    \ = Int()\n    var last_note_beat_note_beat_note_beat_note_beat_note_beat_note_beat_note_count\
    \ = 0\n    var last_note_beat_note_beat_note_beat_note_beat_note_beat_note_beat_note_beat_note\
    \ = String()\n    var last_note_beat_note_beat_\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpg75j0ipa.swift:36:9: error: invalid redeclaration of 'last_note_beat_note_beat_note_beat_note_beat_note_count'\n\
    \    var last_note_beat_note_beat_note_beat_note_beat_note_count = 0\n       \
    \ ^\n/tmp/tmpg75j0ipa.swift:34:9: note: 'last_note_beat_note_beat_note_beat_note_beat_note_count'\
    \ previously declared here\n    var last_note_beat_note_beat_note_beat_note_beat_note_count\
    \ = 0\n        ^\n/tmp/tmpg75j0ipa.swift:40:9: error: invalid redeclaration of\
    \ 'last_note_beat_note_beat_note_beat_note_beat_note_beat_note_count'\n    var\
    \ last_note_beat_note_beat_note_beat_note_beat_note_beat_note_count = 0\n    \
    \    ^\n/tmp/tmpg75j0ipa.swift:38:9: note: 'last_note_beat_note_beat_note_beat_note_beat_note_beat_note_count'\
    \ previously declared here\n    var last_note_beat_note_beat_note_beat_note_beat_note_beat_note_count\
    \ = 0\n        ^\n/tmp/tmpg75j0ipa.swift:44:9: error: invalid redeclaration of\
    \ 'last_note_beat_note_beat_note_beat_note_beat_note_beat_note_beat_note_count'\n\
    \    var last_note_beat_note_beat_note_beat_note_beat_note_beat_note_beat_note_count\
    \ = 0\n        ^\n/tmp/tmpg75j0ipa.swift:42:9: note: 'last_note_beat_note_beat_note_beat_note_beat_note_beat_note_beat_note_count'\
    \ previously declared here\n    var last_note_beat_note_beat_note_beat_note_beat_note_beat_note_beat_note_count\
    \ = 0\n        ^\n/tmp/tmpg75j0ipa.swift:46:9: error: type annotation missing\
    \ in pattern\n    var last_note_beat_note_beat_\n        ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = 0\n    var last =\
    \ 0\n    var lastBeat = 0\n    var lastNote = 0\n    var lastBeatIndex = 0\n \
    \   var lastNoteIndex = 0\n    var lastNoteBeat = 0\n    var lastNoteBeatIndex\
    \ = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex\
    \ = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex\
    \ = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex\
    \ = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex\
    \ = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex\
    \ = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex\
    \ = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex\
    \ = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex\
    \ = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex\
    \ = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex\
    \ = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex\
    \ = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex\
    \ = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex\
    \ = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex\
    \ = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex\
    \ = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex\
    \ = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex\
    \ = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex\
    \ = 0\n    var lastNoteBeatIndex = 0\n    var lastNoteBeatIndex = 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppcl60jj8.swift:23:9: error: invalid redeclaration of 'lastNoteBeatIndex'\n\
    \    var lastNoteBeatIndex = 0\n        ^\n/tmp/tmppcl60jj8.swift:22:9: note:\
    \ 'lastNoteBeatIndex' previously declared here\n    var lastNoteBeatIndex = 0\n\
    \        ^\n/tmp/tmppcl60jj8.swift:24:9: error: invalid redeclaration of 'lastNoteBeatIndex'\n\
    \    var lastNoteBeatIndex = 0\n        ^\n/tmp/tmppcl60jj8.swift:22:9: note:\
    \ 'lastNoteBeatIndex' previously declared here\n    var lastNoteBeatIndex = 0\n\
    \        ^\n/tmp/tmppcl60jj8.swift:25:9: error: invalid redeclaration of 'lastNoteBeatIndex'\n\
    \    var lastNoteBeatIndex = 0\n        ^\n/tmp/tmppcl60jj8.swift:22:9: note:\
    \ 'lastNoteBeatIndex' previously declared here\n    var lastNoteBeatIndex = 0\n\
    \        ^\n/tmp/tmppcl60jj8.swift:26:9: error: invalid redeclaration of 'lastNoteBeatIndex'\n\
    \    var lastNoteBeatIndex = 0\n        ^\n/tmp/tmppcl60jj8.swift:22:9: note:\
    \ 'lastNoteBeatIndex' previously declared here\n    var lastNoteBeatIndex = 0\n\
    \        ^\n/tmp/tmppcl60jj8.swift:27:9: error: invalid redeclaration of 'lastNoteBeatIndex'\n\
    \    var lastNoteBeatIndex = 0\n        ^\n/tmp/tmppcl60jj8.swift:22:9: note:\
    \ 'lastNoteBeatIndex' previously declared here\n    var lastNoteBeatIndex = 0\n\
    \        ^\n/tmp/tmppcl60jj8.swift:28:9: error: invalid redeclaration of 'lastNoteBeatIndex'\n\
    \    var lastNoteBeatIndex = 0\n        ^\n/tmp/tmppcl60jj8.swift:22:9: note:\
    \ 'lastNoteBeatIndex' previously declared here\n    var lastNoteBeatIndex = 0\n\
    \        ^\n/tmp/tmppcl60jj8.swift:29:9: error: invalid redeclaration of 'lastNoteBeatIndex'\n\
    \    var lastNoteBeatIndex = 0\n        ^\n/tmp/tmppcl60jj8.swift:22:9: note:\
    \ 'lastNoteBeatIndex' previously declared here\n    var lastNoteBeatIndex = 0\n\
    \        ^\n/tmp/tmppcl60jj8.swift:30:9: error: invalid redeclaration of 'lastNoteBeatIndex'\n\
    \    var lastNoteBeatIndex = 0\n        ^\n/tmp/tmppcl60jj8.swift:22:9: note:\
    \ 'lastNoteBeatIndex' previously declared here\n    var lastNoteBeatIndex = 0\n\
    \        ^\n/tmp/tmppcl60jj8.swift:31:9: error: invalid redeclaration of 'lastNoteBeatIndex'\n\
    \    var lastNoteBeatIndex = 0\n        ^"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = String()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1i2wovyq.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array: [Int]\
    \ = []\n    var current_beat = 0\n    var current_note = \"\"\n    var current_note_index\
    \ = 0\n    for character in music_string {\n        if character == \"o\" {\n\
    \            if current_note != \"\" {\n                beats_array.append(current_beat)\n\
    \                current_beat = 0\n                current_note = \"\"\n     \
    \           current_note_index = 0\n            }\n        } else if character\
    \ == \"|\" {\n            if current_note != \"\" {\n                beats_array.append(current_beat)\n\
    \                current_beat = 0\n                current_note = \"\"\n     \
    \           current_note_index = 0\n            }\n        } else if character\
    \ == \".\" {\n            if current_note != \"\" {\n                beats_array.append(current_beat)\n\
    \                current_beat = 0\n                current_note = \"\"\n     \
    \           current_note_index = 0\n            }\n        } else {\n        \
    \    if current_note != \"\" {\n                current_note += character\n  \
    \          } else {\n                current_note = character\n            }\n\
    \            current_note_index += 1\n        }\n    }\n    beats_array.append(current_beat)\n\
    \    return beats_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpzbl3krop.swift:40:33: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n                current_note += character\n\
    \                                ^\n/tmp/tmpzbl3krop.swift:42:32: error: cannot\
    \ assign value of type 'Character' to type 'String'\n                current_note\
    \ = character\n                               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var note_count = 0\n    var note_char = \"\"\n  \
    \  var note_char_count = 0\n    var note_char_index = 0\n    var note_char_index2\
    \ = 0\n    var note_char_index3 = 0\n    var note_char_index4 = 0\n    var note_char_index5\
    \ = 0\n    var note_char_index6 = 0\n    var note_char_index7 = 0\n    var note_char_index8\
    \ = 0\n    var note_char_index9 = 0\n    var note_char_index10 = 0\n    var note_char_index11\
    \ = 0\n    var note_char_index12 = 0\n    var note_char_index13 = 0\n    var note_char_index14\
    \ = 0\n    var note_char_index15 = 0\n    var note_char_index16 = 0\n    var note_char_index17\
    \ = 0\n    var note_char_index18 = 0\n    var note_char_index19 = 0\n    var note_char_index20\
    \ = 0\n    var note_char_index21 = 0\n    var note_char_index22 = 0\n    var note_char_index23\
    \ = 0\n    var note_char_index24 = 0\n    var note_char_index25 = 0\n    var note_char_index26\
    \ = 0\n    var note_char_index27 = 0\n    var note_char_index28 = 0\n    var note_char_index29\
    \ = 0\n    var note_char_index30 = 0\n    var note_char_index31 = 0\n    var note_char_index32\
    \ = 0\n    var note_char_index33 = 0\n    var note_char_index34 = 0\n    var note_char_index35\
    \ = 0\n    var note_char_index36 = 0\n    var note_char_index37 = 0\n    var note_char_index38\
    \ = 0\n    var note_char_index39 = 0\n    var note_char_index40 = 0\n    var note_char_index41\
    \ = 0\n    var note_char_index42 = 0\n    var note_char_index43 = 0\n    var note_char_index44\
    \ = 0\n    var note_char_index45 = 0\n    var note_char_index46 = 0\n    var note_char_index47\
    \ = 0\n    var note_char_index48 = 0\n    var note_char_index49 = 0\n    var note_char_index50\
    \ = 0\n    var note_char_index51 = 0\n    var note_char_index52 = 0\n    var note_char_index53\
    \ = 0\n    var note_char_index54 = 0\n    var note_char_index55 = 0\n    var note_char_index56\
    \ = 0\n    var note_char_index57 = 0\n    var note_char_index58 = 0\n    var note_char_index59\
    \ = 0\n    var note_char_index60 = 0\n    var note_char_index61 = 0\n    var note_char_index62\
    \ = 0\n    var note_char_index63 = 0\n    var note_char_index64 = 0\n    var note_char_index65\
    \ = 0\n    var note_char_index66 = 0\n    var note_char_index67 = 0\n    var note_char_index68\
    \ = 0\n    var note_char_index69 = 0\n    var note_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp994hy6ec.swift:86:9: error: type annotation missing in pattern\n\
    \    var note_\n        ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = music_string[0]\n    var current_note_length\
    \ = 4\n    for _ in 0..<music_string.count {\n        let char = music_string[current_beat]\n\
    \        switch char {\n        case \"o\":\n            beats.append(current_beat)\n\
    \            current_beat += 4\n            current_note = music_string[current_beat]\n\
    \            current_note_length = 4\n        case \"o|\":\n            beats.append(current_beat)\n\
    \            current_beat += 2\n            current_note = music_string[current_beat]\n\
    \            current_note_length = 2\n        case \".|\":\n            beats.append(current_beat)\n\
    \            current_beat += 1\n            current_note = music_string[current_beat]\n\
    \            current_note_length = 1\n        default:\n            break\n  \
    \      }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpla09bxaz.swift:14:24: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var current_note\
    \ = music_string[0]\n                       ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpla09bxaz.swift:17:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        let char = music_string[current_beat]\n\
    \                   ^~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpla09bxaz.swift:24:14: error: expression\
    \ pattern of type 'String' cannot match values of type 'Character'\n        case\
    \ \"o|\":\n             ^~~~\n/tmp/tmpla09bxaz.swift:29:14: error: expression\
    \ pattern of type 'String' cannot match values of type 'Character'\n        case\
    \ \".|\":\n             ^~~~\n/tmp/tmpla09bxaz.swift:22:28: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            current_note = music_string[current_beat]\n                     \
    \      ^~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpla09bxaz.swift:27:28: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            current_note = music_string[current_beat]\n                     \
    \      ^~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpla09bxaz.swift:32:28: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            current_note = music_string[current_beat]\n                     \
    \      ^~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var beats_count = 0\n    var current_beat = 0\n    var current_note = 0\n\
    \    var current_note_index = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp0zmxf6m.swift:67:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpp0zmxf6m.swift:26:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpp0zmxf6m.swift:24:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpp0zmxf6m.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpp0zmxf6m.swift:25:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpp0zmxf6m.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpp0zmxf6m.swift:24:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpp0zmxf6m.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpp0zmxf6m.swift:25:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpp0zmxf6m.swift:30:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpp0zmxf6m.swift:24:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpp0zmxf6m.swift:31:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpp0zmxf6m.swift:25:9:\
    \ note: 'current_note_length_value_value_value_value"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    for char\
    \ in music_string {\n        if char == \"o\" {\n            beats.append(beat)\n\
    \            notes.append(note)\n            beat = 0\n            note = \"\"\
    \n        } else if char == \"|\" {\n            beats.append(beat)\n        \
    \    notes.append(note)\n            beat = 0\n            note = \"\"\n     \
    \   } else if char == \".\" {\n            beats.append(beat)\n            notes.append(note)\n\
    \            beat = 0\n            note = \"\"\n        } else {\n           \
    \ beat += 1\n            note += char\n        }\n    }\n    beats.append(beat)\n\
    \    notes.append(note)\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpd2neso2e.swift:34:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            note += char\n             \
    \       ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    for c in music_string {\n        if c == '.' {\n            if note\
    \ != \"\" {\n                notes.append(note)\n                note = \"\"\n\
    \            }\n            beat = 0\n            last = 0\n        } else if\
    \ c == '|' {\n            if note != \"\" {\n                notes.append(note)\n\
    \                note = \"\"\n            }\n            beat = 0\n          \
    \  last = 1\n        } else if c == 'o' {\n            if note != \"\" {\n   \
    \             notes.append(note)\n                note = \"\"\n            }\n\
    \            beat = 0\n            last = 4\n        } else {\n            note\
    \ = note + String(c)\n        }\n        beats.append(beat)\n    }\n    if note\
    \ != \"\" {\n        notes.append(note)\n    }\n    return beats\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpiq_rw979.swift:18:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '.' {\n                ^~~\n                \".\"\n\
    /tmp/tmpiq_rw979.swift:25:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmpiq_rw979.swift:32:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == 'o' {\n                       ^~~\n\
    \                       \"o\"\n/tmp/tmpiq_rw979.swift:16:9: warning: variable\
    \ 'last' was written to, but never read\n    var last = 0\n        ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    for char\
    \ in music_string {\n        if char == \"o\" {\n            beats.append(beat)\n\
    \            notes.append(note)\n            beat = 0\n            note = \"\"\
    \n        } else if char == \"|\" {\n            beats.append(beat)\n        \
    \    notes.append(note)\n            beat = 0\n            note = \"\"\n     \
    \   } else {\n            note += char\n        }\n    }\n    beats.append(beat)\n\
    \    notes.append(note)\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp6gsokf7.swift:28:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            note += char\n             \
    \       ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array: [Int]\
    \ = []\n    var current_beat = 0\n    var current_note = 0\n    var current_note_string\
    \ = \"\"\n    var current_note_length = 0\n    var current_note_length_string\
    \ = \"\"\n    var current_note_length_index = 0\n    var current_note_length_index2\
    \ = 0\n    var current_note_length_index3 = 0\n    var current_note_length_index4\
    \ = 0\n    var current_note_length_index5 = 0\n    var current_note_length_index6\
    \ = 0\n    var current_note_length_index7 = 0\n    var current_note_length_index8\
    \ = 0\n    var current_note_length_index9 = 0\n    var current_note_length_index10\
    \ = 0\n    var current_note_length_index11 = 0\n    var current_note_length_index12\
    \ = 0\n    var current_note_length_index13 = 0\n    var current_note_length_index14\
    \ = 0\n    var current_note_length_index15 = 0\n    var current_note_length_index16\
    \ = 0\n    var current_note_length_index17 = 0\n    var current_note_length_index18\
    \ = 0\n    var current_note_length_index19 = 0\n    var current_note_length_index20\
    \ = 0\n    var current_note_length_index21 = 0\n    var current_note_length_index22\
    \ = 0\n    var current_note_length_index23 = 0\n    var current_note_length_index24\
    \ = 0\n    var current_note_length_index25 = 0\n    var current_note_length_index26\
    \ = 0\n    var current_note_length_index27 = 0\n    var current_note_length_index28\
    \ = 0\n    var current_note_length_index29 = 0\n    var current_note_length_index30\
    \ = 0\n    var current_note_length_index31 = 0\n    var current_note_length_index32\
    \ = 0\n    var current_note_length_index33 = 0\n    var current_note_length_index34\
    \ = 0\n    var current_note_length_index35 = 0\n    var current_note_length_index36\
    \ = 0\n    var current_note_length_index37 = 0\n    var current_note_length_index38\
    \ = 0\n    var current_note_length_index39 = 0\n    var current_note_length_index40\
    \ = 0\n    var current_note_length_index41 = 0\n    var current_note_length_index42\
    \ = 0\n    var current_note_length_index43 = 0\n    var current_note_length_index44\
    \ = 0\n    var current_note_length_index45 = 0\n    var current_note_length_index46\
    \ = 0\n    var current_note_length_index47 = 0\n    var current_note_length_index48\
    \ = 0\n    var current_note_length_index49 = 0\n    var current_note_length_index50\
    \ = 0\n    var current_note_length_index51 = 0\n    var current_note_length_index52\
    \ = 0\n    var current_note_length_index53 = 0\n    var current_note_length_index54\
    \ = 0\n    var current_note_length_index55 = 0\n    var current_note_length_index56\
    \ = 0\n    var current_note_length_index57 = 0\n    var current_note_length_index58\
    \ = 0\n    var current_note_length_index59 = 0\n    var current_note_length\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbwx7ywo7.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_note_length\n        ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var current_beat = 0\n    var current_note = 0\n\
    \    var current_note_length = 0\n    var current_note_length_index = 0\n    var\
    \ current_note_length_value = 0\n    var current_note_length_value_index = 0\n\
    \    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp51gy553a.swift:25:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp51gy553a.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp51gy553a.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp51gy553a.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp51gy553a.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp51gy553a.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp51gy553a.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp51gy553a.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp51gy553a.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp51gy553a.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp51gy553a.swift:30:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp51gy553a.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_valu"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var note_count = 0\n    var note_char = \"\"\n  \
    \  var note_char_count = 0\n    var note_char_index = 0\n    var note_char_index2\
    \ = 0\n    var note_char_index3 = 0\n    var note_char_index4 = 0\n    var note_char_index5\
    \ = 0\n    var note_char_index6 = 0\n    var note_char_index7 = 0\n    var note_char_index8\
    \ = 0\n    var note_char_index9 = 0\n    var note_char_index10 = 0\n    var note_char_index11\
    \ = 0\n    var note_char_index12 = 0\n    var note_char_index13 = 0\n    var note_char_index14\
    \ = 0\n    var note_char_index15 = 0\n    var note_char_index16 = 0\n    var note_char_index17\
    \ = 0\n    var note_char_index18 = 0\n    var note_char_index19 = 0\n    var note_char_index20\
    \ = 0\n    var note_char_index21 = 0\n    var note_char_index22 = 0\n    var note_char_index23\
    \ = 0\n    var note_char_index24 = 0\n    var note_char_index25 = 0\n    var note_char_index26\
    \ = 0\n    var note_char_index27 = 0\n    var note_char_index28 = 0\n    var note_char_index29\
    \ = 0\n    var note_char_index30 = 0\n    var note_char_index31 = 0\n    var note_char_index32\
    \ = 0\n    var note_char_index33 = 0\n    var note_char_index34 = 0\n    var note_char_index35\
    \ = 0\n    var note_char_index36 = 0\n    var note_char_index37 = 0\n    var note_char_index38\
    \ = 0\n    var note_char_index39 = 0\n    var note_char_index40 = 0\n    var note_char_index41\
    \ = 0\n    var note_char_index42 = 0\n    var note_char_index43 = 0\n    var note_char_index44\
    \ = 0\n    var note_char_index45 = 0\n    var note_char_index46 = 0\n    var note_char_index47\
    \ = 0\n    var note_char_index48 = 0\n    var note_char_index49 = 0\n    var note_char_index50\
    \ = 0\n    var note_char_index51 = 0\n    var note_char_index52 = 0\n    var note_char_index53\
    \ = 0\n    var note_char_index54 = 0\n    var note_char_index55 = 0\n    var note_char_index56\
    \ = 0\n    var note_char_index57 = 0\n    var note_char_index58 = 0\n    var note_char_index59\
    \ = 0\n    var note_char_index60 = 0\n    var note_char_index61 = 0\n    var note_char_index62\
    \ = 0\n    var note_char_index63 = 0\n    var note_char_index64 = 0\n    var note_char_index65\
    \ = 0\n    var note_char_index66 = 0\n    var note_char_index67 = 0\n    var note_char_index68\
    \ = 0\n    var note_char_index69 = 0\n    var note_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp994hy6ec.swift:86:9: error: type annotation missing in pattern\n\
    \    var note_\n        ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array = [Int]()\n\
    \    var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_string\
    \ = \"\"\n    var current_note_length_string_index = 0\n    var current_note_length_string_value\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_index = 0\n    var current_note_length_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string = \"\"\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1fnl3d1t.swift:26:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_index = 0\n        ^\n\
    /tmp/tmp1fnl3d1t.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp1fnl3d1t.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp1fnl3d1t.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp1fnl3d1t.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp1fnl3d1t.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp1fnl3d1t.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp1fnl3d1t.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp1fnl3d1t.swift:31:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp1fnl3d1t.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp1fnl3d1t.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var beats_counter: Int = 0\n    var notes_counter: Int = 0\n    var notes_string:\
    \ String = \"\"\n    var notes_string_index: Int = 0\n    var notes_string_index2:\
    \ Int = 0\n    var notes_string_index3: Int = 0\n    var notes_string_index4:\
    \ Int = 0\n    var notes_string_index5: Int = 0\n    var notes_string_index6:\
    \ Int = 0\n    var notes_string_index7: Int = 0\n    var notes_string_index8:\
    \ Int = 0\n    var notes_string_index9: Int = 0\n    var notes_string_index10:\
    \ Int = 0\n    var notes_string_index11: Int = 0\n    var notes_string_index12:\
    \ Int = 0\n    var notes_string_index13: Int = 0\n    var notes_string_index14:\
    \ Int = 0\n    var notes_string_index15: Int = 0\n    var notes_string_index16:\
    \ Int = 0\n    var notes_string_index17: Int = 0\n    var notes_string_index18:\
    \ Int = 0\n    var notes_string_index19: Int = 0\n    var notes_string_index20:\
    \ Int = 0\n    var notes_string_index21: Int = 0\n    var notes_string_index22:\
    \ Int = 0\n    var notes_string_index23: Int = 0\n    var notes_string_index24:\
    \ Int = 0\n    var notes_string_index25: Int = 0\n    var notes_string_index26:\
    \ Int = 0\n    var notes_string_index27: Int = 0\n    var notes_string_index28:\
    \ Int = 0\n    var notes_string_index29: Int = 0\n    var notes_string_index30:\
    \ Int = 0\n    var notes_string_index31: Int = 0\n    var notes_string_index32:\
    \ Int = 0\n    var notes_string_index33: Int = 0\n    var notes_string_index34:\
    \ Int = 0\n    var notes_string_index35: Int = 0\n    var notes_string_index36:\
    \ Int = 0\n    var notes_string_index37: Int = 0\n    var notes_string_index38:\
    \ Int = 0\n    var notes_string_index39: Int = 0\n    var notes_string_index40:\
    \ Int = 0\n    var notes_string_index41: Int = 0\n    var notes_string_index42:\
    \ Int = 0\n    var notes_string_index43: Int = 0\n    var notes_string_index44:\
    \ Int = 0\n    var notes_string_index45: Int = 0\n    var notes_string_index46:\
    \ Int = 0\n    var notes_string_index47: Int = 0\n    var notes_string_index48:\
    \ Int = 0\n    var notes_string_index49: Int\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpligk3xjz.swift:12:9: warning: variable 'beats' was never used;\
    \ consider replacing with '_' or removing it\n    var beats: [Int] = []\n    \
    \    ^~~~~\n        _\n/tmp/tmpligk3xjz.swift:13:9: warning: variable 'beats_counter'\
    \ was never used; consider replacing with '_' or removing it\n    var beats_counter:\
    \ Int = 0\n        ^~~~~~~~~~~~~\n        _\n/tmp/tmpligk3xjz.swift:14:9: warning:\
    \ variable 'notes_counter' was never used; consider replacing with '_' or removing\
    \ it\n    var notes_counter: Int = 0\n        ^~~~~~~~~~~~~\n        _\n/tmp/tmpligk3xjz.swift:15:9:\
    \ warning: variable 'notes_string' was never used; consider replacing with '_'\
    \ or removing it\n    var notes_string: String = \"\"\n        ^~~~~~~~~~~~\n\
    \        _\n/tmp/tmpligk3xjz.swift:16:9: warning: variable 'notes_string_index'\
    \ was never used; consider replacing with '_' or removing it\n    var notes_string_index:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpligk3xjz.swift:17:9:\
    \ warning: variable 'notes_string_index2' was never used; consider replacing with\
    \ '_' or removing it\n    var notes_string_index2: Int = 0\n        ^~~~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpligk3xjz.swift:18:9: warning: variable 'notes_string_index3'\
    \ was never used; consider replacing with '_' or removing it\n    var notes_string_index3:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpligk3xjz.swift:19:9:\
    \ warning: variable 'notes_string_index4' was never used; consider replacing with\
    \ '_' or removing it\n    var notes_string_index4: Int = 0\n        ^~~~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpligk3xjz.swift:20:9: warning: variable 'notes_string_index5'\
    \ was never used; consider replacing with '_' or removing it\n    var notes_string_index5:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpligk3xjz.swift:21:9:\
    \ warning: variable 'notes_string_index6' was never used; consider replacing with\
    \ '_' or removing it\n    var notes_string_index6: Int = 0\n        ^~~~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpligk3xjz.swift:22:9: warning: variable 'notes_string_index7'\
    \ was never used; consider replacing with '_' "
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = String()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1i2wovyq.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = \"\"\n    var last_note = \"\"\
    \n    var last_beat = 0\n    var last_beat_index = 0\n    var last_note_index\
    \ = 0\n    for char in music_string {\n        switch char {\n        case \"\
    o\":\n            if current_note != last_note {\n                beats.append(current_beat)\n\
    \                current_beat = 0\n                current_note = last_note\n\
    \            }\n            last_beat_index = 0\n            last_note_index =\
    \ 0\n            last_beat = current_beat\n            last_note = current_note\n\
    \        case \"o|\":\n            if current_note != last_note {\n          \
    \      beats.append(current_beat)\n                current_beat = 0\n        \
    \        current_note = last_note\n            }\n            last_beat_index\
    \ = 0\n            last_note_index = 0\n            last_beat = current_beat\n\
    \            last_note = current_note\n        case \"|\":\n            if current_note\
    \ != last_note {\n                beats.append(current_beat)\n               \
    \ current_beat = 0\n                current_note = last_note\n            }\n\
    \            last_beat_index = 0\n            last_note_index = 0\n          \
    \  last_beat = current_beat\n            last_note = current_note\n        default:\n\
    \            if current_note != last_note {\n                beats.append(current_beat)\n\
    \                current_beat = 0\n                current_note = last_note\n\
    \            }\n            last_beat_index = 0\n            last_note_index =\
    \ 0\n            last_beat = current_beat\n            last_note = current_note\n\
    \        }\n        current_beat = current_beat + 1\n    }\n    beats.append(current_beat)\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_udc7mqc.swift:31:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    for char\
    \ in music_string {\n        switch char {\n        case \"o\":\n            notes.append(note)\n\
    \            beats.append(beat)\n            note = \"\"\n            beat = 0\n\
    \        case \"o|\":\n            notes.append(note)\n            beats.append(beat)\n\
    \            note = \"\"\n            beat = 0\n        case \"|\":\n        \
    \    notes.append(note)\n            beats.append(beat)\n            note = \"\
    \"\n            beat = 0\n        default:\n            note += char\n       \
    \ }\n    }\n    notes.append(note)\n    beats.append(beat)\n    return beats\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpzlr124c6.swift:23:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n/tmp/tmpzlr124c6.swift:34:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            note += char\n             \
    \       ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    for char\
    \ in music_string {\n        switch char {\n        case \"o\":\n            notes.append(note)\n\
    \            note = \"\"\n            beat += 4\n        case \"o|\":\n      \
    \      notes.append(note)\n            note = \"\"\n            beat += 2\n  \
    \      case \"|\":\n            notes.append(note)\n            note = \"\"\n\
    \            beat = 1\n        default:\n            note += char\n        }\n\
    \    }\n    notes.append(note)\n    for note in notes {\n        beats.append(beat)\n\
    \    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpk1waem75.swift:22:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n/tmp/tmpk1waem75.swift:31:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            note += char\n             \
    \       ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_beats = [String]()\n    var beats_notes\
    \ = [String]()\n    var beats_notes_beats = [String]()\n    var beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats = [String]()\n    var beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats = [String]()\n\
    \    var beats_notes_beats_notes_beats_notes_beats_notes = [String]()\n    var\
    \ beats_notes_beats_notes_beats_notes_beats_notes_beats = [String]()\n    var\
    \ beats_notes_beats_notes_beats_notes_beats_notes_beats_notes = [String]()\n \
    \   var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes = [String]()\n\
    \    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats = [String]()\n\
    \    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats\
    \ = [String]()\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var beats_notes_beat\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpuu00c47y.swift:24:9: error: invalid redeclaration of 'beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\n\
    \    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes = [String]()\n\
    \        ^\n/tmp/tmpuu00c47y.swift:23:9: note: 'beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\
    \ previously declared here\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n        ^\n/tmp/tmpuu00c47y.swift:29:9: error: invalid redeclaration\
    \ of 'beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\n\
    \    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n        ^\n/tmp/tmpuu00c47y.swift:28:9: note: 'beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\
    \ previously declared here\n    var beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n        ^\n/tmp/tmpuu00c47y.swift:34:9: error: type annotation\
    \ missing in pattern\n    var beats_notes_beat\n        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var note_count = 0\n    var note_char = \"\"\n  \
    \  var note_char_count = 0\n    var note_char_index = 0\n    var note_char_index2\
    \ = 0\n    var note_char_index3 = 0\n    var note_char_index4 = 0\n    var note_char_index5\
    \ = 0\n    var note_char_index6 = 0\n    var note_char_index7 = 0\n    var note_char_index8\
    \ = 0\n    var note_char_index9 = 0\n    var note_char_index10 = 0\n    var note_char_index11\
    \ = 0\n    var note_char_index12 = 0\n    var note_char_index13 = 0\n    var note_char_index14\
    \ = 0\n    var note_char_index15 = 0\n    var note_char_index16 = 0\n    var note_char_index17\
    \ = 0\n    var note_char_index18 = 0\n    var note_char_index19 = 0\n    var note_char_index20\
    \ = 0\n    var note_char_index21 = 0\n    var note_char_index22 = 0\n    var note_char_index23\
    \ = 0\n    var note_char_index24 = 0\n    var note_char_index25 = 0\n    var note_char_index26\
    \ = 0\n    var note_char_index27 = 0\n    var note_char_index28 = 0\n    var note_char_index29\
    \ = 0\n    var note_char_index30 = 0\n    var note_char_index31 = 0\n    var note_char_index32\
    \ = 0\n    var note_char_index33 = 0\n    var note_char_index34 = 0\n    var note_char_index35\
    \ = 0\n    var note_char_index36 = 0\n    var note_char_index37 = 0\n    var note_char_index38\
    \ = 0\n    var note_char_index39 = 0\n    var note_char_index40 = 0\n    var note_char_index41\
    \ = 0\n    var note_char_index42 = 0\n    var note_char_index43 = 0\n    var note_char_index44\
    \ = 0\n    var note_char_index45 = 0\n    var note_char_index46 = 0\n    var note_char_index47\
    \ = 0\n    var note_char_index48 = 0\n    var note_char_index49 = 0\n    var note_char_index50\
    \ = 0\n    var note_char_index51 = 0\n    var note_char_index52 = 0\n    var note_char_index53\
    \ = 0\n    var note_char_index54 = 0\n    var note_char_index55 = 0\n    var note_char_index56\
    \ = 0\n    var note_char_index57 = 0\n    var note_char_index58 = 0\n    var note_char_index59\
    \ = 0\n    var note_char_index60 = 0\n    var note_char_index61 = 0\n    var note_char_index62\
    \ = 0\n    var note_char_index63 = 0\n    var note_char_index64 = 0\n    var note_char_index65\
    \ = 0\n    var note_char_index66 = 0\n    var note_char_index67 = 0\n    var note_char_index68\
    \ = 0\n    var note_char_index69 = 0\n    var note_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp994hy6ec.swift:86:9: error: type annotation missing in pattern\n\
    \    var note_\n        ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n \
    \   var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var last\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpg1e668tk.swift:19:9: error: invalid redeclaration of 'lastBeat'\n\
    \    var lastBeat = 0\n        ^\n/tmp/tmpg1e668tk.swift:17:9: note: 'lastBeat'\
    \ previously declared here\n    var lastBeat = 0\n        ^\n/tmp/tmpg1e668tk.swift:20:9:\
    \ error: invalid redeclaration of 'lastNote'\n    var lastNote = \"\"\n      \
    \  ^\n/tmp/tmpg1e668tk.swift:18:9: note: 'lastNote' previously declared here\n\
    \    var lastNote = \"\"\n        ^\n/tmp/tmpg1e668tk.swift:21:9: error: invalid\
    \ redeclaration of 'lastBeat'\n    var lastBeat = 0\n        ^\n/tmp/tmpg1e668tk.swift:17:9:\
    \ note: 'lastBeat' previously declared here\n    var lastBeat = 0\n        ^\n\
    /tmp/tmpg1e668tk.swift:22:9: error: invalid redeclaration of 'lastNote'\n    var\
    \ lastNote = \"\"\n        ^\n/tmp/tmpg1e668tk.swift:18:9: note: 'lastNote' previously\
    \ declared here\n    var lastNote = \"\"\n        ^\n/tmp/tmpg1e668tk.swift:23:9:\
    \ error: invalid redeclaration of 'lastBeat'\n    var lastBeat = 0\n        ^\n\
    /tmp/tmpg1e668tk.swift:17:9: note: 'lastBeat' previously declared here\n    var\
    \ lastBeat = 0\n        ^\n/tmp/tmpg1e668tk.swift:24:9: error: invalid redeclaration\
    \ of 'lastNote'\n    var lastNote = \"\"\n        ^\n/tmp/tmpg1e668tk.swift:18:9:\
    \ note: 'lastNote' previously declared here\n    var lastNote = \"\"\n       \
    \ ^\n/tmp/tmpg1e668tk.swift:25:9: error: invalid redeclaration of 'lastBeat'\n\
    \    var lastBeat = 0\n        ^\n/tmp/tmpg1e668tk.swift:17:9: note: 'lastBeat'\
    \ previously declared here\n    var lastBeat = 0\n        ^\n/tmp/tmpg1e668tk.swift:26:9:\
    \ error: invalid redeclaration of 'lastNote'\n    var lastNote = \"\"\n      \
    \  ^\n/tmp/tmpg1e668tk.swift:18:9: note: 'lastNote' previously declared here\n\
    \    var lastNote = \"\"\n        ^\n/tmp/tmpg1e668tk.swift:27:9: error: invalid\
    \ redeclaration of 'lastBeat'\n    var lastBeat = 0\n        ^\n/tmp/tmpg1e668tk.swift:17:9:\
    \ note: 'lastBeat' previously declared here\n    var lastBeat = 0\n        ^\n\
    /tmp/tmpg1e668tk.swift:28:9: error: invalid redeclaration of 'lastNote'\n    var\
    \ lastNote = \"\"\n        ^\n/tmp/tmpg1e668tk.swift:18:9: note: 'lastNote' previously\
    \ declared here\n    var lastNote = \""
  stdout: ''
  timestamp: 1660013790
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var beats_counter: Int = 0\n    var current_note = \"\"\n    for character\
    \ in music_string {\n        if character == \"o\" {\n            beats_counter\
    \ += 1\n            current_note = \"o\"\n        } else if character == \"|\"\
    \ {\n            beats_counter += 1\n            current_note = \"|\"\n      \
    \  } else if character == \".\" {\n            beats_counter += 1\n          \
    \  current_note = \".\"\n        } else {\n            if current_note == \"o\"\
    \ {\n                beats.append(beats_counter)\n                beats_counter\
    \ = 0\n            }\n            if current_note == \"|\" {\n               \
    \ beats.append(beats_counter)\n                beats_counter = 0\n           \
    \ }\n            if current_note == \".\" {\n                beats.append(beats_counter)\n\
    \                beats_counter = 0\n            }\n        }\n    }\n    return\
    \ beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp5d1wvziv/tmp5d1wvziv.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab97476ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab974461b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab974461988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9744607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5d1wvziv                        0x0000555d7e06f77f <unavailable> + 6015

    5    libc.so.6                          0x00002ab974956460 __libc_start_main +
    245

    6    tmp5d1wvziv                        0x0000555d7e06f2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var note_count = 0\n    var note_length\
    \ = 0\n    var note_length_count = 0\n    var note_length_index = 0\n    var note_length_index2\
    \ = 0\n    var note_length_index3 = 0\n    var note_length_index4 = 0\n    var\
    \ note_length_index5 = 0\n    var note_length_index6 = 0\n    var note_length_index7\
    \ = 0\n    var note_length_index8 = 0\n    var note_length_index9 = 0\n    var\
    \ note_length_index10 = 0\n    var note_length_index11 = 0\n    var note_length_index12\
    \ = 0\n    var note_length_index13 = 0\n    var note_length_index14 = 0\n    var\
    \ note_length_index15 = 0\n    var note_length_index16 = 0\n    var note_length_index17\
    \ = 0\n    var note_length_index18 = 0\n    var note_length_index19 = 0\n    var\
    \ note_length_index20 = 0\n    var note_length_index21 = 0\n    var note_length_index22\
    \ = 0\n    var note_length_index23 = 0\n    var note_length_index24 = 0\n    var\
    \ note_length_index25 = 0\n    var note_length_index26 = 0\n    var note_length_index27\
    \ = 0\n    var note_length_index28 = 0\n    var note_length_index29 = 0\n    var\
    \ note_length_index30 = 0\n    var note_length_index31 = 0\n    var note_length_index32\
    \ = 0\n    var note_length_index33 = 0\n    var note_length_index34 = 0\n    var\
    \ note_length_index35 = 0\n    var note_length_index36 = 0\n    var note_length_index37\
    \ = 0\n    var note_length_index38 = 0\n    var note_length_index39 = 0\n    var\
    \ note_length_index40 = 0\n    var note_length_index41 = 0\n    var note_length_index42\
    \ = 0\n    var note_length_index43 = 0\n    var note_length_index44 = 0\n    var\
    \ note_length_index45 = 0\n    var note_length_index46 = 0\n    var note_length_index47\
    \ = 0\n    var note_length_index48 = 0\n    var note_length_index49 = 0\n    var\
    \ note_length_index50 = 0\n    var note_length_index51 = 0\n    var note_length_index52\
    \ = 0\n    var note_length_index53 = 0\n    var note_length_index54 = 0\n    var\
    \ note_length_index55 = 0\n    var note_length_index56 = 0\n    var note_length_index57\
    \ = 0\n    var note_length_index58 = 0\n    var note_length_index59 = 0\n    var\
    \ note_length_index60 = 0\n    var note_length_index61 = 0\n    var note_length_index62\
    \ = 0\n    var note_length_index63 = 0\n    var note_length_index64 = 0\n    var\
    \ note_length_index65 = 0\n    var note_length_index66 = 0\n    var note_length_index67\
    \ = 0\n    var note_length_index68 = 0\n    var note_length_index69 = 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpkztr9n23.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpkztr9n23.swift:13:9: warning:\
    \ initialization of variable 'beat' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n/tmp/tmpkztr9n23.swift:14:9:\
    \ warning: initialization of variable 'note' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmpkztr9n23.swift:15:9: warning: initialization of variable 'note_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_count = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpkztr9n23.swift:16:9:\
    \ warning: initialization of variable 'note_length' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_length = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpkztr9n23.swift:17:9: warning: initialization of variable 'note_length_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_length_count = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpkztr9n23.swift:18:9:\
    \ warning: initialization of variable 'note_length_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var note_length_index =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpkztr9n23.swift:19:9: warning: initialization\
    \ of variable 'note_length_index2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_length_index2 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpkztr9n23.swift:20:9: warning: initialization of variable 'note_length_index3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_length_index3 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpkztr9n23.swift:21:9:\
    \ warning: initialization of variable 'note_length_index4' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var note_length_index4\
    \ = 0\n    ~~~~^~~~~~~~~~~"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n \
    \   var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var last\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpg1e668tk.swift:19:9: error: invalid redeclaration of 'lastBeat'\n\
    \    var lastBeat = 0\n        ^\n/tmp/tmpg1e668tk.swift:17:9: note: 'lastBeat'\
    \ previously declared here\n    var lastBeat = 0\n        ^\n/tmp/tmpg1e668tk.swift:20:9:\
    \ error: invalid redeclaration of 'lastNote'\n    var lastNote = \"\"\n      \
    \  ^\n/tmp/tmpg1e668tk.swift:18:9: note: 'lastNote' previously declared here\n\
    \    var lastNote = \"\"\n        ^\n/tmp/tmpg1e668tk.swift:21:9: error: invalid\
    \ redeclaration of 'lastBeat'\n    var lastBeat = 0\n        ^\n/tmp/tmpg1e668tk.swift:17:9:\
    \ note: 'lastBeat' previously declared here\n    var lastBeat = 0\n        ^\n\
    /tmp/tmpg1e668tk.swift:22:9: error: invalid redeclaration of 'lastNote'\n    var\
    \ lastNote = \"\"\n        ^\n/tmp/tmpg1e668tk.swift:18:9: note: 'lastNote' previously\
    \ declared here\n    var lastNote = \"\"\n        ^\n/tmp/tmpg1e668tk.swift:23:9:\
    \ error: invalid redeclaration of 'lastBeat'\n    var lastBeat = 0\n        ^\n\
    /tmp/tmpg1e668tk.swift:17:9: note: 'lastBeat' previously declared here\n    var\
    \ lastBeat = 0\n        ^\n/tmp/tmpg1e668tk.swift:24:9: error: invalid redeclaration\
    \ of 'lastNote'\n    var lastNote = \"\"\n        ^\n/tmp/tmpg1e668tk.swift:18:9:\
    \ note: 'lastNote' previously declared here\n    var lastNote = \"\"\n       \
    \ ^\n/tmp/tmpg1e668tk.swift:25:9: error: invalid redeclaration of 'lastBeat'\n\
    \    var lastBeat = 0\n        ^\n/tmp/tmpg1e668tk.swift:17:9: note: 'lastBeat'\
    \ previously declared here\n    var lastBeat = 0\n        ^\n/tmp/tmpg1e668tk.swift:26:9:\
    \ error: invalid redeclaration of 'lastNote'\n    var lastNote = \"\"\n      \
    \  ^\n/tmp/tmpg1e668tk.swift:18:9: note: 'lastNote' previously declared here\n\
    \    var lastNote = \"\"\n        ^\n/tmp/tmpg1e668tk.swift:27:9: error: invalid\
    \ redeclaration of 'lastBeat'\n    var lastBeat = 0\n        ^\n/tmp/tmpg1e668tk.swift:17:9:\
    \ note: 'lastBeat' previously declared here\n    var lastBeat = 0\n        ^\n\
    /tmp/tmpg1e668tk.swift:28:9: error: invalid redeclaration of 'lastNote'\n    var\
    \ lastNote = \"\"\n        ^\n/tmp/tmpg1e668tk.swift:18:9: note: 'lastNote' previously\
    \ declared here\n    var lastNote = \""
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var notes = []\n    var notes_count =\
    \ 0\n    var note_length = 0\n    var note_length_count = 0\n    var note_length_index\
    \ = 0\n    var note_length_index2 = 0\n    var note_length_index3 = 0\n    var\
    \ note_length_index4 = 0\n    var note_length_index5 = 0\n    var note_length_index6\
    \ = 0\n    var note_length_index7 = 0\n    var note_length_index8 = 0\n    var\
    \ note_length_index9 = 0\n    var note_length_index10 = 0\n    var note_length_index11\
    \ = 0\n    var note_length_index12 = 0\n    var note_length_index13 = 0\n    var\
    \ note_length_index14 = 0\n    var note_length_index15 = 0\n    var note_length_index16\
    \ = 0\n    var note_length_index17 = 0\n    var note_length_index18 = 0\n    var\
    \ note_length_index19 = 0\n    var note_length_index20 = 0\n    var note_length_index21\
    \ = 0\n    var note_length_index22 = 0\n    var note_length_index23 = 0\n    var\
    \ note_length_index24 = 0\n    var note_length_index25 = 0\n    var note_length_index26\
    \ = 0\n    var note_length_index27 = 0\n    var note_length_index28 = 0\n    var\
    \ note_length_index29 = 0\n    var note_length_index30 = 0\n    var note_length_index31\
    \ = 0\n    var note_length_index32 = 0\n    var note_length_index33 = 0\n    var\
    \ note_length_index34 = 0\n    var note_length_index35 = 0\n    var note_length_index36\
    \ = 0\n    var note_length_index37 = 0\n    var note_length_index38 = 0\n    var\
    \ note_length_index39 = 0\n    var note_length_index40 = 0\n    var note_length_index41\
    \ = 0\n    var note_length_index42 = 0\n    var note_length_index43 = 0\n    var\
    \ note_length_index44 = 0\n    var note_length_index45 = 0\n    var note_length_index46\
    \ = 0\n    var note_length_index47 = 0\n    var note_length_index48 = 0\n    var\
    \ note_length_index49 = 0\n    var note_length_index50 = 0\n    var note_length_index51\
    \ = 0\n    var note_length_index52 = 0\n    var note_length_index53 = 0\n    var\
    \ note_length_index54 = 0\n    var note_length_index55 = 0\n    var note_length_index56\
    \ = 0\n    var note_length_index57 = 0\n    var note_length_index58 = 0\n    var\
    \ note_length_index59 = 0\n    var note_length_index60 = 0\n    var note_length_index61\
    \ = 0\n    var note_length_index62 = 0\n    var note_length_index63 = 0\n    var\
    \ note_length_index64 = 0\n    var note_length_index65 = 0\n    var note_length_index66\
    \ = 0\n    var note_length_index67 = 0\n    var note_length_index68 = 0\n    var\
    \ note_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpfickt3nr.swift:15:17: error: empty collection literal requires\
    \ an explicit type\n    var notes = []\n                ^~\n/tmp/tmpfickt3nr.swift:87:9:\
    \ error: type annotation missing in pattern\n    var note_\n        ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = Int()\n    var notes = [Int]()\n    var notes_count\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var \n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp77wzdinp.swift:97:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp77wzdinp.swift:18:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = Int()\n        ^\n/tmp/tmp77wzdinp.swift:17:9: note: 'note_length'\
    \ previously declared here\n    var note_length = Int()\n        ^\n/tmp/tmp77wzdinp.swift:19:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = Int()\n\
    \        ^\n/tmp/tmp77wzdinp.swift:17:9: note: 'note_length' previously declared\
    \ here\n    var note_length = Int()\n        ^\n/tmp/tmp77wzdinp.swift:20:9: error:\
    \ invalid redeclaration of 'note_length'\n    var note_length = Int()\n      \
    \  ^\n/tmp/tmp77wzdinp.swift:17:9: note: 'note_length' previously declared here\n\
    \    var note_length = Int()\n        ^\n/tmp/tmp77wzdinp.swift:21:9: error: invalid\
    \ redeclaration of 'note_length'\n    var note_length = Int()\n        ^\n/tmp/tmp77wzdinp.swift:17:9:\
    \ note: 'note_length' previously declared here\n    var note_length = Int()\n\
    \        ^\n/tmp/tmp77wzdinp.swift:22:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = Int()\n        ^\n/tmp/tmp77wzdinp.swift:17:9: note: 'note_length'\
    \ previously declared here\n    var note_length = Int()\n        ^\n/tmp/tmp77wzdinp.swift:23:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = Int()\n\
    \        ^\n/tmp/tmp77wzdinp.swift:17:9: note: 'note_length' previously declared\
    \ here\n    var note_length = Int()\n        ^\n/tmp/tmp77wzdinp.swift:24:9: error:\
    \ invalid redeclaration of 'note_length'\n    var note_length = Int()\n      \
    \  ^\n/tmp/tmp77wzdinp.swift:17:9: note: 'note_length' previously declared here\n\
    \    var note_length = Int()\n        ^\n/tmp/tmp77wzdinp.swift:25:9: error: invalid\
    \ redeclaration of 'note_length'\n    var note_length = Int()\n        ^\n/tmp/tmp77wzdinp.swift:17:9:\
    \ note: 'note_length' previously declared here\n    var note_length = Int()\n\
    \        ^\n/tmp/tmp77wzdinp.swift:26:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = Int()\n        ^\n/tmp/tmp77wzdinp.swift:17:9: note: 'note_length'\
    \ previously decl"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var notes = [String]()\n    var notes_length\
    \ = 0\n    var notes_length2 = 0\n    var notes_length3 = 0\n    var notes_length4\
    \ = 0\n    var notes_length5 = 0\n    var notes_length6 = 0\n    var notes_length7\
    \ = 0\n    var notes_length8 = 0\n    var notes_length9 = 0\n    var notes_length10\
    \ = 0\n    var notes_length11 = 0\n    var notes_length12 = 0\n    var notes_length13\
    \ = 0\n    var notes_length14 = 0\n    var notes_length15 = 0\n    var notes_length16\
    \ = 0\n    var notes_length17 = 0\n    var notes_length18 = 0\n    var notes_length19\
    \ = 0\n    var notes_length20 = 0\n    var notes_length21 = 0\n    var notes_length22\
    \ = 0\n    var notes_length23 = 0\n    var notes_length24 = 0\n    var notes_length25\
    \ = 0\n    var notes_length26 = 0\n    var notes_length27 = 0\n    var notes_length28\
    \ = 0\n    var notes_length29 = 0\n    var notes_length30 = 0\n    var notes_length31\
    \ = 0\n    var notes_length32 = 0\n    var notes_length33 = 0\n    var notes_length34\
    \ = 0\n    var notes_length35 = 0\n    var notes_length36 = 0\n    var notes_length37\
    \ = 0\n    var notes_length38 = 0\n    var notes_length39 = 0\n    var notes_length40\
    \ = 0\n    var notes_length41 = 0\n    var notes_length42 = 0\n    var notes_length43\
    \ = 0\n    var notes_length44 = 0\n    var notes_length45 = 0\n    var notes_length46\
    \ = 0\n    var notes_length47 = 0\n    var notes_length48 = 0\n    var notes_length49\
    \ = 0\n    var notes_length50 = 0\n    var notes_length51 = 0\n    var notes_length52\
    \ = 0\n    var notes_length53 = 0\n    var notes_length54 = 0\n    var notes_length55\
    \ = 0\n    var notes_length56 = 0\n    var notes_length57 = 0\n    var notes_length58\
    \ = 0\n    var notes_length59 = 0\n    var notes_length60 = 0\n    var notes_length61\
    \ = 0\n    var notes_length62 = 0\n    var notes_length63 = 0\n    var notes_length64\
    \ = 0\n    var notes_length65 = 0\n    var notes_length66 = 0\n    var notes_length67\
    \ = 0\n    var notes_length68 = 0\n    var notes_length69 = 0\n    var notes_length70\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpn59ayn7b.swift:86:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpn59ayn7b.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpn59ayn7b.swift:13:9: warning:\
    \ initialization of variable 'beat' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n/tmp/tmpn59ayn7b.swift:14:9:\
    \ warning: initialization of variable 'note' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmpn59ayn7b.swift:15:9: warning: initialization of variable 'notes' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var notes\
    \ = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmpn59ayn7b.swift:16:9: warning: initialization\
    \ of variable 'notes_length' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_length = 0\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmpn59ayn7b.swift:17:9: warning: initialization of variable 'notes_length2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length2 = 0\n    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmpn59ayn7b.swift:18:9:\
    \ warning: initialization of variable 'notes_length3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length3 = 0\n\
    \    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmpn59ayn7b.swift:19:9: warning: initialization\
    \ of variable 'notes_length4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_length4 = 0\n    ~~~~^~~~~~~~~~~~~\n  \
    \  _\n/tmp/tmpn59ayn7b.swift:20:9: warning: initialization of variable 'notes_length5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length5 = 0\n    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmpn59ayn7b.swift:21:9:\
    \ warning: initialization of variable 'notes_length6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length6 = 0\n\
    \    ~~~~^~~~~~~"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var note = String()\n    var last_note = String()\n\
    \    var last_beat = 0\n    var last_beat_count = 0\n    var last_beat_count_count\
    \ = 0\n    var last_beat_count_count_count = 0\n    var last_beat_count_count_count_count\
    \ = 0\n    var last_beat_count_count_count_count_count = 0\n    var last_beat_count_count_count_count_count_count\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count = 0\n    var\
    \ last_beat_count_count_count_count_count_count_count_count = 0\n    var last_beat_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_cilm4gr.swift:35:9: error: type annotation missing in pattern\n\
    \    var last_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = 0\n    var last =\
    \ 0\n    var lastBeat = 0\n    var lastNote = 0\n    var lastBeatIndex = 0\n \
    \   var lastNoteIndex = 0\n    var lastBeatIndex2 = 0\n    var lastNoteIndex2\
    \ = 0\n    var lastBeatIndex3 = 0\n    var lastNoteIndex3 = 0\n    var lastBeatIndex4\
    \ = 0\n    var lastNoteIndex4 = 0\n    var lastBeatIndex5 = 0\n    var lastNoteIndex5\
    \ = 0\n    var lastBeatIndex6 = 0\n    var lastNoteIndex6 = 0\n    var lastBeatIndex7\
    \ = 0\n    var lastNoteIndex7 = 0\n    var lastBeatIndex8 = 0\n    var lastNoteIndex8\
    \ = 0\n    var lastBeatIndex9 = 0\n    var lastNoteIndex9 = 0\n    var lastBeatIndex10\
    \ = 0\n    var lastNoteIndex10 = 0\n    var lastBeatIndex11 = 0\n    var lastNoteIndex11\
    \ = 0\n    var lastBeatIndex12 = 0\n    var lastNoteIndex12 = 0\n    var lastBeatIndex13\
    \ = 0\n    var lastNoteIndex13 = 0\n    var lastBeatIndex14 = 0\n    var lastNoteIndex14\
    \ = 0\n    var lastBeatIndex15 = 0\n    var lastNoteIndex15 = 0\n    var lastBeatIndex16\
    \ = 0\n    var lastNoteIndex16 = 0\n    var lastBeatIndex17 = 0\n    var lastNoteIndex17\
    \ = 0\n    var lastBeatIndex18 = 0\n    var lastNoteIndex18 = 0\n    var lastBeatIndex19\
    \ = 0\n    var lastNoteIndex19 = 0\n    var lastBeatIndex20 = 0\n    var lastNoteIndex20\
    \ = 0\n    var lastBeatIndex21 = 0\n    var lastNoteIndex21 = 0\n    var lastBeatIndex22\
    \ = 0\n    var lastNoteIndex22 = 0\n    var lastBeatIndex23 = 0\n    var lastNoteIndex23\
    \ = 0\n    var lastBeatIndex24 = 0\n    var lastNoteIndex24 = 0\n    var lastBeatIndex25\
    \ = 0\n    var lastNoteIndex25 = 0\n    var lastBeatIndex26 = 0\n    var lastNoteIndex26\
    \ = 0\n    var lastBeatIndex27 = 0\n    var lastNoteIndex27 = 0\n    var lastBeatIndex28\
    \ = 0\n    var lastNoteIndex28 = 0\n    var lastBeatIndex29 = 0\n    var lastNoteIndex29\
    \ = 0\n    var lastBeatIndex30 = 0\n    var lastNoteIndex30 = 0\n    var lastBeatIndex31\
    \ = 0\n    var lastNoteIndex31 = 0\n    var lastBeatIndex32 = 0\n    var lastNoteIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpy5kf7xj4.swift:82:9: error: type annotation missing in pattern\n\
    \    var lastNoteIndex\n        ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var beats_counter: Int = 0\n    var notes_counter: Int = 0\n    var current_note\
    \ = String()\n    var current_beat: Int = 0\n    var current_note_index: Int =\
    \ 0\n    var current_note_length: Int = 0\n    var current_note_length_index:\
    \ Int = 0\n    var current_note_length_index2: Int = 0\n    var current_note_length_index3:\
    \ Int = 0\n    var current_note_length_index4: Int = 0\n    var current_note_length_index5:\
    \ Int = 0\n    var current_note_length_index6: Int = 0\n    var current_note_length_index7:\
    \ Int = 0\n    var current_note_length_index8: Int = 0\n    var current_note_length_index9:\
    \ Int = 0\n    var current_note_length_index10: Int = 0\n    var current_note_length_index11:\
    \ Int = 0\n    var current_note_length_index12: Int = 0\n    var current_note_length_index13:\
    \ Int = 0\n    var current_note_length_index14: Int = 0\n    var current_note_length_index15:\
    \ Int = 0\n    var current_note_length_index16: Int = 0\n    var current_note_length_index17:\
    \ Int = 0\n    var current_note_length_index18: Int = 0\n    var current_note_length_index19:\
    \ Int = 0\n    var current_note_length_index20: Int = 0\n    var current_note_length_index21:\
    \ Int = 0\n    var current_note_length_index22: Int = 0\n    var current_note_length_index23:\
    \ Int = 0\n    var current_note_length_index24: Int = 0\n    var current_note_length_index25:\
    \ Int = 0\n    var current_note_length_index26: Int = 0\n    var current_note_length_index27:\
    \ Int = 0\n    var current_note_length_index28: Int = 0\n    var current_note_length_index29:\
    \ Int = 0\n    var current_note_length_index30: Int = 0\n    var current_note_length_index31:\
    \ Int = 0\n    var current_note_length_index32: Int = 0\n    var current_note_length_index33:\
    \ Int = 0\n    var current_note_length_index34: Int = 0\n    var current_note_length_index35:\
    \ Int = 0\n    var current_note_length_index36: Int = 0\n    var current_note_length_index37:\
    \ Int = 0\n    var current_note_length_index38: Int = 0\n    var current_note_length_index39:\
    \ Int = 0\n    var current_note_length_index40: Int = 0\n    var current_note_length_index41:\
    \ Int = 0\n    var current_note_length_index42: Int = 0\n    var current_note_length_index43:\
    \ Int = 0\n    var current_note_length_index44: Int = 0\n    var current_note_length_index45:\
    \ Int = 0\n    var current_note_length_index46: Int = 0\n    var current_note_length_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpho9la_2f.swift:65:9: error: type annotation missing in pattern\n\
    \    var current_note_length_index\n        ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var notes_index = 0\n\
    \    var notes_length_index = 0\n    var notes_length_index2 = 0\n    var notes_length_index3\
    \ = 0\n    var notes_length_index4 = 0\n    var notes_length_index5 = 0\n    var\
    \ notes_length_index6 = 0\n    var notes_length_index7 = 0\n    var notes_length_index8\
    \ = 0\n    var notes_length_index9 = 0\n    var notes_length_index10 = 0\n   \
    \ var notes_length_index11 = 0\n    var notes_length_index12 = 0\n    var notes_length_index13\
    \ = 0\n    var notes_length_index14 = 0\n    var notes_length_index15 = 0\n  \
    \  var notes_length_index16 = 0\n    var notes_length_index17 = 0\n    var notes_length_index18\
    \ = 0\n    var notes_length_index19 = 0\n    var notes_length_index20 = 0\n  \
    \  var notes_length_index21 = 0\n    var notes_length_index22 = 0\n    var notes_length_index23\
    \ = 0\n    var notes_length_index24 = 0\n    var notes_length_index25 = 0\n  \
    \  var notes_length_index26 = 0\n    var notes_length_index27 = 0\n    var notes_length_index28\
    \ = 0\n    var notes_length_index29 = 0\n    var notes_length_index30 = 0\n  \
    \  var notes_length_index31 = 0\n    var notes_length_index32 = 0\n    var notes_length_index33\
    \ = 0\n    var notes_length_index34 = 0\n    var notes_length_index35 = 0\n  \
    \  var notes_length_index36 = 0\n    var notes_length_index37 = 0\n    var notes_length_index38\
    \ = 0\n    var notes_length_index39 = 0\n    var notes_length_index40 = 0\n  \
    \  var notes_length_index41 = 0\n    var notes_length_index42 = 0\n    var notes_length_index43\
    \ = 0\n    var notes_length_index44 = 0\n    var notes_length_index45 = 0\n  \
    \  var notes_length_index46 = 0\n    var notes_length_index47 = 0\n    var notes_length_index48\
    \ = 0\n    var notes_length_index49 = 0\n    var notes_length_index50 = 0\n  \
    \  var notes_length_index51 = 0\n    var notes_length_index52 = 0\n    var notes_length_index53\
    \ = 0\n    var notes_length_index54 = 0\n    var notes_length_index55 = 0\n  \
    \  var notes_length_index56 = 0\n    var notes_length_index57 = 0\n    var notes_length_index58\
    \ = 0\n    var notes_length_index59 = 0\n    var notes_length_index60 = 0\n  \
    \  var notes_length_index61 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbsmhbl3g.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:14:9:\
    \ warning: initialization of variable 'notes_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:15:9: warning: initialization\
    \ of variable 'notes_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_index = 0\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmpbsmhbl3g.swift:16:9: warning: initialization of variable 'notes_length_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:17:9:\
    \ warning: initialization of variable 'notes_length_index2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:18:9: warning:\
    \ initialization of variable 'notes_length_index3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var notes_length_index3 = 0\n   \
    \ ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:19:9: warning: initialization\
    \ of variable 'notes_length_index4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_length_index4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpbsmhbl3g.swift:20:9: warning: initialization of variable 'notes_length_index5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:21:9:\
    \ warning: initialization of variable 'notes_length_index6' was never used; consider\
    \ replacing with assi"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var notes_index = 0\n\
    \    var notes_length_index = 0\n    var notes_length = 0\n    var notes_index\
    \ = 0\n    var notes_length_index = 0\n    var notes_length = 0\n    var notes_index\
    \ = 0\n    var notes_length_index = 0\n    var notes_length = 0\n    var notes_index\
    \ = 0\n    var notes_length_index = 0\n    var notes_length = 0\n    var notes_index\
    \ = 0\n    var notes_length_index = 0\n    var notes_length = 0\n    var notes_index\
    \ = 0\n    var notes_length_index = 0\n    var notes_length = 0\n    var notes_index\
    \ = 0\n    var notes_length_index = 0\n    var notes_length = 0\n    var notes_index\
    \ = 0\n    var notes_length_index = 0\n    var notes_length = 0\n    var notes_index\
    \ = 0\n    var notes_length_index = 0\n    var notes_length = 0\n    var notes_index\
    \ = 0\n    var notes_length_index = 0\n    var notes_length = 0\n    var notes_index\
    \ = 0\n    var notes_length_index = 0\n    var notes_length = 0\n    var notes_index\
    \ = 0\n    var notes_length_index = 0\n    var notes_length = 0\n    var notes_index\
    \ = 0\n    var notes_length_index = 0\n    var notes_length = 0\n    var notes_index\
    \ = 0\n    var notes_length_index = 0\n    var notes_length = 0\n    var notes_index\
    \ = 0\n    var notes_length_index = 0\n    var notes_length = 0\n    var notes_index\
    \ = 0\n    var notes_length_index = 0\n    var notes_length = 0\n    var notes_index\
    \ = 0\n    var notes_length_index = 0\n    var notes_length = 0\n    var notes_index\
    \ = 0\n    var notes_length_index = 0\n    var notes_length = 0\n    var notes_index\
    \ = 0\n    var notes_length_index = 0\n    var notes_length = 0\n    var notes_index\
    \ = 0\n    var notes_length_index = 0\n    var notes_length = 0\n    var notes_index\
    \ = 0\n    var notes_length_index = 0\n    var notes_length = 0\n    var notes_index\
    \ = 0\n    var notes_length_index = 0\n    var notes_length = 0\n    var notes_index\
    \ = 0\n    var notes_length_index = 0\n    var notes_length = 0\n    var notes_index\
    \ = 0\n    var notes_length_index = 0\n    var notes_length = 0\n    var notes_index\
    \ = 0\n    var notes_length_index = 0\n    var notes_length = 0\n    var notes_index\
    \ = 0\n    var notes_length_index = 0\n    var notes_length\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpx3jdnszr.swift:17:9: error: invalid redeclaration of 'notes_length'\n\
    \    var notes_length = 0\n        ^\n/tmp/tmpx3jdnszr.swift:14:9: note: 'notes_length'\
    \ previously declared here\n    var notes_length = 0\n        ^\n/tmp/tmpx3jdnszr.swift:18:9:\
    \ error: invalid redeclaration of 'notes_index'\n    var notes_index = 0\n   \
    \     ^\n/tmp/tmpx3jdnszr.swift:15:9: note: 'notes_index' previously declared\
    \ here\n    var notes_index = 0\n        ^\n/tmp/tmpx3jdnszr.swift:19:9: error:\
    \ invalid redeclaration of 'notes_length_index'\n    var notes_length_index =\
    \ 0\n        ^\n/tmp/tmpx3jdnszr.swift:16:9: note: 'notes_length_index' previously\
    \ declared here\n    var notes_length_index = 0\n        ^\n/tmp/tmpx3jdnszr.swift:20:9:\
    \ error: invalid redeclaration of 'notes_length'\n    var notes_length = 0\n \
    \       ^\n/tmp/tmpx3jdnszr.swift:14:9: note: 'notes_length' previously declared\
    \ here\n    var notes_length = 0\n        ^\n/tmp/tmpx3jdnszr.swift:21:9: error:\
    \ invalid redeclaration of 'notes_index'\n    var notes_index = 0\n        ^\n\
    /tmp/tmpx3jdnszr.swift:15:9: note: 'notes_index' previously declared here\n  \
    \  var notes_index = 0\n        ^\n/tmp/tmpx3jdnszr.swift:22:9: error: invalid\
    \ redeclaration of 'notes_length_index'\n    var notes_length_index = 0\n    \
    \    ^\n/tmp/tmpx3jdnszr.swift:16:9: note: 'notes_length_index' previously declared\
    \ here\n    var notes_length_index = 0\n        ^\n/tmp/tmpx3jdnszr.swift:23:9:\
    \ error: invalid redeclaration of 'notes_length'\n    var notes_length = 0\n \
    \       ^\n/tmp/tmpx3jdnszr.swift:14:9: note: 'notes_length' previously declared\
    \ here\n    var notes_length = 0\n        ^\n/tmp/tmpx3jdnszr.swift:24:9: error:\
    \ invalid redeclaration of 'notes_index'\n    var notes_index = 0\n        ^\n\
    /tmp/tmpx3jdnszr.swift:15:9: note: 'notes_index' previously declared here\n  \
    \  var notes_index = 0\n        ^\n/tmp/tmpx3jdnszr.swift:25:9: error: invalid\
    \ redeclaration of 'notes_length_index'\n    var notes_length_index = 0\n    \
    \    ^\n/tmp/tmpx3jdnszr.swift:16:9: note: 'notes_length_index' previously declared\
    \ here\n    var notes_length_index = 0\n        ^"
  stdout: ''
  timestamp: 1660013790
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var note_index = 0\n    var beat_index = 0\n \
    \   var note = String()\n    var beat = Int()\n\n    for char in music_string\
    \ {\n        switch char {\n        case \"o\":\n            notes.append(note)\n\
    \            beats.append(beat)\n            note = String()\n            beat\
    \ = Int()\n            note_index += 1\n        case \"|\":\n            notes.append(note)\n\
    \            beats.append(beat)\n            note = String()\n            beat\
    \ = Int()\n            note_index += 1\n        default:\n            note.append(char)\n\
    \            beat += Int(String(char).unicodeScalars.first!.value)\n        }\n\
    \    }\n    notes.append(note)\n    beats.append(beat)\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp3bivfxsg/tmp3bivfxsg.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9774d7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9774a76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9774a76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9774a757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bivfxsg                        0x0000563a939f6bde <unavailable> + 7134

    5    libc.so.6                          0x00002b9774f6b460 __libc_start_main +
    245

    6    tmp3bivfxsg                        0x0000563a939f6829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array = [Int]()\n\
    \    var current_beat = 0\n    var current_note = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp20gui3vv.swift:85:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp20gui3vv.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmp20gui3vv.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp20gui3vv.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp20gui3vv.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp20gui3vv.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp20gui3vv.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp20gui3vv.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp20gui3vv.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp20gui3vv.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp20gui3vv.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp20gui3vv.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp20gui3vv.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp20gui3vv.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp20gui3vv.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp20gui3vv.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp20gui3vv.swift:15:9:\
    \ note: 'current_note_"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = Int()\n    var note_count = 0\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpwvh8krw6.swift:17:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = Int()\n        ^\n/tmp/tmpwvh8krw6.swift:16:9: note: 'note_length'\
    \ previously declared here\n    var note_length = Int()\n        ^\n/tmp/tmpwvh8krw6.swift:18:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = Int()\n\
    \        ^\n/tmp/tmpwvh8krw6.swift:16:9: note: 'note_length' previously declared\
    \ here\n    var note_length = Int()\n        ^\n/tmp/tmpwvh8krw6.swift:19:9: error:\
    \ invalid redeclaration of 'note_length'\n    var note_length = Int()\n      \
    \  ^\n/tmp/tmpwvh8krw6.swift:16:9: note: 'note_length' previously declared here\n\
    \    var note_length = Int()\n        ^\n/tmp/tmpwvh8krw6.swift:20:9: error: invalid\
    \ redeclaration of 'note_length'\n    var note_length = Int()\n        ^\n/tmp/tmpwvh8krw6.swift:16:9:\
    \ note: 'note_length' previously declared here\n    var note_length = Int()\n\
    \        ^\n/tmp/tmpwvh8krw6.swift:21:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = Int()\n        ^\n/tmp/tmpwvh8krw6.swift:16:9: note: 'note_length'\
    \ previously declared here\n    var note_length = Int()\n        ^\n/tmp/tmpwvh8krw6.swift:22:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = Int()\n\
    \        ^\n/tmp/tmpwvh8krw6.swift:16:9: note: 'note_length' previously declared\
    \ here\n    var note_length = Int()\n        ^\n/tmp/tmpwvh8krw6.swift:23:9: error:\
    \ invalid redeclaration of 'note_length'\n    var note_length = Int()\n      \
    \  ^\n/tmp/tmpwvh8krw6.swift:16:9: note: 'note_length' previously declared here\n\
    \    var note_length = Int()\n        ^\n/tmp/tmpwvh8krw6.swift:24:9: error: invalid\
    \ redeclaration of 'note_length'\n    var note_length = Int()\n        ^\n/tmp/tmpwvh8krw6.swift:16:9:\
    \ note: 'note_length' previously declared here\n    var note_length = Int()\n\
    \        ^\n/tmp/tmpwvh8krw6.swift:25:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = Int()\n        ^\n/tmp/tmpwvh8krw6.swift:16:9: note: 'note_length'\
    \ previously declared here\n    var note_length = Int()\n        ^\n/tmp/tmpwvh8krw6.swift:"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var notes: [String] = []\n    var beats_counter: Int = 0\n    var note_counter:\
    \ Int = 0\n    var notes_counter: Int = 0\n    var current_note = \"\"\n    var\
    \ current_beat: Int = 0\n    var current_note_index: Int = 0\n    var current_beat_index:\
    \ Int = 0\n    var current_notes_index: Int = 0\n    var current_beats_index:\
    \ Int = 0\n    var current_notes_index_in_beat: Int = 0\n    var current_beats_index_in_beat:\
    \ Int = 0\n    var current_notes_index_in_notes: Int = 0\n    var current_beats_index_in_notes:\
    \ Int = 0\n    var current_notes_index_in_beats: Int = 0\n    var current_beats_index_in_beats:\
    \ Int = 0\n    var current_notes_index_in_notes_beats: Int = 0\n    var current_beats_index_in_notes_beats:\
    \ Int = 0\n    var current_notes_index_in_notes_beats_beats: Int = 0\n    var\
    \ current_beats_index_in_notes_beats_beats: Int = 0\n    var current_notes_index_in_notes_beats_beats_beats:\
    \ Int = 0\n    var current_beats_index_in_notes_beats_beats_beats: Int = 0\n \
    \   var current_notes_index_in_notes_beats_beats_beats_beats: Int = 0\n    var\
    \ current_beats_index_in_notes_beats_beats_beats_beats_beats: Int = 0\n    var\
    \ current_notes_index_in_notes_beats_beats_beats_beats_beats: Int = 0\n    var\
    \ current_beats_index_in_notes_beats_beats_beats_beats_beats_beats: Int = 0\n\
    \    var current_notes_index_in_notes_beats_beats_beats_beats_beats_beats: Int\
    \ = 0\n    var current_beats_index_in_notes_beats_beats_beats_beats_beats_beats_beats:\
    \ Int = 0\n    var current_notes_index_in_notes_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ Int = 0\n    var current_beats_index_in_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ Int = 0\n    var current_notes_index_in_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ Int = 0\n    var current_beats_index_in_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ Int = 0\n    var current_notes_index_in_notes_beats_beats_beats_beats_beats_beats_beats_beats_beat\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_df892qf.swift:45:9: error: type annotation missing in pattern\n\
    \    var current_notes_index_in_notes_beats_beats_beats_beats_beats_beats_beats_beats_beat\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beats_count = 0\n    var notes_count = 0\n\
    \    var note_index = 0\n    var note = \"\"\n    for char in music_string {\n\
    \        if char == \"o\" {\n            if note_index == 0 {\n              \
    \  notes.append(note)\n                note_index = 1\n                note =\
    \ \"\"\n            } else {\n                note_index = 0\n               \
    \ note = note + char\n            }\n        } else if char == \"|\" {\n     \
    \       if note_index == 0 {\n                notes.append(note)\n           \
    \     note_index = 1\n                note = \"\"\n            } else {\n    \
    \            note_index = 0\n                note = note + char\n            }\n\
    \        } else if char == \".\" {\n            if note_index == 0 {\n       \
    \         notes.append(note)\n                note_index = 1\n               \
    \ note = \"\"\n            } else {\n                note_index = 0\n        \
    \        note = note + char\n            }\n        } else {\n            note_index\
    \ = 0\n            note = note + char\n        }\n    }\n    for note in notes\
    \ {\n        beats_count = beats_count + note.count\n    }\n    for note in notes\
    \ {\n        beats.append(beats_count)\n        beats_count = 0\n    }\n    return\
    \ beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp2a6y2sap.swift:26:31: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n                note = note + char\n   \
    \                           ^\n/tmp/tmp2a6y2sap.swift:35:31: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n             \
    \   note = note + char\n                              ^\n/tmp/tmp2a6y2sap.swift:44:31:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                note = note + char\n                              ^\n/tmp/tmp2a6y2sap.swift:48:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            note = note + char\n                          ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_value\
    \ = 0\n    var current_note_length_value_index = 0\n    var current_note_length_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp040yfjdm.swift:66:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp040yfjdm.swift:24:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp040yfjdm.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp040yfjdm.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp040yfjdm.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp040yfjdm.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp040yfjdm.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp040yfjdm.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp040yfjdm.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp040yfjdm.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp040yfjdm.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp040yfjdm.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp040yfjdm.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_string\
    \ = \"\"\n    var current_note_length_string_index = 0\n    var current_note_length_string_value\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_index = 0\n    var current_note_length_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string = \"\"\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpa9dg0xnd.swift:26:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_index = 0\n        ^\n\
    /tmp/tmpa9dg0xnd.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpa9dg0xnd.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpa9dg0xnd.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpa9dg0xnd.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpa9dg0xnd.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpa9dg0xnd.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpa9dg0xnd.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpa9dg0xnd.swift:31:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpa9dg0xnd.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpa9dg0xnd.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var beats_count = 0\n    var last_beat = 0\n    var last_note = 0\n    var\
    \ last_note_beat = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count = 0\n  \
    \  var last_note_beat_count = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count = 0\n  \
    \  var last_note_beat_count = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count = 0\n  \
    \  var last_note_beat_count = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count = 0\n  \
    \  var last_note_beat_count = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count = 0\n  \
    \  var last_note_beat_count = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count = 0\n  \
    \  var last_note_beat_count = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count = 0\n  \
    \  var last_note_beat_count = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count = 0\n  \
    \  var last_note_beat_count = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count = 0\n  \
    \  var last_note_beat_count = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count = 0\n  \
    \  var last_note_beat_count = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count = 0\n  \
    \  var last_note_beat_count = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count = 0\n  \
    \  var last_note_beat_count = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count = 0\n  \
    \  var last_note_beat_count = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_count = 0\n  \
    \  var last_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp43v_2acf.swift:18:9: error: invalid redeclaration of 'last_note_beat_count'\n\
    \    var last_note_beat_count = 0\n        ^\n/tmp/tmp43v_2acf.swift:17:9: note:\
    \ 'last_note_beat_count' previously declared here\n    var last_note_beat_count\
    \ = 0\n        ^\n/tmp/tmp43v_2acf.swift:19:9: error: invalid redeclaration of\
    \ 'last_note_beat_count'\n    var last_note_beat_count = 0\n        ^\n/tmp/tmp43v_2acf.swift:17:9:\
    \ note: 'last_note_beat_count' previously declared here\n    var last_note_beat_count\
    \ = 0\n        ^\n/tmp/tmp43v_2acf.swift:20:9: error: invalid redeclaration of\
    \ 'last_note_beat_count'\n    var last_note_beat_count = 0\n        ^\n/tmp/tmp43v_2acf.swift:17:9:\
    \ note: 'last_note_beat_count' previously declared here\n    var last_note_beat_count\
    \ = 0\n        ^\n/tmp/tmp43v_2acf.swift:21:9: error: invalid redeclaration of\
    \ 'last_note_beat_count'\n    var last_note_beat_count = 0\n        ^\n/tmp/tmp43v_2acf.swift:17:9:\
    \ note: 'last_note_beat_count' previously declared here\n    var last_note_beat_count\
    \ = 0\n        ^\n/tmp/tmp43v_2acf.swift:22:9: error: invalid redeclaration of\
    \ 'last_note_beat_count'\n    var last_note_beat_count = 0\n        ^\n/tmp/tmp43v_2acf.swift:17:9:\
    \ note: 'last_note_beat_count' previously declared here\n    var last_note_beat_count\
    \ = 0\n        ^\n/tmp/tmp43v_2acf.swift:23:9: error: invalid redeclaration of\
    \ 'last_note_beat_count'\n    var last_note_beat_count = 0\n        ^\n/tmp/tmp43v_2acf.swift:17:9:\
    \ note: 'last_note_beat_count' previously declared here\n    var last_note_beat_count\
    \ = 0\n        ^\n/tmp/tmp43v_2acf.swift:24:9: error: invalid redeclaration of\
    \ 'last_note_beat_count'\n    var last_note_beat_count = 0\n        ^\n/tmp/tmp43v_2acf.swift:17:9:\
    \ note: 'last_note_beat_count' previously declared here\n    var last_note_beat_count\
    \ = 0\n        ^\n/tmp/tmp43v_2acf.swift:25:9: error: invalid redeclaration of\
    \ 'last_note_beat_count'\n    var last_note_beat_count = 0\n        ^\n/tmp/tmp43v_2acf.swift:17:9:\
    \ note: 'last_note_beat_count' previously declared here\n    var last_note_beat_count\
    \ = 0\n        ^\n/tmp/tmp43v_2acf.swift:2"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var lastNote = \"\"\n    var lastNoteBeat = 0\n    var lastNoteBeatCount\
    \ = 0\n    var lastNoteBeatCount2 = 0\n    var lastNoteBeatCount3 = 0\n    var\
    \ lastNoteBeatCount4 = 0\n    var lastNoteBeatCount5 = 0\n    var lastNoteBeatCount6\
    \ = 0\n    var lastNoteBeatCount7 = 0\n    var lastNoteBeatCount8 = 0\n    var\
    \ lastNoteBeatCount9 = 0\n    var lastNoteBeatCount10 = 0\n    var lastNoteBeatCount11\
    \ = 0\n    var lastNoteBeatCount12 = 0\n    var lastNoteBeatCount13 = 0\n    var\
    \ lastNoteBeatCount14 = 0\n    var lastNoteBeatCount15 = 0\n    var lastNoteBeatCount16\
    \ = 0\n    var lastNoteBeatCount17 = 0\n    var lastNoteBeatCount18 = 0\n    var\
    \ lastNoteBeatCount19 = 0\n    var lastNoteBeatCount20 = 0\n    var lastNoteBeatCount21\
    \ = 0\n    var lastNoteBeatCount22 = 0\n    var lastNoteBeatCount23 = 0\n    var\
    \ lastNoteBeatCount24 = 0\n    var lastNoteBeatCount25 = 0\n    var lastNoteBeatCount26\
    \ = 0\n    var lastNoteBeatCount27 = 0\n    var lastNoteBeatCount28 = 0\n    var\
    \ lastNoteBeatCount29 = 0\n    var lastNoteBeatCount30 = 0\n    var lastNoteBeatCount31\
    \ = 0\n    var lastNoteBeatCount32 = 0\n    var lastNoteBeatCount33 = 0\n    var\
    \ lastNoteBeatCount34 = 0\n    var lastNoteBeatCount35 = 0\n    var lastNoteBeatCount36\
    \ = 0\n    var lastNoteBeatCount37 = 0\n    var lastNoteBeatCount38 = 0\n    var\
    \ lastNoteBeatCount39 = 0\n    var lastNoteBeatCount40 = 0\n    var lastNoteBeatCount41\
    \ = 0\n    var lastNoteBeatCount42 = 0\n    var lastNoteBeatCount43 = 0\n    var\
    \ lastNoteBeatCount44 = 0\n    var lastNoteBeatCount45 = 0\n    var lastNoteBeatCount46\
    \ = 0\n    var lastNoteBeatCount47 = 0\n    var lastNoteBeatCount48 = 0\n    var\
    \ lastNoteBeatCount49 = 0\n    var lastNoteBeatCount50 = 0\n    var lastNoteBeatCount51\
    \ = 0\n    var lastNoteBeatCount52 = 0\n    var lastNoteBeatCount53\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpga2n9aym.swift:71:9: error: type annotation missing in pattern\n\
    \    var lastNoteBeatCount53\n        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    for c in\
    \ music_string {\n        if c == 'o' {\n            notes.append(note)\n    \
    \        note = \"\"\n            beat = 0\n        } else if c == '|' {\n   \
    \         notes.append(note)\n            note = \"\"\n            beat = 0\n\
    \            beats.append(beat)\n        } else if c == '.' {\n            notes.append(note)\n\
    \            note = \"\"\n            beat = 0\n        } else {\n           \
    \ note += String(c)\n        }\n    }\n    notes.append(note)\n    for note in\
    \ notes {\n        beats.append(notes.count())\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpy71843br.swift:17:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpy71843br.swift:21:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmpy71843br.swift:26:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.' {\n                       ^~~\n\
    \                       \".\"\n/tmp/tmpy71843br.swift:36:28: error: cannot call\
    \ value of non-function type 'Int'\n        beats.append(notes.count())\n    \
    \                       ^    ~~\n                                \n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var lastNote = \"\"\n    var lastNoteBeat = 0\n    var lastNoteBeatCount\
    \ = 0\n    var lastNoteBeatCount2 = 0\n    var lastNoteBeatCount3 = 0\n    var\
    \ lastNoteBeatCount4 = 0\n    var lastNoteBeatCount5 = 0\n    var lastNoteBeatCount6\
    \ = 0\n    var lastNoteBeatCount7 = 0\n    var lastNoteBeatCount8 = 0\n    var\
    \ lastNoteBeatCount9 = 0\n    var lastNoteBeatCount10 = 0\n    var lastNoteBeatCount11\
    \ = 0\n    var lastNoteBeatCount12 = 0\n    var lastNoteBeatCount13 = 0\n    var\
    \ lastNoteBeatCount14 = 0\n    var lastNoteBeatCount15 = 0\n    var lastNoteBeatCount16\
    \ = 0\n    var lastNoteBeatCount17 = 0\n    var lastNoteBeatCount18 = 0\n    var\
    \ lastNoteBeatCount19 = 0\n    var lastNoteBeatCount20 = 0\n    var lastNoteBeatCount21\
    \ = 0\n    var lastNoteBeatCount22 = 0\n    var lastNoteBeatCount23 = 0\n    var\
    \ lastNoteBeatCount24 = 0\n    var lastNoteBeatCount25 = 0\n    var lastNoteBeatCount26\
    \ = 0\n    var lastNoteBeatCount27 = 0\n    var lastNoteBeatCount28 = 0\n    var\
    \ lastNoteBeatCount29 = 0\n    var lastNoteBeatCount30 = 0\n    var lastNoteBeatCount31\
    \ = 0\n    var lastNoteBeatCount32 = 0\n    var lastNoteBeatCount33 = 0\n    var\
    \ lastNoteBeatCount34 = 0\n    var lastNoteBeatCount35 = 0\n    var lastNoteBeatCount36\
    \ = 0\n    var lastNoteBeatCount37 = 0\n    var lastNoteBeatCount38 = 0\n    var\
    \ lastNoteBeatCount39 = 0\n    var lastNoteBeatCount40 = 0\n    var lastNoteBeatCount41\
    \ = 0\n    var lastNoteBeatCount42 = 0\n    var lastNoteBeatCount43 = 0\n    var\
    \ lastNoteBeatCount44 = 0\n    var lastNoteBeatCount45 = 0\n    var lastNoteBeatCount46\
    \ = 0\n    var lastNoteBeatCount47 = 0\n    var lastNoteBeatCount48 = 0\n    var\
    \ lastNoteBeatCount49 = 0\n    var lastNoteBeatCount50 = 0\n    var lastNoteBeatCount51\
    \ = 0\n    var lastNoteBeatCount52 = 0\n    var lastNoteBeatCount53\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpga2n9aym.swift:71:9: error: type annotation missing in pattern\n\
    \    var lastNoteBeatCount53\n        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = 0\n    var note_index\
    \ = 0\n    var note_length = 0\n    var note_length_index = 0\n    var note_length_value\
    \ = 0\n    var note_length_value_index = 0\n    var note_length_value_value =\
    \ 0\n    var note_length_value_value_index = 0\n    var note_length_value_value_value\
    \ = 0\n    var note_length_value_value_value_index = 0\n    var note_length_value_value_value_value\
    \ = 0\n    var note_length_value_value_value_index = 0\n    var note_length_value_value_value_value\
    \ = 0\n    var note_length_value_value_value_index = 0\n    var note_length_value_value_value_value\
    \ = 0\n    var note_length_value_value_value_index = 0\n    var note_length_value_value_value_value\
    \ = 0\n    var note_length_value_value_value_index = 0\n    var note_length_value_value_value_value\
    \ = 0\n    var note_length_value_value_value_index = 0\n    var note_length_value_value_value_value\
    \ = 0\n    var note_length_value_value_value_index = 0\n    var note_length_value_value_value_value\
    \ = 0\n    var note_length_value_value_value_index = 0\n    var note_length_value_value_value_value\
    \ = 0\n    var note_length_value_value_value_index = 0\n    var note_length_value_value_value_value\
    \ = 0\n    var note_length_value_value_value_index = 0\n    var note_length_value_value_value_value\
    \ = 0\n    var note_length_value_value_value_index = 0\n    var note_length_value_value_value_value\
    \ = 0\n    var note_length_value_value_value_index = 0\n    var note_length_value_value_value_value\
    \ = 0\n    var note_length_value_value_value_index = 0\n    var note_length_value_value_value_value\
    \ = 0\n    var note_length_value_value_value_index = 0\n    var note_length_value_value_value_value\
    \ = 0\n    var note_length_value_value_value_index = 0\n    var note_length_value_value_value_value\
    \ = 0\n    var note_length_value_value_value_index = 0\n    var note_length_value_value_value_value\
    \ = 0\n    var note_length_value_value_value_index = 0\n    var note_length_value_value_value_value\
    \ = 0\n    var note_length_value_value_value_index = 0\n    var note_length_value_value_value_value\
    \ = 0\n    var note_length_value_value_value_index = 0\n    var note_length_value_value_value_value\
    \ = 0\n    var note_length_value_value_value_index = 0\n    var note_length_value_value_value_value\
    \ = 0\n    var note_length_value_value_value_index = 0\n    var note_length_value_value_value_value\
    \ = 0\n    var note_length_value_value_value_index = 0\n    var note_length_value_value_value_value\
    \ = 0\n    var note_length_value_value_value_index = 0\n    var note_length_value_value_value_value\
    \ = 0\n    var note_length_value_value_value_index = 0\n    var note_length_value_value_value_value\
    \ = 0\n    var note_length_value_value_value\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmprfdcjizk.swift:26:9: error: invalid redeclaration of 'note_length_value_value_value_index'\n\
    \    var note_length_value_value_value_index = 0\n        ^\n/tmp/tmprfdcjizk.swift:24:9:\
    \ note: 'note_length_value_value_value_index' previously declared here\n    var\
    \ note_length_value_value_value_index = 0\n        ^\n/tmp/tmprfdcjizk.swift:27:9:\
    \ error: invalid redeclaration of 'note_length_value_value_value_value'\n    var\
    \ note_length_value_value_value_value = 0\n        ^\n/tmp/tmprfdcjizk.swift:25:9:\
    \ note: 'note_length_value_value_value_value' previously declared here\n    var\
    \ note_length_value_value_value_value = 0\n        ^\n/tmp/tmprfdcjizk.swift:28:9:\
    \ error: invalid redeclaration of 'note_length_value_value_value_index'\n    var\
    \ note_length_value_value_value_index = 0\n        ^\n/tmp/tmprfdcjizk.swift:24:9:\
    \ note: 'note_length_value_value_value_index' previously declared here\n    var\
    \ note_length_value_value_value_index = 0\n        ^\n/tmp/tmprfdcjizk.swift:29:9:\
    \ error: invalid redeclaration of 'note_length_value_value_value_value'\n    var\
    \ note_length_value_value_value_value = 0\n        ^\n/tmp/tmprfdcjizk.swift:25:9:\
    \ note: 'note_length_value_value_value_value' previously declared here\n    var\
    \ note_length_value_value_value_value = 0\n        ^\n/tmp/tmprfdcjizk.swift:30:9:\
    \ error: invalid redeclaration of 'note_length_value_value_value_index'\n    var\
    \ note_length_value_value_value_index = 0\n        ^\n/tmp/tmprfdcjizk.swift:24:9:\
    \ note: 'note_length_value_value_value_index' previously declared here\n    var\
    \ note_length_value_value_value_index = 0\n        ^\n/tmp/tmprfdcjizk.swift:31:9:\
    \ error: invalid redeclaration of 'note_length_value_value_value_value'\n    var\
    \ note_length_value_value_value_value = 0\n        ^\n/tmp/tmprfdcjizk.swift:25:9:\
    \ note: 'note_length_value_value_value_value' previously declared here\n    var\
    \ note_length_value_value_value_value = 0\n        ^\n/tmp/tmprfdcjizk.swift:32:9:\
    \ error: invalid redeclaration of 'note_length_value_value_value_index'\n    var\
    \ note_length_value_value_value_index = 0\n        ^\n/tmp/tmprfdcj"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array: [Int]\
    \ = []\n    var beats_count = 0\n    var current_beat = 0\n    var current_note\
    \ = 0\n    var current_note_length = 0\n    var current_note_length_index = 0\n\
    \    var current_note_length_string = \"\"\n    var current_note_string = \"\"\
    \n    var current_note_string_index = 0\n    var current_note_string_index_index\
    \ = 0\n    var current_note_string_index_index2 = 0\n    var current_note_string_index2_index\
    \ = 0\n    var current_note_string_index3 = 0\n    var current_note_string_index3_index\
    \ = 0\n    var current_note_string_index4 = 0\n    var current_note_string_index4_index\
    \ = 0\n    var current_note_string_index5 = 0\n    var current_note_string_index5_index\
    \ = 0\n    var current_note_string_index6 = 0\n    var current_note_string_index6_index\
    \ = 0\n    var current_note_string_index7 = 0\n    var current_note_string_index7_index\
    \ = 0\n    var current_note_string_index8 = 0\n    var current_note_string_index8_index\
    \ = 0\n    var current_note_string_index9 = 0\n    var current_note_string_index9_index\
    \ = 0\n    var current_note_string_index10 = 0\n    var current_note_string_index10_index\
    \ = 0\n    var current_note_string_index11 = 0\n    var current_note_string_index11_index\
    \ = 0\n    var current_note_string_index12 = 0\n    var current_note_string_index12_index\
    \ = 0\n    var current_note_string_index13 = 0\n    var current_note_string_index13_index\
    \ = 0\n    var current_note_string_index14 = 0\n    var current_note_string_index14_index\
    \ = 0\n    var current_note_string_index15 = 0\n    var current_note_string_index15_index\
    \ = 0\n    var current_note_string_index16 = 0\n    var current_note_string_index16_index\
    \ = 0\n    var current_note_string_index17 = 0\n    var current_note_string_index17_index\
    \ = 0\n    var current_note_string_index18 = 0\n    var current_note_string_index18_index\
    \ = 0\n    var current_note_string_index19 = 0\n    var current_note_string_index19_index\
    \ = 0\n    var current_note_string_index20 = 0\n    var current_note_string_index20_index\
    \ = 0\n    var current_note_string_index21 = 0\n    var current_note_string_index21_index\
    \ = 0\n    var current_note_string_index22 = 0\n    var current_note_string_index22_index\
    \ = 0\n    var current_note_string_index23 = 0\n    var current_note_string_index23_index\
    \ = 0\n    var current_note_string_index24 = 0\n    var current_note_string_index24_index\
    \ = 0\n    var current_note_string_index25 = 0\n    var current_note_string_index25_index\
    \ = 0\n    var current_note_string_index26 = 0\n    var current_note_string_index26_index\
    \ = 0\n    var current_note_string_index27 = 0\n    var current_note_string_index27_index\
    \ = 0\n    var current_note_string_index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpodffir9t.swift:74:9: error: type annotation missing in pattern\n\
    \    var current_note_string_index\n        ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var notes_length_to_beat\
    \ = 0\n    var notes_length_to_beat_to_beat = 0\n    var notes_length_to_beat_to_beat_to_beat\
    \ = 0\n    var notes_length_to_beat_to_beat_to_beat_to_beat = 0\n    var notes_length_to_beat_to_beat_to_beat_to_beat_to_beat\
    \ = 0\n    var notes_length_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat =\
    \ 0\n    var notes_length_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat\
    \ = 0\n    var notes_length_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat\
    \ = 0\n    var notes_length_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat\
    \ = 0\n    var notes_length_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat\
    \ = 0\n    var notes_length_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat\
    \ = 0\n    var notes_length_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat\
    \ = 0\n    var notes_length_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat\
    \ = 0\n    var notes_length_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat\
    \ = 0\n    var notes_length_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat\
    \ = 0\n    var notes_length_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat\
    \ = 0\n    var notes_length_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat\
    \ = 0\n    var notes_length_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat\
    \ = 0\n    var notes_length_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat\
    \ = 0\n    var notes_length_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpnc_v2zs6.swift:28:9: error: invalid redeclaration of 'notes_length_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat'\n\
    \    var notes_length_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat\
    \ = 0\n        ^\n/tmp/tmpnc_v2zs6.swift:27:9: note: 'notes_length_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat'\
    \ previously declared here\n    var notes_length_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat\
    \ = 0\n        ^\n/tmp/tmpnc_v2zs6.swift:29:9: error: invalid redeclaration of\
    \ 'notes_length_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat'\n\
    \    var notes_length_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat\
    \ = 0\n        ^\n/tmp/tmpnc_v2zs6.swift:27:9: note: 'notes_length_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat'\
    \ previously declared here\n    var notes_length_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat\
    \ = 0\n        ^\n/tmp/tmpnc_v2zs6.swift:30:9: error: invalid redeclaration of\
    \ 'notes_length_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat'\n\
    \    var notes_length_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat\
    \ = 0\n        ^\n/tmp/tmpnc_v2zs6.swift:27:9: note: 'notes_length_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat'\
    \ previously declared here\n    var notes_length_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat\
    \ = 0\n        ^\n/tmp/tmpnc_v2zs6.swift:32:9: error: invalid redeclaration of\
    \ 'notes_length_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_beat_to_bea"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var current_beat = 0\n    var current_note = \"\"\
    \n    var current_note_length = 0\n    var last_note = \"\"\n    var last_note_length\
    \ = 0\n    var last_note_beat = 0\n    var last_note_note_length = 0\n    var\
    \ last_note_note_beat = 0\n    var last_note_note_note_length = 0\n    var last_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_length = 0\n    var last_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_note_length = 0\n    var last_note_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_note_length = 0\n    var last_note_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_note_length = 0\n    var last_note_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_note_length = 0\n    var last_note_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_note_length = 0\n    var last_note_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_note_length = 0\n    var last_note_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_length = 0\n    var last_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_length = 0\n    var last_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_length = 0\n    var last_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_length = 0\n    var last_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_length = 0\n    var last_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_length = 0\n    var last_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_length = 0\n    var last_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_length = 0\n    var last_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_length = 0\n    var last_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_length = 0\n    var last_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_length = 0\n    var last_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_length = 0\n    var last_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_length = 0\n    var last_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_length = 0\n    var last_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_length = 0\n    var last_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_length = 0\n    var last_note_note_note_note_beat\
    \ = 0\n    var last_note_note_note_note_length = 0\n    var last_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpexj7a6ne.swift:28:9: error: invalid redeclaration of 'last_note_note_note_note_note_length'\n\
    \    var last_note_note_note_note_note_length = 0\n        ^\n/tmp/tmpexj7a6ne.swift:26:9:\
    \ note: 'last_note_note_note_note_note_length' previously declared here\n    var\
    \ last_note_note_note_note_note_length = 0\n        ^\n/tmp/tmpexj7a6ne.swift:29:9:\
    \ error: invalid redeclaration of 'last_note_note_note_note_note_beat'\n    var\
    \ last_note_note_note_note_note_beat = 0\n        ^\n/tmp/tmpexj7a6ne.swift:27:9:\
    \ note: 'last_note_note_note_note_note_beat' previously declared here\n    var\
    \ last_note_note_note_note_note_beat = 0\n        ^\n/tmp/tmpexj7a6ne.swift:30:9:\
    \ error: invalid redeclaration of 'last_note_note_note_note_note_length'\n   \
    \ var last_note_note_note_note_note_length = 0\n        ^\n/tmp/tmpexj7a6ne.swift:26:9:\
    \ note: 'last_note_note_note_note_note_length' previously declared here\n    var\
    \ last_note_note_note_note_note_length = 0\n        ^\n/tmp/tmpexj7a6ne.swift:31:9:\
    \ error: invalid redeclaration of 'last_note_note_note_note_note_beat'\n    var\
    \ last_note_note_note_note_note_beat = 0\n        ^\n/tmp/tmpexj7a6ne.swift:27:9:\
    \ note: 'last_note_note_note_note_note_beat' previously declared here\n    var\
    \ last_note_note_note_note_note_beat = 0\n        ^\n/tmp/tmpexj7a6ne.swift:32:9:\
    \ error: invalid redeclaration of 'last_note_note_note_note_note_length'\n   \
    \ var last_note_note_note_note_note_length = 0\n        ^\n/tmp/tmpexj7a6ne.swift:26:9:\
    \ note: 'last_note_note_note_note_note_length' previously declared here\n    var\
    \ last_note_note_note_note_note_length = 0\n        ^\n/tmp/tmpexj7a6ne.swift:33:9:\
    \ error: invalid redeclaration of 'last_note_note_note_note_note_beat'\n    var\
    \ last_note_note_note_note_note_beat = 0\n        ^\n/tmp/tmpexj7a6ne.swift:27:9:\
    \ note: 'last_note_note_note_note_note_beat' previously declared here\n    var\
    \ last_note_note_note_note_note_beat = 0\n        ^\n/tmp/tmpexj7a6ne.swift:34:9:\
    \ error: invalid redeclaration of 'last_note_note_note_note_note_length'\n   \
    \ var last_note_note_note_note_note_length = 0\n        ^\n/tmp/tmpexj"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var notes_length_to_beat\
    \ = [Int]()\n    var notes_length_to_beat_index = 0\n    var notes_length_to_beat_length\
    \ = 0\n    var notes_length_to_beat_length_index = 0\n    var notes_length_to_beat_length_to_beat\
    \ = [Int]()\n    var notes_length_to_beat_length_to_beat_index = 0\n    var notes_length_to_beat_length_to_beat_length\
    \ = 0\n    var notes_length_to_beat_length_to_beat_length_index = 0\n    var notes_length_to_beat_length_to_beat_length_to_beat\
    \ = [Int]()\n    var notes_length_to_beat_length_to_beat_length_to_beat_index\
    \ = 0\n    var notes_length_to_beat_length_to_beat_length_to_beat_length = 0\n\
    \    var notes_length_to_beat_length_to_beat_length_to_beat_length_index = 0\n\
    \    var notes_length_to_beat_length_to_beat_length_to_beat_length_to_beat = [Int]()\n\
    \    var notes_length_to_beat_length_to_beat_length_to_beat_length_to_beat_index\
    \ = 0\n    var notes_length_to_beat_length_to_beat_length_to_beat_length_to_beat_length\
    \ = 0\n    var notes_length_to_beat_length_to_beat_length_to_beat_length_to_beat_length_index\
    \ = 0\n    var notes_length_to_beat_length_to_beat_length_to_beat_length_to_beat_length_to_beat\
    \ = [Int]()\n    var notes_length_to_beat_length_to_beat_length_to_beat_length_to_beat_length_to_beat_index\
    \ = 0\n    var notes_length_to_beat_length_to_beat_length_to_beat_length_to_beat_length_to_beat_length\
    \ = 0\n    var notes_length_to_beat_length_to_beat_length_to_beat_length_to_beat_length_to_beat_length_index\
    \ = 0\n    var notes_length_to_beat_length_to_beat_length_to_beat_length_to_beat_length_to_beat_length_to_beat\
    \ = [Int]()\n    var notes_length_to_beat_length_to_beat_length_to_beat_length_to_beat_length_to_beat_length_to_beat_index\
    \ = 0\n    var notes_length_to_beat_length_to_beat_length_to_beat_length_to_beat_length_to_beat_length_to_beat_length_to_beat\
    \ = [Int]()\n    var notes_length_to_beat_length_to_beat_length_to_beat_length_to_beat_length_to_beat_length_to_beat_length_to_beat_length\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpa0at59xy.swift:38:9: error: type annotation missing in pattern\n\
    \    var notes_length_to_beat_length_to_beat_length_to_beat_length_to_beat_length_to_beat_length_to_beat_length_to_beat_length\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = String()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1i2wovyq.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n \
    \   var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote\
    \ = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n\
    \    var lastNote = \"\"\n    var lastBeat = 0\n    var lastNote = \"\"\n    var\
    \ lastBeat = 0\n    var lastNote = \"\"\n    var last\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpg1e668tk.swift:19:9: error: invalid redeclaration of 'lastBeat'\n\
    \    var lastBeat = 0\n        ^\n/tmp/tmpg1e668tk.swift:17:9: note: 'lastBeat'\
    \ previously declared here\n    var lastBeat = 0\n        ^\n/tmp/tmpg1e668tk.swift:20:9:\
    \ error: invalid redeclaration of 'lastNote'\n    var lastNote = \"\"\n      \
    \  ^\n/tmp/tmpg1e668tk.swift:18:9: note: 'lastNote' previously declared here\n\
    \    var lastNote = \"\"\n        ^\n/tmp/tmpg1e668tk.swift:21:9: error: invalid\
    \ redeclaration of 'lastBeat'\n    var lastBeat = 0\n        ^\n/tmp/tmpg1e668tk.swift:17:9:\
    \ note: 'lastBeat' previously declared here\n    var lastBeat = 0\n        ^\n\
    /tmp/tmpg1e668tk.swift:22:9: error: invalid redeclaration of 'lastNote'\n    var\
    \ lastNote = \"\"\n        ^\n/tmp/tmpg1e668tk.swift:18:9: note: 'lastNote' previously\
    \ declared here\n    var lastNote = \"\"\n        ^\n/tmp/tmpg1e668tk.swift:23:9:\
    \ error: invalid redeclaration of 'lastBeat'\n    var lastBeat = 0\n        ^\n\
    /tmp/tmpg1e668tk.swift:17:9: note: 'lastBeat' previously declared here\n    var\
    \ lastBeat = 0\n        ^\n/tmp/tmpg1e668tk.swift:24:9: error: invalid redeclaration\
    \ of 'lastNote'\n    var lastNote = \"\"\n        ^\n/tmp/tmpg1e668tk.swift:18:9:\
    \ note: 'lastNote' previously declared here\n    var lastNote = \"\"\n       \
    \ ^\n/tmp/tmpg1e668tk.swift:25:9: error: invalid redeclaration of 'lastBeat'\n\
    \    var lastBeat = 0\n        ^\n/tmp/tmpg1e668tk.swift:17:9: note: 'lastBeat'\
    \ previously declared here\n    var lastBeat = 0\n        ^\n/tmp/tmpg1e668tk.swift:26:9:\
    \ error: invalid redeclaration of 'lastNote'\n    var lastNote = \"\"\n      \
    \  ^\n/tmp/tmpg1e668tk.swift:18:9: note: 'lastNote' previously declared here\n\
    \    var lastNote = \"\"\n        ^\n/tmp/tmpg1e668tk.swift:27:9: error: invalid\
    \ redeclaration of 'lastBeat'\n    var lastBeat = 0\n        ^\n/tmp/tmpg1e668tk.swift:17:9:\
    \ note: 'lastBeat' previously declared here\n    var lastBeat = 0\n        ^\n\
    /tmp/tmpg1e668tk.swift:28:9: error: invalid redeclaration of 'lastNote'\n    var\
    \ lastNote = \"\"\n        ^\n/tmp/tmpg1e668tk.swift:18:9: note: 'lastNote' previously\
    \ declared here\n    var lastNote = \""
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var lastNote = \"\"\n    var lastNoteBeat = 0\n    var lastNoteBeatCount\
    \ = 0\n    var lastNoteBeatCount2 = 0\n    var lastNoteBeatCount3 = 0\n    var\
    \ lastNoteBeatCount4 = 0\n    var lastNoteBeatCount5 = 0\n    var lastNoteBeatCount6\
    \ = 0\n    var lastNoteBeatCount7 = 0\n    var lastNoteBeatCount8 = 0\n    var\
    \ lastNoteBeatCount9 = 0\n    var lastNoteBeatCount10 = 0\n    var lastNoteBeatCount11\
    \ = 0\n    var lastNoteBeatCount12 = 0\n    var lastNoteBeatCount13 = 0\n    var\
    \ lastNoteBeatCount14 = 0\n    var lastNoteBeatCount15 = 0\n    var lastNoteBeatCount16\
    \ = 0\n    var lastNoteBeatCount17 = 0\n    var lastNoteBeatCount18 = 0\n    var\
    \ lastNoteBeatCount19 = 0\n    var lastNoteBeatCount20 = 0\n    var lastNoteBeatCount21\
    \ = 0\n    var lastNoteBeatCount22 = 0\n    var lastNoteBeatCount23 = 0\n    var\
    \ lastNoteBeatCount24 = 0\n    var lastNoteBeatCount25 = 0\n    var lastNoteBeatCount26\
    \ = 0\n    var lastNoteBeatCount27 = 0\n    var lastNoteBeatCount28 = 0\n    var\
    \ lastNoteBeatCount29 = 0\n    var lastNoteBeatCount30 = 0\n    var lastNoteBeatCount31\
    \ = 0\n    var lastNoteBeatCount32 = 0\n    var lastNoteBeatCount33 = 0\n    var\
    \ lastNoteBeatCount34 = 0\n    var lastNoteBeatCount35 = 0\n    var lastNoteBeatCount36\
    \ = 0\n    var lastNoteBeatCount37 = 0\n    var lastNoteBeatCount38 = 0\n    var\
    \ lastNoteBeatCount39 = 0\n    var lastNoteBeatCount40 = 0\n    var lastNoteBeatCount41\
    \ = 0\n    var lastNoteBeatCount42 = 0\n    var lastNoteBeatCount43 = 0\n    var\
    \ lastNoteBeatCount44 = 0\n    var lastNoteBeatCount45 = 0\n    var lastNoteBeatCount46\
    \ = 0\n    var lastNoteBeatCount47 = 0\n    var lastNoteBeatCount48 = 0\n    var\
    \ lastNoteBeatCount49 = 0\n    var lastNoteBeatCount50 = 0\n    var lastNoteBeatCount51\
    \ = 0\n    var lastNoteBeatCount52 = 0\n    var lastNoteBeatCount53\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpga2n9aym.swift:71:9: error: type annotation missing in pattern\n\
    \    var lastNoteBeatCount53\n        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var lastNote = \"\"\n    var lastNoteBeat = 0\n    var lastNoteBeatCount\
    \ = 0\n    var lastNoteBeatCount2 = 0\n    var lastNoteBeatCount3 = 0\n    var\
    \ lastNoteBeatCount4 = 0\n    var lastNoteBeatCount5 = 0\n    var lastNoteBeatCount6\
    \ = 0\n    var lastNoteBeatCount7 = 0\n    var lastNoteBeatCount8 = 0\n    var\
    \ lastNoteBeatCount9 = 0\n    var lastNoteBeatCount10 = 0\n    var lastNoteBeatCount11\
    \ = 0\n    var lastNoteBeatCount12 = 0\n    var lastNoteBeatCount13 = 0\n    var\
    \ lastNoteBeatCount14 = 0\n    var lastNoteBeatCount15 = 0\n    var lastNoteBeatCount16\
    \ = 0\n    var lastNoteBeatCount17 = 0\n    var lastNoteBeatCount18 = 0\n    var\
    \ lastNoteBeatCount19 = 0\n    var lastNoteBeatCount20 = 0\n    var lastNoteBeatCount21\
    \ = 0\n    var lastNoteBeatCount22 = 0\n    var lastNoteBeatCount23 = 0\n    var\
    \ lastNoteBeatCount24 = 0\n    var lastNoteBeatCount25 = 0\n    var lastNoteBeatCount26\
    \ = 0\n    var lastNoteBeatCount27 = 0\n    var lastNoteBeatCount28 = 0\n    var\
    \ lastNoteBeatCount29 = 0\n    var lastNoteBeatCount30 = 0\n    var lastNoteBeatCount31\
    \ = 0\n    var lastNoteBeatCount32 = 0\n    var lastNoteBeatCount33 = 0\n    var\
    \ lastNoteBeatCount34 = 0\n    var lastNoteBeatCount35 = 0\n    var lastNoteBeatCount36\
    \ = 0\n    var lastNoteBeatCount37 = 0\n    var lastNoteBeatCount38 = 0\n    var\
    \ lastNoteBeatCount39 = 0\n    var lastNoteBeatCount40 = 0\n    var lastNoteBeatCount41\
    \ = 0\n    var lastNoteBeatCount42 = 0\n    var lastNoteBeatCount43 = 0\n    var\
    \ lastNoteBeatCount44 = 0\n    var lastNoteBeatCount45 = 0\n    var lastNoteBeatCount46\
    \ = 0\n    var lastNoteBeatCount47 = 0\n    var lastNoteBeatCount48 = 0\n    var\
    \ lastNoteBeatCount49 = 0\n    var lastNoteBeatCount50 = 0\n    var lastNoteBeatCount51\
    \ = 0\n    var lastNoteBeatCount52 = 0\n    var lastNoteBeatCount53\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpga2n9aym.swift:71:9: error: type annotation missing in pattern\n\
    \    var lastNoteBeatCount53\n        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array: [Int]\
    \ = []\n    var current_beat = 0\n    var current_note = 0\n    var current_note_value\
    \ = 0\n    var current_note_octave = 0\n    var current_note_duration = 0\n  \
    \  var current_note_duration_value = 0\n    var current_note_duration_type = 0\n\
    \    var current_note_duration_type_octave = 0\n    var current_note_duration_type_duration\
    \ = 0\n    var current_note_duration_type_duration_value = 0\n    var current_note_duration_type_duration_type\
    \ = 0\n    var current_note_duration_type_duration_type_octave = 0\n    var current_note_duration_type_duration_type_duration\
    \ = 0\n    var current_note_duration_type_duration_type_duration_value = 0\n \
    \   var current_note_duration_type_duration_type_duration_type = 0\n    var current_note_duration_type_duration_type_duration_type_octave\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_value\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_octave\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_value\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_octave\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_value\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_octave\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_value\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_octave\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_value\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_octave\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration\
    \ = 0\n    var current_note_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp6yvhat82.swift:50:9: error: type annotation missing in pattern\n\
    \    var current_note_\n        ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var note = String()\n    var last_note = String()\n\
    \    var last_beat = Int()\n    var last_beat_count = 0\n    var last_beat_note\
    \ = String()\n    var last_beat_note_count = 0\n    var last_beat_note_index =\
    \ Int()\n    var last_beat_note_index2 = Int()\n    var last_beat_note_index3\
    \ = Int()\n    var last_beat_note_index4 = Int()\n    var last_beat_note_index5\
    \ = Int()\n    var last_beat_note_index6 = Int()\n    var last_beat_note_index7\
    \ = Int()\n    var last_beat_note_index8 = Int()\n    var last_beat_note_index9\
    \ = Int()\n    var last_beat_note_index10 = Int()\n    var last_beat_note_index11\
    \ = Int()\n    var last_beat_note_index12 = Int()\n    var last_beat_note_index13\
    \ = Int()\n    var last_beat_note_index14 = Int()\n    var last_beat_note_index15\
    \ = Int()\n    var last_beat_note_index16 = Int()\n    var last_beat_note_index17\
    \ = Int()\n    var last_beat_note_index18 = Int()\n    var last_beat_note_index19\
    \ = Int()\n    var last_beat_note_index20 = Int()\n    var last_beat_note_index21\
    \ = Int()\n    var last_beat_note_index22 = Int()\n    var last_beat_note_index23\
    \ = Int()\n    var last_beat_note_index24 = Int()\n    var last_beat_note_index25\
    \ = Int()\n    var last_beat_note_index26 = Int()\n    var last_beat_note_index27\
    \ = Int()\n    var last_beat_note_index28 = Int()\n    var last_beat_note_index29\
    \ = Int()\n    var last_beat_note_index30 = Int()\n    var last_beat_note_index31\
    \ = Int()\n    var last_beat_note_index32 = Int()\n    var last_beat_note_index33\
    \ = Int()\n    var last_beat_note_index34 = Int()\n    var last_beat_note_index35\
    \ = Int()\n    var last_beat_note_index36 = Int()\n    var last_beat_note_index37\
    \ = Int()\n    var last_beat_note_index38 = Int()\n    var last_beat_note_index39\
    \ = Int()\n    var last_beat_note_index40 = Int()\n    var last_beat_note_index41\
    \ = Int()\n    var last_beat_note_index42 = Int()\n    var last_beat_note_index43\
    \ = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(parse_music(music_string: \"\"\
    ) == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4, 4, 4,\
    \ 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string:\
    \ \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdl5l1m0i.swift:62:33: error: expected initial value after '='\n\
    \    var last_beat_note_index43 = \n                                ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var last_note = 0\n    var last_note_length = 0\n    var last_note_length_index\
    \ = 0\n    var last_note_length_index2 = 0\n    var last_note_length_index3 =\
    \ 0\n    var last_note_length_index4 = 0\n    var last_note_length_index5 = 0\n\
    \    var last_note_length_index6 = 0\n    var last_note_length_index7 = 0\n  \
    \  var last_note_length_index8 = 0\n    var last_note_length_index9 = 0\n    var\
    \ last_note_length_index10 = 0\n    var last_note_length_index11 = 0\n    var\
    \ last_note_length_index12 = 0\n    var last_note_length_index13 = 0\n    var\
    \ last_note_length_index14 = 0\n    var last_note_length_index15 = 0\n    var\
    \ last_note_length_index16 = 0\n    var last_note_length_index17 = 0\n    var\
    \ last_note_length_index18 = 0\n    var last_note_length_index19 = 0\n    var\
    \ last_note_length_index20 = 0\n    var last_note_length_index21 = 0\n    var\
    \ last_note_length_index22 = 0\n    var last_note_length_index23 = 0\n    var\
    \ last_note_length_index24 = 0\n    var last_note_length_index25 = 0\n    var\
    \ last_note_length_index26 = 0\n    var last_note_length_index27 = 0\n    var\
    \ last_note_length_index28 = 0\n    var last_note_length_index29 = 0\n    var\
    \ last_note_length_index30 = 0\n    var last_note_length_index31 = 0\n    var\
    \ last_note_length_index32 = 0\n    var last_note_length_index33 = 0\n    var\
    \ last_note_length_index34 = 0\n    var last_note_length_index35 = 0\n    var\
    \ last_note_length_index36 = 0\n    var last_note_length_index37 = 0\n    var\
    \ last_note_length_index38 = 0\n    var last_note_length_index39 = 0\n    var\
    \ last_note_length_index40 = 0\n    var last_note_length_index41 = 0\n    var\
    \ last_note_length_index42 = 0\n    var last_note_length_index43 = 0\n    var\
    \ last_note_length_index44 = 0\n    var last_note_length_index45 = 0\n    var\
    \ last_note_length_index46 = 0\n    var last_note_length_index47 = 0\n    var\
    \ last_note_length_index48 = 0\n    var last_note_length_index49 = 0\n    var\
    \ last_note_length_index50 = 0\n    var last_note_length_index51 = 0\n    var\
    \ last_note_length_index52 = 0\n    var last_note_length_index53 = 0\n    var\
    \ last_note_length_index54 = 0\n    var last_note_length_index55 = 0\n    var\
    \ last_note_length_index56 = 0\n    var last_note_length_index57 = 0\n    var\
    \ last_note_length_index58 = 0\n    var last_note_length_index59 = 0\n    var\
    \ last_note_length_index60 = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpcdgv4avr.swift:12:9: warning: variable 'beats' was never used;\
    \ consider replacing with '_' or removing it\n    var beats: [Int] = []\n    \
    \    ^~~~~\n        _\n/tmp/tmpcdgv4avr.swift:13:9: warning: initialization of\
    \ variable 'current_beat' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var current_beat = 0\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmpcdgv4avr.swift:14:9: warning: initialization of variable 'current_note'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var current_note = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpcdgv4avr.swift:15:9:\
    \ warning: initialization of variable 'current_note_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var current_note_length\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpcdgv4avr.swift:16:9: warning:\
    \ initialization of variable 'last_note' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var last_note = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpcdgv4avr.swift:17:9: warning: initialization of variable 'last_note_length'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_note_length = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpcdgv4avr.swift:18:9:\
    \ warning: initialization of variable 'last_note_length_index' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var last_note_length_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpcdgv4avr.swift:19:9: warning:\
    \ initialization of variable 'last_note_length_index2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var last_note_length_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpcdgv4avr.swift:20:9: warning:\
    \ initialization of variable 'last_note_length_index3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var last_note_length_index3\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpcdgv4avr.swift:21:9: warning:\
    \ initialization of variable 'last_note_length_index4' was never used; consider\
    \ replacin"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = 0\n    var last =\
    \ 0\n    var lastBeat = 0\n    var lastNote = 0\n    var lastBeatBeat = 0\n  \
    \  var lastNoteBeat = 0\n    var lastBeatNote = 0\n    var lastNoteNote = 0\n\
    \    var lastBeatBeatNote = 0\n    var lastNoteBeatNote = 0\n    var lastBeatBeatNote\
    \ = 0\n    var lastNoteBeatNote = 0\n    var lastBeatBeatNote = 0\n    var lastNoteBeatNote\
    \ = 0\n    var lastBeatBeatNote = 0\n    var lastNoteBeatNote = 0\n    var lastBeatBeatNote\
    \ = 0\n    var lastNoteBeatNote = 0\n    var lastBeatBeatNote = 0\n    var lastNoteBeatNote\
    \ = 0\n    var lastBeatBeatNote = 0\n    var lastNoteBeatNote = 0\n    var lastBeatBeatNote\
    \ = 0\n    var lastNoteBeatNote = 0\n    var lastBeatBeatNote = 0\n    var lastNoteBeatNote\
    \ = 0\n    var lastBeatBeatNote = 0\n    var lastNoteBeatNote = 0\n    var lastBeatBeatNote\
    \ = 0\n    var lastNoteBeatNote = 0\n    var lastBeatBeatNote = 0\n    var lastNoteBeatNote\
    \ = 0\n    var lastBeatBeatNote = 0\n    var lastNoteBeatNote = 0\n    var lastBeatBeatNote\
    \ = 0\n    var lastNoteBeatNote = 0\n    var lastBeatBeatNote = 0\n    var lastNoteBeatNote\
    \ = 0\n    var lastBeatBeatNote = 0\n    var lastNoteBeatNote = 0\n    var lastBeatBeatNote\
    \ = 0\n    var lastNoteBeatNote = 0\n    var lastBeatBeatNote = 0\n    var lastNoteBeatNote\
    \ = 0\n    var lastBeatBeatNote = 0\n    var lastNoteBeatNote = 0\n    var lastBeatBeatNote\
    \ = 0\n    var lastNoteBeatNote = 0\n    var lastBeatBeatNote = 0\n    var lastNoteBeatNote\
    \ = 0\n    var lastBeatBeatNote = 0\n    var lastNoteBeatNote = 0\n    var lastBeatBeatNote\
    \ = 0\n    var lastNoteBeatNote = 0\n    var lastBeatBeatNote = 0\n    var lastNoteBeatNote\
    \ = 0\n    var lastBeatBeatNote = 0\n    var lastNoteBeatNote = 0\n    var lastBeatBeatNote\
    \ = 0\n    var lastNoteBeatNote = 0\n    var lastBeatBe\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpm8lnkm61.swift:25:9: error: invalid redeclaration of 'lastBeatBeatNote'\n\
    \    var lastBeatBeatNote = 0\n        ^\n/tmp/tmpm8lnkm61.swift:23:9: note: 'lastBeatBeatNote'\
    \ previously declared here\n    var lastBeatBeatNote = 0\n        ^\n/tmp/tmpm8lnkm61.swift:26:9:\
    \ error: invalid redeclaration of 'lastNoteBeatNote'\n    var lastNoteBeatNote\
    \ = 0\n        ^\n/tmp/tmpm8lnkm61.swift:24:9: note: 'lastNoteBeatNote' previously\
    \ declared here\n    var lastNoteBeatNote = 0\n        ^\n/tmp/tmpm8lnkm61.swift:27:9:\
    \ error: invalid redeclaration of 'lastBeatBeatNote'\n    var lastBeatBeatNote\
    \ = 0\n        ^\n/tmp/tmpm8lnkm61.swift:23:9: note: 'lastBeatBeatNote' previously\
    \ declared here\n    var lastBeatBeatNote = 0\n        ^\n/tmp/tmpm8lnkm61.swift:28:9:\
    \ error: invalid redeclaration of 'lastNoteBeatNote'\n    var lastNoteBeatNote\
    \ = 0\n        ^\n/tmp/tmpm8lnkm61.swift:24:9: note: 'lastNoteBeatNote' previously\
    \ declared here\n    var lastNoteBeatNote = 0\n        ^\n/tmp/tmpm8lnkm61.swift:29:9:\
    \ error: invalid redeclaration of 'lastBeatBeatNote'\n    var lastBeatBeatNote\
    \ = 0\n        ^\n/tmp/tmpm8lnkm61.swift:23:9: note: 'lastBeatBeatNote' previously\
    \ declared here\n    var lastBeatBeatNote = 0\n        ^\n/tmp/tmpm8lnkm61.swift:30:9:\
    \ error: invalid redeclaration of 'lastNoteBeatNote'\n    var lastNoteBeatNote\
    \ = 0\n        ^\n/tmp/tmpm8lnkm61.swift:24:9: note: 'lastNoteBeatNote' previously\
    \ declared here\n    var lastNoteBeatNote = 0\n        ^\n/tmp/tmpm8lnkm61.swift:31:9:\
    \ error: invalid redeclaration of 'lastBeatBeatNote'\n    var lastBeatBeatNote\
    \ = 0\n        ^\n/tmp/tmpm8lnkm61.swift:23:9: note: 'lastBeatBeatNote' previously\
    \ declared here\n    var lastBeatBeatNote = 0\n        ^\n/tmp/tmpm8lnkm61.swift:32:9:\
    \ error: invalid redeclaration of 'lastNoteBeatNote'\n    var lastNoteBeatNote\
    \ = 0\n        ^\n/tmp/tmpm8lnkm61.swift:24:9: note: 'lastNoteBeatNote' previously\
    \ declared here\n    var lastNoteBeatNote = 0\n        ^\n/tmp/tmpm8lnkm61.swift:33:9:\
    \ error: invalid redeclaration of 'lastBeatBeatNote'\n    var lastBeatBeatNote\
    \ = 0\n        ^\n/tmp/tmpm8lnkm61.swift:23:9: note"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var current_beat = 0\n    var current_note = 0\n    var current_note_index\
    \ = 0\n    var current_note_length = 0\n    var current_note_length_index = 0\n\
    \    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpgfdr4vsb.swift:25:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpgfdr4vsb.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpgfdr4vsb.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpgfdr4vsb.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpgfdr4vsb.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpgfdr4vsb.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpgfdr4vsb.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpgfdr4vsb.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpgfdr4vsb.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpgfdr4vsb.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpgfdr4vsb.swift:30:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpgfdr4vsb.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_valu"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = 0\n    var last =\
    \ 0\n    var lastBeat = 0\n    var lastNote = 0\n    var lastBeatIndex = 0\n \
    \   var lastNoteIndex = 0\n    var lastBeatIndex2 = 0\n    var lastNoteIndex2\
    \ = 0\n    var lastBeatIndex3 = 0\n    var lastNoteIndex3 = 0\n    var lastBeatIndex4\
    \ = 0\n    var lastNoteIndex4 = 0\n    var lastBeatIndex5 = 0\n    var lastNoteIndex5\
    \ = 0\n    var lastBeatIndex6 = 0\n    var lastNoteIndex6 = 0\n    var lastBeatIndex7\
    \ = 0\n    var lastNoteIndex7 = 0\n    var lastBeatIndex8 = 0\n    var lastNoteIndex8\
    \ = 0\n    var lastBeatIndex9 = 0\n    var lastNoteIndex9 = 0\n    var lastBeatIndex10\
    \ = 0\n    var lastNoteIndex10 = 0\n    var lastBeatIndex11 = 0\n    var lastNoteIndex11\
    \ = 0\n    var lastBeatIndex12 = 0\n    var lastNoteIndex12 = 0\n    var lastBeatIndex13\
    \ = 0\n    var lastNoteIndex13 = 0\n    var lastBeatIndex14 = 0\n    var lastNoteIndex14\
    \ = 0\n    var lastBeatIndex15 = 0\n    var lastNoteIndex15 = 0\n    var lastBeatIndex16\
    \ = 0\n    var lastNoteIndex16 = 0\n    var lastBeatIndex17 = 0\n    var lastNoteIndex17\
    \ = 0\n    var lastBeatIndex18 = 0\n    var lastNoteIndex18 = 0\n    var lastBeatIndex19\
    \ = 0\n    var lastNoteIndex19 = 0\n    var lastBeatIndex20 = 0\n    var lastNoteIndex20\
    \ = 0\n    var lastBeatIndex21 = 0\n    var lastNoteIndex21 = 0\n    var lastBeatIndex22\
    \ = 0\n    var lastNoteIndex22 = 0\n    var lastBeatIndex23 = 0\n    var lastNoteIndex23\
    \ = 0\n    var lastBeatIndex24 = 0\n    var lastNoteIndex24 = 0\n    var lastBeatIndex25\
    \ = 0\n    var lastNoteIndex25 = 0\n    var lastBeatIndex26 = 0\n    var lastNoteIndex26\
    \ = 0\n    var lastBeatIndex27 = 0\n    var lastNoteIndex27 = 0\n    var lastBeatIndex28\
    \ = 0\n    var lastNoteIndex28 = 0\n    var lastBeatIndex29 = 0\n    var lastNoteIndex29\
    \ = 0\n    var lastBeatIndex30 = 0\n    var lastNoteIndex30 = 0\n    var lastBeatIndex31\
    \ = 0\n    var lastNoteIndex31 = 0\n    var lastBeatIndex32 = 0\n    var lastNoteIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpy5kf7xj4.swift:82:9: error: type annotation missing in pattern\n\
    \    var lastNoteIndex\n        ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastBeatNote = \"\
    \"\n    var lastBeatNoteBeat = 0\n    var lastBeatNoteBeatNote = \"\"\n    var\
    \ lastBeatNoteBeatNoteBeat = 0\n    var lastBeatNoteBeatNoteBeatNote = \"\"\n\
    \    var lastBeatNoteBeatNoteBeatNoteBeat = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatNote\
    \ = \"\"\n    var lastBeatNoteBeatNoteBeatNoteBeatNoteBeat = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatNoteBeatNote\
    \ = \"\"\n    var lastBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeat = 0\n    var\
    \ lastBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNote = \"\"\n    var lastBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeat\
    \ = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNote =\
    \ \"\"\n    var lastBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeat\
    \ = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNote\
    \ = \"\"\n    var lastBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeat\
    \ = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNote\
    \ = \"\"\n    var lastBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeat\
    \ = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNote\
    \ = \"\"\n    var lastBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeat\
    \ = 0\n    var lastBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNoteBeatNote\
    \ = \"\"\n    var lastBeatNoteBeatNote\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpordqxmpa.swift:40:9: error: type annotation missing in pattern\n\
    \    var lastBeatNoteBeatNote\n        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beats_count = 0\n    var notes_count = 0\n\
    \    var note = \"\"\n    var note_index = 0\n    var note_length = 0\n    var\
    \ note_octave = 0\n    var note_duration = 0\n    var note_duration_index = 0\n\
    \    var note_duration_index2 = 0\n    var note_duration_index3 = 0\n    var note_duration_index4\
    \ = 0\n    var note_duration_index5 = 0\n    var note_duration_index6 = 0\n  \
    \  var note_duration_index7 = 0\n    var note_duration_index8 = 0\n    var note_duration_index9\
    \ = 0\n    var note_duration_index10 = 0\n    var note_duration_index11 = 0\n\
    \    var note_duration_index12 = 0\n    var note_duration_index13 = 0\n    var\
    \ note_duration_index14 = 0\n    var note_duration_index15 = 0\n    var note_duration_index16\
    \ = 0\n    var note_duration_index17 = 0\n    var note_duration_index18 = 0\n\
    \    var note_duration_index19 = 0\n    var note_duration_index20 = 0\n    var\
    \ note_duration_index21 = 0\n    var note_duration_index22 = 0\n    var note_duration_index23\
    \ = 0\n    var note_duration_index24 = 0\n    var note_duration_index25 = 0\n\
    \    var note_duration_index26 = 0\n    var note_duration_index27 = 0\n    var\
    \ note_duration_index28 = 0\n    var note_duration_index29 = 0\n    var note_duration_index30\
    \ = 0\n    var note_duration_index31 = 0\n    var note_duration_index32 = 0\n\
    \    var note_duration_index33 = 0\n    var note_duration_index34 = 0\n    var\
    \ note_duration_index35 = 0\n    var note_duration_index36 = 0\n    var note_duration_index37\
    \ = 0\n    var note_duration_index38 = 0\n    var note_duration_index39 = 0\n\
    \    var note_duration_index40 = 0\n    var note_duration_index41 = 0\n    var\
    \ note_duration_index42 = 0\n    var note_duration_index43 = 0\n    var note_duration_index44\
    \ = 0\n    var note_duration_index45 = 0\n    var note_duration_index46 = 0\n\
    \    var note_duration_index47 = 0\n    var note_duration_index48 = 0\n    var\
    \ note_duration_index49 = 0\n    var note_duration_index50 = 0\n    var note_duration_index51\
    \ = 0\n    var note_duration_index52 = 0\n    var note_duration_index53 = 0\n\
    \    var note_duration_index54 = 0\n    var note_duration_index55 = 0\n    var\
    \ note_duration_index56 = 0\n    var note_duration_index57 = 0\n    var note_duration_index58\
    \ = 0\n    var note_duration_index59 = 0\n    var note_duration_index60 = 0\n\
    \    var note_duration_index61 = 0\n    var note_duration_index62 = 0\n    var\
    \ note_duration_index63 = 0\n    var note_duration_index64 = 0\n    var note_duration_index65\
    \ = 0\n    var note_duration_index66 = 0\n    var note_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpykyfkz0z.swift:87:9: error: type annotation missing in pattern\n\
    \    var note_\n        ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var current_beat = 0\n    var current_note = 0\n\
    \    var current_note_length = 0\n    var current_note_length_index = 0\n    var\
    \ current_note_length_string = \"\"\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_value = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_string = \"\"\n    var current_note_length_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string = \"\"\n \
    \   var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpsf4jkv_d.swift:27:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_index = 0\n        ^\n\
    /tmp/tmpsf4jkv_d.swift:25:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpsf4jkv_d.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpsf4jkv_d.swift:25:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpsf4jkv_d.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpsf4jkv_d.swift:28:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpsf4jkv_d.swift:31:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpsf4jkv_d.swift:25:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpsf4jkv_d.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpsf4jkv_d.swift:28:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpsf4jkv_d.swift:33:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var notes_index = 0\n\
    \    var notes_length_index = 0\n    var notes_length_index2 = 0\n    var notes_length_index3\
    \ = 0\n    var notes_length_index4 = 0\n    var notes_length_index5 = 0\n    var\
    \ notes_length_index6 = 0\n    var notes_length_index7 = 0\n    var notes_length_index8\
    \ = 0\n    var notes_length_index9 = 0\n    var notes_length_index10 = 0\n   \
    \ var notes_length_index11 = 0\n    var notes_length_index12 = 0\n    var notes_length_index13\
    \ = 0\n    var notes_length_index14 = 0\n    var notes_length_index15 = 0\n  \
    \  var notes_length_index16 = 0\n    var notes_length_index17 = 0\n    var notes_length_index18\
    \ = 0\n    var notes_length_index19 = 0\n    var notes_length_index20 = 0\n  \
    \  var notes_length_index21 = 0\n    var notes_length_index22 = 0\n    var notes_length_index23\
    \ = 0\n    var notes_length_index24 = 0\n    var notes_length_index25 = 0\n  \
    \  var notes_length_index26 = 0\n    var notes_length_index27 = 0\n    var notes_length_index28\
    \ = 0\n    var notes_length_index29 = 0\n    var notes_length_index30 = 0\n  \
    \  var notes_length_index31 = 0\n    var notes_length_index32 = 0\n    var notes_length_index33\
    \ = 0\n    var notes_length_index34 = 0\n    var notes_length_index35 = 0\n  \
    \  var notes_length_index36 = 0\n    var notes_length_index37 = 0\n    var notes_length_index38\
    \ = 0\n    var notes_length_index39 = 0\n    var notes_length_index40 = 0\n  \
    \  var notes_length_index41 = 0\n    var notes_length_index42 = 0\n    var notes_length_index43\
    \ = 0\n    var notes_length_index44 = 0\n    var notes_length_index45 = 0\n  \
    \  var notes_length_index46 = 0\n    var notes_length_index47 = 0\n    var notes_length_index48\
    \ = 0\n    var notes_length_index49 = 0\n    var notes_length_index50 = 0\n  \
    \  var notes_length_index51 = 0\n    var notes_length_index52 = 0\n    var notes_length_index53\
    \ = 0\n    var notes_length_index54 = 0\n    var notes_length_index55 = 0\n  \
    \  var notes_length_index56 = 0\n    var notes_length_index57 = 0\n    var notes_length_index58\
    \ = 0\n    var notes_length_index59 = 0\n    var notes_length_index60 = 0\n  \
    \  var notes_length_index61 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbsmhbl3g.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:14:9:\
    \ warning: initialization of variable 'notes_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:15:9: warning: initialization\
    \ of variable 'notes_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_index = 0\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmpbsmhbl3g.swift:16:9: warning: initialization of variable 'notes_length_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:17:9:\
    \ warning: initialization of variable 'notes_length_index2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:18:9: warning:\
    \ initialization of variable 'notes_length_index3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var notes_length_index3 = 0\n   \
    \ ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:19:9: warning: initialization\
    \ of variable 'notes_length_index4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_length_index4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpbsmhbl3g.swift:20:9: warning: initialization of variable 'notes_length_index5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:21:9:\
    \ warning: initialization of variable 'notes_length_index6' was never used; consider\
    \ replacing with assi"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var last = 0\n    var lastBeat = 0\n \
    \   var lastNote = 0\n    var lastLast = 0\n    var lastLastBeat = 0\n    var\
    \ lastLastNote = 0\n    var lastLastLast = 0\n    var lastLastLastBeat = 0\n \
    \   var lastLastLastNote = 0\n    var lastLastLastLast = 0\n    var lastLastLastLastBeat\
    \ = 0\n    var lastLastLastLastNote = 0\n    var lastLastLastLastLast = 0\n  \
    \  var lastLastLastLastLastBeat = 0\n    var lastLastLastLastLastNote = 0\n  \
    \  var lastLastLastLastLast = 0\n    var lastLastLastLastLastBeat = 0\n    var\
    \ lastLastLastLastLastNote = 0\n    var lastLastLastLastLastLast = 0\n    var\
    \ lastLastLastLastLastLastBeat = 0\n    var lastLastLastLastLastLastNote = 0\n\
    \    var lastLastLastLastLastLast = 0\n    var lastLastLastLastLastLastBeat =\
    \ 0\n    var lastLastLastLastLastLastNote = 0\n    var lastLastLastLastLastLast\
    \ = 0\n    var lastLastLastLastLastLastBeat = 0\n    var lastLastLastLastLastLastNote\
    \ = 0\n    var lastLastLastLastLastLast = 0\n    var lastLastLastLastLastLastBeat\
    \ = 0\n    var lastLastLastLastLastLastNote = 0\n    var lastLastLastLastLastLast\
    \ = 0\n    var lastLastLastLastLastLastBeat = 0\n    var lastLastLastLastLastLastNote\
    \ = 0\n    var lastLastLastLastLastLast = 0\n    var lastLastLastLastLastLastBeat\
    \ = 0\n    var lastLastLastLastLastLastNote = 0\n    var lastLastLastLastLastLast\
    \ = 0\n    var lastLastLastLastLastLastBeat = 0\n    var lastLastLastLastLastLastNote\
    \ = 0\n    var lastLastLastLastLastLast = 0\n    var lastLastLastLastLastLastBeat\
    \ = 0\n    var lastLastLastLastLastLastNote = 0\n    var lastLastLastLastLastLast\
    \ = 0\n    var lastLastLastLastLastLastBeat = 0\n    var lastLastLastLastLastLastNote\
    \ = 0\n    var lastLastLastLastLastLast = 0\n    var lastLastLastLastLastLastBeat\
    \ = 0\n    var lastLastLastLastLastLastNote = 0\n    var lastLastLastLastLastLast\
    \ = 0\n    var lastLastLastLastLastLastBeat = 0\n    var lastLastLastLastLastLastNote\
    \ = 0\n    var lastLastLastLastLastLast = 0\n    var lastLastLastLastLastLastBeat\
    \ = 0\n    var lastLastLastLastLastLastNote = 0\n    var lastLastLastLast\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp320r0ujg.swift:30:9: error: invalid redeclaration of 'lastLastLastLastLast'\n\
    \    var lastLastLastLastLast = 0\n        ^\n/tmp/tmp320r0ujg.swift:27:9: note:\
    \ 'lastLastLastLastLast' previously declared here\n    var lastLastLastLastLast\
    \ = 0\n        ^\n/tmp/tmp320r0ujg.swift:31:9: error: invalid redeclaration of\
    \ 'lastLastLastLastLastBeat'\n    var lastLastLastLastLastBeat = 0\n        ^\n\
    /tmp/tmp320r0ujg.swift:28:9: note: 'lastLastLastLastLastBeat' previously declared\
    \ here\n    var lastLastLastLastLastBeat = 0\n        ^\n/tmp/tmp320r0ujg.swift:32:9:\
    \ error: invalid redeclaration of 'lastLastLastLastLastNote'\n    var lastLastLastLastLastNote\
    \ = 0\n        ^\n/tmp/tmp320r0ujg.swift:29:9: note: 'lastLastLastLastLastNote'\
    \ previously declared here\n    var lastLastLastLastLastNote = 0\n        ^\n\
    /tmp/tmp320r0ujg.swift:36:9: error: invalid redeclaration of 'lastLastLastLastLastLast'\n\
    \    var lastLastLastLastLastLast = 0\n        ^\n/tmp/tmp320r0ujg.swift:33:9:\
    \ note: 'lastLastLastLastLastLast' previously declared here\n    var lastLastLastLastLastLast\
    \ = 0\n        ^\n/tmp/tmp320r0ujg.swift:37:9: error: invalid redeclaration of\
    \ 'lastLastLastLastLastLastBeat'\n    var lastLastLastLastLastLastBeat = 0\n \
    \       ^\n/tmp/tmp320r0ujg.swift:34:9: note: 'lastLastLastLastLastLastBeat' previously\
    \ declared here\n    var lastLastLastLastLastLastBeat = 0\n        ^\n/tmp/tmp320r0ujg.swift:38:9:\
    \ error: invalid redeclaration of 'lastLastLastLastLastLastNote'\n    var lastLastLastLastLastLastNote\
    \ = 0\n        ^\n/tmp/tmp320r0ujg.swift:35:9: note: 'lastLastLastLastLastLastNote'\
    \ previously declared here\n    var lastLastLastLastLastLastNote = 0\n       \
    \ ^\n/tmp/tmp320r0ujg.swift:39:9: error: invalid redeclaration of 'lastLastLastLastLastLast'\n\
    \    var lastLastLastLastLastLast = 0\n        ^\n/tmp/tmp320r0ujg.swift:33:9:\
    \ note: 'lastLastLastLastLastLast' previously declared here\n    var lastLastLastLastLastLast\
    \ = 0\n        ^\n/tmp/tmp320r0ujg.swift:40:9: error: invalid redeclaration of\
    \ 'lastLastLastLastLastLastBeat'\n    var lastLastLastLastLastLastBeat = 0\n \
    \       ^\n/tmp/t"
  stdout: ''
  timestamp: 1660013790
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = String()\n    var last = 0\n    for char in music_string\
    \ {\n        switch char {\n        case \"o\":\n            beats.append(beat)\n\
    \            beat = 0\n            last = 0\n        case \"|\":\n           \
    \ beats.append(beat)\n            beat = 0\n            last = 1\n        default:\n\
    \            note += String(char)\n        }\n    }\n    beats.append(beat)\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpnvhqe0y4/tmpnvhqe0y4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab87d4c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab87d1b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab87d1b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab87d1b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvhqe0y4                        0x000056144949875e <unavailable> + 5982

    5    libc.so.6                          0x00002ab87d6ae460 __libc_start_main +
    245

    6    tmpnvhqe0y4                        0x00005614494983a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var last_note = 0\n    var last_beat =\
    \ 0\n    var last_beats = 0\n    var last_beats_count = 0\n    var last_beats_count_count\
    \ = 0\n    var last_beats_count_count_count = 0\n    var last_beats_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count = 0\n    var last_beats_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count = 0\n    var\
    \ last_beats_count_count_count_count_count_count_count_count = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpov7y0z0g.swift:33:9: error: type annotation missing in pattern\n\
    \    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = 0\n    var last =\
    \ 0\n    var lastNote = 0\n    var lastBeat = 0\n    var lastBeatNote = 0\n  \
    \  var lastBeatNoteNote = 0\n    var lastBeatNoteNoteNote = 0\n    var lastBeatNoteNoteNoteNote\
    \ = 0\n    var lastBeatNoteNoteNoteNote = 0\n    var lastBeatNoteNoteNoteNote\
    \ = 0\n    var lastBeatNoteNoteNoteNote = 0\n    var lastBeatNoteNoteNoteNote\
    \ = 0\n    var lastBeatNoteNoteNoteNote = 0\n    var lastBeatNoteNoteNoteNote\
    \ = 0\n    var lastBeatNoteNoteNote = 0\n    var lastBeatNoteNoteNote = 0\n  \
    \  var lastBeatNoteNoteNote = 0\n    var lastBeatNoteNoteNote = 0\n    var lastBeatNoteNoteNote\
    \ = 0\n    var lastBeatNoteNoteNote = 0\n    var lastBeatNoteNoteNote = 0\n  \
    \  var lastBeatNoteNoteNote = 0\n    var lastBeatNoteNoteNote = 0\n    var lastBeatNoteNoteNote\
    \ = 0\n    var lastBeatNoteNoteNote = 0\n    var lastBeatNoteNoteNote = 0\n  \
    \  var lastBeatNoteNoteNote = 0\n    var lastBeatNoteNoteNote = 0\n    var lastBeatNoteNoteNote\
    \ = 0\n    var lastBeatNoteNoteNote = 0\n    var lastBeatNoteNoteNote = 0\n  \
    \  var lastBeatNoteNoteNote = 0\n    var lastBeatNoteNoteNote = 0\n    var lastBeatNoteNoteNote\
    \ = 0\n    var lastBeatNoteNoteNote = 0\n    var lastBeatNoteNoteNote = 0\n  \
    \  var lastBeatNoteNoteNote = 0\n    var lastBeatNoteNoteNote = 0\n    var lastBeatNoteNoteNote\
    \ = 0\n    var lastBeatNoteNoteNote = 0\n    var lastBeatNoteNoteNote = 0\n  \
    \  var lastBeatNoteNoteNote = 0\n    var lastBeatNoteNoteNote = 0\n    var lastBeatNoteNoteNote\
    \ = 0\n    var lastBeatNoteNoteNote = 0\n    var lastBeatNoteNoteNote = 0\n  \
    \  var lastBeatNoteNoteNote = 0\n    var lastBeatNoteNoteNote = 0\n    var lastBeatNoteNoteNote\
    \ = 0\n    var lastBeatNoteNoteNote = 0\n    var lastBeatNoteNoteNote = 0\n  \
    \  var lastBeatNoteNoteNote = 0\n    var lastBeatNoteNoteNote = 0\n    var lastBeatNoteNoteNote\
    \ = 0\n    var lastBeatNoteNoteNote = 0\n    var lastBeatNoteNoteNote = 0\n  \
    \  var lastBe\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpws5wvxio.swift:23:9: error: invalid redeclaration of 'lastBeatNoteNoteNoteNote'\n\
    \    var lastBeatNoteNoteNoteNote = 0\n        ^\n/tmp/tmpws5wvxio.swift:22:9:\
    \ note: 'lastBeatNoteNoteNoteNote' previously declared here\n    var lastBeatNoteNoteNoteNote\
    \ = 0\n        ^\n/tmp/tmpws5wvxio.swift:24:9: error: invalid redeclaration of\
    \ 'lastBeatNoteNoteNoteNote'\n    var lastBeatNoteNoteNoteNote = 0\n        ^\n\
    /tmp/tmpws5wvxio.swift:22:9: note: 'lastBeatNoteNoteNoteNote' previously declared\
    \ here\n    var lastBeatNoteNoteNoteNote = 0\n        ^\n/tmp/tmpws5wvxio.swift:25:9:\
    \ error: invalid redeclaration of 'lastBeatNoteNoteNoteNote'\n    var lastBeatNoteNoteNoteNote\
    \ = 0\n        ^\n/tmp/tmpws5wvxio.swift:22:9: note: 'lastBeatNoteNoteNoteNote'\
    \ previously declared here\n    var lastBeatNoteNoteNoteNote = 0\n        ^\n\
    /tmp/tmpws5wvxio.swift:26:9: error: invalid redeclaration of 'lastBeatNoteNoteNoteNote'\n\
    \    var lastBeatNoteNoteNoteNote = 0\n        ^\n/tmp/tmpws5wvxio.swift:22:9:\
    \ note: 'lastBeatNoteNoteNoteNote' previously declared here\n    var lastBeatNoteNoteNoteNote\
    \ = 0\n        ^\n/tmp/tmpws5wvxio.swift:27:9: error: invalid redeclaration of\
    \ 'lastBeatNoteNoteNoteNote'\n    var lastBeatNoteNoteNoteNote = 0\n        ^\n\
    /tmp/tmpws5wvxio.swift:22:9: note: 'lastBeatNoteNoteNoteNote' previously declared\
    \ here\n    var lastBeatNoteNoteNoteNote = 0\n        ^\n/tmp/tmpws5wvxio.swift:28:9:\
    \ error: invalid redeclaration of 'lastBeatNoteNoteNoteNote'\n    var lastBeatNoteNoteNoteNote\
    \ = 0\n        ^\n/tmp/tmpws5wvxio.swift:22:9: note: 'lastBeatNoteNoteNoteNote'\
    \ previously declared here\n    var lastBeatNoteNoteNoteNote = 0\n        ^\n\
    /tmp/tmpws5wvxio.swift:29:9: error: invalid redeclaration of 'lastBeatNoteNoteNote'\n\
    \    var lastBeatNoteNoteNote = 0\n        ^\n/tmp/tmpws5wvxio.swift:21:9: note:\
    \ 'lastBeatNoteNoteNote' previously declared here\n    var lastBeatNoteNoteNote\
    \ = 0\n        ^\n/tmp/tmpws5wvxio.swift:30:9: error: invalid redeclaration of\
    \ 'lastBeatNoteNoteNote'\n    var lastBeatNoteNoteNote = 0\n        ^\n/tmp/tmpws5wvxio.swift:21:9:\
    \ note: 'lastBeatNoteNoteNo"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = 0\n    var note_index\
    \ = 0\n    var note_length = 0\n    var note_length_index = 0\n    var note_length_string\
    \ = \"\"\n    var note_length_index = 0\n    var note_length_string = \"\"\n \
    \   var note_length_index = 0\n    var note_length_string = \"\"\n    var note_length_index\
    \ = 0\n    var note_length_string = \"\"\n    var note_length_index = 0\n    var\
    \ note_length_string = \"\"\n    var note_length_index = 0\n    var note_length_string\
    \ = \"\"\n    var note_length_index = 0\n    var note_length_string = \"\"\n \
    \   var note_length_index = 0\n    var note_length_string = \"\"\n    var note_length_index\
    \ = 0\n    var note_length_string = \"\"\n    var note_length_index = 0\n    var\
    \ note_length_string = \"\"\n    var note_length_index = 0\n    var note_length_string\
    \ = \"\"\n    var note_length_index = 0\n    var note_length_string = \"\"\n \
    \   var note_length_index = 0\n    var note_length_string = \"\"\n    var note_length_index\
    \ = 0\n    var note_length_string = \"\"\n    var note_length_index = 0\n    var\
    \ note_length_string = \"\"\n    var note_length_index = 0\n    var note_length_string\
    \ = \"\"\n    var note_length_index = 0\n    var note_length_string = \"\"\n \
    \   var note_length_index = 0\n    var note_length_string = \"\"\n    var note_length_index\
    \ = 0\n    var note_length_string = \"\"\n    var note_length_index = 0\n    var\
    \ note_length_string = \"\"\n    var note_length_index = 0\n    var note_length_string\
    \ = \"\"\n    var note_length_index = 0\n    var note_length_string = \"\"\n \
    \   var note_length_index = 0\n    var note_length_string = \"\"\n    var note_length_index\
    \ = 0\n    var note_length_string = \"\"\n    var note_length_index = 0\n    var\
    \ note_length_string = \"\"\n    var note_length_index = 0\n    var note_length_string\
    \ = \"\"\n    var note_length_index = 0\n    var note_length_string = \"\"\n \
    \   var note_length_index = 0\n    var note_length_string = \"\"\n    var note_length_index\
    \ = 0\n    var note_length_string = \"\"\n    var note_length_index = 0\n    var\
    \ note_length_string = \"\"\n    var note_length_index = 0\n    var note_length_string\
    \ = \"\"\n    var note_length_index = 0\n    var note_length_string = \"\"\n \
    \   var note_length_index = 0\n    var note_length_string = \"\"\n    var note_length_index\
    \ = 0\n    var note_length_string = \"\"\n    var note_length_index = 0\n    var\
    \ note_length_string = \"\"\n    var note_length_index = 0\n    var note_length_string\
    \ = \"\"\n    var note_length_index = 0\n    var note_length_string = \"\"\n \
    \   var note_length_index = 0\n    var note_length_string = \"\"\n    var note_length_index\
    \ = 0\n    var note_length_string = \"\"\n    var note_length_index = 0\n    var\
    \ note_length_string = \"\"\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpvla96tm_.swift:20:9: error: invalid redeclaration of 'note_length_index'\n\
    \    var note_length_index = 0\n        ^\n/tmp/tmpvla96tm_.swift:18:9: note:\
    \ 'note_length_index' previously declared here\n    var note_length_index = 0\n\
    \        ^\n/tmp/tmpvla96tm_.swift:21:9: error: invalid redeclaration of 'note_length_string'\n\
    \    var note_length_string = \"\"\n        ^\n/tmp/tmpvla96tm_.swift:19:9: note:\
    \ 'note_length_string' previously declared here\n    var note_length_string =\
    \ \"\"\n        ^\n/tmp/tmpvla96tm_.swift:22:9: error: invalid redeclaration of\
    \ 'note_length_index'\n    var note_length_index = 0\n        ^\n/tmp/tmpvla96tm_.swift:18:9:\
    \ note: 'note_length_index' previously declared here\n    var note_length_index\
    \ = 0\n        ^\n/tmp/tmpvla96tm_.swift:23:9: error: invalid redeclaration of\
    \ 'note_length_string'\n    var note_length_string = \"\"\n        ^\n/tmp/tmpvla96tm_.swift:19:9:\
    \ note: 'note_length_string' previously declared here\n    var note_length_string\
    \ = \"\"\n        ^\n/tmp/tmpvla96tm_.swift:24:9: error: invalid redeclaration\
    \ of 'note_length_index'\n    var note_length_index = 0\n        ^\n/tmp/tmpvla96tm_.swift:18:9:\
    \ note: 'note_length_index' previously declared here\n    var note_length_index\
    \ = 0\n        ^\n/tmp/tmpvla96tm_.swift:25:9: error: invalid redeclaration of\
    \ 'note_length_string'\n    var note_length_string = \"\"\n        ^\n/tmp/tmpvla96tm_.swift:19:9:\
    \ note: 'note_length_string' previously declared here\n    var note_length_string\
    \ = \"\"\n        ^\n/tmp/tmpvla96tm_.swift:26:9: error: invalid redeclaration\
    \ of 'note_length_index'\n    var note_length_index = 0\n        ^\n/tmp/tmpvla96tm_.swift:18:9:\
    \ note: 'note_length_index' previously declared here\n    var note_length_index\
    \ = 0\n        ^\n/tmp/tmpvla96tm_.swift:27:9: error: invalid redeclaration of\
    \ 'note_length_string'\n    var note_length_string = \"\"\n        ^\n/tmp/tmpvla96tm_.swift:19:9:\
    \ note: 'note_length_string' previously declared here\n    var note_length_string\
    \ = \"\"\n        ^\n/tmp/tmpvla96tm_.swift:28:9: error: invalid redeclaration\
    \ of 'note_length_index'\n    var note_le"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var notes_index = 0\n\
    \    var notes_length_index = 0\n    var notes_length_index2 = 0\n    var notes_length_index3\
    \ = 0\n    var notes_length_index4 = 0\n    var notes_length_index5 = 0\n    var\
    \ notes_length_index6 = 0\n    var notes_length_index7 = 0\n    var notes_length_index8\
    \ = 0\n    var notes_length_index9 = 0\n    var notes_length_index10 = 0\n   \
    \ var notes_length_index11 = 0\n    var notes_length_index12 = 0\n    var notes_length_index13\
    \ = 0\n    var notes_length_index14 = 0\n    var notes_length_index15 = 0\n  \
    \  var notes_length_index16 = 0\n    var notes_length_index17 = 0\n    var notes_length_index18\
    \ = 0\n    var notes_length_index19 = 0\n    var notes_length_index20 = 0\n  \
    \  var notes_length_index21 = 0\n    var notes_length_index22 = 0\n    var notes_length_index23\
    \ = 0\n    var notes_length_index24 = 0\n    var notes_length_index25 = 0\n  \
    \  var notes_length_index26 = 0\n    var notes_length_index27 = 0\n    var notes_length_index28\
    \ = 0\n    var notes_length_index29 = 0\n    var notes_length_index30 = 0\n  \
    \  var notes_length_index31 = 0\n    var notes_length_index32 = 0\n    var notes_length_index33\
    \ = 0\n    var notes_length_index34 = 0\n    var notes_length_index35 = 0\n  \
    \  var notes_length_index36 = 0\n    var notes_length_index37 = 0\n    var notes_length_index38\
    \ = 0\n    var notes_length_index39 = 0\n    var notes_length_index40 = 0\n  \
    \  var notes_length_index41 = 0\n    var notes_length_index42 = 0\n    var notes_length_index43\
    \ = 0\n    var notes_length_index44 = 0\n    var notes_length_index45 = 0\n  \
    \  var notes_length_index46 = 0\n    var notes_length_index47 = 0\n    var notes_length_index48\
    \ = 0\n    var notes_length_index49 = 0\n    var notes_length_index50 = 0\n  \
    \  var notes_length_index51 = 0\n    var notes_length_index52 = 0\n    var notes_length_index53\
    \ = 0\n    var notes_length_index54 = 0\n    var notes_length_index55 = 0\n  \
    \  var notes_length_index56 = 0\n    var notes_length_index57 = 0\n    var notes_length_index58\
    \ = 0\n    var notes_length_index59 = 0\n    var notes_length_index60 = 0\n  \
    \  var notes_length_index61 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbsmhbl3g.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:14:9:\
    \ warning: initialization of variable 'notes_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:15:9: warning: initialization\
    \ of variable 'notes_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_index = 0\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmpbsmhbl3g.swift:16:9: warning: initialization of variable 'notes_length_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:17:9:\
    \ warning: initialization of variable 'notes_length_index2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:18:9: warning:\
    \ initialization of variable 'notes_length_index3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var notes_length_index3 = 0\n   \
    \ ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:19:9: warning: initialization\
    \ of variable 'notes_length_index4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_length_index4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpbsmhbl3g.swift:20:9: warning: initialization of variable 'notes_length_index5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:21:9:\
    \ warning: initialization of variable 'notes_length_index6' was never used; consider\
    \ replacing with assi"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var notes_index = 0\n\
    \    var notes_length_index = 0\n    var notes_length_index2 = 0\n    var notes_length_index3\
    \ = 0\n    var notes_length_index4 = 0\n    var notes_length_index5 = 0\n    var\
    \ notes_length_index6 = 0\n    var notes_length_index7 = 0\n    var notes_length_index8\
    \ = 0\n    var notes_length_index9 = 0\n    var notes_length_index10 = 0\n   \
    \ var notes_length_index11 = 0\n    var notes_length_index12 = 0\n    var notes_length_index13\
    \ = 0\n    var notes_length_index14 = 0\n    var notes_length_index15 = 0\n  \
    \  var notes_length_index16 = 0\n    var notes_length_index17 = 0\n    var notes_length_index18\
    \ = 0\n    var notes_length_index19 = 0\n    var notes_length_index20 = 0\n  \
    \  var notes_length_index21 = 0\n    var notes_length_index22 = 0\n    var notes_length_index23\
    \ = 0\n    var notes_length_index24 = 0\n    var notes_length_index25 = 0\n  \
    \  var notes_length_index26 = 0\n    var notes_length_index27 = 0\n    var notes_length_index28\
    \ = 0\n    var notes_length_index29 = 0\n    var notes_length_index30 = 0\n  \
    \  var notes_length_index31 = 0\n    var notes_length_index32 = 0\n    var notes_length_index33\
    \ = 0\n    var notes_length_index34 = 0\n    var notes_length_index35 = 0\n  \
    \  var notes_length_index36 = 0\n    var notes_length_index37 = 0\n    var notes_length_index38\
    \ = 0\n    var notes_length_index39 = 0\n    var notes_length_index40 = 0\n  \
    \  var notes_length_index41 = 0\n    var notes_length_index42 = 0\n    var notes_length_index43\
    \ = 0\n    var notes_length_index44 = 0\n    var notes_length_index45 = 0\n  \
    \  var notes_length_index46 = 0\n    var notes_length_index47 = 0\n    var notes_length_index48\
    \ = 0\n    var notes_length_index49 = 0\n    var notes_length_index50 = 0\n  \
    \  var notes_length_index51 = 0\n    var notes_length_index52 = 0\n    var notes_length_index53\
    \ = 0\n    var notes_length_index54 = 0\n    var notes_length_index55 = 0\n  \
    \  var notes_length_index56 = 0\n    var notes_length_index57 = 0\n    var notes_length_index58\
    \ = 0\n    var notes_length_index59 = 0\n    var notes_length_index60 = 0\n  \
    \  var notes_length_index61 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbsmhbl3g.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:14:9:\
    \ warning: initialization of variable 'notes_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:15:9: warning: initialization\
    \ of variable 'notes_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_index = 0\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmpbsmhbl3g.swift:16:9: warning: initialization of variable 'notes_length_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:17:9:\
    \ warning: initialization of variable 'notes_length_index2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:18:9: warning:\
    \ initialization of variable 'notes_length_index3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var notes_length_index3 = 0\n   \
    \ ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:19:9: warning: initialization\
    \ of variable 'notes_length_index4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_length_index4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpbsmhbl3g.swift:20:9: warning: initialization of variable 'notes_length_index5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:21:9:\
    \ warning: initialization of variable 'notes_length_index6' was never used; consider\
    \ replacing with assi"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var current_note = \"\"\n    var current_beat\
    \ = 0\n    var current_octave = 0\n    var octaves = [Int]()\n    var octave_counter\
    \ = 0\n    var octave_octave_counter = 0\n    var octave_octave = 0\n    var octave_octave_octave\
    \ = 0\n    var octave_octave_octave_counter = 0\n    var octave_octave_octave_octave_counter\
    \ = 0\n    var octave_octave_octave_octave_octave_counter = 0\n    var octave_octave_octave_octave_octave_octave_counter\
    \ = 0\n    var octave_octave_octave_octave_octave_octave_octave_counter = 0\n\
    \    var octave_octave_octave_octave_octave_octave_octave_counter = 0\n    var\
    \ octave_octave_octave_octave_octave_octave_octave_octave_counter = 0\n    var\
    \ octave_octave_octave_octave_octave_octave_octave_octave_counter = 0\n    var\
    \ octave_octave_octave_octave_octave_octave_octave_octave_octave_counter = 0\n\
    \    var octave_octave_octave_octave_octave_octave_octave_octave_octave_counter\
    \ = 0\n    var octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_counter\
    \ = 0\n    var octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_counter\
    \ = 0\n    var octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_counter\
    \ = 0\n    var octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_counter\
    \ = 0\n    var octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_counter\
    \ = 0\n    var octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_counter\
    \ = 0\n    var oct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_b3tzkdr.swift:27:9: error: invalid redeclaration of 'octave_octave_octave_octave_octave_octave_octave_counter'\n\
    \    var octave_octave_octave_octave_octave_octave_octave_counter = 0\n      \
    \  ^\n/tmp/tmp_b3tzkdr.swift:26:9: note: 'octave_octave_octave_octave_octave_octave_octave_counter'\
    \ previously declared here\n    var octave_octave_octave_octave_octave_octave_octave_counter\
    \ = 0\n        ^\n/tmp/tmp_b3tzkdr.swift:29:9: error: invalid redeclaration of\
    \ 'octave_octave_octave_octave_octave_octave_octave_octave_counter'\n    var octave_octave_octave_octave_octave_octave_octave_octave_counter\
    \ = 0\n        ^\n/tmp/tmp_b3tzkdr.swift:28:9: note: 'octave_octave_octave_octave_octave_octave_octave_octave_counter'\
    \ previously declared here\n    var octave_octave_octave_octave_octave_octave_octave_octave_counter\
    \ = 0\n        ^\n/tmp/tmp_b3tzkdr.swift:31:9: error: invalid redeclaration of\
    \ 'octave_octave_octave_octave_octave_octave_octave_octave_octave_counter'\n \
    \   var octave_octave_octave_octave_octave_octave_octave_octave_octave_counter\
    \ = 0\n        ^\n/tmp/tmp_b3tzkdr.swift:30:9: note: 'octave_octave_octave_octave_octave_octave_octave_octave_octave_counter'\
    \ previously declared here\n    var octave_octave_octave_octave_octave_octave_octave_octave_octave_counter\
    \ = 0\n        ^\n/tmp/tmp_b3tzkdr.swift:33:9: error: invalid redeclaration of\
    \ 'octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_counter'\n\
    \    var octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_counter\
    \ = 0\n        ^\n/tmp/tmp_b3tzkdr.swift:32:9: note: 'octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_counter'\
    \ previously declared here\n    var octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_counter\
    \ = 0\n        ^\n/tmp/tmp_b3tzkdr.swift:34:9: error: invalid redeclaration of\
    \ 'octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_counter'\n\
    \    var octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_counter\
    \ = 0\n        ^\n/tmp/tmp_b3tzkdr.swift:32:9: note: 'octave_octave_o"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_length = 0\n    var notes_index = 0\n\
    \    var notes_length_index = 0\n    var notes_length_index2 = 0\n    var notes_length_index3\
    \ = 0\n    var notes_length_index4 = 0\n    var notes_length_index5 = 0\n    var\
    \ notes_length_index6 = 0\n    var notes_length_index7 = 0\n    var notes_length_index8\
    \ = 0\n    var notes_length_index9 = 0\n    var notes_length_index10 = 0\n   \
    \ var notes_length_index11 = 0\n    var notes_length_index12 = 0\n    var notes_length_index13\
    \ = 0\n    var notes_length_index14 = 0\n    var notes_length_index15 = 0\n  \
    \  var notes_length_index16 = 0\n    var notes_length_index17 = 0\n    var notes_length_index18\
    \ = 0\n    var notes_length_index19 = 0\n    var notes_length_index20 = 0\n  \
    \  var notes_length_index21 = 0\n    var notes_length_index22 = 0\n    var notes_length_index23\
    \ = 0\n    var notes_length_index24 = 0\n    var notes_length_index25 = 0\n  \
    \  var notes_length_index26 = 0\n    var notes_length_index27 = 0\n    var notes_length_index28\
    \ = 0\n    var notes_length_index29 = 0\n    var notes_length_index30 = 0\n  \
    \  var notes_length_index31 = 0\n    var notes_length_index32 = 0\n    var notes_length_index33\
    \ = 0\n    var notes_length_index34 = 0\n    var notes_length_index35 = 0\n  \
    \  var notes_length_index36 = 0\n    var notes_length_index37 = 0\n    var notes_length_index38\
    \ = 0\n    var notes_length_index39 = 0\n    var notes_length_index40 = 0\n  \
    \  var notes_length_index41 = 0\n    var notes_length_index42 = 0\n    var notes_length_index43\
    \ = 0\n    var notes_length_index44 = 0\n    var notes_length_index45 = 0\n  \
    \  var notes_length_index46 = 0\n    var notes_length_index47 = 0\n    var notes_length_index48\
    \ = 0\n    var notes_length_index49 = 0\n    var notes_length_index50 = 0\n  \
    \  var notes_length_index51 = 0\n    var notes_length_index52 = 0\n    var notes_length_index53\
    \ = 0\n    var notes_length_index54 = 0\n    var notes_length_index55 = 0\n  \
    \  var notes_length_index56 = 0\n    var notes_length_index57 = 0\n    var notes_length_index58\
    \ = 0\n    var notes_length_index59 = 0\n    var notes_length_index60 = 0\n  \
    \  var notes_length_index61 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbsmhbl3g.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:14:9:\
    \ warning: initialization of variable 'notes_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:15:9: warning: initialization\
    \ of variable 'notes_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_index = 0\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmpbsmhbl3g.swift:16:9: warning: initialization of variable 'notes_length_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:17:9:\
    \ warning: initialization of variable 'notes_length_index2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:18:9: warning:\
    \ initialization of variable 'notes_length_index3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var notes_length_index3 = 0\n   \
    \ ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:19:9: warning: initialization\
    \ of variable 'notes_length_index4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_length_index4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpbsmhbl3g.swift:20:9: warning: initialization of variable 'notes_length_index5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpbsmhbl3g.swift:21:9:\
    \ warning: initialization of variable 'notes_length_index6' was never used; consider\
    \ replacing with assi"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var note_index\
    \ = 0\n    var note_index2 = 0\n    var note_index3 = 0\n    var note_index4 =\
    \ 0\n    var note_index5 = 0\n    var note_index6 = 0\n    var note_index7 = 0\n\
    \    var note_index8 = 0\n    var note_index9 = 0\n    var note_index10 = 0\n\
    \    var note_index11 = 0\n    var note_index12 = 0\n    var note_index13 = 0\n\
    \    var note_index14 = 0\n    var note_index15 = 0\n    var note_index16 = 0\n\
    \    var note_index17 = 0\n    var note_index18 = 0\n    var note_index19 = 0\n\
    \    var note_index20 = 0\n    var note_index21 = 0\n    var note_index22 = 0\n\
    \    var note_index23 = 0\n    var note_index24 = 0\n    var note_index25 = 0\n\
    \    var note_index26 = 0\n    var note_index27 = 0\n    var note_index28 = 0\n\
    \    var note_index29 = 0\n    var note_index30 = 0\n    var note_index31 = 0\n\
    \    var note_index32 = 0\n    var note_index33 = 0\n    var note_index34 = 0\n\
    \    var note_index35 = 0\n    var note_index36 = 0\n    var note_index37 = 0\n\
    \    var note_index38 = 0\n    var note_index39 = 0\n    var note_index40 = 0\n\
    \    var note_index41 = 0\n    var note_index42 = 0\n    var note_index43 = 0\n\
    \    var note_index44 = 0\n    var note_index45 = 0\n    var note_index46 = 0\n\
    \    var note_index47 = 0\n    var note_index48 = 0\n    var note_index49 = 0\n\
    \    var note_index50 = 0\n    var note_index51 = 0\n    var note_index52 = 0\n\
    \    var note_index53 = 0\n    var note_index54 = 0\n    var note_index55 = 0\n\
    \    var note_index56 = 0\n    var note_index57 = 0\n    var note_index58 = 0\n\
    \    var note_index59 = 0\n    var note_index60 = 0\n    var note_index61 = 0\n\
    \    var note_index62 = 0\n    var note_index63 = 0\n    var note_index64 = 0\n\
    \    var note_index65 = 0\n    var note_index66 = 0\n    var note_index67 = 0\n\
    \    var note_index68 = 0\n    var note_index69 = 0\n    var note_index70 = 0\n\
    \    var note_index71 = 0\n    var note_index72 = 0\n    var note_index73 = 0\n\
    \    var note_index74 = 0\n    var note_index75 = 0\n    var note_index76 = 0\n\
    \    var note_index77 = 0\n    var note_index78 = 0\n    var note_index79 = 0\n\
    \    var note_index80 = 0\n    var note_index81 = 0\n    var note_index82 = 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpfznnfw3c.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpfznnfw3c.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmpfznnfw3c.swift:14:9:\
    \ warning: initialization of variable 'beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmpfznnfw3c.swift:15:9: warning: initialization of variable 'note' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var note\
    \ = \"\"\n    ~~~~^~~~\n    _\n/tmp/tmpfznnfw3c.swift:16:9: warning: initialization\
    \ of variable 'note_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_index = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpfznnfw3c.swift:17:9:\
    \ warning: initialization of variable 'note_index2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_index2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpfznnfw3c.swift:18:9: warning: initialization of variable 'note_index3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_index3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpfznnfw3c.swift:19:9:\
    \ warning: initialization of variable 'note_index4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_index4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpfznnfw3c.swift:20:9: warning: initialization of variable 'note_index5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_index5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpfznnfw3c.swift:21:9:\
    \ warning: initialization of variable 'note_index6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_index6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpfznnfw3c.swift:22:9: warning: initialization of variable 'note_index7'\
    \ was never used"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var last = 0\n    var last_beat = 0\n\
    \    var last_note = 0\n    var last_last_beat = 0\n    var last_last_note = 0\n\
    \    var last_last_last_beat = 0\n    var last_last_last_note = 0\n    var last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_note = 0\n    var last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_note = 0\n    var last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_beat = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpuhl421l7.swift:26:9: error: invalid redeclaration of 'last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpuhl421l7.swift:24:9:\
    \ note: 'last_last_last_last_last_beat' previously declared here\n    var last_last_last_last_last_beat\
    \ = 0\n        ^\n/tmp/tmpuhl421l7.swift:27:9: error: invalid redeclaration of\
    \ 'last_last_last_last_last_note'\n    var last_last_last_last_last_note = 0\n\
    \        ^\n/tmp/tmpuhl421l7.swift:25:9: note: 'last_last_last_last_last_note'\
    \ previously declared here\n    var last_last_last_last_last_note = 0\n      \
    \  ^\n/tmp/tmpuhl421l7.swift:30:9: error: invalid redeclaration of 'last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpuhl421l7.swift:28:9:\
    \ note: 'last_last_last_last_last_last_beat' previously declared here\n    var\
    \ last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpuhl421l7.swift:31:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_note'\n    var\
    \ last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpuhl421l7.swift:29:9:\
    \ note: 'last_last_last_last_last_last_note' previously declared here\n    var\
    \ last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpuhl421l7.swift:34:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpuhl421l7.swift:32:9:\
    \ note: 'last_last_last_last_last_last_last_beat' previously declared here\n \
    \   var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpuhl421l7.swift:35:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_note'\n\
    \    var last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpuhl421l7.swift:33:9:\
    \ note: 'last_last_last_last_last_last_last_note' previously declared here\n \
    \   var last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpuhl421l7.swift:36:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpuhl421l7.swift:32:9: "
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = 0\n    var last =\
    \ 0\n    var last2 = 0\n    var last4 = 0\n    var last8 = 0\n    var last16 =\
    \ 0\n    var last32 = 0\n    var last64 = 0\n    var last128 = 0\n    var last256\
    \ = 0\n    var last512 = 0\n    var last1024 = 0\n    var last2048 = 0\n    var\
    \ last4096 = 0\n    var last8192 = 0\n    var last16384 = 0\n    var last32768\
    \ = 0\n    var last65536 = 0\n    var last131072 = 0\n    var last262144 = 0\n\
    \    var last524288 = 0\n    var last1048576 = 0\n    var last2097152 = 0\n  \
    \  var last4194304 = 0\n    var last8388608 = 0\n    var last16777216 = 0\n  \
    \  var last33554432 = 0\n    var last67108864 = 0\n    var last134217728 = 0\n\
    \    var last268435456 = 0\n    var last536870912 = 0\n    var last1073741824\
    \ = 0\n    var last2147483648 = 0\n    var last4294967296 = 0\n    var last8589934592\
    \ = 0\n    var last17179869184 = 0\n    var last34359738368 = 0\n    var last68719476736\
    \ = 0\n    var last137438953472 = 0\n    var last274877906944 = 0\n    var last549755813888\
    \ = 0\n    var last1099511627776 = 0\n    var last2199023255552 = 0\n    var last4398046511104\
    \ = 0\n    var last8796093022208 = 0\n    var last17592186044416 = 0\n    var\
    \ last35184372088832 = 0\n    var last70368744177664 = 0\n    var last140737488355328\
    \ = 0\n    var last281474976710656 = 0\n    var last562949953421312 = 0\n    var\
    \ last1125899906842624 = 0\n    var last2251799813685248 = 0\n    var last4503599627370496\
    \ = 0\n    var last9007199254740992 = 0\n    var last18014398509481984 = 0\n \
    \   var last36028797018963968 = 0\n    var last72057594037927936 = 0\n    var\
    \ last144115188075855872 = 0\n    var last288230376151711744 = 0\n    var last576460752303423488\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmprlvojwpk.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmprlvojwpk.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmprlvojwpk.swift:14:9:\
    \ warning: initialization of variable 'beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmprlvojwpk.swift:15:9: warning: initialization of variable 'note' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var note\
    \ = 0\n    ~~~~^~~~\n    _\n/tmp/tmprlvojwpk.swift:16:9: warning: initialization\
    \ of variable 'last' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var last = 0\n    ~~~~^~~~\n    _\n/tmp/tmprlvojwpk.swift:17:9:\
    \ warning: initialization of variable 'last2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var last2 = 0\n    ~~~~^~~~~\n  \
    \  _\n/tmp/tmprlvojwpk.swift:18:9: warning: initialization of variable 'last4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last4 = 0\n    ~~~~^~~~~\n    _\n/tmp/tmprlvojwpk.swift:19:9: warning:\
    \ initialization of variable 'last8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var last8 = 0\n    ~~~~^~~~~\n    _\n/tmp/tmprlvojwpk.swift:20:9:\
    \ warning: initialization of variable 'last16' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var last16 = 0\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmprlvojwpk.swift:21:9: warning: initialization of variable 'last32'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last32 = 0\n    ~~~~^~~~~~\n    _\n/tmp/tmprlvojwpk.swift:22:9: warning:\
    \ initialization of variable 'last64' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var last64 = 0\n    ~~~~^~~~~~\n    _\n\
    /tmp/tmpr"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = 0\n    var last =\
    \ 0\n    var lastNote = 0\n    var lastBeat = 0\n    var lastBeatNote = 0\n  \
    \  var lastBeatNoteBeat = 0\n    var lastBeatNoteBeatBeat = 0\n    var lastBeatNoteBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeat\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp05ubdu0i.swift:26:9: error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp05ubdu0i.swift:25:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeat' previously declared here\n    var\
    \ lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp05ubdu0i.swift:27:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeat'\n   \
    \ var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp05ubdu0i.swift:25:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeat' previously declared here\n    var\
    \ lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp05ubdu0i.swift:28:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeat'\n   \
    \ var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp05ubdu0i.swift:25:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeat' previously declared here\n    var\
    \ lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp05ubdu0i.swift:29:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeat'\n   \
    \ var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp05ubdu0i.swift:25:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeat' previously declared here\n    var\
    \ lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp05ubdu0i.swift:30:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeat'\n   \
    \ var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp05ubdu0i.swift:25:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeat' previously declared here\n    var\
    \ lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp05ubdu0i.swift:31:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeat'\n   \
    \ var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp05ubdu0i.swift:25:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeat' previously declared here\n    var\
    \ lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmp05ubdu0i.swift:32:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeat'\n   \
    \ var lastBeatNoteBeatBeatBeatBeatBeatBeat ="
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var last_beat = 0\n    var last_note = \"\"\n   \
    \ var last_note_beat = 0\n    var last_note_octave = 0\n    var last_note_note_octave\
    \ = 0\n    var last_note_note_note = 0\n    var last_note_note_note = 0\n    var\
    \ last_note_note_note = 0\n    var last_note_note_note = 0\n    var last_note_note_note\
    \ = 0\n    var last_note_note_note = 0\n    var last_note_note_note = 0\n    var\
    \ last_note_note_note = 0\n    var last_note_note_note = 0\n    var last_note_note_note\
    \ = 0\n    var last_note_note_note = 0\n    var last_note_note_note = 0\n    var\
    \ last_note_note_note = 0\n    var last_note_note_note = 0\n    var last_note_note_note\
    \ = 0\n    var last_note_note_note = 0\n    var last_note_note_note = 0\n    var\
    \ last_note_note_note = 0\n    var last_note_note_note = 0\n    var last_note_note_note\
    \ = 0\n    var last_note_note_note = 0\n    var last_note_note_note = 0\n    var\
    \ last_note_note_note = 0\n    var last_note_note_note = 0\n    var last_note_note_note\
    \ = 0\n    var last_note_note_note = 0\n    var last_note_note_note = 0\n    var\
    \ last_note_note_note = 0\n    var last_note_note_note = 0\n    var last_note_note_note\
    \ = 0\n    var last_note_note_note = 0\n    var last_note_note_note = 0\n    var\
    \ last_note_note_note = 0\n    var last_note_note_note = 0\n    var last_note_note_note\
    \ = 0\n    var last_note_note_note = 0\n    var last_note_note_note = 0\n    var\
    \ last_note_note_note = 0\n    var last_note_note_note = 0\n    var last_note_note_note\
    \ = 0\n    var last_note_note_note = 0\n    var last_note_note_note = 0\n    var\
    \ last_note_note_note = 0\n    var last_note_note_note = 0\n    var last_note_note_note\
    \ = 0\n    var last_note_note_note = 0\n    var last_note_note_note = 0\n    var\
    \ last_note_note_note = 0\n    var last_note_note_note = 0\n    var last_note_note_note\
    \ = 0\n    var last_note_note_note = 0\n    var last_note_note_note = 0\n    var\
    \ last_note_note_note = 0\n    var last_note_note_note = 0\n    var last_note_note_note\
    \ = 0\n    var last_note_note_note = 0\n    var last_note_note_note = 0\n    var\
    \ last_note_note_note = 0\n    var last_note_note_note = 0\n    var last_note_note_note\
    \ = 0\n    var last_note_note_note = 0\n    var last_note_note_note = 0\n    var\
    \ last_note_note_note = 0\n    var last_note_note_note = 0\n    var last_note_note_note\
    \ = 0\n    var last_note_note_note = 0\n    var last_note_note_note = 0\n\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpw01ejp1r.swift:20:9: error: invalid redeclaration of 'last_note_note_note'\n\
    \    var last_note_note_note = 0\n        ^\n/tmp/tmpw01ejp1r.swift:19:9: note:\
    \ 'last_note_note_note' previously declared here\n    var last_note_note_note\
    \ = 0\n        ^\n/tmp/tmpw01ejp1r.swift:21:9: error: invalid redeclaration of\
    \ 'last_note_note_note'\n    var last_note_note_note = 0\n        ^\n/tmp/tmpw01ejp1r.swift:19:9:\
    \ note: 'last_note_note_note' previously declared here\n    var last_note_note_note\
    \ = 0\n        ^\n/tmp/tmpw01ejp1r.swift:22:9: error: invalid redeclaration of\
    \ 'last_note_note_note'\n    var last_note_note_note = 0\n        ^\n/tmp/tmpw01ejp1r.swift:19:9:\
    \ note: 'last_note_note_note' previously declared here\n    var last_note_note_note\
    \ = 0\n        ^\n/tmp/tmpw01ejp1r.swift:23:9: error: invalid redeclaration of\
    \ 'last_note_note_note'\n    var last_note_note_note = 0\n        ^\n/tmp/tmpw01ejp1r.swift:19:9:\
    \ note: 'last_note_note_note' previously declared here\n    var last_note_note_note\
    \ = 0\n        ^\n/tmp/tmpw01ejp1r.swift:24:9: error: invalid redeclaration of\
    \ 'last_note_note_note'\n    var last_note_note_note = 0\n        ^\n/tmp/tmpw01ejp1r.swift:19:9:\
    \ note: 'last_note_note_note' previously declared here\n    var last_note_note_note\
    \ = 0\n        ^\n/tmp/tmpw01ejp1r.swift:25:9: error: invalid redeclaration of\
    \ 'last_note_note_note'\n    var last_note_note_note = 0\n        ^\n/tmp/tmpw01ejp1r.swift:19:9:\
    \ note: 'last_note_note_note' previously declared here\n    var last_note_note_note\
    \ = 0\n        ^\n/tmp/tmpw01ejp1r.swift:26:9: error: invalid redeclaration of\
    \ 'last_note_note_note'\n    var last_note_note_note = 0\n        ^\n/tmp/tmpw01ejp1r.swift:19:9:\
    \ note: 'last_note_note_note' previously declared here\n    var last_note_note_note\
    \ = 0\n        ^\n/tmp/tmpw01ejp1r.swift:27:9: error: invalid redeclaration of\
    \ 'last_note_note_note'\n    var last_note_note_note = 0\n        ^\n/tmp/tmpw01ejp1r.swift:19:9:\
    \ note: 'last_note_note_note' previously declared here\n    var last_note_note_note\
    \ = 0\n        ^\n/tmp/tmpw01ejp1r.swift:28:9: error: invalid redeclaratio"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var note_count = 0\n    var note_char = \"\"\n  \
    \  var note_char_count = 0\n    var note_char_index = 0\n    var note_char_index2\
    \ = 0\n    var note_char_index3 = 0\n    var note_char_index4 = 0\n    var note_char_index5\
    \ = 0\n    var note_char_index6 = 0\n    var note_char_index7 = 0\n    var note_char_index8\
    \ = 0\n    var note_char_index9 = 0\n    var note_char_index10 = 0\n    var note_char_index11\
    \ = 0\n    var note_char_index12 = 0\n    var note_char_index13 = 0\n    var note_char_index14\
    \ = 0\n    var note_char_index15 = 0\n    var note_char_index16 = 0\n    var note_char_index17\
    \ = 0\n    var note_char_index18 = 0\n    var note_char_index19 = 0\n    var note_char_index20\
    \ = 0\n    var note_char_index21 = 0\n    var note_char_index22 = 0\n    var note_char_index23\
    \ = 0\n    var note_char_index24 = 0\n    var note_char_index25 = 0\n    var note_char_index26\
    \ = 0\n    var note_char_index27 = 0\n    var note_char_index28 = 0\n    var note_char_index29\
    \ = 0\n    var note_char_index30 = 0\n    var note_char_index31 = 0\n    var note_char_index32\
    \ = 0\n    var note_char_index33 = 0\n    var note_char_index34 = 0\n    var note_char_index35\
    \ = 0\n    var note_char_index36 = 0\n    var note_char_index37 = 0\n    var note_char_index38\
    \ = 0\n    var note_char_index39 = 0\n    var note_char_index40 = 0\n    var note_char_index41\
    \ = 0\n    var note_char_index42 = 0\n    var note_char_index43 = 0\n    var note_char_index44\
    \ = 0\n    var note_char_index45 = 0\n    var note_char_index46 = 0\n    var note_char_index47\
    \ = 0\n    var note_char_index48 = 0\n    var note_char_index49 = 0\n    var note_char_index50\
    \ = 0\n    var note_char_index51 = 0\n    var note_char_index52 = 0\n    var note_char_index53\
    \ = 0\n    var note_char_index54 = 0\n    var note_char_index55 = 0\n    var note_char_index56\
    \ = 0\n    var note_char_index57 = 0\n    var note_char_index58 = 0\n    var note_char_index59\
    \ = 0\n    var note_char_index60 = 0\n    var note_char_index61 = 0\n    var note_char_index62\
    \ = 0\n    var note_char_index63 = 0\n    var note_char_index64 = 0\n    var note_char_index65\
    \ = 0\n    var note_char_index66 = 0\n    var note_char_index67 = 0\n    var note_char_index68\
    \ = 0\n    var note_char_index69 = 0\n    var note_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp994hy6ec.swift:86:9: error: type annotation missing in pattern\n\
    \    var note_\n        ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp7retzhs4.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmp7retzhs4.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7retzhs4.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7retzhs4.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7retzhs4.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7retzhs4.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7retzhs4.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7retzhs4.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7retzhs4.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7retzhs4.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7retzhs4.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7retzhs4.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7retzhs4.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7retzhs4.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7retzhs4.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7retzhs4.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var current_note = \"\"\n    var current_beat\
    \ = 0\n    var current_index = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp7qc3n050.swift:26:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp7qc3n050.swift:24:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp7qc3n050.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp7qc3n050.swift:25:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp7qc3n050.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp7qc3n050.swift:24:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp7qc3n050.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp7qc3n050.swift:25:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp7qc3n050.swift:30:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp7qc3n050.swift:24:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp7qc3n050.swift:31:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp7qc3n050.swift:25:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_valu"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var lastNote = \"\"\n    var lastBeat = 0\n    var lastBeatNote = \"\
    \"\n    var lastBeatNoteBeat = 0\n    var lastBeatNoteBeatBeat = 0\n    var lastBeatNoteBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpho68h9lf.swift:27:9: error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpho68h9lf.swift:26:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpho68h9lf.swift:28:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpho68h9lf.swift:26:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpho68h9lf.swift:30:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpho68h9lf.swift:29:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpho68h9lf.swift:31:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpho68h9lf.swift:29:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpho68h9lf.swift:32:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpho68h9lf.swift:29:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpho68h9lf.swift:33:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpho68h9lf.swift:29:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat "
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var notes: [String] = []\n    var beats_counter: Int = 0\n    var note_counter:\
    \ Int = 0\n    var last_note = String()\n    var last_beat = Int()\n    var last_beats_counter:\
    \ Int = 0\n    var last_note_counter: Int = 0\n    var last_last_note = String()\n\
    \    var last_last_beat = Int()\n    var last_last_beats_counter: Int = 0\n  \
    \  var last_last_note_counter: Int = 0\n    var last_last_last_note = String()\n\
    \    var last_last_last_beat = Int()\n    var last_last_last_beats_counter: Int\
    \ = 0\n    var last_last_last_note_counter: Int = 0\n    var last_last_last_last_note\
    \ = String()\n    var last_last_last_last_beat = Int()\n    var last_last_last_last_beats_counter:\
    \ Int = 0\n    var last_last_last_last_note_counter: Int = 0\n    var last_last_last_last_last_note\
    \ = String()\n    var last_last_last_last_last_beat = Int()\n    var last_last_last_last_last_beats_counter:\
    \ Int = 0\n    var last_last_last_last_last_note_counter: Int = 0\n    var last_last_last_last_last_last_note\
    \ = String()\n    var last_last_last_last_last_last_beat = Int()\n    var last_last_last_last_last_last_beats_counter:\
    \ Int = 0\n    var last_last_last_last_last_last_note_counter: Int = 0\n    var\
    \ last_last_last_last_last_last_last_note = String()\n    var last_last_last_last_last_last_last_beat\
    \ = Int()\n    var last_last_last_last_last_last_last_beats_counter: Int = 0\n\
    \    var last_last_last_last_last_last_note_counter: Int = 0\n    var last_last_last_last_last_last_last_note\
    \ = String()\n    var last_last_last_last_last_last_last_beat = Int()\n    var\
    \ last_last_last_last_last_last_last_beats_counter: Int = 0\n    var last_last_last_last_last_last_note_counter:\
    \ Int = 0\n    var last_last_last_last_last_last_last_last_note = String()\n \
    \   var last_last_last_last_last_last_last_last_beat = Int()\n    var last_last_last_last_last_last_last_beats_counter:\
    \ Int = 0\n    var last_last_last_last_last_last_note_counter: Int = 0\n    var\
    \ last_last_last_last_last_last_last_last_note = String()\n    var last_last_last_last_last_last_last_last_beat\
    \ = Int()\n    var last_last_last_last_last_last_last_beats_counter: Int = 0\n\
    \    var last_last_last_last_last_last_note_counter: Int = 0\n    var last_last_last_last_last_last_last_last_note\
    \ = String()\n    var last_last_last_last_\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpr1v8_4ev.swift:43:9: error: invalid redeclaration of 'last_last_last_last_last_last_note_counter'\n\
    \    var last_last_last_last_last_last_note_counter: Int = 0\n        ^\n/tmp/tmpr1v8_4ev.swift:39:9:\
    \ note: 'last_last_last_last_last_last_note_counter' previously declared here\n\
    \    var last_last_last_last_last_last_note_counter: Int = 0\n        ^\n/tmp/tmpr1v8_4ev.swift:44:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_note'\n\
    \    var last_last_last_last_last_last_last_note = String()\n        ^\n/tmp/tmpr1v8_4ev.swift:40:9:\
    \ note: 'last_last_last_last_last_last_last_note' previously declared here\n \
    \   var last_last_last_last_last_last_last_note = String()\n        ^\n/tmp/tmpr1v8_4ev.swift:45:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_last_beat = Int()\n        ^\n/tmp/tmpr1v8_4ev.swift:41:9:\
    \ note: 'last_last_last_last_last_last_last_beat' previously declared here\n \
    \   var last_last_last_last_last_last_last_beat = Int()\n        ^\n/tmp/tmpr1v8_4ev.swift:46:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_beats_counter'\n\
    \    var last_last_last_last_last_last_last_beats_counter: Int = 0\n        ^\n\
    /tmp/tmpr1v8_4ev.swift:42:9: note: 'last_last_last_last_last_last_last_beats_counter'\
    \ previously declared here\n    var last_last_last_last_last_last_last_beats_counter:\
    \ Int = 0\n        ^\n/tmp/tmpr1v8_4ev.swift:47:9: error: invalid redeclaration\
    \ of 'last_last_last_last_last_last_note_counter'\n    var last_last_last_last_last_last_note_counter:\
    \ Int = 0\n        ^\n/tmp/tmpr1v8_4ev.swift:39:9: note: 'last_last_last_last_last_last_note_counter'\
    \ previously declared here\n    var last_last_last_last_last_last_note_counter:\
    \ Int = 0\n        ^\n/tmp/tmpr1v8_4ev.swift:50:9: error: invalid redeclaration\
    \ of 'last_last_last_last_last_last_last_beats_counter'\n    var last_last_last_last_last_last_last_beats_counter:\
    \ Int = 0\n        ^\n/tmp/tmpr1v8_4ev.swift:42:9: note: 'last_last_last_last_last_last_last_beats_counter'\
    \ previously declar"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var note_index\
    \ = 0\n    var note_index2 = 0\n    var note_index3 = 0\n    var note_index4 =\
    \ 0\n    var note_index5 = 0\n    var note_index6 = 0\n    var note_index7 = 0\n\
    \    var note_index8 = 0\n    var note_index9 = 0\n    var note_index10 = 0\n\
    \    var note_index11 = 0\n    var note_index12 = 0\n    var note_index13 = 0\n\
    \    var note_index14 = 0\n    var note_index15 = 0\n    var note_index16 = 0\n\
    \    var note_index17 = 0\n    var note_index18 = 0\n    var note_index19 = 0\n\
    \    var note_index20 = 0\n    var note_index21 = 0\n    var note_index22 = 0\n\
    \    var note_index23 = 0\n    var note_index24 = 0\n    var note_index25 = 0\n\
    \    var note_index26 = 0\n    var note_index27 = 0\n    var note_index28 = 0\n\
    \    var note_index29 = 0\n    var note_index30 = 0\n    var note_index31 = 0\n\
    \    var note_index32 = 0\n    var note_index33 = 0\n    var note_index34 = 0\n\
    \    var note_index35 = 0\n    var note_index36 = 0\n    var note_index37 = 0\n\
    \    var note_index38 = 0\n    var note_index39 = 0\n    var note_index40 = 0\n\
    \    var note_index41 = 0\n    var note_index42 = 0\n    var note_index43 = 0\n\
    \    var note_index44 = 0\n    var note_index45 = 0\n    var note_index46 = 0\n\
    \    var note_index47 = 0\n    var note_index48 = 0\n    var note_index49 = 0\n\
    \    var note_index50 = 0\n    var note_index51 = 0\n    var note_index52 = 0\n\
    \    var note_index53 = 0\n    var note_index54 = 0\n    var note_index55 = 0\n\
    \    var note_index56 = 0\n    var note_index57 = 0\n    var note_index58 = 0\n\
    \    var note_index59 = 0\n    var note_index60 = 0\n    var note_index61 = 0\n\
    \    var note_index62 = 0\n    var note_index63 = 0\n    var note_index64 = 0\n\
    \    var note_index65 = 0\n    var note_index66 = 0\n    var note_index67 = 0\n\
    \    var note_index68 = 0\n    var note_index69 = 0\n    var note_index70 = 0\n\
    \    var note_index71 = 0\n    var note_index72 = 0\n    var note_index73 = 0\n\
    \    var note_index74 = 0\n    var note_index75 = 0\n    var note_index76 = 0\n\
    \    var note_index77 = 0\n    var note_index78 = 0\n    var note_index79 = 0\n\
    \    var note_index80 = 0\n    var note_index81 = 0\n    var note_index82 = 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpfznnfw3c.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpfznnfw3c.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmpfznnfw3c.swift:14:9:\
    \ warning: initialization of variable 'beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmpfznnfw3c.swift:15:9: warning: initialization of variable 'note' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var note\
    \ = \"\"\n    ~~~~^~~~\n    _\n/tmp/tmpfznnfw3c.swift:16:9: warning: initialization\
    \ of variable 'note_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_index = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpfznnfw3c.swift:17:9:\
    \ warning: initialization of variable 'note_index2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_index2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpfznnfw3c.swift:18:9: warning: initialization of variable 'note_index3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_index3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpfznnfw3c.swift:19:9:\
    \ warning: initialization of variable 'note_index4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_index4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpfznnfw3c.swift:20:9: warning: initialization of variable 'note_index5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_index5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpfznnfw3c.swift:21:9:\
    \ warning: initialization of variable 'note_index6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_index6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpfznnfw3c.swift:22:9: warning: initialization of variable 'note_index7'\
    \ was never used"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var notes = [String]()\n    var note_index\
    \ = 0\n    var note_length = 0\n    var note_length_index = 0\n    var note_length_string\
    \ = \"\"\n    var note_length_index = 0\n    var note_string = \"\"\n    var note_index\
    \ = 0\n    var note_index2 = 0\n    var note_index3 = 0\n    var note_index4 =\
    \ 0\n    var note_index5 = 0\n    var note_index6 = 0\n    var note_index7 = 0\n\
    \    var note_index8 = 0\n    var note_index9 = 0\n    var note_index10 = 0\n\
    \    var note_index11 = 0\n    var note_index12 = 0\n    var note_index13 = 0\n\
    \    var note_index14 = 0\n    var note_index15 = 0\n    var note_index16 = 0\n\
    \    var note_index17 = 0\n    var note_index18 = 0\n    var note_index19 = 0\n\
    \    var note_index20 = 0\n    var note_index21 = 0\n    var note_index22 = 0\n\
    \    var note_index23 = 0\n    var note_index24 = 0\n    var note_index25 = 0\n\
    \    var note_index26 = 0\n    var note_index27 = 0\n    var note_index28 = 0\n\
    \    var note_index29 = 0\n    var note_index30 = 0\n    var note_index31 = 0\n\
    \    var note_index32 = 0\n    var note_index33 = 0\n    var note_index34 = 0\n\
    \    var note_index35 = 0\n    var note_index36 = 0\n    var note_index37 = 0\n\
    \    var note_index38 = 0\n    var note_index39 = 0\n    var note_index40 = 0\n\
    \    var note_index41 = 0\n    var note_index42 = 0\n    var note_index43 = 0\n\
    \    var note_index44 = 0\n    var note_index45 = 0\n    var note_index46 = 0\n\
    \    var note_index47 = 0\n    var note_index48 = 0\n    var note_index49 = 0\n\
    \    var note_index50 = 0\n    var note_index51 = 0\n    var note_index52 = 0\n\
    \    var note_index53 = 0\n    var note_index54 = 0\n    var note_index55 = 0\n\
    \    var note_index56 = 0\n    var note_index57 = 0\n    var note_index58 = 0\n\
    \    var note_index59 = 0\n    var note_index60 = 0\n    var note_index61 = 0\n\
    \    var note_index62 = 0\n    var note_index63 = 0\n    var note_index64 = 0\n\
    \    var note_index65 = 0\n    var note_index66 = 0\n    var note_index67 = 0\n\
    \    var note_index68 = 0\n    var note_index69 = 0\n    var note_index70 = 0\n\
    \    var note_index71 = 0\n    var note_index72 = 0\n    var note_index73 = 0\n\
    \    var note_index74 = 0\n    var note_index75 = 0\n    var note_index76 = 0\n\
    \    var note\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpgg5h34me.swift:20:9: error: invalid redeclaration of 'note_length_index'\n\
    \    var note_length_index = 0\n        ^\n/tmp/tmpgg5h34me.swift:18:9: note:\
    \ 'note_length_index' previously declared here\n    var note_length_index = 0\n\
    \        ^\n/tmp/tmpgg5h34me.swift:22:9: error: invalid redeclaration of 'note_index'\n\
    \    var note_index = 0\n        ^\n/tmp/tmpgg5h34me.swift:16:9: note: 'note_index'\
    \ previously declared here\n    var note_index = 0\n        ^\n/tmp/tmpgg5h34me.swift:98:9:\
    \ error: type annotation missing in pattern\n    var note\n        ^\n"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var note = String()\n    var last_note = String()\n\
    \    var last_beat = 0\n    var last_beat_count = 0\n    var last_beat_count =\
    \ 0\n    var last_beat_count_2 = 0\n    var last_beat_count_3 = 0\n    var last_beat_count_4\
    \ = 0\n    var last_beat_count_5 = 0\n    var last_beat_count_6 = 0\n    var last_beat_count_7\
    \ = 0\n    var last_beat_count_8 = 0\n    var last_beat_count_9 = 0\n    var last_beat_count_10\
    \ = 0\n    var last_beat_count_11 = 0\n    var last_beat_count_12 = 0\n    var\
    \ last_beat_count_13 = 0\n    var last_beat_count_14 = 0\n    var last_beat_count_15\
    \ = 0\n    var last_beat_count_16 = 0\n    var last_beat_count_17 = 0\n    var\
    \ last_beat_count_18 = 0\n    var last_beat_count_19 = 0\n    var last_beat_count_20\
    \ = 0\n    var last_beat_count_21 = 0\n    var last_beat_count_22 = 0\n    var\
    \ last_beat_count_23 = 0\n    var last_beat_count_24 = 0\n    var last_beat_count_25\
    \ = 0\n    var last_beat_count_26 = 0\n    var last_beat_count_27 = 0\n    var\
    \ last_beat_count_28 = 0\n    var last_beat_count_29 = 0\n    var last_beat_count_30\
    \ = 0\n    var last_beat_count_31 = 0\n    var last_beat_count_32 = 0\n    var\
    \ last_beat_count_33 = 0\n    var last_beat_count_34 = 0\n    var last_beat_count_35\
    \ = 0\n    var last_beat_count_36 = 0\n    var last_beat_count_37 = 0\n    var\
    \ last_beat_count_38 = 0\n    var last_beat_count_39 = 0\n    var last_beat_count_40\
    \ = 0\n    var last_beat_count_41 = 0\n    var last_beat_count_42 = 0\n    var\
    \ last_beat_count_43 = 0\n    var last_beat_count_44 = 0\n    var last_beat_count_45\
    \ = 0\n    var last_beat_count_46 = 0\n    var last_beat_count_47 = 0\n    var\
    \ last_beat_count_48 = 0\n    var last_beat_count_49 = 0\n    var last_beat_count_50\
    \ = 0\n    var last_beat_count_51 = 0\n    var last_beat_count_52 = 0\n    var\
    \ last_beat_count_53 = 0\n    var last_beat_count_54 = 0\n    var last_beat_count_55\
    \ = 0\n    var last_beat_count_56 = 0\n    var last_beat_count_57 = 0\n    var\
    \ last_beat_count_58 = 0\n    var last_beat_count_59 = 0\n    var last_beat_count_60\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp59agtbkd.swift:18:9: error: invalid redeclaration of 'last_beat_count'\n\
    \    var last_beat_count = 0\n        ^\n/tmp/tmp59agtbkd.swift:17:9: note: 'last_beat_count'\
    \ previously declared here\n    var last_beat_count = 0\n        ^\n/tmp/tmp59agtbkd.swift:77:9:\
    \ error: type annotation missing in pattern\n    var last_beat_count_60\n    \
    \    ^\n"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var notes_beats = [String]()\n    var notes_beats_rest\
    \ = [String]()\n    var notes_rest = [String]()\n    var notes_rest2 = []\n  \
    \  var notes_rest3 = []\n    var notes_rest4 = []\n    var notes_rest5 = []\n\
    \    var notes_rest6 = []\n    var notes_rest7 = []\n    var notes_rest8 = []\n\
    \    var notes_rest9 = []\n    var notes_rest10 = []\n    var notes_rest11 = []\n\
    \    var notes_rest12 = []\n    var notes_rest13 = []\n    var notes_rest14 =\
    \ []\n    var notes_rest15 = []\n    var notes_rest16 = []\n    var notes_rest17\
    \ = []\n    var notes_rest18 = []\n    var notes_rest19 = []\n    var notes_rest20\
    \ = []\n    var notes_rest21 = []\n    var notes_rest22 = []\n    var notes_rest23\
    \ = []\n    var notes_rest24 = []\n    var notes_rest25 = []\n    var notes_rest26\
    \ = []\n    var notes_rest27 = []\n    var notes_rest28 = []\n    var notes_rest29\
    \ = []\n    var notes_rest30 = []\n    var notes_rest31 = []\n    var notes_rest32\
    \ = []\n    var notes_rest33 = []\n    var notes_rest34 = []\n    var notes_rest35\
    \ = []\n    var notes_rest36 = []\n    var notes_rest37 = []\n    var notes_rest38\
    \ = []\n    var notes_rest39 = []\n    var notes_rest40 = []\n    var notes_rest41\
    \ = []\n    var notes_rest42 = []\n    var notes_rest43 = []\n    var notes_rest44\
    \ = []\n    var notes_rest45 = []\n    var notes_rest46 = []\n    var notes_rest47\
    \ = []\n    var notes_rest48 = []\n    var notes_rest49 = []\n    var notes_rest50\
    \ = []\n    var notes_rest51 = []\n    var notes_rest52 = []\n    var notes_rest53\
    \ = []\n    var notes_rest54 = []\n    var notes_rest55 = []\n    var notes_rest56\
    \ = []\n    var notes_rest57 = []\n    var notes_rest58 = []\n    var notes_rest59\
    \ = []\n    var notes_rest60 = []\n    var notes_rest61 = []\n    var notes_rest62\
    \ = []\n    var notes_rest63 = []\n    var notes_rest64 = []\n    var notes_rest65\
    \ = []\n    var notes_rest66 = []\n    var \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpoca0c82c.swift:82:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpoca0c82c.swift:17:23: error: empty collection literal requires an\
    \ explicit type\n    var notes_rest2 = []\n                      ^~\n/tmp/tmpoca0c82c.swift:18:23:\
    \ error: empty collection literal requires an explicit type\n    var notes_rest3\
    \ = []\n                      ^~\n/tmp/tmpoca0c82c.swift:19:23: error: empty collection\
    \ literal requires an explicit type\n    var notes_rest4 = []\n              \
    \        ^~\n/tmp/tmpoca0c82c.swift:20:23: error: empty collection literal requires\
    \ an explicit type\n    var notes_rest5 = []\n                      ^~\n/tmp/tmpoca0c82c.swift:21:23:\
    \ error: empty collection literal requires an explicit type\n    var notes_rest6\
    \ = []\n                      ^~\n/tmp/tmpoca0c82c.swift:22:23: error: empty collection\
    \ literal requires an explicit type\n    var notes_rest7 = []\n              \
    \        ^~\n/tmp/tmpoca0c82c.swift:23:23: error: empty collection literal requires\
    \ an explicit type\n    var notes_rest8 = []\n                      ^~\n/tmp/tmpoca0c82c.swift:24:23:\
    \ error: empty collection literal requires an explicit type\n    var notes_rest9\
    \ = []\n                      ^~\n/tmp/tmpoca0c82c.swift:25:24: error: empty collection\
    \ literal requires an explicit type\n    var notes_rest10 = []\n             \
    \          ^~\n/tmp/tmpoca0c82c.swift:26:24: error: empty collection literal requires\
    \ an explicit type\n    var notes_rest11 = []\n                       ^~\n/tmp/tmpoca0c82c.swift:27:24:\
    \ error: empty collection literal requires an explicit type\n    var notes_rest12\
    \ = []\n                       ^~\n/tmp/tmpoca0c82c.swift:28:24: error: empty\
    \ collection literal requires an explicit type\n    var notes_rest13 = []\n  \
    \                     ^~\n/tmp/tmpoca0c82c.swift:29:24: error: empty collection\
    \ literal requires an explicit type\n    var notes_rest14 = []\n             \
    \          ^~\n/tmp/tmpoca0c82c.swift:30:24: error: empty collection literal requires\
    \ an explicit type\n    var notes_rest15 = []\n                       ^~\n/tmp/tmpoca0c82c.swift:31:24:\
    \ err"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = 0\n    var last =\
    \ 0\n    var last_beat = 0\n    var last_note = 0\n    var last_last_beat = 0\n\
    \    var last_last_note = 0\n    var last_last_last_beat = 0\n    var last_last_last_note\
    \ = 0\n    var last_last_last_last_beat = 0\n    var last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_beat = 0\n    var last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_beat = 0\n    var last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_beat = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_beat = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_last_beat = 0\n  \
    \  var last_last_last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_last_last_note = 0\n\
    \    var last_last_last_last_last_last_last_last_last_last_last_beat = 0\n   \
    \ var last_last_last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp6mupibxj.swift:27:9: error: invalid redeclaration of 'last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_beat = 0\n        ^\n/tmp/tmp6mupibxj.swift:25:9:\
    \ note: 'last_last_last_last_last_beat' previously declared here\n    var last_last_last_last_last_beat\
    \ = 0\n        ^\n/tmp/tmp6mupibxj.swift:28:9: error: invalid redeclaration of\
    \ 'last_last_last_last_last_note'\n    var last_last_last_last_last_note = 0\n\
    \        ^\n/tmp/tmp6mupibxj.swift:26:9: note: 'last_last_last_last_last_note'\
    \ previously declared here\n    var last_last_last_last_last_note = 0\n      \
    \  ^\n/tmp/tmp6mupibxj.swift:31:9: error: invalid redeclaration of 'last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmp6mupibxj.swift:29:9:\
    \ note: 'last_last_last_last_last_last_beat' previously declared here\n    var\
    \ last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmp6mupibxj.swift:32:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_note'\n    var\
    \ last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmp6mupibxj.swift:30:9:\
    \ note: 'last_last_last_last_last_last_note' previously declared here\n    var\
    \ last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmp6mupibxj.swift:35:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmp6mupibxj.swift:33:9:\
    \ note: 'last_last_last_last_last_last_last_beat' previously declared here\n \
    \   var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmp6mupibxj.swift:36:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_note'\n\
    \    var last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmp6mupibxj.swift:34:9:\
    \ note: 'last_last_last_last_last_last_last_note' previously declared here\n \
    \   var last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmp6mupibxj.swift:39:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmp6mupibxj.sw"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var note_count = 0\n    var note = 0\n    var last_note\
    \ = 0\n    var last_note_beat = 0\n    var last_note_beats = 0\n    var last_note_note\
    \ = 0\n    var last_note_notes = 0\n    var last_note_octave = 0\n    var last_note_octaves\
    \ = 0\n    var last_note_volume = 0\n    var last_note_volumes = 0\n    var last_note_duration\
    \ = 0\n    var last_note_durations = 0\n    var last_note_durations_count = 0\n\
    \    var last_note_durations_sum = 0\n    var last_note_durations_sums = 0\n \
    \   var last_note_durations_sums_count = 0\n    var last_note_durations_sums_sum\
    \ = 0\n    var last_note_durations_sums_sums = 0\n    var last_note_durations_sums_sums_count\
    \ = 0\n    var last_note_durations_sums_sums_sum = 0\n    var last_note_durations_sums_sums_sums\
    \ = 0\n    var last_note_durations_sums_sums_sums_count = 0\n    var last_note_durations_sums_sums_sums_sum\
    \ = 0\n    var last_note_durations_sums_sums_sums_sums = 0\n    var last_note_durations_sums_sums_sums_sums_count\
    \ = 0\n    var last_note_durations_sums_sums_sums_sums_sum = 0\n    var last_note_durations_sums_sums_sums_sums_sums\
    \ = 0\n    var last_note_durations_sums_sums_sums_sums_sums_count = 0\n    var\
    \ last_note_durations_sums_sums_sums_sums_sums_sum = 0\n    var last_note_durations_sums_sums_sums_sums_sums_sums\
    \ = 0\n    var last_note_durations_sums_sums_sums_sums_sums_sums_count = 0\n \
    \   var last_note_durations_sums_sums_sums_sums_sums_sums_sum = 0\n    var last_note_durations_sums_sums_sums_sums_sums_sums_sums\
    \ = 0\n    var last_note_durations_sums_sums_sums_sums_sums_sums_sums_count =\
    \ 0\n    var last_note_durations_sums_sums_sums_sums_sums_sums_sums_sum = 0\n\
    \    var last_note_durations_sums_sums_sums_sums_sums_sums_sums_sums = 0\n   \
    \ var last_note_durations_sums_sums_sums_sums_sums_sums_sums_sums_sums_count =\
    \ 0\n    var last_note_durations_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpeef65w9h.swift:52:9: error: type annotation missing in pattern\n\
    \    var last_note_durations_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var notes: [String] = []\n    var beats_count = 0\n    var note_length =\
    \ 0\n    var note_index = 0\n    var note_char = \"\"\n    var note = \"\"\n \
    \   var last_note = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_char\
    \ = \"\"\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp48dsskyj.swift:22:9: error: invalid redeclaration of 'last_note'\n\
    \    var last_note = \"\"\n        ^\n/tmp/tmp48dsskyj.swift:19:9: note: 'last_note'\
    \ previously declared here\n    var last_note = \"\"\n        ^\n/tmp/tmp48dsskyj.swift:23:9:\
    \ error: invalid redeclaration of 'last_note_index'\n    var last_note_index =\
    \ 0\n        ^\n/tmp/tmp48dsskyj.swift:20:9: note: 'last_note_index' previously\
    \ declared here\n    var last_note_index = 0\n        ^\n/tmp/tmp48dsskyj.swift:24:9:\
    \ error: invalid redeclaration of 'last_note_char'\n    var last_note_char = \"\
    \"\n        ^\n/tmp/tmp48dsskyj.swift:21:9: note: 'last_note_char' previously\
    \ declared here\n    var last_note_char = \"\"\n        ^\n/tmp/tmp48dsskyj.swift:25:9:\
    \ error: invalid redeclaration of 'last_note'\n    var last_note = \"\"\n    \
    \    ^\n/tmp/tmp48dsskyj.swift:19:9: note: 'last_note' previously declared here\n\
    \    var last_note = \"\"\n        ^\n/tmp/tmp48dsskyj.swift:26:9: error: invalid\
    \ redeclaration of 'last_note_index'\n    var last_note_index = 0\n        ^\n\
    /tmp/tmp48dsskyj.swift:20:9: note: 'last_note_index' previously declared here\n\
    \    var last_note_index = 0\n        ^\n/tmp/tmp48dsskyj.swift:27:9: error: invalid\
    \ redeclaration of 'last_note_char'\n    var last_note_char = \"\"\n        ^\n\
    /tmp/tmp48dsskyj.swift:21:9: note: 'last_note_char' previously declared here\n\
    \    var last_note_char = \"\"\n        ^\n/tmp/tmp48dsskyj.swift:28:9: error:\
    \ invalid redeclaration of 'last_note'\n    var last_note = \"\"\n        ^\n\
    /tmp/tmp48dsskyj.swift:19:9: note: 'last_note' previously declared here\n    var\
    \ last_note = \"\"\n        ^\n/tmp/tmp48dsskyj.swift:29:9: error: invalid redeclaration\
    \ of 'last_note_index'\n    var last_note_index = 0\n        ^\n/tmp/tmp48dsskyj.swift:20:9:\
    \ note: 'last_note_index' previously declared here\n    var last_note_index =\
    \ 0\n        ^\n/tmp/tmp48dsskyj.swift:30:9: error: invalid redeclaration of 'last_note_char'\n\
    \    var last_note_char = \"\"\n        ^\n/tmp/tmp48dsskyj.swift:21:9: note:\
    \ 'last_note_char' previously declared here\n    var last_note_char = \"\"\n \
    \       ^\n/tmp/tmp48dsskyj.swift:"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var note = String()\n    var last_note = String()\n\
    \    var last_beat = Int()\n    var last_beat_count = 0\n    var last_beat_note\
    \ = String()\n    var last_beat_note_count = 0\n    var last_beat_note_octave\
    \ = Int()\n    var last_beat_note_octave_count = 0\n    var last_beat_note_octave_octave\
    \ = Int()\n    var last_beat_note_octave_octave_count = 0\n    var last_beat_note_octave_octave_octave\
    \ = Int()\n    var last_beat_note_octave_octave_octave_count = 0\n    var last_beat_note_octave_octave_octave_octave\
    \ = Int()\n    var last_beat_note_octave_octave_octave_octave_count = 0\n    var\
    \ last_beat_note_octave_octave_octave_octave_octave = Int()\n    var last_beat_note_octave_octave_octave_octave_octave_count\
    \ = 0\n    var last_beat_note_octave_octave_octave_octave_octave_octave = Int()\n\
    \    var last_beat_note_octave_octave_octave_octave_octave_octave_count = 0\n\
    \    var last_beat_note_octave_octave_octave_octave_octave_octave_octave = Int()\n\
    \    var last_beat_note_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = Int()\n    var last_beat_note_octave_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = Int()\n    var last_beat_note_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = Int()\n    var last_beat_note_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = Int()\n    var last_beat_note_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = Int()\n    var last_beat_note_octave_octave_octa\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpyn32_kmv.swift:38:9: error: type annotation missing in pattern\n\
    \    var last_beat_note_octave_octave_octa\n        ^\n"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = Int()\n    var notes = [Int]()\n    var notes_index\
    \ = 0\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_length\
    \ = Int()\n    var note_length = Int()\n    var note_length = Int()\n    var note_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppd_382w6.swift:18:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = Int()\n        ^\n/tmp/tmppd_382w6.swift:17:9: note: 'note_length'\
    \ previously declared here\n    var note_length = Int()\n        ^\n/tmp/tmppd_382w6.swift:19:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = Int()\n\
    \        ^\n/tmp/tmppd_382w6.swift:17:9: note: 'note_length' previously declared\
    \ here\n    var note_length = Int()\n        ^\n/tmp/tmppd_382w6.swift:20:9: error:\
    \ invalid redeclaration of 'note_length'\n    var note_length = Int()\n      \
    \  ^\n/tmp/tmppd_382w6.swift:17:9: note: 'note_length' previously declared here\n\
    \    var note_length = Int()\n        ^\n/tmp/tmppd_382w6.swift:21:9: error: invalid\
    \ redeclaration of 'note_length'\n    var note_length = Int()\n        ^\n/tmp/tmppd_382w6.swift:17:9:\
    \ note: 'note_length' previously declared here\n    var note_length = Int()\n\
    \        ^\n/tmp/tmppd_382w6.swift:22:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = Int()\n        ^\n/tmp/tmppd_382w6.swift:17:9: note: 'note_length'\
    \ previously declared here\n    var note_length = Int()\n        ^\n/tmp/tmppd_382w6.swift:23:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = Int()\n\
    \        ^\n/tmp/tmppd_382w6.swift:17:9: note: 'note_length' previously declared\
    \ here\n    var note_length = Int()\n        ^\n/tmp/tmppd_382w6.swift:24:9: error:\
    \ invalid redeclaration of 'note_length'\n    var note_length = Int()\n      \
    \  ^\n/tmp/tmppd_382w6.swift:17:9: note: 'note_length' previously declared here\n\
    \    var note_length = Int()\n        ^\n/tmp/tmppd_382w6.swift:25:9: error: invalid\
    \ redeclaration of 'note_length'\n    var note_length = Int()\n        ^\n/tmp/tmppd_382w6.swift:17:9:\
    \ note: 'note_length' previously declared here\n    var note_length = Int()\n\
    \        ^\n/tmp/tmppd_382w6.swift:26:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = Int()\n        ^\n/tmp/tmppd_382w6.swift:17:9: note: 'note_length'\
    \ previously declared here\n    var note_length = Int()\n        ^\n/tmp/tmppd_382w6.swift:"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array = [Int]()\n\
    \    var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_index2\
    \ = 0\n    var current_note_length_index3 = 0\n    var current_note_length_index4\
    \ = 0\n    var current_note_length_index5 = 0\n    var current_note_length_index6\
    \ = 0\n    var current_note_length_index7 = 0\n    var current_note_length_index8\
    \ = 0\n    var current_note_length_index9 = 0\n    var current_note_length_index10\
    \ = 0\n    var current_note_length_index11 = 0\n    var current_note_length_index12\
    \ = 0\n    var current_note_length_index13 = 0\n    var current_note_length_index14\
    \ = 0\n    var current_note_length_index15 = 0\n    var current_note_length_index16\
    \ = 0\n    var current_note_length_index17 = 0\n    var current_note_length_index18\
    \ = 0\n    var current_note_length_index19 = 0\n    var current_note_length_index20\
    \ = 0\n    var current_note_length_index21 = 0\n    var current_note_length_index22\
    \ = 0\n    var current_note_length_index23 = 0\n    var current_note_length_index24\
    \ = 0\n    var current_note_length_index25 = 0\n    var current_note_length_index26\
    \ = 0\n    var current_note_length_index27 = 0\n    var current_note_length_index28\
    \ = 0\n    var current_note_length_index29 = 0\n    var current_note_length_index30\
    \ = 0\n    var current_note_length_index31 = 0\n    var current_note_length_index32\
    \ = 0\n    var current_note_length_index33 = 0\n    var current_note_length_index34\
    \ = 0\n    var current_note_length_index35 = 0\n    var current_note_length_index36\
    \ = 0\n    var current_note_length_index37 = 0\n    var current_note_length_index38\
    \ = 0\n    var current_note_length_index39 = 0\n    var current_note_length_index40\
    \ = 0\n    var current_note_length_index41 = 0\n    var current_note_length_index42\
    \ = 0\n    var current_note_length_index43 = 0\n    var current_note_length_index44\
    \ = 0\n    var current_note_length_index45 = 0\n    var current_note_length_index46\
    \ = 0\n    var current_note_length_index47 = 0\n    var current_note_length_index48\
    \ = 0\n    var current_note_length_index49 = 0\n    var current_note_length_index50\
    \ = 0\n    var current_note_length_index51 = 0\n    var current_note_length_index52\
    \ = 0\n    var current_note_length_index53 = 0\n    var current_note_length_index54\
    \ = 0\n    var current_note_length_index55 = 0\n    var current_note_length_index56\
    \ = 0\n    var current_note_length_index57 = 0\n    var current_note_length_index58\
    \ = 0\n    var current_note_length_index59 = 0\n    var current_note_length_index60\
    \ = 0\n    var current_note_length_index61 = 0\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpsnsrucor.swift:12:9: warning: initialization of variable 'beats_array'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats_array = [Int]()\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpsnsrucor.swift:13:9:\
    \ warning: initialization of variable 'current_beat' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var current_beat = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpsnsrucor.swift:14:9: warning: initialization\
    \ of variable 'current_note' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var current_note = 0\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmpsnsrucor.swift:15:9: warning: initialization of variable 'current_note_length'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var current_note_length = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpsnsrucor.swift:16:9:\
    \ warning: initialization of variable 'current_note_length_index' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpsnsrucor.swift:17:9:\
    \ warning: initialization of variable 'current_note_length_index2' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpsnsrucor.swift:18:9:\
    \ warning: initialization of variable 'current_note_length_index3' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_index3\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpsnsrucor.swift:19:9:\
    \ warning: initialization of variable 'current_note_length_index4' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_index4\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpsnsrucor.swift:20:9:\
    \ warning: initialization of variable 'current_note_length_index5' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_index5\
    \ = 0\n    ~~~~^~~~~"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp7retzhs4.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmp7retzhs4.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7retzhs4.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7retzhs4.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7retzhs4.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7retzhs4.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7retzhs4.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7retzhs4.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7retzhs4.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7retzhs4.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7retzhs4.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7retzhs4.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7retzhs4.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7retzhs4.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7retzhs4.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7retzhs4.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var note_count = 0\n    var note_char = \"\"\n  \
    \  var note_char_count = 0\n    var note_char_index = 0\n    var note_char_index2\
    \ = 0\n    var note_char_index3 = 0\n    var note_char_index4 = 0\n    var note_char_index5\
    \ = 0\n    var note_char_index6 = 0\n    var note_char_index7 = 0\n    var note_char_index8\
    \ = 0\n    var note_char_index9 = 0\n    var note_char_index10 = 0\n    var note_char_index11\
    \ = 0\n    var note_char_index12 = 0\n    var note_char_index13 = 0\n    var note_char_index14\
    \ = 0\n    var note_char_index15 = 0\n    var note_char_index16 = 0\n    var note_char_index17\
    \ = 0\n    var note_char_index18 = 0\n    var note_char_index19 = 0\n    var note_char_index20\
    \ = 0\n    var note_char_index21 = 0\n    var note_char_index22 = 0\n    var note_char_index23\
    \ = 0\n    var note_char_index24 = 0\n    var note_char_index25 = 0\n    var note_char_index26\
    \ = 0\n    var note_char_index27 = 0\n    var note_char_index28 = 0\n    var note_char_index29\
    \ = 0\n    var note_char_index30 = 0\n    var note_char_index31 = 0\n    var note_char_index32\
    \ = 0\n    var note_char_index33 = 0\n    var note_char_index34 = 0\n    var note_char_index35\
    \ = 0\n    var note_char_index36 = 0\n    var note_char_index37 = 0\n    var note_char_index38\
    \ = 0\n    var note_char_index39 = 0\n    var note_char_index40 = 0\n    var note_char_index41\
    \ = 0\n    var note_char_index42 = 0\n    var note_char_index43 = 0\n    var note_char_index44\
    \ = 0\n    var note_char_index45 = 0\n    var note_char_index46 = 0\n    var note_char_index47\
    \ = 0\n    var note_char_index48 = 0\n    var note_char_index49 = 0\n    var note_char_index50\
    \ = 0\n    var note_char_index51 = 0\n    var note_char_index52 = 0\n    var note_char_index53\
    \ = 0\n    var note_char_index54 = 0\n    var note_char_index55 = 0\n    var note_char_index56\
    \ = 0\n    var note_char_index57 = 0\n    var note_char_index58 = 0\n    var note_char_index59\
    \ = 0\n    var note_char_index60 = 0\n    var note_char_index61 = 0\n    var note_char_index62\
    \ = 0\n    var note_char_index63 = 0\n    var note_char_index64 = 0\n    var note_char_index65\
    \ = 0\n    var note_char_index66 = 0\n    var note_char_index67 = 0\n    var note_char_index68\
    \ = 0\n    var note_char_index69 = 0\n    var note_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp994hy6ec.swift:86:9: error: type annotation missing in pattern\n\
    \    var note_\n        ^\n"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var last = 0\n    var last_beat = 0\n\
    \    var last_note = 0\n    var last_last = 0\n    var last_last_beat = 0\n  \
    \  var last_last_note = 0\n    var last_last_last = 0\n    var last_last_last_beat\
    \ = 0\n    var last_last_last_note = 0\n    var last_last_last_last = 0\n    var\
    \ last_last_last_last_beat = 0\n    var last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last = 0\n    var last_last_last_last_beat = 0\n    var\
    \ last_last_last_last_note = 0\n    var last_last_last_last_last = 0\n    var\
    \ last_last_last_last_beat = 0\n    var last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last = 0\n    var last_last_last_last_last_beat = 0\n  \
    \  var last_last_last_last_last_note = 0\n    var last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_beat = 0\n    var last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last = 0\n    var last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_note = 0\n    var last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_beat = 0\n    var last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last = 0\n    var last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_note = 0\n    var last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_beat = 0\n    var last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last = 0\n    var last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_note = 0\n    var last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_beat = 0\n    var last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last = 0\n    var last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_note = 0\n    var last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_beat = 0\n    var last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last = 0\n    var last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_note = 0\n    var last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_beat = 0\n    var last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last = 0\n    var last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_note = 0\n    var last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_beat = 0\n    var last_last_last_last_last_note\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpn6sd_pox.swift:28:9: error: invalid redeclaration of 'last_last_last_last_beat'\n\
    \    var last_last_last_last_beat = 0\n        ^\n/tmp/tmpn6sd_pox.swift:25:9:\
    \ note: 'last_last_last_last_beat' previously declared here\n    var last_last_last_last_beat\
    \ = 0\n        ^\n/tmp/tmpn6sd_pox.swift:29:9: error: invalid redeclaration of\
    \ 'last_last_last_last_note'\n    var last_last_last_last_note = 0\n        ^\n\
    /tmp/tmpn6sd_pox.swift:26:9: note: 'last_last_last_last_note' previously declared\
    \ here\n    var last_last_last_last_note = 0\n        ^\n/tmp/tmpn6sd_pox.swift:30:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last'\n    var last_last_last_last_last\
    \ = 0\n        ^\n/tmp/tmpn6sd_pox.swift:27:9: note: 'last_last_last_last_last'\
    \ previously declared here\n    var last_last_last_last_last = 0\n        ^\n\
    /tmp/tmpn6sd_pox.swift:31:9: error: invalid redeclaration of 'last_last_last_last_beat'\n\
    \    var last_last_last_last_beat = 0\n        ^\n/tmp/tmpn6sd_pox.swift:25:9:\
    \ note: 'last_last_last_last_beat' previously declared here\n    var last_last_last_last_beat\
    \ = 0\n        ^\n/tmp/tmpn6sd_pox.swift:32:9: error: invalid redeclaration of\
    \ 'last_last_last_last_note'\n    var last_last_last_last_note = 0\n        ^\n\
    /tmp/tmpn6sd_pox.swift:26:9: note: 'last_last_last_last_note' previously declared\
    \ here\n    var last_last_last_last_note = 0\n        ^\n/tmp/tmpn6sd_pox.swift:33:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last'\n    var last_last_last_last_last\
    \ = 0\n        ^\n/tmp/tmpn6sd_pox.swift:27:9: note: 'last_last_last_last_last'\
    \ previously declared here\n    var last_last_last_last_last = 0\n        ^\n\
    /tmp/tmpn6sd_pox.swift:37:9: error: invalid redeclaration of 'last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpn6sd_pox.swift:34:9:\
    \ note: 'last_last_last_last_last_beat' previously declared here\n    var last_last_last_last_last_beat\
    \ = 0\n        ^\n/tmp/tmpn6sd_pox.swift:38:9: error: invalid redeclaration of\
    \ 'last_last_last_last_last_note'\n    var last_last_last_last_last_note = 0\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var notes: [String] = []\n    var notes_beats: [String] = []\n    var notes_beats_beats:\
    \ [String] = []\n    var notes_beats_beats_beats: [String] = []\n    var notes_beats_beats_beats_beats:\
    \ [String] = []\n    var notes_beats_beats_beats_beats_beats: [String] = []\n\
    \    var notes_beats_beats_beats_beats_beats_beats: [String] = []\n    var notes_beats_beats_beats_beats_beats_beats_beats:\
    \ [String] = []\n    var notes_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ [String] = []\n    var notes_beats_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ [String] = []\n    var notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ [String] = []\n    var notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ [String] = []\n    var notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ [String] = []\n    var notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ [String] = []\n    var notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ [String] = []\n    var notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ [String] = []\n    var notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ [String] = []\n    var notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ [String] = []\n    var notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats:\
    \ [String] = []\n    var notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beat\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmps8xv1r72.swift:32:9: error: type annotation missing in pattern\n\
    \    var notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beat\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var note_index = 0\n    var beat_index = 0\n \
    \   var note_index2 = 0\n    var beat_index2 = 0\n    var note_index3 = 0\n  \
    \  var beat_index3 = 0\n    var note_index4 = 0\n    var beat_index4 = 0\n   \
    \ var note_index5 = 0\n    var beat_index5 = 0\n    var note_index6 = 0\n    var\
    \ beat_index6 = 0\n    var note_index7 = 0\n    var beat_index7 = 0\n    var note_index8\
    \ = 0\n    var beat_index8 = 0\n    var note_index9 = 0\n    var beat_index9 =\
    \ 0\n    var note_index10 = 0\n    var beat_index10 = 0\n    var note_index11\
    \ = 0\n    var beat_index11 = 0\n    var note_index12 = 0\n    var beat_index12\
    \ = 0\n    var note_index13 = 0\n    var beat_index13 = 0\n    var note_index14\
    \ = 0\n    var beat_index14 = 0\n    var note_index15 = 0\n    var beat_index15\
    \ = 0\n    var note_index16 = 0\n    var beat_index16 = 0\n    var note_index17\
    \ = 0\n    var beat_index17 = 0\n    var note_index18 = 0\n    var beat_index18\
    \ = 0\n    var note_index19 = 0\n    var beat_index19 = 0\n    var note_index20\
    \ = 0\n    var beat_index20 = 0\n    var note_index21 = 0\n    var beat_index21\
    \ = 0\n    var note_index22 = 0\n    var beat_index22 = 0\n    var note_index23\
    \ = 0\n    var beat_index23 = 0\n    var note_index24 = 0\n    var beat_index24\
    \ = 0\n    var note_index25 = 0\n    var beat_index25 = 0\n    var note_index26\
    \ = 0\n    var beat_index26 = 0\n    var note_index27 = 0\n    var beat_index27\
    \ = 0\n    var note_index28 = 0\n    var beat_index28 = 0\n    var note_index29\
    \ = 0\n    var beat_index29 = 0\n    var note_index30 = 0\n    var beat_index30\
    \ = 0\n    var note_index31 = 0\n    var beat_index31 = 0\n    var note_index32\
    \ = 0\n    var beat_index32 = 0\n    var note_index33 = 0\n    var beat_index33\
    \ = 0\n    var note_index34 = 0\n    var beat_index34 = 0\n    var note_index35\
    \ = 0\n    var beat_index35 = 0\n    var note_index36 = 0\n    var beat_index36\
    \ = 0\n    var note_index37 = 0\n    var beat_index37 = 0\n    var note_index38\
    \ = 0\n    var beat_index38 = 0\n    var note_index39 = 0\n    var beat_index39\
    \ = 0\n    var note_index40 = 0\n    var beat_index40 = 0\n    var note_index41\
    \ = 0\n    var beat_index41 = 0\n    var note_index42 = 0\n    var beat\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpfhgsrb7d.swift:97:9: error: type annotation missing in pattern\n\
    \    var beat\n        ^\n"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var note_index\
    \ = 0\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_beat\
    \ = 0\n    var last_beat_index = 0\n    var last_note_index = 0\n    var last_note_index\
    \ = 0\n    var last_beat_index = 0\n    var last_beat_index = 0\n    var last_note_index\
    \ = 0\n    var last_note_index = 0\n    var last_beat_index = 0\n    var last_beat_index\
    \ = 0\n    var last_note_index = 0\n    var last_note_index = 0\n    var last_beat_index\
    \ = 0\n    var last_beat_index = 0\n    var last_note_index = 0\n    var last_note_index\
    \ = 0\n    var last_beat_index = 0\n    var last_beat_index = 0\n    var last_note_index\
    \ = 0\n    var last_note_index = 0\n    var last_beat_index = 0\n    var last_beat_index\
    \ = 0\n    var last_note_index = 0\n    var last_note_index = 0\n    var last_beat_index\
    \ = 0\n    var last_beat_index = 0\n    var last_note_index = 0\n    var last_note_index\
    \ = 0\n    var last_beat_index = 0\n    var last_beat_index = 0\n    var last_note_index\
    \ = 0\n    var last_note_index = 0\n    var last_beat_index = 0\n    var last_beat_index\
    \ = 0\n    var last_note_index = 0\n    var last_note_index = 0\n    var last_beat_index\
    \ = 0\n    var last_beat_index = 0\n    var last_note_index = 0\n    var last_note_index\
    \ = 0\n    var last_beat_index = 0\n    var last_beat_index = 0\n    var last_note_index\
    \ = 0\n    var last_note_index = 0\n    var last_beat_index = 0\n    var last_beat_index\
    \ = 0\n    var last_note_index = 0\n    var last_note_index = 0\n    var last_beat_index\
    \ = 0\n    var last_beat_index = 0\n    var last_note_index = 0\n    var last_note_index\
    \ = 0\n    var last_beat_index = 0\n    var last_beat_index = 0\n    var last_note_index\
    \ = 0\n    var last_note_index = 0\n    var last_beat_index = 0\n    var last_beat_index\
    \ = 0\n    var last_note_index = 0\n    var last_note_index = 0\n    var last_beat_index\
    \ = 0\n    var last_beat_index = 0\n    var last_note_index = 0\n    var last_note_index\
    \ = 0\n    var last_beat_index = 0\n    var last_beat_index = 0\n    var last_note_index\
    \ = 0\n    var last_note_index = 0\n    var last_beat_index = 0\n    var last_beat_index\
    \ = 0\n    var last_note_index = 0\n    var last_note_index = 0\n    var last_beat_index\
    \ = 0\n    var last_beat_index = 0\n    var last_note_index = 0\n    var last_note_index\
    \ = 0\n    var last_beat_index = 0\n    var last_beat_index = 0\n    var last_note_index\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpue06hgb9.swift:98:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpue06hgb9.swift:21:9: error: invalid redeclaration of 'last_note_index'\n\
    \    var last_note_index = 0\n        ^\n/tmp/tmpue06hgb9.swift:18:9: note: 'last_note_index'\
    \ previously declared here\n    var last_note_index = 0\n        ^\n/tmp/tmpue06hgb9.swift:22:9:\
    \ error: invalid redeclaration of 'last_note_index'\n    var last_note_index =\
    \ 0\n        ^\n/tmp/tmpue06hgb9.swift:18:9: note: 'last_note_index' previously\
    \ declared here\n    var last_note_index = 0\n        ^\n/tmp/tmpue06hgb9.swift:23:9:\
    \ error: invalid redeclaration of 'last_beat_index'\n    var last_beat_index =\
    \ 0\n        ^\n/tmp/tmpue06hgb9.swift:20:9: note: 'last_beat_index' previously\
    \ declared here\n    var last_beat_index = 0\n        ^\n/tmp/tmpue06hgb9.swift:24:9:\
    \ error: invalid redeclaration of 'last_beat_index'\n    var last_beat_index =\
    \ 0\n        ^\n/tmp/tmpue06hgb9.swift:20:9: note: 'last_beat_index' previously\
    \ declared here\n    var last_beat_index = 0\n        ^\n/tmp/tmpue06hgb9.swift:25:9:\
    \ error: invalid redeclaration of 'last_note_index'\n    var last_note_index =\
    \ 0\n        ^\n/tmp/tmpue06hgb9.swift:18:9: note: 'last_note_index' previously\
    \ declared here\n    var last_note_index = 0\n        ^\n/tmp/tmpue06hgb9.swift:26:9:\
    \ error: invalid redeclaration of 'last_note_index'\n    var last_note_index =\
    \ 0\n        ^\n/tmp/tmpue06hgb9.swift:18:9: note: 'last_note_index' previously\
    \ declared here\n    var last_note_index = 0\n        ^\n/tmp/tmpue06hgb9.swift:27:9:\
    \ error: invalid redeclaration of 'last_beat_index'\n    var last_beat_index =\
    \ 0\n        ^\n/tmp/tmpue06hgb9.swift:20:9: note: 'last_beat_index' previously\
    \ declared here\n    var last_beat_index = 0\n        ^\n/tmp/tmpue06hgb9.swift:28:9:\
    \ error: invalid redeclaration of 'last_beat_index'\n    var last_beat_index =\
    \ 0\n        ^\n/tmp/tmpue06hgb9.swift:20:9: note: 'last_beat_index' previously\
    \ declared here\n    var last_beat_index = 0\n        ^\n/tmp/tmpue06hgb9.swift:29:9:\
    \ error: invalid redeclaration of 'last_note_index'\n    var last_note_index =\
    \ 0\n      "
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    for char in music_string {\n        switch char {\n        case \"\
    o\":\n            note = \"o\"\n            last = 4\n        case \"o|\":\n \
    \           note = \"o\"\n            last = 2\n        case \"|\":\n        \
    \    note = \"|\"\n            last = 1\n        default:\n            note =\
    \ String(char)\n            last = 0\n        }\n        beats.append(beat)\n\
    \        beat = 0\n        if last == 1 {\n            beats.append(beat)\n  \
    \          beat = 0\n        }\n        notes.append(note)\n    }\n    return\
    \ beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpavyilumo.swift:22:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_index2\
    \ = 0\n    var current_note_length_index3 = 0\n    var current_note_length_index4\
    \ = 0\n    var current_note_length_index5 = 0\n    var current_note_length_index6\
    \ = 0\n    var current_note_length_index7 = 0\n    var current_note_length_index8\
    \ = 0\n    var current_note_length_index9 = 0\n    var current_note_length_index10\
    \ = 0\n    var current_note_length_index11 = 0\n    var current_note_length_index12\
    \ = 0\n    var current_note_length_index13 = 0\n    var current_note_length_index14\
    \ = 0\n    var current_note_length_index15 = 0\n    var current_note_length_index16\
    \ = 0\n    var current_note_length_index17 = 0\n    var current_note_length_index18\
    \ = 0\n    var current_note_length_index19 = 0\n    var current_note_length_index20\
    \ = 0\n    var current_note_length_index21 = 0\n    var current_note_length_index22\
    \ = 0\n    var current_note_length_index23 = 0\n    var current_note_length_index24\
    \ = 0\n    var current_note_length_index25 = 0\n    var current_note_length_index26\
    \ = 0\n    var current_note_length_index27 = 0\n    var current_note_length_index28\
    \ = 0\n    var current_note_length_index29 = 0\n    var current_note_length_index30\
    \ = 0\n    var current_note_length_index31 = 0\n    var current_note_length_index32\
    \ = 0\n    var current_note_length_index33 = 0\n    var current_note_length_index34\
    \ = 0\n    var current_note_length_index35 = 0\n    var current_note_length_index36\
    \ = 0\n    var current_note_length_index37 = 0\n    var current_note_length_index38\
    \ = 0\n    var current_note_length_index39 = 0\n    var current_note_length_index40\
    \ = 0\n    var current_note_length_index41 = 0\n    var current_note_length_index42\
    \ = 0\n    var current_note_length_index43 = 0\n    var current_note_length_index44\
    \ = 0\n    var current_note_length_index45 = 0\n    var current_note_length_index46\
    \ = 0\n    var current_note_length_index47 = 0\n    var current_note_length_index48\
    \ = 0\n    var current_note_length_index49 = 0\n    var current_note_length_index50\
    \ = 0\n    var current_note_length_index51 = 0\n    var current_note_length_index52\
    \ = 0\n    var current_note_length_index53 = 0\n    var current_note_length_index54\
    \ = 0\n    var current_note_length_index55 = 0\n    var current_note_length_index56\
    \ = 0\n    var current_note_length_index57 = 0\n    var current_note_length_index58\
    \ = 0\n    var current_note_length_index59 = 0\n    var current_note_length_index60\
    \ = 0\n    var current_note_length_index61 = 0\n    var current_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp0wy14t_z.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array = [Int]()\n\
    \    var current_beat = 0\n    var current_note = Int()\n    var current_note_string\
    \ = String()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpehqnk0nd.swift:17:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmpehqnk0nd.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpehqnk0nd.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpehqnk0nd.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpehqnk0nd.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpehqnk0nd.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpehqnk0nd.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpehqnk0nd.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpehqnk0nd.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpehqnk0nd.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpehqnk0nd.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpehqnk0nd.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpehqnk0nd.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpehqnk0nd.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpehqnk0nd.swift:24:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpehqnk0nd.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beats_count = 0\n    var note_length = 0\n\
    \    var note_length_count = 0\n    var note_length_index = 0\n    var note_index\
    \ = 0\n    var note = String()\n    var note_length = String()\n    var note_length_count\
    \ = String()\n    var note_length_index = String()\n    var note_index = String()\n\
    \    var note_count = 0\n    var note = String()\n    var note_length = String()\n\
    \    var note_length_count = String()\n    var note_length_index = String()\n\
    \    var note_index = String()\n    var note_count = 0\n    var note = String()\n\
    \    var note_length = String()\n    var note_length_count = String()\n    var\
    \ note_length_index = String()\n    var note_index = String()\n    var note_count\
    \ = 0\n    var note = String()\n    var note_length = String()\n    var note_length_count\
    \ = String()\n    var note_length_index = String()\n    var note_index = String()\n\
    \    var note_count = 0\n    var note = String()\n    var note_length = String()\n\
    \    var note_length_count = String()\n    var note_length_index = String()\n\
    \    var note_index = String()\n    var note_count = 0\n    var note = String()\n\
    \    var note_length = String()\n    var note_length_count = String()\n    var\
    \ note_length_index = String()\n    var note_index = String()\n    var note_count\
    \ = 0\n    var note = String()\n    var note_length = String()\n    var note_length_count\
    \ = String()\n    var note_length_index = String()\n    var note_index = String()\n\
    \    var note_count = 0\n    var note = String()\n    var note_length = String()\n\
    \    var note_length_count = String()\n    var note_length_index = String()\n\
    \    var note_index = String()\n    var note_count = 0\n    var note = String()\n\
    \    var note_length = String()\n    var note_length_count = String()\n    var\
    \ note_length_index = String()\n    var note_index = String()\n    var note_count\
    \ = 0\n    var note = String()\n    var note_length = String()\n    var note_length_count\
    \ = String()\n    var note_length_index = String()\n    var note_index = String()\n\
    \    var note_count = 0\n    var note = String()\n    var note_length = String()\n\
    \    var note_length_count = String()\n    var note_length_index = String()\n\
    \    var note_index = String()\n    var note_count = 0\n    var note = String()\n\
    \    var note_length = String()\n    var note_length_count = String()\n    var\
    \ note_length_index = String()\n    var note_index = String()\n    var note_count\
    \ = 0\n    var note = String()\n    var note_length = String()\n    var note_length\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpw6k1z7zd.swift:20:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = String()\n        ^\n/tmp/tmpw6k1z7zd.swift:15:9: note:\
    \ 'note_length' previously declared here\n    var note_length = 0\n        ^\n\
    /tmp/tmpw6k1z7zd.swift:21:9: error: invalid redeclaration of 'note_length_count'\n\
    \    var note_length_count = String()\n        ^\n/tmp/tmpw6k1z7zd.swift:16:9:\
    \ note: 'note_length_count' previously declared here\n    var note_length_count\
    \ = 0\n        ^\n/tmp/tmpw6k1z7zd.swift:22:9: error: invalid redeclaration of\
    \ 'note_length_index'\n    var note_length_index = String()\n        ^\n/tmp/tmpw6k1z7zd.swift:17:9:\
    \ note: 'note_length_index' previously declared here\n    var note_length_index\
    \ = 0\n        ^\n/tmp/tmpw6k1z7zd.swift:23:9: error: invalid redeclaration of\
    \ 'note_index'\n    var note_index = String()\n        ^\n/tmp/tmpw6k1z7zd.swift:18:9:\
    \ note: 'note_index' previously declared here\n    var note_index = 0\n      \
    \  ^\n/tmp/tmpw6k1z7zd.swift:25:9: error: invalid redeclaration of 'note'\n  \
    \  var note = String()\n        ^\n/tmp/tmpw6k1z7zd.swift:19:9: note: 'note' previously\
    \ declared here\n    var note = String()\n        ^\n/tmp/tmpw6k1z7zd.swift:26:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = String()\n\
    \        ^\n/tmp/tmpw6k1z7zd.swift:15:9: note: 'note_length' previously declared\
    \ here\n    var note_length = 0\n        ^\n/tmp/tmpw6k1z7zd.swift:27:9: error:\
    \ invalid redeclaration of 'note_length_count'\n    var note_length_count = String()\n\
    \        ^\n/tmp/tmpw6k1z7zd.swift:16:9: note: 'note_length_count' previously\
    \ declared here\n    var note_length_count = 0\n        ^\n/tmp/tmpw6k1z7zd.swift:28:9:\
    \ error: invalid redeclaration of 'note_length_index'\n    var note_length_index\
    \ = String()\n        ^\n/tmp/tmpw6k1z7zd.swift:17:9: note: 'note_length_index'\
    \ previously declared here\n    var note_length_index = 0\n        ^\n/tmp/tmpw6k1z7zd.swift:29:9:\
    \ error: invalid redeclaration of 'note_index'\n    var note_index = String()\n\
    \        ^\n/tmp/tmpw6k1z7zd.swift:18:9: note: 'note_index' previously declared\
    \ her"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var note_index\
    \ = 0\n    var note_length = music_string.characters.count\n    var note_length_index\
    \ = 0\n    var note_length_value = 0\n    var note_length_value_index = 0\n  \
    \  var note_length_value_value = 0\n    var note_length_value_value_index = 0\n\
    \    var note_length_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp4ohmzl9n.swift:17:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var note_length = music_string.characters.count\n \
    \                                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp4ohmzl9n.swift:26:9: error: invalid redeclaration of\
    \ 'note_length_value_value_value_index'\n    var note_length_value_value_value_index\
    \ = 0\n        ^\n/tmp/tmp4ohmzl9n.swift:24:9: note: 'note_length_value_value_value_index'\
    \ previously declared here\n    var note_length_value_value_value_index = 0\n\
    \        ^\n/tmp/tmp4ohmzl9n.swift:27:9: error: invalid redeclaration of 'note_length_value_value_value_value'\n\
    \    var note_length_value_value_value_value = 0\n        ^\n/tmp/tmp4ohmzl9n.swift:25:9:\
    \ note: 'note_length_value_value_value_value' previously declared here\n    var\
    \ note_length_value_value_value_value = 0\n        ^\n/tmp/tmp4ohmzl9n.swift:28:9:\
    \ error: invalid redeclaration of 'note_length_value_value_value_index'\n    var\
    \ note_length_value_value_value_index = 0\n        ^\n/tmp/tmp4ohmzl9n.swift:24:9:\
    \ note: 'note_length_value_value_value_index' previously declared here\n    var\
    \ note_length_value_value_value_index = 0\n        ^\n/tmp/tmp4ohmzl9n.swift:29:9:\
    \ error: invalid redeclaration of 'note_length_value_value_value_value'\n    var\
    \ note_length_value_value_value_value = 0\n        ^\n/tmp/tmp4ohmzl9n.swift:25:9:\
    \ note: 'note_length_value_value_value_value' previously declared here\n    var\
    \ note_length_value_value_value_value = 0\n        ^\n/tmp/tmp4ohmzl9n.swift:30:9:\
    \ error: invalid redeclaration of 'note_length_value_value_value_index'\n    var\
    \ note_length_value_value_value_index = 0\n        ^\n/tmp/tmp4ohmzl9n.swift:24:9:\
    \ note: 'note_length_value_value_value_index' previously declared here\n    var\
    \ note_length_value_value_value_index = 0\n        ^\n/tmp/tmp4ohmzl9n.swift:31:9:\
    \ error: invalid redeclaration of 'note_length_value_value_value_value'\n    var\
    \ note_length_value_value_value_value = 0\n        ^\n/tmp/tm"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beats_count = 0\n    var notes_count = 0\n\
    \    var note_index = 0\n    var note_char = \"\"\n    var note_char_index = 0\n\
    \    var note_char_length = 0\n    var note_char_length_index = 0\n    var note_char_length_string\
    \ = \"\"\n    var note_char_length_string_index = 0\n    var note_char_length_string_index\
    \ = 0\n    var note_char_length_string_index = 0\n    var note_char_length_string_index\
    \ = 0\n    var note_char_length_string_index = 0\n    var note_char_length_string_index\
    \ = 0\n    var note_char_length_string_index = 0\n    var note_char_length_string_index\
    \ = 0\n    var note_char_length_string_index = 0\n    var note_char_length_string_index\
    \ = 0\n    var note_char_length_string_index = 0\n    var note_char_length_string_index\
    \ = 0\n    var note_char_length_string_index = 0\n    var note_char_length_string_index\
    \ = 0\n    var note_char_length_string_index = 0\n    var note_char_length_string_index\
    \ = 0\n    var note_char_length_string_index = 0\n    var note_char_length_string_index\
    \ = 0\n    var note_char_length_string_index = 0\n    var note_char_length_string_index\
    \ = 0\n    var note_char_length_string_index = 0\n    var note_char_length_string_index\
    \ = 0\n    var note_char_length_string_index = 0\n    var note_char_length_string_index\
    \ = 0\n    var note_char_length_string_index = 0\n    var note_char_length_string_index\
    \ = 0\n    var note_char_length_string_index = 0\n    var note_char_length_string_index\
    \ = 0\n    var note_char_length_string_index = 0\n    var note_char_length_string_index\
    \ = 0\n    var note_char_length_string_index = 0\n    var note_char_length_string_index\
    \ = 0\n    var note_char_length_string_index = 0\n    var note_char_length_string_index\
    \ = 0\n    var note_char_length_string_index = 0\n    var note_char_length_string_index\
    \ = 0\n    var note_char_length_string_index = 0\n    var note_char_length_string_index\
    \ = 0\n    var note_char_length_string_index = 0\n    var note_char_length_string_index\
    \ = 0\n    var note_char_length_string_index = 0\n    var note_char_length_string_index\
    \ = 0\n    var note_char_length_string_index = 0\n    var note_char_length_string_index\
    \ = 0\n    var note_char_length_string_index = 0\n    var note_char_length_string_index\
    \ = 0\n    var note_char_length_string_index = 0\n    var note_char_length_string_index\
    \ = 0\n    var note_char_length_string_index = 0\n    var note_char_length_string_index\
    \ = 0\n    var note_char_length_string_index = 0\n    var note_char_length_string_index\
    \ = 0\n    var note_char_length_string_index = 0\n    var note_char_length_string_index\
    \ = 0\n    var note_char_length_string_index = 0\n    var note_char_length_string_index\
    \ = 0\n    var note_char_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpwr5tmgkx.swift:23:9: error: invalid redeclaration of 'note_char_length_string_index'\n\
    \    var note_char_length_string_index = 0\n        ^\n/tmp/tmpwr5tmgkx.swift:22:9:\
    \ note: 'note_char_length_string_index' previously declared here\n    var note_char_length_string_index\
    \ = 0\n        ^\n/tmp/tmpwr5tmgkx.swift:24:9: error: invalid redeclaration of\
    \ 'note_char_length_string_index'\n    var note_char_length_string_index = 0\n\
    \        ^\n/tmp/tmpwr5tmgkx.swift:22:9: note: 'note_char_length_string_index'\
    \ previously declared here\n    var note_char_length_string_index = 0\n      \
    \  ^\n/tmp/tmpwr5tmgkx.swift:25:9: error: invalid redeclaration of 'note_char_length_string_index'\n\
    \    var note_char_length_string_index = 0\n        ^\n/tmp/tmpwr5tmgkx.swift:22:9:\
    \ note: 'note_char_length_string_index' previously declared here\n    var note_char_length_string_index\
    \ = 0\n        ^\n/tmp/tmpwr5tmgkx.swift:26:9: error: invalid redeclaration of\
    \ 'note_char_length_string_index'\n    var note_char_length_string_index = 0\n\
    \        ^\n/tmp/tmpwr5tmgkx.swift:22:9: note: 'note_char_length_string_index'\
    \ previously declared here\n    var note_char_length_string_index = 0\n      \
    \  ^\n/tmp/tmpwr5tmgkx.swift:27:9: error: invalid redeclaration of 'note_char_length_string_index'\n\
    \    var note_char_length_string_index = 0\n        ^\n/tmp/tmpwr5tmgkx.swift:22:9:\
    \ note: 'note_char_length_string_index' previously declared here\n    var note_char_length_string_index\
    \ = 0\n        ^\n/tmp/tmpwr5tmgkx.swift:28:9: error: invalid redeclaration of\
    \ 'note_char_length_string_index'\n    var note_char_length_string_index = 0\n\
    \        ^\n/tmp/tmpwr5tmgkx.swift:22:9: note: 'note_char_length_string_index'\
    \ previously declared here\n    var note_char_length_string_index = 0\n      \
    \  ^\n/tmp/tmpwr5tmgkx.swift:29:9: error: invalid redeclaration of 'note_char_length_string_index'\n\
    \    var note_char_length_string_index = 0\n        ^\n/tmp/tmpwr5tmgkx.swift:22:9:\
    \ note: 'note_char_length_string_index' previously declared here\n    var note_char_length_string_index\
    \ = 0\n        ^\n/tmp/tmpwr5tmgkx.swift:30"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beats_count = 0\n    var notes_count = 0\n\
    \    var note = String()\n    var beat = Int()\n    var note_index = -1\n    var\
    \ note_length = -1\n    var note_string = String()\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp6w9z45ee.swift:21:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = -1\n        ^\n/tmp/tmp6w9z45ee.swift:19:9: note: 'note_length'\
    \ previously declared here\n    var note_length = -1\n        ^\n/tmp/tmp6w9z45ee.swift:22:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = -1\n  \
    \      ^\n/tmp/tmp6w9z45ee.swift:19:9: note: 'note_length' previously declared\
    \ here\n    var note_length = -1\n        ^\n/tmp/tmp6w9z45ee.swift:23:9: error:\
    \ invalid redeclaration of 'note_length'\n    var note_length = -1\n        ^\n\
    /tmp/tmp6w9z45ee.swift:19:9: note: 'note_length' previously declared here\n  \
    \  var note_length = -1\n        ^\n/tmp/tmp6w9z45ee.swift:24:9: error: invalid\
    \ redeclaration of 'note_length'\n    var note_length = -1\n        ^\n/tmp/tmp6w9z45ee.swift:19:9:\
    \ note: 'note_length' previously declared here\n    var note_length = -1\n   \
    \     ^\n/tmp/tmp6w9z45ee.swift:25:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = -1\n        ^\n/tmp/tmp6w9z45ee.swift:19:9: note: 'note_length'\
    \ previously declared here\n    var note_length = -1\n        ^\n/tmp/tmp6w9z45ee.swift:26:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = -1\n  \
    \      ^\n/tmp/tmp6w9z45ee.swift:19:9: note: 'note_length' previously declared\
    \ here\n    var note_length = -1\n        ^\n/tmp/tmp6w9z45ee.swift:27:9: error:\
    \ invalid redeclaration of 'note_length'\n    var note_length = -1\n        ^\n\
    /tmp/tmp6w9z45ee.swift:19:9: note: 'note_length' previously declared here\n  \
    \  var note_length = -1\n        ^\n/tmp/tmp6w9z45ee.swift:28:9: error: invalid\
    \ redeclaration of 'note_length'\n    var note_length = -1\n        ^\n/tmp/tmp6w9z45ee.swift:19:9:\
    \ note: 'note_length' previously declared here\n    var note_length = -1\n   \
    \     ^\n/tmp/tmp6w9z45ee.swift:29:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = -1\n        ^\n/tmp/tmp6w9z45ee.swift:19:9: note: 'note_length'\
    \ previously declared here\n    var note_length = -1\n        ^\n/tmp/tmp6w9z45ee.swift:30:9:\
    \ error: invalid redeclaration of 'note_length'\n  "
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var last = 0\n    var lastNote = 0\n \
    \   var lastNoteBeat = 0\n    var lastNoteBeatCount = 0\n    var lastNoteBeatCountLast\
    \ = 0\n    var lastNoteBeatCountLastLast = 0\n    var lastNoteBeatCountLastLastLast\
    \ = 0\n    var lastNoteBeatCountLastLastLastLast = 0\n    var lastNoteBeatCountLastLastLastLast\
    \ = 0\n    var lastNoteBeatCountLastLastLastLastLast = 0\n    var lastNoteBeatCountLastLastLastLastLast\
    \ = 0\n    var lastNoteBeatCountLastLastLastLastLast = 0\n    var lastNoteBeatCountLastLastLastLastLast\
    \ = 0\n    var lastNoteBeatCountLastLastLastLastLast = 0\n    var lastNoteBeatCountLastLastLastLastLast\
    \ = 0\n    var lastNoteBeatCountLastLastLastLastLast = 0\n    var lastNoteBeatCountLastLastLastLastLast\
    \ = 0\n    var lastNoteBeatCountLastLastLastLastLast = 0\n    var lastNoteBeatCountLastLastLastLastLast\
    \ = 0\n    var lastNoteBeatCountLastLastLastLastLast = 0\n    var lastNoteBeatCountLastLastLastLastLast\
    \ = 0\n    var lastNoteBeatCountLastLastLastLastLast = 0\n    var lastNoteBeatCountLastLastLastLastLast\
    \ = 0\n    var lastNoteBeatCountLastLastLastLastLast = 0\n    var lastNoteBeatCountLastLastLastLastLast\
    \ = 0\n    var lastNoteBeatCountLastLastLastLastLast = 0\n    var lastNoteBeatCountLastLastLastLastLast\
    \ = 0\n    var lastNoteBeatCountLastLastLastLastLast = 0\n    var lastNoteBeatCountLastLastLastLastLast\
    \ = 0\n    var lastNoteBeatCountLastLastLastLastLast = 0\n    var lastNoteBeatCountLastLastLastLastLast\
    \ = 0\n    var lastNoteBeatCountLastLastLastLastLast = 0\n    var lastNoteBeatCountLastLastLastLastLast\
    \ = 0\n    var lastNoteBeatCountLastLastLastLastLast = 0\n    var lastNoteBeatCountLastLastLastLastLast\
    \ = 0\n    var lastNoteBeatCountLastLastLastLastLast = 0\n    var lastNoteBeatCountLastLastLastLastLast\
    \ = 0\n    var lastNoteBeatCountLastLastLastLastLast = 0\n    var lastNoteBeatCountLastLastLastLastLast\
    \ = 0\n    var lastNoteBeatCountLastLastLastLastLast = 0\n    var lastNoteBeatCountLastLastLastLastLast\
    \ = 0\n    var lastNote\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpizbvzxis.swift:23:9: error: invalid redeclaration of 'lastNoteBeatCountLastLastLastLast'\n\
    \    var lastNoteBeatCountLastLastLastLast = 0\n        ^\n/tmp/tmpizbvzxis.swift:22:9:\
    \ note: 'lastNoteBeatCountLastLastLastLast' previously declared here\n    var\
    \ lastNoteBeatCountLastLastLastLast = 0\n        ^\n/tmp/tmpizbvzxis.swift:25:9:\
    \ error: invalid redeclaration of 'lastNoteBeatCountLastLastLastLastLast'\n  \
    \  var lastNoteBeatCountLastLastLastLastLast = 0\n        ^\n/tmp/tmpizbvzxis.swift:24:9:\
    \ note: 'lastNoteBeatCountLastLastLastLastLast' previously declared here\n   \
    \ var lastNoteBeatCountLastLastLastLastLast = 0\n        ^\n/tmp/tmpizbvzxis.swift:26:9:\
    \ error: invalid redeclaration of 'lastNoteBeatCountLastLastLastLastLast'\n  \
    \  var lastNoteBeatCountLastLastLastLastLast = 0\n        ^\n/tmp/tmpizbvzxis.swift:24:9:\
    \ note: 'lastNoteBeatCountLastLastLastLastLast' previously declared here\n   \
    \ var lastNoteBeatCountLastLastLastLastLast = 0\n        ^\n/tmp/tmpizbvzxis.swift:27:9:\
    \ error: invalid redeclaration of 'lastNoteBeatCountLastLastLastLastLast'\n  \
    \  var lastNoteBeatCountLastLastLastLastLast = 0\n        ^\n/tmp/tmpizbvzxis.swift:24:9:\
    \ note: 'lastNoteBeatCountLastLastLastLastLast' previously declared here\n   \
    \ var lastNoteBeatCountLastLastLastLastLast = 0\n        ^\n/tmp/tmpizbvzxis.swift:28:9:\
    \ error: invalid redeclaration of 'lastNoteBeatCountLastLastLastLastLast'\n  \
    \  var lastNoteBeatCountLastLastLastLastLast = 0\n        ^\n/tmp/tmpizbvzxis.swift:24:9:\
    \ note: 'lastNoteBeatCountLastLastLastLastLast' previously declared here\n   \
    \ var lastNoteBeatCountLastLastLastLastLast = 0\n        ^\n/tmp/tmpizbvzxis.swift:29:9:\
    \ error: invalid redeclaration of 'lastNoteBeatCountLastLastLastLastLast'\n  \
    \  var lastNoteBeatCountLastLastLastLastLast = 0\n        ^\n/tmp/tmpizbvzxis.swift:24:9:\
    \ note: 'lastNoteBeatCountLastLastLastLastLast' previously declared here\n   \
    \ var lastNoteBeatCountLastLastLastLastLast = 0\n        ^\n/tmp/tmpizbvzxis.swift:30:9:\
    \ error: invalid redeclaration of 'lastNoteBeatCountLastLastLastLastLast'\n  \
    \  var lastNoteBeatCountLastLastLast"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var beats_count = 0\n    var note_count = 0\n    var note = 0\n    var note_length\
    \ = 0\n    var note_length_count = 0\n    var note_length_index = 0\n    var note_length_index2\
    \ = 0\n    var note_length_index3 = 0\n    var note_length_index4 = 0\n    var\
    \ note_length_index5 = 0\n    var note_length_index6 = 0\n    var note_length_index7\
    \ = 0\n    var note_length_index8 = 0\n    var note_length_index9 = 0\n    var\
    \ note_length_index10 = 0\n    var note_length_index11 = 0\n    var note_length_index12\
    \ = 0\n    var note_length_index13 = 0\n    var note_length_index14 = 0\n    var\
    \ note_length_index15 = 0\n    var note_length_index16 = 0\n    var note_length_index17\
    \ = 0\n    var note_length_index18 = 0\n    var note_length_index19 = 0\n    var\
    \ note_length_index20 = 0\n    var note_length_index21 = 0\n    var note_length_index22\
    \ = 0\n    var note_length_index23 = 0\n    var note_length_index24 = 0\n    var\
    \ note_length_index25 = 0\n    var note_length_index26 = 0\n    var note_length_index27\
    \ = 0\n    var note_length_index28 = 0\n    var note_length_index29 = 0\n    var\
    \ note_length_index30 = 0\n    var note_length_index31 = 0\n    var note_length_index32\
    \ = 0\n    var note_length_index33 = 0\n    var note_length_index34 = 0\n    var\
    \ note_length_index35 = 0\n    var note_length_index36 = 0\n    var note_length_index37\
    \ = 0\n    var note_length_index38 = 0\n    var note_length_index39 = 0\n    var\
    \ note_length_index40 = 0\n    var note_length_index41 = 0\n    var note_length_index42\
    \ = 0\n    var note_length_index43 = 0\n    var note_length_index44 = 0\n    var\
    \ note_length_index45 = 0\n    var note_length_index46 = 0\n    var note_length_index47\
    \ = 0\n    var note_length_index48 = 0\n    var note_length_index49 = 0\n    var\
    \ note_length_index50 = 0\n    var note_length_index51 = 0\n    var note_length_index52\
    \ = 0\n    var note_length_index53 = 0\n    var note_length_index54 = 0\n    var\
    \ note_length_index55 = 0\n    var note_length_index56 = 0\n    var note_length_index57\
    \ = 0\n    var note_length_index58 = 0\n    var note_length_index59 = 0\n    var\
    \ note_length_index60 = 0\n    var note_length_index61 = 0\n    var note_length_index62\
    \ = 0\n    var note_length_index63 = 0\n    var note_length_index64 = 0\n    var\
    \ note_length_index65 = 0\n    var note_length_index66 = 0\n    var note_length_index67\
    \ = 0\n    var note_length_index68 = 0\n    var note_length_index69 = 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpxsd0k5ub.swift:12:9: warning: variable 'beats' was never used;\
    \ consider replacing with '_' or removing it\n    var beats: [Int] = []\n    \
    \    ^~~~~\n        _\n/tmp/tmpxsd0k5ub.swift:13:9: warning: initialization of\
    \ variable 'beats_count' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var beats_count = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpxsd0k5ub.swift:14:9:\
    \ warning: initialization of variable 'note_count' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_count = 0\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmpxsd0k5ub.swift:15:9: warning: initialization of variable 'note'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note = 0\n    ~~~~^~~~\n    _\n/tmp/tmpxsd0k5ub.swift:16:9: warning: initialization\
    \ of variable 'note_length' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_length = 0\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmpxsd0k5ub.swift:17:9: warning: initialization of variable 'note_length_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_length_count = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpxsd0k5ub.swift:18:9:\
    \ warning: initialization of variable 'note_length_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var note_length_index =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpxsd0k5ub.swift:19:9: warning: initialization\
    \ of variable 'note_length_index2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_length_index2 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpxsd0k5ub.swift:20:9: warning: initialization of variable 'note_length_index3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_length_index3 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpxsd0k5ub.swift:21:9:\
    \ warning: initialization of variable 'note_length_index4' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var note_length_index4\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var notes: [String] = []\n    var note_index = 0\n    var current_note =\
    \ \"\"\n    var current_beat = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpl3x4ffex.swift:67:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpl3x4ffex.swift:26:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpl3x4ffex.swift:24:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpl3x4ffex.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpl3x4ffex.swift:25:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpl3x4ffex.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpl3x4ffex.swift:24:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpl3x4ffex.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpl3x4ffex.swift:25:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpl3x4ffex.swift:30:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpl3x4ffex.swift:24:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpl3x4ffex.swift:31:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpl3x4ffex.swift:25:9:\
    \ note: 'current_note_length_value_value_value_value"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array: [Int]\
    \ = []\n    var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_value\
    \ = 0\n    var current_note_length_value_index = 0\n    var current_note_length_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpa67v6sgw.swift:24:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpa67v6sgw.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpa67v6sgw.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpa67v6sgw.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpa67v6sgw.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpa67v6sgw.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpa67v6sgw.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpa67v6sgw.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpa67v6sgw.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpa67v6sgw.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpa67v6sgw.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpa67v6sgw.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_valu"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var last = 0\n    var last_beat = 0\n\
    \    var last_note = 0\n    var last_last = 0\n    var last_last_beat = 0\n  \
    \  var last_last_note = 0\n    var last_last_last = 0\n    var last_last_last_beat\
    \ = 0\n    var last_last_last_note = 0\n    var last_last_last_last = 0\n    var\
    \ last_last_last_last_beat = 0\n    var last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last = 0\n    var last_last_last_last_last = 0\n    var\
    \ last_last_last_last_last_beat = 0\n    var last_last_last_last_last_note = 0\n\
    \    var last_last_last_last_last_last = 0\n    var last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last = 0\n    var last_last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_last_last = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_last_last = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_last_last_last = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_last_last_last = 0\n    var last_last_last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_last_last_last = 0\n    var last_last_last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_last_last_last = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_last_last_last = 0\n    var last_last_last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last = 0\n    var last_last_last_last_last_last_last_last\
    \ = 0\n    var last_last_last_last_last_last_last_last = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpvv1g6di2.swift:28:9: error: invalid redeclaration of 'last_last_last_last_last'\n\
    \    var last_last_last_last_last = 0\n        ^\n/tmp/tmpvv1g6di2.swift:27:9:\
    \ note: 'last_last_last_last_last' previously declared here\n    var last_last_last_last_last\
    \ = 0\n        ^\n/tmp/tmpvv1g6di2.swift:32:9: error: invalid redeclaration of\
    \ 'last_last_last_last_last_last'\n    var last_last_last_last_last_last = 0\n\
    \        ^\n/tmp/tmpvv1g6di2.swift:31:9: note: 'last_last_last_last_last_last'\
    \ previously declared here\n    var last_last_last_last_last_last = 0\n      \
    \  ^\n/tmp/tmpvv1g6di2.swift:36:9: error: invalid redeclaration of 'last_last_last_last_last_last_last'\n\
    \    var last_last_last_last_last_last_last = 0\n        ^\n/tmp/tmpvv1g6di2.swift:35:9:\
    \ note: 'last_last_last_last_last_last_last' previously declared here\n    var\
    \ last_last_last_last_last_last_last = 0\n        ^\n/tmp/tmpvv1g6di2.swift:37:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last'\n    var\
    \ last_last_last_last_last_last_last = 0\n        ^\n/tmp/tmpvv1g6di2.swift:35:9:\
    \ note: 'last_last_last_last_last_last_last' previously declared here\n    var\
    \ last_last_last_last_last_last_last = 0\n        ^\n/tmp/tmpvv1g6di2.swift:40:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last'\n    var\
    \ last_last_last_last_last_last_last = 0\n        ^\n/tmp/tmpvv1g6di2.swift:35:9:\
    \ note: 'last_last_last_last_last_last_last' previously declared here\n    var\
    \ last_last_last_last_last_last_last = 0\n        ^\n/tmp/tmpvv1g6di2.swift:41:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last'\n    var\
    \ last_last_last_last_last_last_last = 0\n        ^\n/tmp/tmpvv1g6di2.swift:35:9:\
    \ note: 'last_last_last_last_last_last_last' previously declared here\n    var\
    \ last_last_last_last_last_last_last = 0\n        ^\n/tmp/tmpvv1g6di2.swift:42:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpvv1g6di2.swift:38:9:\
    \ note: 'last_last_last_last_last_last_last_beat' previously d"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var current_beat = 0\n    var current_note = 0\n\
    \    var current_note_length = 0\n    var current_note_length_index = 0\n    var\
    \ current_note_length_value = 0\n    var current_note_length_value_index = 0\n\
    \    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp51gy553a.swift:25:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp51gy553a.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp51gy553a.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp51gy553a.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp51gy553a.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp51gy553a.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp51gy553a.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp51gy553a.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp51gy553a.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp51gy553a.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp51gy553a.swift:30:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp51gy553a.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_valu"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var last = 0\n    var lastBeat = 0\n \
    \   var lastNote = 0\n    var lastLast = 0\n    var lastLastBeat = 0\n    var\
    \ lastLastNote = 0\n    var lastLastLast = 0\n    var lastLastLastBeat = 0\n \
    \   var lastLastLastNote = 0\n    var lastLastLastLast = 0\n    var lastLastLastLastBeat\
    \ = 0\n    var lastLastLastLastNote = 0\n    var lastLastLastLastLast = 0\n  \
    \  var lastLastLastLastLastBeat = 0\n    var lastLastLastLastLastNote = 0\n  \
    \  var lastLastLastLastLast = 0\n    var lastLastLastLastLastBeat = 0\n    var\
    \ lastLastLastLastLastNote = 0\n    var lastLastLastLastLastLast = 0\n    var\
    \ lastLastLastLastLastLastBeat = 0\n    var lastLastLastLastLastLastNote = 0\n\
    \    var lastLastLastLastLastLast = 0\n    var lastLastLastLastLastLastBeat =\
    \ 0\n    var lastLastLastLastLastLastNote = 0\n    var lastLastLastLastLastLast\
    \ = 0\n    var lastLastLastLastLastLastBeat = 0\n    var lastLastLastLastLastLastNote\
    \ = 0\n    var lastLastLastLastLastLast = 0\n    var lastLastLastLastLastLastBeat\
    \ = 0\n    var lastLastLastLastLastLastNote = 0\n    var lastLastLastLastLastLast\
    \ = 0\n    var lastLastLastLastLastLastBeat = 0\n    var lastLastLastLastLastLastNote\
    \ = 0\n    var lastLastLastLastLastLast = 0\n    var lastLastLastLastLastLastBeat\
    \ = 0\n    var lastLastLastLastLastLastNote = 0\n    var lastLastLastLastLastLast\
    \ = 0\n    var lastLastLastLastLastLastBeat = 0\n    var lastLastLastLastLastLastNote\
    \ = 0\n    var lastLastLastLastLastLast = 0\n    var lastLastLastLastLastLastBeat\
    \ = 0\n    var lastLastLastLastLastLastNote = 0\n    var lastLastLastLastLastLast\
    \ = 0\n    var lastLastLastLastLastLastBeat = 0\n    var lastLastLastLastLastLastNote\
    \ = 0\n    var lastLastLastLastLastLast = 0\n    var lastLastLastLastLastLastBeat\
    \ = 0\n    var lastLastLastLastLastLastNote = 0\n    var lastLastLastLastLastLast\
    \ = 0\n    var lastLastLastLastLastLastBeat = 0\n    var lastLastLastLastLastLastNote\
    \ = 0\n    var lastLastLastLastLastLast = 0\n    var lastLastLastLastLastLastBeat\
    \ = 0\n    var lastLastLastLastLastLastNote = 0\n    var lastLastLastLast\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp320r0ujg.swift:30:9: error: invalid redeclaration of 'lastLastLastLastLast'\n\
    \    var lastLastLastLastLast = 0\n        ^\n/tmp/tmp320r0ujg.swift:27:9: note:\
    \ 'lastLastLastLastLast' previously declared here\n    var lastLastLastLastLast\
    \ = 0\n        ^\n/tmp/tmp320r0ujg.swift:31:9: error: invalid redeclaration of\
    \ 'lastLastLastLastLastBeat'\n    var lastLastLastLastLastBeat = 0\n        ^\n\
    /tmp/tmp320r0ujg.swift:28:9: note: 'lastLastLastLastLastBeat' previously declared\
    \ here\n    var lastLastLastLastLastBeat = 0\n        ^\n/tmp/tmp320r0ujg.swift:32:9:\
    \ error: invalid redeclaration of 'lastLastLastLastLastNote'\n    var lastLastLastLastLastNote\
    \ = 0\n        ^\n/tmp/tmp320r0ujg.swift:29:9: note: 'lastLastLastLastLastNote'\
    \ previously declared here\n    var lastLastLastLastLastNote = 0\n        ^\n\
    /tmp/tmp320r0ujg.swift:36:9: error: invalid redeclaration of 'lastLastLastLastLastLast'\n\
    \    var lastLastLastLastLastLast = 0\n        ^\n/tmp/tmp320r0ujg.swift:33:9:\
    \ note: 'lastLastLastLastLastLast' previously declared here\n    var lastLastLastLastLastLast\
    \ = 0\n        ^\n/tmp/tmp320r0ujg.swift:37:9: error: invalid redeclaration of\
    \ 'lastLastLastLastLastLastBeat'\n    var lastLastLastLastLastLastBeat = 0\n \
    \       ^\n/tmp/tmp320r0ujg.swift:34:9: note: 'lastLastLastLastLastLastBeat' previously\
    \ declared here\n    var lastLastLastLastLastLastBeat = 0\n        ^\n/tmp/tmp320r0ujg.swift:38:9:\
    \ error: invalid redeclaration of 'lastLastLastLastLastLastNote'\n    var lastLastLastLastLastLastNote\
    \ = 0\n        ^\n/tmp/tmp320r0ujg.swift:35:9: note: 'lastLastLastLastLastLastNote'\
    \ previously declared here\n    var lastLastLastLastLastLastNote = 0\n       \
    \ ^\n/tmp/tmp320r0ujg.swift:39:9: error: invalid redeclaration of 'lastLastLastLastLastLast'\n\
    \    var lastLastLastLastLastLast = 0\n        ^\n/tmp/tmp320r0ujg.swift:33:9:\
    \ note: 'lastLastLastLastLastLast' previously declared here\n    var lastLastLastLastLastLast\
    \ = 0\n        ^\n/tmp/tmp320r0ujg.swift:40:9: error: invalid redeclaration of\
    \ 'lastLastLastLastLastLastBeat'\n    var lastLastLastLastLastLastBeat = 0\n \
    \       ^\n/tmp/t"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = Int()\n    var note_count = 0\n    var last_note\
    \ = Int()\n    var last_note_count = 0\n    var last_note_index = -1\n    var\
    \ last_note_index2 = -1\n    var last_note_index3 = -1\n    var last_note_index4\
    \ = -1\n    var last_note_index5 = -1\n    var last_note_index6 = -1\n    var\
    \ last_note_index7 = -1\n    var last_note_index8 = -1\n    var last_note_index9\
    \ = -1\n    var last_note_index10 = -1\n    var last_note_index11 = -1\n    var\
    \ last_note_index12 = -1\n    var last_note_index13 = -1\n    var last_note_index14\
    \ = -1\n    var last_note_index15 = -1\n    var last_note_index16 = -1\n    var\
    \ last_note_index17 = -1\n    var last_note_index18 = -1\n    var last_note_index19\
    \ = -1\n    var last_note_index20 = -1\n    var last_note_index21 = -1\n    var\
    \ last_note_index22 = -1\n    var last_note_index23 = -1\n    var last_note_index24\
    \ = -1\n    var last_note_index25 = -1\n    var last_note_index26 = -1\n    var\
    \ last_note_index27 = -1\n    var last_note_index28 = -1\n    var last_note_index29\
    \ = -1\n    var last_note_index30 = -1\n    var last_note_index31 = -1\n    var\
    \ last_note_index32 = -1\n    var last_note_index33 = -1\n    var last_note_index34\
    \ = -1\n    var last_note_index35 = -1\n    var last_note_index36 = -1\n    var\
    \ last_note_index37 = -1\n    var last_note_index38 = -1\n    var last_note_index39\
    \ = -1\n    var last_note_index40 = -1\n    var last_note_index41 = -1\n    var\
    \ last_note_index42 = -1\n    var last_note_index43 = -1\n    var last_note_index44\
    \ = -1\n    var last_note_index45 = -1\n    var last_note_index46 = -1\n    var\
    \ last_note_index47 = -1\n    var last_note_index48 = -1\n    var last_note_index49\
    \ = -1\n    var last_note_index50 = -1\n    var last_note_index51 = -1\n    var\
    \ last_note_index52 = -1\n    var last_note_index53 = -1\n    var last_note_index54\
    \ = -1\n    var last_note_index55 = -1\n    var last_note_index56 = -1\n    var\
    \ last_note_index57 = -1\n    var last_note_index58 = -1\n    var last_note_index59\
    \ = -1\n    var last_note_index60 = -1\n    var last_note_index61 = -1\n    var\
    \ last_note_index62 = -1\n    var last_note_index63 = -1\n    var last_note_index64\
    \ = -1\n    var last_note_index65 = -1\n    var last_note_index66 = -1\n    var\
    \ last_note\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpytr880_x.swift:84:9: error: type annotation missing in pattern\n\
    \    var last_note\n        ^\n"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    for c in\
    \ music_string {\n        if c == \"o\" {\n            notes.append(note)\n  \
    \          note = \"\"\n            beat = 0\n        } else if c == \"|\" {\n\
    \            notes.append(note)\n            note = \"\"\n            beat = 1\n\
    \        } else {\n            note += String(c)\n        }\n    }\n    notes.append(note)\n\
    \    for note in notes {\n        beats.append(note.characters.count)\n    }\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp3_l_gfmx.swift:31:27: error: 'characters' is unavailable: Please\
    \ use String directly\n        beats.append(note.characters.count)\n         \
    \                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp3_l_gfmx.swift:14:9: warning: variable 'beat' was written to, but\
    \ never read\n    var beat = 0\n        ^\n"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var current_beat = 0\n    var current_note = String()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp4g0wxi5q.swift:17:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:24:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp4g0wxi5q.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = String()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1i2wovyq.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = String()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1i2wovyq.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = \"\"\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_index2\
    \ = 0\n    var current_note_length_index3 = 0\n    var current_note_length_index4\
    \ = 0\n    var current_note_length_index5 = 0\n    var current_note_length_index6\
    \ = 0\n    var current_note_length_index7 = 0\n    var current_note_length_index8\
    \ = 0\n    var current_note_length_index9 = 0\n    var current_note_length_index10\
    \ = 0\n    var current_note_length_index11 = 0\n    var current_note_length_index12\
    \ = 0\n    var current_note_length_index13 = 0\n    var current_note_length_index14\
    \ = 0\n    var current_note_length_index15 = 0\n    var current_note_length_index16\
    \ = 0\n    var current_note_length_index17 = 0\n    var current_note_length_index18\
    \ = 0\n    var current_note_length_index19 = 0\n    var current_note_length_index20\
    \ = 0\n    var current_note_length_index21 = 0\n    var current_note_length_index22\
    \ = 0\n    var current_note_length_index23 = 0\n    var current_note_length_index24\
    \ = 0\n    var current_note_length_index25 = 0\n    var current_note_length_index26\
    \ = 0\n    var current_note_length_index27 = 0\n    var current_note_length_index28\
    \ = 0\n    var current_note_length_index29 = 0\n    var current_note_length_index30\
    \ = 0\n    var current_note_length_index31 = 0\n    var current_note_length_index32\
    \ = 0\n    var current_note_length_index33 = 0\n    var current_note_length_index34\
    \ = 0\n    var current_note_length_index35 = 0\n    var current_note_length_index36\
    \ = 0\n    var current_note_length_index37 = 0\n    var current_note_length_index38\
    \ = 0\n    var current_note_length_index39 = 0\n    var current_note_length_index40\
    \ = 0\n    var current_note_length_index41 = 0\n    var current_note_length_index42\
    \ = 0\n    var current_note_length_index43 = 0\n    var current_note_length_index44\
    \ = 0\n    var current_note_length_index45 = 0\n    var current_note_length_index46\
    \ = 0\n    var current_note_length_index47 = 0\n    var current_note_length_index48\
    \ = 0\n    var current_note_length_index49 = 0\n    var current_note_length_index50\
    \ = 0\n    var current_note_length_index51 = 0\n    var current_note_length_index52\
    \ = 0\n    var current_note_length_index53 = 0\n    var current_note_length_index54\
    \ = 0\n    var current_note_length_index55 = 0\n    var current_note_length_index56\
    \ = 0\n    var current_note_length_index57 = 0\n    var current_note_length_index58\
    \ = 0\n    var current_note_length_index59 = 0\n    var current_note_length_index60\
    \ = 0\n    var current_note_length_index61 = 0\n    var current_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp93ukai9l.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    for char\
    \ in music_string {\n        if char == \"o\" {\n            beats.append(beat)\n\
    \            notes.append(note)\n            beat = 0\n            note = \"\"\
    \n        } else if char == \"|\" {\n            beat += 1\n        } else {\n\
    \            note += char\n        }\n    }\n    beats.append(beat)\n    notes.append(note)\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp12_bel69.swift:25:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            note += char\n             \
    \       ^\n"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var note_index\
    \ = 0\n    var note_index2 = 0\n    var note_length = music_string.characters.count\n\
    \    var note_length2 = note_length / 4\n    var note_length3 = note_length2 /\
    \ 2\n    var note_length4 = note_length3 / 2\n    var note_length5 = note_length4\
    \ / 2\n    var note_length6 = note_length5 / 2\n    var note_length7 = note_length6\
    \ / 2\n    var note_length8 = note_length7 / 2\n    var note_length9 = note_length8\
    \ / 2\n    var note_length10 = note_length9 / 2\n    var note_length11 = note_length10\
    \ / 2\n    var note_length12 = note_length11 / 2\n    var note_length13 = note_length12\
    \ / 2\n    var note_length14 = note_length13 / 2\n    var note_length15 = note_length14\
    \ / 2\n    var note_length16 = note_length15 / 2\n    var note_length17 = note_length16\
    \ / 2\n    var note_length18 = note_length17 / 2\n    var note_length19 = note_length18\
    \ / 2\n    var note_length20 = note_length19 / 2\n    var note_length21 = note_length20\
    \ / 2\n    var note_length22 = note_length21 / 2\n    var note_length23 = note_length22\
    \ / 2\n    var note_length24 = note_length23 / 2\n    var note_length25 = note_length24\
    \ / 2\n    var note_length26 = note_length25 / 2\n    var note_length27 = note_length26\
    \ / 2\n    var note_length28 = note_length27 / 2\n    var note_length29 = note_length28\
    \ / 2\n    var note_length30 = note_length29 / 2\n    var note_length31 = note_length30\
    \ / 2\n    var note_length32 = note_length31 / 2\n    var note_length33 = note_length32\
    \ / 2\n    var note_length34 = note_length33 / 2\n    var note_length35 = note_length34\
    \ / 2\n    var note_length36 = note_length35 / 2\n    var note_length37 = note_length36\
    \ / 2\n    var note_length38 = note_length37 / 2\n    var note_length39 = note_length38\
    \ / 2\n    var note_length40 = note_length39 / 2\n    var note_length41 = note_length40\
    \ / 2\n    var note_length42 = note_length41 / 2\n    var note_length43 = note_length42\
    \ / 2\n    var note_length44 = note_length43 / 2\n    var note_length45 = note_length44\
    \ / \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(parse_music(music_string: \"\"\
    ) == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4, 4, 4,\
    \ 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string:\
    \ \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1vi8z255.swift:63:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmp1vi8z255.swift:18:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var note_length = music_string.characters.count\n \
    \                                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var last\
    \ = 0\n    var lastNote = \"\"\n    var lastNoteBeat = 0\n    var lastNoteBeatCount\
    \ = 0\n    var lastNoteBeatCount2 = 0\n    var lastNoteBeatCount3 = 0\n    var\
    \ lastNoteBeatCount4 = 0\n    var lastNoteBeatCount5 = 0\n    var lastNoteBeatCount6\
    \ = 0\n    var lastNoteBeatCount7 = 0\n    var lastNoteBeatCount8 = 0\n    var\
    \ lastNoteBeatCount9 = 0\n    var lastNoteBeatCount10 = 0\n    var lastNoteBeatCount11\
    \ = 0\n    var lastNoteBeatCount12 = 0\n    var lastNoteBeatCount13 = 0\n    var\
    \ lastNoteBeatCount14 = 0\n    var lastNoteBeatCount15 = 0\n    var lastNoteBeatCount16\
    \ = 0\n    var lastNoteBeatCount17 = 0\n    var lastNoteBeatCount18 = 0\n    var\
    \ lastNoteBeatCount19 = 0\n    var lastNoteBeatCount20 = 0\n    var lastNoteBeatCount21\
    \ = 0\n    var lastNoteBeatCount22 = 0\n    var lastNoteBeatCount23 = 0\n    var\
    \ lastNoteBeatCount24 = 0\n    var lastNoteBeatCount25 = 0\n    var lastNoteBeatCount26\
    \ = 0\n    var lastNoteBeatCount27 = 0\n    var lastNoteBeatCount28 = 0\n    var\
    \ lastNoteBeatCount29 = 0\n    var lastNoteBeatCount30 = 0\n    var lastNoteBeatCount31\
    \ = 0\n    var lastNoteBeatCount32 = 0\n    var lastNoteBeatCount33 = 0\n    var\
    \ lastNoteBeatCount34 = 0\n    var lastNoteBeatCount35 = 0\n    var lastNoteBeatCount36\
    \ = 0\n    var lastNoteBeatCount37 = 0\n    var lastNoteBeatCount38 = 0\n    var\
    \ lastNoteBeatCount39 = 0\n    var lastNoteBeatCount40 = 0\n    var lastNoteBeatCount41\
    \ = 0\n    var lastNoteBeatCount42 = 0\n    var lastNoteBeatCount43 = 0\n    var\
    \ lastNoteBeatCount44 = 0\n    var lastNoteBeatCount45 = 0\n    var lastNoteBeatCount46\
    \ = 0\n    var lastNoteBeatCount47 = 0\n    var lastNoteBeatCount48 = 0\n    var\
    \ lastNoteBeatCount49 = 0\n    var lastNoteBeatCount50 = 0\n    var lastNoteBeatCount51\
    \ = 0\n    var lastNoteBeatCount52 = 0\n    var lastNoteBeatCount53\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpga2n9aym.swift:71:9: error: type annotation missing in pattern\n\
    \    var lastNoteBeatCount53\n        ^\n"
  stdout: ''
  timestamp: 1660013789
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = [String]()\n    var beat = 0\n    var note = \"\"\n    var note_index\
    \ = 0\n    var note_index2 = 0\n    var note_index3 = 0\n    var note_index4 =\
    \ 0\n    var note_index5 = 0\n    var note_index6 = 0\n    var note_index7 = 0\n\
    \    var note_index8 = 0\n    var note_index9 = 0\n    var note_index10 = 0\n\
    \    var note_index11 = 0\n    var note_index12 = 0\n    var note_index13 = 0\n\
    \    var note_index14 = 0\n    var note_index15 = 0\n    var note_index16 = 0\n\
    \    var note_index17 = 0\n    var note_index18 = 0\n    var note_index19 = 0\n\
    \    var note_index20 = 0\n    var note_index21 = 0\n    var note_index22 = 0\n\
    \    var note_index23 = 0\n    var note_index24 = 0\n    var note_index25 = 0\n\
    \    var note_index26 = 0\n    var note_index27 = 0\n    var note_index28 = 0\n\
    \    var note_index29 = 0\n    var note_index30 = 0\n    var note_index31 = 0\n\
    \    var note_index32 = 0\n    var note_index33 = 0\n    var note_index34 = 0\n\
    \    var note_index35 = 0\n    var note_index36 = 0\n    var note_index37 = 0\n\
    \    var note_index38 = 0\n    var note_index39 = 0\n    var note_index40 = 0\n\
    \    var note_index41 = 0\n    var note_index42 = 0\n    var note_index43 = 0\n\
    \    var note_index44 = 0\n    var note_index45 = 0\n    var note_index46 = 0\n\
    \    var note_index47 = 0\n    var note_index48 = 0\n    var note_index49 = 0\n\
    \    var note_index50 = 0\n    var note_index51 = 0\n    var note_index52 = 0\n\
    \    var note_index53 = 0\n    var note_index54 = 0\n    var note_index55 = 0\n\
    \    var note_index56 = 0\n    var note_index57 = 0\n    var note_index58 = 0\n\
    \    var note_index59 = 0\n    var note_index60 = 0\n    var note_index61 = 0\n\
    \    var note_index62 = 0\n    var note_index63 = 0\n    var note_index64 = 0\n\
    \    var note_index65 = 0\n    var note_index66 = 0\n    var note_index67 = 0\n\
    \    var note_index68 = 0\n    var note_index69 = 0\n    var note_index70 = 0\n\
    \    var note_index71 = 0\n    var note_index72 = 0\n    var note_index73 = 0\n\
    \    var note_index74 = 0\n    var note_index75 = 0\n    var note_index76 = 0\n\
    \    var note_index77 = 0\n    var note_index78 = 0\n    var note_index79 = 0\n\
    \    var note_index80 = 0\n    var note_index81 = 0\n    var note_index82 = 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpfznnfw3c.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpfznnfw3c.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmpfznnfw3c.swift:14:9:\
    \ warning: initialization of variable 'beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmpfznnfw3c.swift:15:9: warning: initialization of variable 'note' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var note\
    \ = \"\"\n    ~~~~^~~~\n    _\n/tmp/tmpfznnfw3c.swift:16:9: warning: initialization\
    \ of variable 'note_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_index = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpfznnfw3c.swift:17:9:\
    \ warning: initialization of variable 'note_index2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_index2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpfznnfw3c.swift:18:9: warning: initialization of variable 'note_index3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_index3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpfznnfw3c.swift:19:9:\
    \ warning: initialization of variable 'note_index4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_index4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpfznnfw3c.swift:20:9: warning: initialization of variable 'note_index5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_index5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpfznnfw3c.swift:21:9:\
    \ warning: initialization of variable 'note_index6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_index6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpfznnfw3c.swift:22:9: warning: initialization of variable 'note_index7'\
    \ was never used"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beats_count = 0\n    var note_count = 0\n    var note = String()\n   \
    \ var last_note = String()\n    var last_beat = Int()\n    var last_beat_count\
    \ = 0\n    var last_note_count = 0\n    var last_note_beat = Int()\n    var last_note_beat_count\
    \ = 0\n    var last_note_note = String()\n    var last_note_note_beat = Int()\n\
    \    var last_note_note_beat_count = 0\n    var last_note_note_note = String()\n\
    \    var last_note_note_note_count = 0\n    var last_note_note_note_beat = Int()\n\
    \    var last_note_note_note_beat_count = 0\n    var last_note_note_note_note\
    \ = String()\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note_beat\
    \ = Int()\n    var last_note_note_note_note_beat_count = 0\n    var last_note_note_note_note_note\
    \ = String()\n    var last_note_note_note_note_note_count = 0\n    var last_note_note_note_note_note_beat\
    \ = Int()\n    var last_note_note_note_note_note_beat_count = 0\n    var last_note_note_note_note_note\
    \ = String()\n    var last_note_note_note_note_note_count = 0\n    var last_note_note_note_note_note_beat\
    \ = Int()\n    var last_note_note_note_note_note_beat_count = 0\n    var last_note_note_note_note_note\
    \ = String()\n    var last_note_note_note_note_note_count = 0\n    var last_note_note_note_note_note_beat\
    \ = Int()\n    var last_note_note_note_note_note_beat_count = 0\n    var last_note_note_note_note_note\
    \ = String()\n    var last_note_note_note_note_note_count = 0\n    var last_note_note_note_note_note_beat\
    \ = Int()\n    var last_note_note_note_note_note_beat_count = 0\n    var last_note_note_note_note_note\
    \ = String()\n    var last_note_note_note_note_note_count = 0\n    var last_note_note_note_note_note_beat\
    \ = Int()\n    var last_note_note_note_note_note_beat_count = 0\n    var last_note_note_note_note_note\
    \ = String()\n    var last_note_note_note_note_note_count = 0\n    var last_note_note_note_note_note_beat\
    \ = Int()\n    var last_note_note_note_note_note_beat_count = 0\n    var last_note_note_note_note_note\
    \ = String()\n    var last_note_note_note_note_note_count = 0\n    var last_note_note_note_note_note_beat\
    \ = Int()\n    var last_note_note_note_note_note_beat_count = 0\n    var last_note_note_note_note_note\
    \ = String()\n    var last_note_note_note_note_note_count = 0\n    var last_note_note_note_note_note_beat\
    \ = Int()\n    var last_note_note_note_note_\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpydfl10zg.swift:37:9: error: invalid redeclaration of 'last_note_note_note_note_note'\n\
    \    var last_note_note_note_note_note = String()\n        ^\n/tmp/tmpydfl10zg.swift:33:9:\
    \ note: 'last_note_note_note_note_note' previously declared here\n    var last_note_note_note_note_note\
    \ = String()\n        ^\n/tmp/tmpydfl10zg.swift:38:9: error: invalid redeclaration\
    \ of 'last_note_note_note_note_note_count'\n    var last_note_note_note_note_note_count\
    \ = 0\n        ^\n/tmp/tmpydfl10zg.swift:34:9: note: 'last_note_note_note_note_note_count'\
    \ previously declared here\n    var last_note_note_note_note_note_count = 0\n\
    \        ^\n/tmp/tmpydfl10zg.swift:39:9: error: invalid redeclaration of 'last_note_note_note_note_note_beat'\n\
    \    var last_note_note_note_note_note_beat = Int()\n        ^\n/tmp/tmpydfl10zg.swift:35:9:\
    \ note: 'last_note_note_note_note_note_beat' previously declared here\n    var\
    \ last_note_note_note_note_note_beat = Int()\n        ^\n/tmp/tmpydfl10zg.swift:40:9:\
    \ error: invalid redeclaration of 'last_note_note_note_note_note_beat_count'\n\
    \    var last_note_note_note_note_note_beat_count = 0\n        ^\n/tmp/tmpydfl10zg.swift:36:9:\
    \ note: 'last_note_note_note_note_note_beat_count' previously declared here\n\
    \    var last_note_note_note_note_note_beat_count = 0\n        ^\n/tmp/tmpydfl10zg.swift:41:9:\
    \ error: invalid redeclaration of 'last_note_note_note_note_note'\n    var last_note_note_note_note_note\
    \ = String()\n        ^\n/tmp/tmpydfl10zg.swift:33:9: note: 'last_note_note_note_note_note'\
    \ previously declared here\n    var last_note_note_note_note_note = String()\n\
    \        ^\n/tmp/tmpydfl10zg.swift:42:9: error: invalid redeclaration of 'last_note_note_note_note_note_count'\n\
    \    var last_note_note_note_note_note_count = 0\n        ^\n/tmp/tmpydfl10zg.swift:34:9:\
    \ note: 'last_note_note_note_note_note_count' previously declared here\n    var\
    \ last_note_note_note_note_note_count = 0\n        ^\n/tmp/tmpydfl10zg.swift:43:9:\
    \ error: invalid redeclaration of 'last_note_note_note_note_note_beat'\n    var\
    \ last_note_note_note_note_note_beat = Int()\n        ^\n/tmp/tm"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var notes = [String]()\n    var notes_length\
    \ = 0\n    var notes_length_index = 0\n    var notes_length_string = \"\"\n  \
    \  var notes_length_string_length = \"\"\n    var notes_length_string_length_index\
    \ = 0\n    var notes_length_string_length_string = \"\"\n    var notes_length_string_length_string_length\
    \ = \"\"\n    var notes_length_string_length_string_length_index = 0\n    var\
    \ notes_length_string_length_string_length_string = \"\"\n    var notes_length_string_length_string_length_string_length\
    \ = \"\"\n    var notes_length_string_length_string_length_string_length_index\
    \ = 0\n    var notes_length_string_length_string_length_string_length_string =\
    \ \"\"\n    var notes_length_string_length_string_length_string_length_string_length\
    \ = \"\"\n    var notes_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    var notes_length_string_length_string_length_string_length_string_length_string\
    \ = \"\"\n    var notes_length_string_length_string_length_string_length_string_length_string_length\
    \ = \"\"\n    var notes_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    var notes_length_string_length_string_length_string_length_string_length_string_length_string\
    \ = \"\"\n    var notes_length_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = \"\"\n    var notes_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    var notes_length_string_length_string_length_string_length_string_length_string_length_string_length_string\
    \ = \"\"\n    var notes_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = \"\"\n    var notes_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    var notes_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string\
    \ = \"\"\n    var notes_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = \"\"\n    var notes_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    var notes_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string\
    \ = \"\"\n    var notes_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = \"\"\n    var notes_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    var notes_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string\
    \ = \"\"\n    var notes_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp6u2tqj3h.swift:44:9: error: invalid redeclaration of 'notes_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index'\n\
    \    var notes_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n        ^\n/tmp/tmp6u2tqj3h.swift:41:9: note: 'notes_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index'\
    \ previously declared here\n    var notes_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n        ^\n/tmp/tmp6u2tqj3h.swift:46:9: error: type annotation missing\
    \ in pattern\n    var notes_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var beats_counter = 0\n    var notes_counter = 0\n    var last_note = String()\n\
    \    var last_note_index = -1\n    var last_note_index2 = -1\n    var last_note_index3\
    \ = -1\n    var last_note_index4 = -1\n    var last_note_index5 = -1\n    var\
    \ last_note_index6 = -1\n    var last_note_index7 = -1\n    var last_note_index8\
    \ = -1\n    var last_note_index9 = -1\n    var last_note_index10 = -1\n    var\
    \ last_note_index11 = -1\n    var last_note_index12 = -1\n    var last_note_index13\
    \ = -1\n    var last_note_index14 = -1\n    var last_note_index15 = -1\n    var\
    \ last_note_index16 = -1\n    var last_note_index17 = -1\n    var last_note_index18\
    \ = -1\n    var last_note_index19 = -1\n    var last_note_index20 = -1\n    var\
    \ last_note_index21 = -1\n    var last_note_index22 = -1\n    var last_note_index23\
    \ = -1\n    var last_note_index24 = -1\n    var last_note_index25 = -1\n    var\
    \ last_note_index26 = -1\n    var last_note_index27 = -1\n    var last_note_index28\
    \ = -1\n    var last_note_index29 = -1\n    var last_note_index30 = -1\n    var\
    \ last_note_index31 = -1\n    var last_note_index32 = -1\n    var last_note_index33\
    \ = -1\n    var last_note_index34 = -1\n    var last_note_index35 = -1\n    var\
    \ last_note_index36 = -1\n    var last_note_index37 = -1\n    var last_note_index38\
    \ = -1\n    var last_note_index39 = -1\n    var last_note_index40 = -1\n    var\
    \ last_note_index41 = -1\n    var last_note_index42 = -1\n    var last_note_index43\
    \ = -1\n    var last_note_index44 = -1\n    var last_note_index45 = -1\n    var\
    \ last_note_index46 = -1\n    var last_note_index47 = -1\n    var last_note_index48\
    \ = -1\n    var last_note_index49 = -1\n    var last_note_index50 = -1\n    var\
    \ last_note_index51 = -1\n    var last_note_index52 = -1\n    var last_note_index53\
    \ = -1\n    var last_note_index54 = -1\n    var last_note_index55 = -1\n    var\
    \ last_note_index56 = -1\n    var last_note_index57 = -1\n    var last_note_index58\
    \ = -1\n    var last_note_index59 = -1\n    var last_note_index60 = -1\n    var\
    \ last_note_index61 = -1\n    var last_note_index62 = -1\n    var last_note_index63\
    \ = -1\n    var last_note_index64 = -1\n    var last_note_index65 = -1\n    var\
    \ last_note_index66 = -1\n    var last_note_index67 = -1\n    var last_note_index68\
    \ = -1\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpapewbp73.swift:84:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpapewbp73.swift:12:9: warning: variable 'beats' was never used; consider\
    \ replacing with '_' or removing it\n    var beats: [Int] = []\n        ^~~~~\n\
    \        _\n/tmp/tmpapewbp73.swift:13:9: warning: initialization of variable 'beats_counter'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats_counter = 0\n    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmpapewbp73.swift:14:9:\
    \ warning: initialization of variable 'notes_counter' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_counter = 0\n\
    \    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmpapewbp73.swift:15:9: warning: initialization\
    \ of variable 'last_note' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var last_note = String()\n    ~~~~^~~~~~~~~\n    _\n\
    /tmp/tmpapewbp73.swift:16:9: warning: initialization of variable 'last_note_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_note_index = -1\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpapewbp73.swift:17:9:\
    \ warning: initialization of variable 'last_note_index2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var last_note_index2 =\
    \ -1\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpapewbp73.swift:18:9: warning: initialization\
    \ of variable 'last_note_index3' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var last_note_index3 = -1\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpapewbp73.swift:19:9: warning: initialization of variable 'last_note_index4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_note_index4 = -1\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpapewbp73.swift:20:9:\
    \ warning: initialization of variable 'last_note_index5' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var last_note_index5 =\
    \ -1\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpapewbp73.swift:21:9: warning: initialization\
    \ of variable 'last_note_index6' was never used; conside"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var last = 0\n    var lastNote = 0\n \
    \   var lastNoteBeat = 0\n    var lastNoteBeatCount = 0\n    var lastNoteBeatCount2\
    \ = 0\n    var lastNoteBeatCount3 = 0\n    var lastNoteBeatCount4 = 0\n    var\
    \ lastNoteBeatCount5 = 0\n    var lastNoteBeatCount6 = 0\n    var lastNoteBeatCount7\
    \ = 0\n    var lastNoteBeatCount8 = 0\n    var lastNoteBeatCount9 = 0\n    var\
    \ lastNoteBeatCount10 = 0\n    var lastNoteBeatCount11 = 0\n    var lastNoteBeatCount12\
    \ = 0\n    var lastNoteBeatCount13 = 0\n    var lastNoteBeatCount14 = 0\n    var\
    \ lastNoteBeatCount15 = 0\n    var lastNoteBeatCount16 = 0\n    var lastNoteBeatCount17\
    \ = 0\n    var lastNoteBeatCount18 = 0\n    var lastNoteBeatCount19 = 0\n    var\
    \ lastNoteBeatCount20 = 0\n    var lastNoteBeatCount21 = 0\n    var lastNoteBeatCount22\
    \ = 0\n    var lastNoteBeatCount23 = 0\n    var lastNoteBeatCount24 = 0\n    var\
    \ lastNoteBeatCount25 = 0\n    var lastNoteBeatCount26 = 0\n    var lastNoteBeatCount27\
    \ = 0\n    var lastNoteBeatCount28 = 0\n    var lastNoteBeatCount29 = 0\n    var\
    \ lastNoteBeatCount30 = 0\n    var lastNoteBeatCount31 = 0\n    var lastNoteBeatCount32\
    \ = 0\n    var lastNoteBeatCount33 = 0\n    var lastNoteBeatCount34 = 0\n    var\
    \ lastNoteBeatCount35 = 0\n    var lastNoteBeatCount36 = 0\n    var lastNoteBeatCount37\
    \ = 0\n    var lastNoteBeatCount38 = 0\n    var lastNoteBeatCount39 = 0\n    var\
    \ lastNoteBeatCount40 = 0\n    var lastNoteBeatCount41 = 0\n    var lastNoteBeatCount42\
    \ = 0\n    var lastNoteBeatCount43 = 0\n    var lastNoteBeatCount44 = 0\n    var\
    \ lastNoteBeatCount45 = 0\n    var lastNoteBeatCount46 = 0\n    var lastNoteBeatCount47\
    \ = 0\n    var lastNoteBeatCount48 = 0\n    var lastNoteBeatCount49 = 0\n    var\
    \ lastNoteBeatCount50 = 0\n    var lastNoteBeatCount51 = 0\n    var lastNoteBeatCount52\
    \ = 0\n    var lastNoteBeatCount53 = 0\n    var lastNoteBeat\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp60luue1c.swift:71:9: error: type annotation missing in pattern\n\
    \    var lastNoteBeat\n        ^\n"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = Int()\n    var note_count = 0\n    var note_count2\
    \ = 0\n    var note_count3 = 0\n    var note_count4 = 0\n    var note_count5 =\
    \ 0\n    var note_count6 = 0\n    var note_count7 = 0\n    var note_count8 = 0\n\
    \    var note_count9 = 0\n    var note_count10 = 0\n    var note_count11 = 0\n\
    \    var note_count12 = 0\n    var note_count13 = 0\n    var note_count14 = 0\n\
    \    var note_count15 = 0\n    var note_count16 = 0\n    var note_count17 = 0\n\
    \    var note_count18 = 0\n    var note_count19 = 0\n    var note_count20 = 0\n\
    \    var note_count21 = 0\n    var note_count22 = 0\n    var note_count23 = 0\n\
    \    var note_count24 = 0\n    var note_count25 = 0\n    var note_count26 = 0\n\
    \    var note_count27 = 0\n    var note_count28 = 0\n    var note_count29 = 0\n\
    \    var note_count30 = 0\n    var note_count31 = 0\n    var note_count32 = 0\n\
    \    var note_count33 = 0\n    var note_count34 = 0\n    var note_count35 = 0\n\
    \    var note_count36 = 0\n    var note_count37 = 0\n    var note_count38 = 0\n\
    \    var note_count39 = 0\n    var note_count40 = 0\n    var note_count41 = 0\n\
    \    var note_count42 = 0\n    var note_count43 = 0\n    var note_count44 = 0\n\
    \    var note_count45 = 0\n    var note_count46 = 0\n    var note_count47 = 0\n\
    \    var note_count48 = 0\n    var note_count49 = 0\n    var note_count50 = 0\n\
    \    var note_count51 = 0\n    var note_count52 = 0\n    var note_count53 = 0\n\
    \    var note_count54 = 0\n    var note_count55 = 0\n    var note_count56 = 0\n\
    \    var note_count57 = 0\n    var note_count58 = 0\n    var note_count59 = 0\n\
    \    var note_count60 = 0\n    var note_count61 = 0\n    var note_count62 = 0\n\
    \    var note_count63 = 0\n    var note_count64 = 0\n    var note_count65 = 0\n\
    \    var note_count66 = 0\n    var note_count67 = 0\n    var note_count68 = 0\n\
    \    var note_count69 = 0\n    var note_count70 = 0\n    var note_count71 = 0\n\
    \    var note_count72 = 0\n    var note_count73 = 0\n    var note_count74 = 0\n\
    \    var note_count75 = 0\n    var note_count76 = 0\n    var note_count77 = 0\n\
    \    var note_count78 = 0\n    var note_count79 = 0\n    var note_count80 = 0\n\
    \    var note_count81 = 0\n    var note_count82 = 0\n    var note_count83\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmptc9dvo7n.swift:97:9: error: type annotation missing in pattern\n\
    \    var note_count83\n        ^\n"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var last_note = 0\n    var last_note_length = 0\n    var last_note_index\
    \ = 0\n    var last_note_length_index = 0\n    var last_note_length_index = 0\n\
    \    var last_note_length_index = 0\n    var last_note_length_index = 0\n    var\
    \ last_note_length_index = 0\n    var last_note_length_index = 0\n    var last_note_length_index\
    \ = 0\n    var last_note_length_index = 0\n    var last_note_length_index = 0\n\
    \    var last_note_length_index = 0\n    var last_note_length_index = 0\n    var\
    \ last_note_length_index = 0\n    var last_note_length_index = 0\n    var last_note_length_index\
    \ = 0\n    var last_note_length_index = 0\n    var last_note_length_index = 0\n\
    \    var last_note_length_index = 0\n    var last_note_length_index = 0\n    var\
    \ last_note_length_index = 0\n    var last_note_length_index = 0\n    var last_note_length_index\
    \ = 0\n    var last_note_length_index = 0\n    var last_note_length_index = 0\n\
    \    var last_note_length_index = 0\n    var last_note_length_index = 0\n    var\
    \ last_note_length_index = 0\n    var last_note_length_index = 0\n    var last_note_length_index\
    \ = 0\n    var last_note_length_index = 0\n    var last_note_length_index = 0\n\
    \    var last_note_length_index = 0\n    var last_note_length_index = 0\n    var\
    \ last_note_length_index = 0\n    var last_note_length_index = 0\n    var last_note_length_index\
    \ = 0\n    var last_note_length_index = 0\n    var last_note_length_index = 0\n\
    \    var last_note_length_index = 0\n    var last_note_length_index = 0\n    var\
    \ last_note_length_index = 0\n    var last_note_length_index = 0\n    var last_note_length_index\
    \ = 0\n    var last_note_length_index = 0\n    var last_note_length_index = 0\n\
    \    var last_note_length_index = 0\n    var last_note_length_index = 0\n    var\
    \ last_note_length_index = 0\n    var last_note_length_index = 0\n    var last_note_length_index\
    \ = 0\n    var last_note_length_index = 0\n    var last_note_length_index = 0\n\
    \    var last_note_length_index = 0\n    var last_note_length_index = 0\n    var\
    \ last_note_length_index = 0\n    var last_note_length_index = 0\n    var last_note_length_index\
    \ = 0\n    var last_note_length_index = 0\n    var last_note_length_index = 0\n\
    \    var last_note_length_index = 0\n    var last_note_length_index = 0\n    var\
    \ last_note_length_index = 0\n    var last_note_length_index = 0\n    var last_note_length_index\
    \ = 0\n    var last_note_length_index = 0\n    var last_note_length_index = 0\n\
    \    var last_note_length_index = 0\n    var last_note_length_index = 0\n    var\
    \ last_note_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_d2lsyqy.swift:20:9: error: invalid redeclaration of 'last_note_length_index'\n\
    \    var last_note_length_index = 0\n        ^\n/tmp/tmp_d2lsyqy.swift:19:9: note:\
    \ 'last_note_length_index' previously declared here\n    var last_note_length_index\
    \ = 0\n        ^\n/tmp/tmp_d2lsyqy.swift:21:9: error: invalid redeclaration of\
    \ 'last_note_length_index'\n    var last_note_length_index = 0\n        ^\n/tmp/tmp_d2lsyqy.swift:19:9:\
    \ note: 'last_note_length_index' previously declared here\n    var last_note_length_index\
    \ = 0\n        ^\n/tmp/tmp_d2lsyqy.swift:22:9: error: invalid redeclaration of\
    \ 'last_note_length_index'\n    var last_note_length_index = 0\n        ^\n/tmp/tmp_d2lsyqy.swift:19:9:\
    \ note: 'last_note_length_index' previously declared here\n    var last_note_length_index\
    \ = 0\n        ^\n/tmp/tmp_d2lsyqy.swift:23:9: error: invalid redeclaration of\
    \ 'last_note_length_index'\n    var last_note_length_index = 0\n        ^\n/tmp/tmp_d2lsyqy.swift:19:9:\
    \ note: 'last_note_length_index' previously declared here\n    var last_note_length_index\
    \ = 0\n        ^\n/tmp/tmp_d2lsyqy.swift:24:9: error: invalid redeclaration of\
    \ 'last_note_length_index'\n    var last_note_length_index = 0\n        ^\n/tmp/tmp_d2lsyqy.swift:19:9:\
    \ note: 'last_note_length_index' previously declared here\n    var last_note_length_index\
    \ = 0\n        ^\n/tmp/tmp_d2lsyqy.swift:25:9: error: invalid redeclaration of\
    \ 'last_note_length_index'\n    var last_note_length_index = 0\n        ^\n/tmp/tmp_d2lsyqy.swift:19:9:\
    \ note: 'last_note_length_index' previously declared here\n    var last_note_length_index\
    \ = 0\n        ^\n/tmp/tmp_d2lsyqy.swift:26:9: error: invalid redeclaration of\
    \ 'last_note_length_index'\n    var last_note_length_index = 0\n        ^\n/tmp/tmp_d2lsyqy.swift:19:9:\
    \ note: 'last_note_length_index' previously declared here\n    var last_note_length_index\
    \ = 0\n        ^\n/tmp/tmp_d2lsyqy.swift:27:9: error: invalid redeclaration of\
    \ 'last_note_length_index'\n    var last_note_length_index = 0\n        ^\n/tmp/tmp_d2lsyqy.swift:19:9:\
    \ note: 'last_note_length_index' previously declared here\n    v"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_string\
    \ = \"\"\n    var current_note_length_string_index = 0\n    var current_note_length_string_value\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_index = 0\n    var current_note_length_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string = \"\"\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpa9dg0xnd.swift:26:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_index = 0\n        ^\n\
    /tmp/tmpa9dg0xnd.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpa9dg0xnd.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpa9dg0xnd.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpa9dg0xnd.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpa9dg0xnd.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpa9dg0xnd.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpa9dg0xnd.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpa9dg0xnd.swift:31:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpa9dg0xnd.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpa9dg0xnd.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value"
  stdout: ''
  timestamp: 1660013790
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats_array: [Int]\
    \ = []\n    var current_beat = 0\n    var current_note = 0\n    var current_note_value\
    \ = 0\n    var current_note_length = 0\n    var current_note_length_value = 0\n\
    \    var current_note_length_value_value = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value = 0\n \
    \   var current_note_length_value_value_value_value_value_value_value = 0\n  \
    \  var current_note_length_value_value_value_value_value_value_value_value = 0\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_xoh92i8.swift:27:9: error: invalid redeclaration of 'current_note_length_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp_xoh92i8.swift:26:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp_xoh92i8.swift:33:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp_xoh92i8.swift:32:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp_xoh92i8.swift:34:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp_xoh92i8.swift:32:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp_xoh92i8.swift:36:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp_xoh92i8.swift:3"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var notes: [String] = []\n    var beats_counter: Int = 0\n    var note_counter:\
    \ Int = 0\n    var notes_counter: Int = 0\n    var last_note = String()\n    var\
    \ last_beat = String()\n    var last_beat_index: Int = 0\n    var last_note_index:\
    \ Int = 0\n    var last_note_index2: Int = 0\n    var last_note_index3: Int =\
    \ 0\n    var last_note_index4: Int = 0\n    var last_note_index5: Int = 0\n  \
    \  var last_note_index6: Int = 0\n    var last_note_index7: Int = 0\n    var last_note_index8:\
    \ Int = 0\n    var last_note_index9: Int = 0\n    var last_note_index10: Int =\
    \ 0\n    var last_note_index11: Int = 0\n    var last_note_index12: Int = 0\n\
    \    var last_note_index13: Int = 0\n    var last_note_index14: Int = 0\n    var\
    \ last_note_index15: Int = 0\n    var last_note_index16: Int = 0\n    var last_note_index17:\
    \ Int = 0\n    var last_note_index18: Int = 0\n    var last_note_index19: Int\
    \ = 0\n    var last_note_index20: Int = 0\n    var last_note_index21: Int = 0\n\
    \    var last_note_index22: Int = 0\n    var last_note_index23: Int = 0\n    var\
    \ last_note_index24: Int = 0\n    var last_note_index25: Int = 0\n    var last_note_index26:\
    \ Int = 0\n    var last_note_index27: Int = 0\n    var last_note_index28: Int\
    \ = 0\n    var last_note_index29: Int = 0\n    var last_note_index30: Int = 0\n\
    \    var last_note_index31: Int = 0\n    var last_note_index32: Int = 0\n    var\
    \ last_note_index33: Int = 0\n    var last_note_index34: Int = 0\n    var last_note_index35:\
    \ Int = 0\n    var last_note_index36: Int = 0\n    var last_note_index37: Int\
    \ = 0\n    var last_note_index38: Int = 0\n    var last_note_index39: Int = 0\n\
    \    var last_note_index40: Int = 0\n    var last_note_index41: Int = 0\n    var\
    \ last_note_index42: Int = 0\n    var last_note_index43: Int = 0\n    var last_note_index44:\
    \ Int = 0\n    var last_note_index45: Int = 0\n    var last_note_index46: Int\
    \ = 0\n    var last_note_index47: Int = 0\n    var last_note_index48: Int = 0\n\
    \    var last_note_index49: Int = 0\n    var last_note_index50: Int = 0\n    var\
    \ last_note_index51: Int = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpc3332jp8.swift:71:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpc3332jp8.swift:12:9: warning: variable 'beats' was never used; consider\
    \ replacing with '_' or removing it\n    var beats: [Int] = []\n        ^~~~~\n\
    \        _\n/tmp/tmpc3332jp8.swift:13:9: warning: variable 'notes' was never used;\
    \ consider replacing with '_' or removing it\n    var notes: [String] = []\n \
    \       ^~~~~\n        _\n/tmp/tmpc3332jp8.swift:14:9: warning: variable 'beats_counter'\
    \ was never used; consider replacing with '_' or removing it\n    var beats_counter:\
    \ Int = 0\n        ^~~~~~~~~~~~~\n        _\n/tmp/tmpc3332jp8.swift:15:9: warning:\
    \ variable 'note_counter' was never used; consider replacing with '_' or removing\
    \ it\n    var note_counter: Int = 0\n        ^~~~~~~~~~~~\n        _\n/tmp/tmpc3332jp8.swift:16:9:\
    \ warning: variable 'notes_counter' was never used; consider replacing with '_'\
    \ or removing it\n    var notes_counter: Int = 0\n        ^~~~~~~~~~~~~\n    \
    \    _\n/tmp/tmpc3332jp8.swift:17:9: warning: initialization of variable 'last_note'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_note = String()\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmpc3332jp8.swift:18:9:\
    \ warning: initialization of variable 'last_beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var last_beat = String()\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpc3332jp8.swift:19:9: warning: variable 'last_beat_index' was never\
    \ used; consider replacing with '_' or removing it\n    var last_beat_index: Int\
    \ = 0\n        ^~~~~~~~~~~~~~~\n        _\n/tmp/tmpc3332jp8.swift:20:9: warning:\
    \ variable 'last_note_index' was never used; consider replacing with '_' or removing\
    \ it\n    var last_note_index: Int = 0\n        ^~~~~~~~~~~~~~~\n        _\n/tmp/tmpc3332jp8.swift:21:9:\
    \ warning: variable 'last_note_index2' was never used; consider replacing with\
    \ '_' or removing it\n    var last_note_index2: Int = 0\n        ^~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpc3332jp8.swift:22:9: warning: variable 'last_note_index3'\
    \ was never used; consider replacing with '_' or"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var current_beat = 0\n    var current_note = \"\"\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_index2\
    \ = 0\n    var current_note_length_index3 = 0\n    var current_note_length_index4\
    \ = 0\n    var current_note_length_index5 = 0\n    var current_note_length_index6\
    \ = 0\n    var current_note_length_index7 = 0\n    var current_note_length_index8\
    \ = 0\n    var current_note_length_index9 = 0\n    var current_note_length_index10\
    \ = 0\n    var current_note_length_index11 = 0\n    var current_note_length_index12\
    \ = 0\n    var current_note_length_index13 = 0\n    var current_note_length_index14\
    \ = 0\n    var current_note_length_index15 = 0\n    var current_note_length_index16\
    \ = 0\n    var current_note_length_index17 = 0\n    var current_note_length_index18\
    \ = 0\n    var current_note_length_index19 = 0\n    var current_note_length_index20\
    \ = 0\n    var current_note_length_index21 = 0\n    var current_note_length_index22\
    \ = 0\n    var current_note_length_index23 = 0\n    var current_note_length_index24\
    \ = 0\n    var current_note_length_index25 = 0\n    var current_note_length_index26\
    \ = 0\n    var current_note_length_index27 = 0\n    var current_note_length_index28\
    \ = 0\n    var current_note_length_index29 = 0\n    var current_note_length_index30\
    \ = 0\n    var current_note_length_index31 = 0\n    var current_note_length_index32\
    \ = 0\n    var current_note_length_index33 = 0\n    var current_note_length_index34\
    \ = 0\n    var current_note_length_index35 = 0\n    var current_note_length_index36\
    \ = 0\n    var current_note_length_index37 = 0\n    var current_note_length_index38\
    \ = 0\n    var current_note_length_index39 = 0\n    var current_note_length_index40\
    \ = 0\n    var current_note_length_index41 = 0\n    var current_note_length_index42\
    \ = 0\n    var current_note_length_index43 = 0\n    var current_note_length_index44\
    \ = 0\n    var current_note_length_index45 = 0\n    var current_note_length_index46\
    \ = 0\n    var current_note_length_index47 = 0\n    var current_note_length_index48\
    \ = 0\n    var current_note_length_index49 = 0\n    var current_note_length_index50\
    \ = 0\n    var current_note_length_index51 = 0\n    var current_note_length_index52\
    \ = 0\n    var current_note_length_index53 = 0\n    var current_note_length_index54\
    \ = 0\n    var current_note_length_index55 = 0\n    var current_note_length_index56\
    \ = 0\n    var current_note_length_index57 = 0\n    var current_note_length_index58\
    \ = 0\n    var current_note_length_index59 = 0\n    var current_note_length_index60\
    \ = 0\n    var current_note_length_index61 = 0\n    var current_note_\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp5nu988kz.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_note_\n        ^\n"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var beat = 0\n    var note = 0\n    var notes = [String]()\n    var note_index\
    \ = 0\n    var note_length = 0\n    var note_lengths = [Int]()\n    var note_length_index\
    \ = 0\n    var note_length_indexes = [Int]()\n    var note_length_indexe = 0\n\
    \    var note_length_indexes = [Int]()\n    var note_length_indexe = 0\n    var\
    \ note_length_indexes = [Int]()\n    var note_length_indexe = 0\n    var note_length_indexes\
    \ = [Int]()\n    var note_length_indexe = 0\n    var note_length_indexes = [Int]()\n\
    \    var note_length_indexe = 0\n    var note_length_indexes = [Int]()\n    var\
    \ note_length_indexe = 0\n    var note_length_indexes = [Int]()\n    var note_length_indexe\
    \ = 0\n    var note_length_indexes = [Int]()\n    var note_length_indexe = 0\n\
    \    var note_length_indexes = [Int]()\n    var note_length_indexe = 0\n    var\
    \ note_length_indexes = [Int]()\n    var note_length_indexe = 0\n    var note_length_indexes\
    \ = [Int]()\n    var note_length_indexe = 0\n    var note_length_indexes = [Int]()\n\
    \    var note_length_indexe = 0\n    var note_length_indexes = [Int]()\n    var\
    \ note_length_indexe = 0\n    var note_length_indexes = [Int]()\n    var note_length_indexe\
    \ = 0\n    var note_length_indexes = [Int]()\n    var note_length_indexe = 0\n\
    \    var note_length_indexes = [Int]()\n    var note_length_indexe = 0\n    var\
    \ note_length_indexes = [Int]()\n    var note_length_indexe = 0\n    var note_length_indexes\
    \ = [Int]()\n    var note_length_indexe = 0\n    var note_length_indexes = [Int]()\n\
    \    var note_length_indexe = 0\n    var note_length_indexes = [Int]()\n    var\
    \ note_length_indexe = 0\n    var note_length_indexes = [Int]()\n    var note_length_indexe\
    \ = 0\n    var note_length_indexes = [Int]()\n    var note_length_indexe = 0\n\
    \    var note_length_indexes = [Int]()\n    var note_length_indexe = 0\n    var\
    \ note_length_indexes = [Int]()\n    var note_length_indexe = 0\n    var note_length_indexes\
    \ = [Int]()\n    var note_length_indexe = 0\n    var note_length_indexes = [Int]()\n\
    \    var note_length_indexe = 0\n    var note_length_indexes = [Int]()\n    var\
    \ note_length_indexe = 0\n    var note_length_indexes = [Int\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpg19_ykpj.swift:74:35: error: expected ']' in container literal\
    \ expression\n    var note_length_indexes = [Int\n                           \
    \       ^\n/tmp/tmpg19_ykpj.swift:74:31: note: to match this opening '['\n   \
    \ var note_length_indexes = [Int\n                              ^\n/tmp/tmpg19_ykpj.swift:22:9:\
    \ error: invalid redeclaration of 'note_length_indexes'\n    var note_length_indexes\
    \ = [Int]()\n        ^\n/tmp/tmpg19_ykpj.swift:20:9: note: 'note_length_indexes'\
    \ previously declared here\n    var note_length_indexes = [Int]()\n        ^\n\
    /tmp/tmpg19_ykpj.swift:23:9: error: invalid redeclaration of 'note_length_indexe'\n\
    \    var note_length_indexe = 0\n        ^\n/tmp/tmpg19_ykpj.swift:21:9: note:\
    \ 'note_length_indexe' previously declared here\n    var note_length_indexe =\
    \ 0\n        ^\n/tmp/tmpg19_ykpj.swift:24:9: error: invalid redeclaration of 'note_length_indexes'\n\
    \    var note_length_indexes = [Int]()\n        ^\n/tmp/tmpg19_ykpj.swift:20:9:\
    \ note: 'note_length_indexes' previously declared here\n    var note_length_indexes\
    \ = [Int]()\n        ^\n/tmp/tmpg19_ykpj.swift:25:9: error: invalid redeclaration\
    \ of 'note_length_indexe'\n    var note_length_indexe = 0\n        ^\n/tmp/tmpg19_ykpj.swift:21:9:\
    \ note: 'note_length_indexe' previously declared here\n    var note_length_indexe\
    \ = 0\n        ^\n/tmp/tmpg19_ykpj.swift:26:9: error: invalid redeclaration of\
    \ 'note_length_indexes'\n    var note_length_indexes = [Int]()\n        ^\n/tmp/tmpg19_ykpj.swift:20:9:\
    \ note: 'note_length_indexes' previously declared here\n    var note_length_indexes\
    \ = [Int]()\n        ^\n/tmp/tmpg19_ykpj.swift:27:9: error: invalid redeclaration\
    \ of 'note_length_indexe'\n    var note_length_indexe = 0\n        ^\n/tmp/tmpg19_ykpj.swift:21:9:\
    \ note: 'note_length_indexe' previously declared here\n    var note_length_indexe\
    \ = 0\n        ^\n/tmp/tmpg19_ykpj.swift:28:9: error: invalid redeclaration of\
    \ 'note_length_indexes'\n    var note_length_indexes = [Int]()\n        ^\n/tmp/tmpg19_ykpj.swift:20:9:\
    \ note: 'note_length_indexes' previously declared here\n    var note_length_indexes\
    \ = [Int]"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    var beats_count = 0\n    var note_count = 0\n    var note = 0\n    var note_char\
    \ = \"\"\n    var note_char_count = 0\n    var note_char_index = 0\n    var note_char_length\
    \ = 0\n    var note_char_length_count = 0\n    var note_char_length_index = 0\n\
    \    var note_char_length_char = \"\"\n    var note_char_length_char_count = 0\n\
    \    var note_char_length_char_index = 0\n    var note_char_length_char_length\
    \ = 0\n    var note_char_length_char_length_count = 0\n    var note_char_length_char_length_index\
    \ = 0\n    var note_char_length_char_length_char = \"\"\n    var note_char_length_char_length_char_count\
    \ = 0\n    var note_char_length_char_length_char_index = 0\n    var note_char_length_char_length_char_length\
    \ = 0\n    var note_char_length_char_length_char_index = 0\n    var note_char_length_char_length_char_length_char\
    \ = \"\"\n    var note_char_length_char_length_char_length_char_count = 0\n  \
    \  var note_char_length_char_length_char_length_char_index = 0\n    var note_char_length_char_length_char_length_char_length\
    \ = 0\n    var note_char_length_char_length_char_length_char_index = 0\n    var\
    \ note_char_length_char_length_char_length_char_length = 0\n    var note_char_length_char_length_char_length_char_index\
    \ = 0\n    var note_char_length_char_length_char_length_char_length_char = \"\"\
    \n    var note_char_length_char_length_char_length_char_length_char_count = 0\n\
    \    var note_char_length_char_length_char_length_char_length_char_index = 0\n\
    \    var note_char_length_char_length_char_length_char_length_char_length = 0\n\
    \    var note_char_length_char_length_char_length_char_length_char_index = 0\n\
    \    var note_char_length_char_length_char_length_char_length_char_length_char\
    \ = \"\"\n    var note_char_length_char_length_char_length_char_length_char_length_count\
    \ = 0\n    var note_char_length_char_length_char_length_char_length_char_length_index\
    \ = 0\n    var note_char_length_char_length_char_length_char_length_char_length_char\
    \ = \"\"\n    var note_char_length_char_length_char_length_char_length_char_length_char_count\
    \ = 0\n    var note_char_length_char_length_char_length_char_length_char_length_char_index\
    \ = 0\n    var note_char_length_char_length_char_length_char_length_char_length_char_length\
    \ = 0\n    var note_char_length_char_length_char_length_char_length_char_length_char_index\
    \ = 0\n    var note_char_length_char_length_char_length_char_length_char_length_char_length_char\
    \ = \"\"\n    var note_char_length_char_length_char_length_char_length_char_length_char_length_count\
    \ = 0\n    var note_char_length_char_length_char_length_char_length_char_length_char_length_index\
    \ = 0\n    var note_char_length_char_length_char_length_char_length_char_length_char_length_char\
    \ = \"\"\n    var note_char_length_char_length_char_length_char_length_char_length_char_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp5apeergv.swift:32:9: error: invalid redeclaration of 'note_char_length_char_length_char_index'\n\
    \    var note_char_length_char_length_char_index = 0\n        ^\n/tmp/tmp5apeergv.swift:30:9:\
    \ note: 'note_char_length_char_length_char_index' previously declared here\n \
    \   var note_char_length_char_length_char_index = 0\n        ^\n/tmp/tmp5apeergv.swift:37:9:\
    \ error: invalid redeclaration of 'note_char_length_char_length_char_length_char_index'\n\
    \    var note_char_length_char_length_char_length_char_index = 0\n        ^\n\
    /tmp/tmp5apeergv.swift:35:9: note: 'note_char_length_char_length_char_length_char_index'\
    \ previously declared here\n    var note_char_length_char_length_char_length_char_index\
    \ = 0\n        ^\n/tmp/tmp5apeergv.swift:38:9: error: invalid redeclaration of\
    \ 'note_char_length_char_length_char_length_char_length'\n    var note_char_length_char_length_char_length_char_length\
    \ = 0\n        ^\n/tmp/tmp5apeergv.swift:36:9: note: 'note_char_length_char_length_char_length_char_length'\
    \ previously declared here\n    var note_char_length_char_length_char_length_char_length\
    \ = 0\n        ^\n/tmp/tmp5apeergv.swift:39:9: error: invalid redeclaration of\
    \ 'note_char_length_char_length_char_length_char_index'\n    var note_char_length_char_length_char_length_char_index\
    \ = 0\n        ^\n/tmp/tmp5apeergv.swift:35:9: note: 'note_char_length_char_length_char_length_char_index'\
    \ previously declared here\n    var note_char_length_char_length_char_length_char_index\
    \ = 0\n        ^\n/tmp/tmp5apeergv.swift:44:9: error: invalid redeclaration of\
    \ 'note_char_length_char_length_char_length_char_length_char_index'\n    var note_char_length_char_length_char_length_char_length_char_index\
    \ = 0\n        ^\n/tmp/tmp5apeergv.swift:42:9: note: 'note_char_length_char_length_char_length_char_length_char_index'\
    \ previously declared here\n    var note_char_length_char_length_char_length_char_length_char_index\
    \ = 0\n        ^\n/tmp/tmp5apeergv.swift:48:9: error: invalid redeclaration of\
    \ 'note_char_length_char_length_char_length_char_length_char_length_char'\n  \
    \  var note_char_length_c"
  stdout: ''
  timestamp: 1660013791
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var current_beat = 0\n    var current_note = String()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1i2wovyq.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp1i2wovyq.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013789
