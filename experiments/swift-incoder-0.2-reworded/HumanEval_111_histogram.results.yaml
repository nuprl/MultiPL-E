language: swift
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgl6r260b.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var letters = test.characters\n\
    \n    for letter in letters {\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n    }\n\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpbsqufvys.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpbsqufvys.swift:21:19:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n                  ^\n\
    /tmp/tmpbsqufvys.swift:21:40: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var letters = test.characters\n\
    \    for letter in letters {\n        if let count = histogram[letter] {\n   \
    \         histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgf7kw2eh.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpgf7kw2eh.swift:20:34:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if let count = histogram[letter] {\n                                \
    \ ^\n/tmp/tmpgf7kw2eh.swift:21:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            histogram[letter] = count +\
    \ 1\n                      ^\n/tmp/tmpgf7kw2eh.swift:23:23: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            histogram[letter]\
    \ = 1\n                      ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var letters = test.characters\n\
    \    for letter in letters {\n        if let count = histogram[letter] {\n   \
    \         histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgf7kw2eh.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpgf7kw2eh.swift:20:34:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if let count = histogram[letter] {\n                                \
    \ ^\n/tmp/tmpgf7kw2eh.swift:21:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            histogram[letter] = count +\
    \ 1\n                      ^\n/tmp/tmpgf7kw2eh.swift:23:23: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            histogram[letter]\
    \ = 1\n                      ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var letters = test.characters\n\
    \n    for letter in letters {\n        if let count = histogram[letter] {\n  \
    \          histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_5sii306.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp_5sii306.swift:21:34:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if let count = histogram[letter] {\n                                \
    \ ^\n/tmp/tmp_5sii306.swift:22:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            histogram[letter] = count +\
    \ 1\n                      ^\n/tmp/tmp_5sii306.swift:24:23: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            histogram[letter]\
    \ = 1\n                      ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var letters = test.characters\n\
    \    for letter in letters {\n        if let count = histogram[letter] {\n   \
    \         histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgf7kw2eh.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpgf7kw2eh.swift:20:34:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if let count = histogram[letter] {\n                                \
    \ ^\n/tmp/tmpgf7kw2eh.swift:21:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            histogram[letter] = count +\
    \ 1\n                      ^\n/tmp/tmpgf7kw2eh.swift:23:23: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            histogram[letter]\
    \ = 1\n                      ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result: [String : Int] = [:]\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmppqjnt2v3.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgl6r260b.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var letters = test.characters.map\
    \ { String($0) }\n    for letter in letters {\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpasd_iyit.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters.map { String($0) }\n\
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpasd_iyit.swift:18:9: warning: variable 'letters' was never\
    \ mutated; consider changing to 'let' constant\n    var letters = test.characters.map\
    \ { String($0) }\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var letterCounts = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        letterCounts[letter] = (letterCounts[letter] ?? 0) + 1\n    }\n\
    \    return letterCounts\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpia8j0s4e.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var letters = test.characters\n\
    \    for letter in letters {\n        histogram[letter] = (histogram[letter] ??\
    \ 0) + 1\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1q7xnscb.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1q7xnscb.swift:20:19:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n                  ^\n\
    /tmp/tmp1q7xnscb.swift:20:40: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var letterCount: [String : Int] = [:]\n    for letter in test.lowercased()\
    \ {\n        letterCount[letter] = (letterCount[letter] ?? 0) + 1\n    }\n   \
    \ return letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpidg6_icj.swift:19:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        letterCount[letter] = (letterCount[letter]\
    \ ?? 0) + 1\n                    ^\n/tmp/tmpidg6_icj.swift:19:44: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   letterCount[letter] = (letterCount[letter] ?? 0) + 1\n                   \
    \                        ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgl6r260b.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgl6r260b.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpg6h2xta7.swift:19:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpg6h2xta7.swift:20:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpg6h2xta7.swift:22:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result: [String : Int] = [:]\n    for letter in test.lowercased()\
    \ {\n        result[letter] = (result[letter] ?? 0) + 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpkb6acnc8.swift:19:16: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        result[letter] = (result[letter]\
    \ ?? 0) + 1\n               ^\n/tmp/tmpkb6acnc8.swift:19:34: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        result[letter]\
    \ = (result[letter] ?? 0) + 1\n                                 ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var letters = test.characters\n\
    \    for letter in letters {\n        if let count = histogram[letter] {\n   \
    \         histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgf7kw2eh.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpgf7kw2eh.swift:20:34:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if let count = histogram[letter] {\n                                \
    \ ^\n/tmp/tmpgf7kw2eh.swift:21:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            histogram[letter] = count +\
    \ 1\n                      ^\n/tmp/tmpgf7kw2eh.swift:23:23: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            histogram[letter]\
    \ = 1\n                      ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var letters = test.characters.map\
    \ { String($0) }\n    for letter in letters {\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpasd_iyit.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters.map { String($0) }\n\
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpasd_iyit.swift:18:9: warning: variable 'letters' was never\
    \ mutated; consider changing to 'let' constant\n    var letters = test.characters.map\
    \ { String($0) }\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var letterCount = [String : Int]()\n    var letters = test.characters.map\
    \ { String($0) }\n    for letter in letters {\n        letterCount[letter] = (letterCount[letter]\
    \ ?? 0) + 1\n    }\n    return letterCount\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpcdqd4kxv.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters.map { String($0) }\n\
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpcdqd4kxv.swift:18:9: warning: variable 'letters' was never\
    \ mutated; consider changing to 'let' constant\n    var letters = test.characters.map\
    \ { String($0) }\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result: [String : Int] = [:]\n    var letters: [String] = []\n\
    \    for letter in test.lowercased() {\n        if let count = result[letter]\
    \ {\n            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n            letters.append(letter)\n        }\n    }\n    for letter in\
    \ letters {\n        result[letter] = result[letter].maxValue\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmptrq0shfv.swift:20:31: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = result[letter] {\n\
    \                              ^\n/tmp/tmptrq0shfv.swift:21:20: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result[letter] = count + 1\n                   ^\n/tmp/tmptrq0shfv.swift:23:20:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result[letter] = 1\n                   ^\n/tmp/tmptrq0shfv.swift:24:28:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letters.append(letter)\n                           ^\n/tmp/tmptrq0shfv.swift:28:41:\
    \ error: value of type 'Int?' has no member 'maxValue'\n        result[letter]\
    \ = result[letter].maxValue\n                         ~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result: [String : Int] = [:]\n    for letter in test.lowercased()\
    \ {\n        if let count = result[letter] {\n            result[letter] = count\
    \ + 1\n        } else {\n            result[letter] = 1\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5ft1_pny.swift:19:31: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = result[letter] {\n\
    \                              ^\n/tmp/tmp5ft1_pny.swift:20:20: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result[letter] = count + 1\n                   ^\n/tmp/tmp5ft1_pny.swift:22:20:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result[letter] = 1\n                   ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result: [String : Int] = [:]\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        result[letter] = (result[letter] ?? 0) + 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp6rg6oy8k.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var letterCount = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        letterCount[letter] = (letterCount[letter] ?? 0) + 1\n    }\n\
    \    return letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphb5o5vv8.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var letters = test.characters.map\
    \ { String($0) }\n    for letter in letters {\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpasd_iyit.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters.map { String($0) }\n\
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpasd_iyit.swift:18:9: warning: variable 'letters' was never\
    \ mutated; consider changing to 'let' constant\n    var letters = test.characters.map\
    \ { String($0) }\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var letters = test.characters\n\
    \    for letter in letters {\n        histogram[letter] = (histogram[letter] ??\
    \ 0) + 1\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1q7xnscb.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1q7xnscb.swift:20:19:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n                  ^\n\
    /tmp/tmp1q7xnscb.swift:20:40: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var letters = test.characters.map\
    \ { String($0) }\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpxj0mq9yq.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters.map { String($0) }\n\
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpxj0mq9yq.swift:18:9: warning: variable 'letters' was never\
    \ mutated; consider changing to 'let' constant\n    var letters = test.characters.map\
    \ { String($0) }\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpg6h2xta7.swift:19:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpg6h2xta7.swift:20:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpg6h2xta7.swift:22:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgl6r260b.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var letters = test.characters\n\
    \    for letter in letters {\n        histogram[letter] = (histogram[letter] ??\
    \ 0) + 1\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1q7xnscb.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1q7xnscb.swift:20:19:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n                  ^\n\
    /tmp/tmp1q7xnscb.swift:20:40: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgl6r260b.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpg6h2xta7.swift:19:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpg6h2xta7.swift:20:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpg6h2xta7.swift:22:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpg6h2xta7.swift:19:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpg6h2xta7.swift:20:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpg6h2xta7.swift:22:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var letterCounts: [String : Int] = [:]\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        letterCounts[letter] = (letterCounts[letter] ?? 0) + 1\n    }\n\
    \    return letterCounts\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpws15g53p.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgl6r260b.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgl6r260b.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgl6r260b.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpg6h2xta7.swift:19:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpg6h2xta7.swift:20:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpg6h2xta7.swift:22:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var letters = test.characters.map\
    \ { String($0) }\n    for letter in letters {\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpasd_iyit.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters.map { String($0) }\n\
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpasd_iyit.swift:18:9: warning: variable 'letters' was never\
    \ mutated; consider changing to 'let' constant\n    var letters = test.characters.map\
    \ { String($0) }\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpg6h2xta7.swift:19:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpg6h2xta7.swift:20:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpg6h2xta7.swift:22:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgl6r260b.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpg6h2xta7.swift:19:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpg6h2xta7.swift:20:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpg6h2xta7.swift:22:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var letters = test.characters\n\
    \    for letter in letters {\n        histogram[letter] = (histogram[letter] ??\
    \ 0) + 1\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1q7xnscb.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1q7xnscb.swift:20:19:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n                  ^\n\
    /tmp/tmp1q7xnscb.swift:20:40: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result: [String : Int] = [:]\n    var letters = test.characters\n\
    \    for letter in letters {\n        if let count = result[letter] {\n      \
    \      result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpj72rv07w.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpj72rv07w.swift:20:31:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if let count = result[letter] {\n                              ^\n/tmp/tmpj72rv07w.swift:21:20:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result[letter] = count + 1\n                   ^\n/tmp/tmpj72rv07w.swift:23:20:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result[letter] = 1\n                   ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgl6r260b.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var letters = test.characters.map\
    \ { String($0) }\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpxj0mq9yq.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters.map { String($0) }\n\
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpxj0mq9yq.swift:18:9: warning: variable 'letters' was never\
    \ mutated; consider changing to 'let' constant\n    var letters = test.characters.map\
    \ { String($0) }\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var letterCounts: [String : Int] = [:]\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        letterCounts[letter] = (letterCounts[letter] ?? 0) + 1\n \
    \   }\n    return letterCounts\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphj30apbg.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result: [String : Int] = [:]\n    var letters = test.characters\n\
    \    for letter in letters {\n        if let count = result[letter] {\n      \
    \      result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpj72rv07w.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpj72rv07w.swift:20:31:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if let count = result[letter] {\n                              ^\n/tmp/tmpj72rv07w.swift:21:20:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result[letter] = count + 1\n                   ^\n/tmp/tmpj72rv07w.swift:23:20:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result[letter] = 1\n                   ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpg6h2xta7.swift:19:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpg6h2xta7.swift:20:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpg6h2xta7.swift:22:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var letters = test.characters\n\
    \    for letter in letters {\n        histogram[letter] = (histogram[letter] ??\
    \ 0) + 1\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1q7xnscb.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1q7xnscb.swift:20:19:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n                  ^\n\
    /tmp/tmp1q7xnscb.swift:20:40: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgl6r260b.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var letters = test.characters\n\
    \    for letter in letters {\n        histogram[letter] = (histogram[letter] ??\
    \ 0) + 1\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1q7xnscb.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1q7xnscb.swift:20:19:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n                  ^\n\
    /tmp/tmp1q7xnscb.swift:20:40: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result: [String : Int] = [:]\n    for letter in test.lowercased()\
    \ {\n        result[letter] = (result[letter] ?? 0) + 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpkb6acnc8.swift:19:16: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        result[letter] = (result[letter]\
    \ ?? 0) + 1\n               ^\n/tmp/tmpkb6acnc8.swift:19:34: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        result[letter]\
    \ = (result[letter] ?? 0) + 1\n                                 ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result: [String : Int] = [:]\n    var letters: [String] = []\n\
    \    for letter in test.lowercased() {\n        if let count = result[letter]\
    \ {\n            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n            letters.append(letter)\n        }\n    }\n    for letter in\
    \ letters {\n        result[letter] = result[letter].maxValue\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmptrq0shfv.swift:20:31: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = result[letter] {\n\
    \                              ^\n/tmp/tmptrq0shfv.swift:21:20: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result[letter] = count + 1\n                   ^\n/tmp/tmptrq0shfv.swift:23:20:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result[letter] = 1\n                   ^\n/tmp/tmptrq0shfv.swift:24:28:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letters.append(letter)\n                           ^\n/tmp/tmptrq0shfv.swift:28:41:\
    \ error: value of type 'Int?' has no member 'maxValue'\n        result[letter]\
    \ = result[letter].maxValue\n                         ~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var letterCount: [String : Int] = [:]\n    for letter in test.lowercased()\
    \ {\n        if let count = letterCount[letter] {\n            letterCount[letter]\
    \ = count + 1\n        } else {\n            letterCount[letter] = 1\n       \
    \ }\n    }\n    return letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpxnrwqoy6.swift:19:36: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = letterCount[letter]\
    \ {\n                                   ^\n/tmp/tmpxnrwqoy6.swift:20:25: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = count + 1\n                        ^\n/tmp/tmpxnrwqoy6.swift:22:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = 1\n                        ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result: [String : Int] = [:]\n    var letters = test.characters.map\
    \ { String($0) }\n    for letter in letters {\n        if let count = result[letter]\
    \ {\n            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpj1ccout8.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters.map { String($0) }\n\
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpj1ccout8.swift:18:9: warning: variable 'letters' was never\
    \ mutated; consider changing to 'let' constant\n    var letters = test.characters.map\
    \ { String($0) }\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var letters = test.characters\n\
    \    for letter in letters {\n        histogram[letter] = (histogram[letter] ??\
    \ 0) + 1\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1q7xnscb.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1q7xnscb.swift:20:19:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n                  ^\n\
    /tmp/tmp1q7xnscb.swift:20:40: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgl6r260b.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpg6h2xta7.swift:19:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpg6h2xta7.swift:20:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpg6h2xta7.swift:22:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var letters = test.characters.map\
    \ { String($0) }\n    for letter in letters {\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpasd_iyit.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters.map { String($0) }\n\
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpasd_iyit.swift:18:9: warning: variable 'letters' was never\
    \ mutated; consider changing to 'let' constant\n    var letters = test.characters.map\
    \ { String($0) }\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpg6h2xta7.swift:19:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpg6h2xta7.swift:20:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpg6h2xta7.swift:22:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var letters = test.characters.map\
    \ { String($0) }\n    for letter in letters {\n        if let count = histogram.value(forKey:\
    \ letter) {\n            histogram[letter] = count + 1\n        } else {\n   \
    \         histogram[letter] = 1\n        }\n    }\n    return histogram\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpnlhbjyp_.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters.map { String($0) }\n\
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpnlhbjyp_.swift:20:34: error: value of type '[String : Int]'\
    \ has no member 'value'\n        if let count = histogram.value(forKey: letter)\
    \ {\n                       ~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result: [String : Int] = [:]\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        result[letter] = (result[letter] ?? 0) + 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp6rg6oy8k.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpx2si_kyj.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var letterCount: [String : Int] = [:]\n    for letter in test.lowercased()\
    \ {\n        if let count = letterCount[letter] {\n            letterCount[letter]\
    \ = count + 1\n        } else {\n            letterCount[letter] = 1\n       \
    \ }\n    }\n    return letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpxnrwqoy6.swift:19:36: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = letterCount[letter]\
    \ {\n                                   ^\n/tmp/tmpxnrwqoy6.swift:20:25: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = count + 1\n                        ^\n/tmp/tmpxnrwqoy6.swift:22:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = 1\n                        ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpg6h2xta7.swift:19:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpg6h2xta7.swift:20:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpg6h2xta7.swift:22:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgl6r260b.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpg6h2xta7.swift:19:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpg6h2xta7.swift:20:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpg6h2xta7.swift:22:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var letterCounts: [String : Int] = [:]\n    for letter in test.lowercased()\
    \ {\n        letterCounts[letter] = (letterCounts[letter] ?? 0) + 1\n    }\n \
    \   return letterCounts\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2541saao.swift:19:22: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        letterCounts[letter] = (letterCounts[letter]\
    \ ?? 0) + 1\n                     ^\n/tmp/tmp2541saao.swift:19:46: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   letterCounts[letter] = (letterCounts[letter] ?? 0) + 1\n                 \
    \                            ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result: [String : Int] = [:]\n    for letter in test.lowercased()\
    \ {\n        if let count = result[letter] {\n            result[letter] = count\
    \ + 1\n        } else {\n            result[letter] = 1\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5ft1_pny.swift:19:31: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = result[letter] {\n\
    \                              ^\n/tmp/tmp5ft1_pny.swift:20:20: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result[letter] = count + 1\n                   ^\n/tmp/tmp5ft1_pny.swift:22:20:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result[letter] = 1\n                   ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var letterCounts: [String : Int] = [:]\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        letterCounts[letter] = (letterCounts[letter] ?? 0) + 1\n    }\n\
    \    return letterCounts\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpws15g53p.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result: [String : Int] = [:]\n    for letter in test.lowercased()\
    \ {\n        result[letter] = (result[letter] ?? 0) + 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpkb6acnc8.swift:19:16: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        result[letter] = (result[letter]\
    \ ?? 0) + 1\n               ^\n/tmp/tmpkb6acnc8.swift:19:34: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        result[letter]\
    \ = (result[letter] ?? 0) + 1\n                                 ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var letters = test.characters\n\
    \    for letter in letters {\n        if let count = histogram[letter] {\n   \
    \         histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgf7kw2eh.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpgf7kw2eh.swift:20:34:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if let count = histogram[letter] {\n                                \
    \ ^\n/tmp/tmpgf7kw2eh.swift:21:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            histogram[letter] = count +\
    \ 1\n                      ^\n/tmp/tmpgf7kw2eh.swift:23:23: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            histogram[letter]\
    \ = 1\n                      ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var letters = test.characters.map\
    \ { String($0) }\n    for letter in letters {\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpasd_iyit.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters.map { String($0) }\n\
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpasd_iyit.swift:18:9: warning: variable 'letters' was never\
    \ mutated; consider changing to 'let' constant\n    var letters = test.characters.map\
    \ { String($0) }\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var letters: [String: Int] = [:]\n    for letter in test.lowercased()\
    \ {\n        letters[letter] = (letters[letter] ?? 0) + 1\n    }\n    return letters\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfar8l9ui.swift:19:17: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        letters[letter] = (letters[letter]\
    \ ?? 0) + 1\n                ^\n/tmp/tmpfar8l9ui.swift:19:36: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        letters[letter]\
    \ = (letters[letter] ?? 0) + 1\n                                   ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdsj80lol.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpg6h2xta7.swift:19:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpg6h2xta7.swift:20:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpg6h2xta7.swift:22:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result: [String : Int] = [:]\n    for letter in test.lowercased()\
    \ {\n        result[letter] = (result[letter] ?? 0) + 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpkb6acnc8.swift:19:16: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        result[letter] = (result[letter]\
    \ ?? 0) + 1\n               ^\n/tmp/tmpkb6acnc8.swift:19:34: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        result[letter]\
    \ = (result[letter] ?? 0) + 1\n                                 ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgl6r260b.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpg6h2xta7.swift:19:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpg6h2xta7.swift:20:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpg6h2xta7.swift:22:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpg6h2xta7.swift:19:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpg6h2xta7.swift:20:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpg6h2xta7.swift:22:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result: [String : Int] = [:]\n    for letter in test.lowercased()\
    \ {\n        result[letter] = (result[letter] ?? 0) + 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpkb6acnc8.swift:19:16: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        result[letter] = (result[letter]\
    \ ?? 0) + 1\n               ^\n/tmp/tmpkb6acnc8.swift:19:34: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        result[letter]\
    \ = (result[letter] ?? 0) + 1\n                                 ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var letters = test.characters\n\
    \    for letter in letters {\n        if let count = histogram[letter] {\n   \
    \         histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgf7kw2eh.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpgf7kw2eh.swift:20:34:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if let count = histogram[letter] {\n                                \
    \ ^\n/tmp/tmpgf7kw2eh.swift:21:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            histogram[letter] = count +\
    \ 1\n                      ^\n/tmp/tmpgf7kw2eh.swift:23:23: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            histogram[letter]\
    \ = 1\n                      ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result: [String : Int] = [:]\n    for letter in test.lowercased()\
    \ {\n        result[letter] = (result[letter] ?? 0) + 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpkb6acnc8.swift:19:16: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        result[letter] = (result[letter]\
    \ ?? 0) + 1\n               ^\n/tmp/tmpkb6acnc8.swift:19:34: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        result[letter]\
    \ = (result[letter] ?? 0) + 1\n                                 ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var letters = test.characters\n\
    \    for letter in letters {\n        histogram[letter] = (histogram[letter] ??\
    \ 0) + 1\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1q7xnscb.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1q7xnscb.swift:20:19:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n                  ^\n\
    /tmp/tmp1q7xnscb.swift:20:40: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpg6h2xta7.swift:19:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpg6h2xta7.swift:20:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpg6h2xta7.swift:22:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgl6r260b.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var letterCounts: [String : Int] = [:]\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        letterCounts[letter] = (letterCounts[letter] ?? 0) + 1\n    }\n\
    \    return letterCounts\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpws15g53p.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgl6r260b.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgl6r260b.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpg6h2xta7.swift:19:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpg6h2xta7.swift:20:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpg6h2xta7.swift:22:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdsj80lol.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var letters = test.characters\n\
    \    for letter in letters {\n        histogram[letter] = (histogram[letter] ??\
    \ 0) + 1\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1q7xnscb.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1q7xnscb.swift:20:19:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n                  ^\n\
    /tmp/tmp1q7xnscb.swift:20:40: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var letters = test.characters\n\
    \    for letter in letters {\n        histogram[letter] = (histogram[letter] ??\
    \ 0) + 1\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1q7xnscb.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1q7xnscb.swift:20:19:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n                  ^\n\
    /tmp/tmp1q7xnscb.swift:20:40: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgl6r260b.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var result: [String : Int] = [:]\n    for letter in test.lowercased()\
    \ {\n        if let count = result[letter] {\n            result[letter] = count\
    \ + 1\n        } else {\n            result[letter] = 1\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5ft1_pny.swift:19:31: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = result[letter] {\n\
    \                              ^\n/tmp/tmp5ft1_pny.swift:20:20: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result[letter] = count + 1\n                   ^\n/tmp/tmp5ft1_pny.swift:22:20:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result[letter] = 1\n                   ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    var letters = test.characters\n\
    \    for letter in letters {\n        histogram[letter] = (histogram[letter] ??\
    \ 0) + 1\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1q7xnscb.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1q7xnscb.swift:20:19:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n                  ^\n\
    /tmp/tmp1q7xnscb.swift:20:40: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercased()\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4xh50pgx.swift:19:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmp4xh50pgx.swift:19:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n"
  stdout: ''
  timestamp: 1659820666
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" :\
    \ 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" :\
    \ 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\"\
    \ : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test:\
    \ \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String :\
    \ Int] {\n    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(\"\
    \ \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n   \
    \ return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2_fkf4si.swift:18:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(\" \") {\n \
    \                 ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820666
