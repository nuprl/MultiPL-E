language: swift
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpawkre4lm.swift:147:1: error: expected expression in assignment\n\
    }\n^\n/tmp/tmpawkre4lm.swift:170:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpawkre4lm.swift:144:22: note: to match\
    \ this opening '{'\n    for value in lst {\n                     ^\n/tmp/tmpawkre4lm.swift:170:53:\
    \ error: expected '}' at end of brace statement\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])\n                                                   \
    \ ^\n/tmp/tmpawkre4lm.swift:12:45: note: to match this opening '{'\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n                                            ^\n/tmp/tmpawkre4lm.swift:150:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[index\
    \ + 1]\n        for value in result[index..<index+1] {\n            if value <\
    \ min {\n                result[index] = value\n                index = index\n\
    \            } else if value > max {\n                result[index] = value\n\
    \                index = index\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp02mr9y0v.swift:20:17: error: cannot assign to value: 'index' is\
    \ a 'let' constant\n                index = index\n                ^~~~~\n/tmp/tmp02mr9y0v.swift:23:17:\
    \ error: cannot assign to value: 'index' is a 'let' constant\n               \
    \ index = index\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if min > num {\n            min = num\n        }\n        if\
    \ max < num {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if min > num {\n            min = num\n        }\n        if max < num\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ min > num {\n            min = num\n        }\n        if max < num {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpxu1g6xjo.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpxu1g6xjo.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpxu1g6xjo.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpxu1g6xjo.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min = lst[0]\n    var max = lst[0]\n    for element in lst {\n        if element\
    \ < min {\n            min = element\n        }\n        if element > max {\n\
    \            max = element\n        }\n    }\n    for element in lst {\n     \
    \   if element == min {\n            result.insert(element, max)\n        }\n\
    \        if element == max {\n            result.insert(element, min)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp8bzyzpw8.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, max)\n                 \
    \  ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp8bzyzpw8.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        }\n        if num == max {\n      \
    \      result.insert(num, num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpvlrtipwx.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpvlrtipwx.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ max)\n        } else {\n            result.insert(x, min)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp2t1dcjmj.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, max)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp2t1dcjmj.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if min > num {\n            min = num\n        }\n        if\
    \ max < num {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if min > num {\n            min = num\n        }\n        if max < num\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ min > num {\n            min = num\n        }\n        if max < num {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpxu1g6xjo.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpxu1g6xjo.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpxu1g6xjo.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpxu1g6xjo.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for el in lst {\n        if el < min\
    \ {\n            min = el\n        }\n        if el > max {\n            max =\
    \ el\n        }\n    }\n    for el in lst {\n        if el == min {\n        \
    \    result.insert(el, max)\n        }\n        if el == max {\n            result.insert(min,\
    \ el)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpml24w_y1.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(el, max)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpml24w_y1.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(min,\
    \ el)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        }\n        if num == max {\n      \
    \      result.insert(num, num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpvlrtipwx.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpvlrtipwx.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        }\n        if num == max {\n      \
    \      result.insert(num, num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpsxix1l2p.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpsxix1l2p.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for idx\
    \ in 0..<result.count {\n        let min = result[idx]\n        let max = result[(idx\
    \ + 1) % result.count]\n        let swap = result[idx]\n        result[idx] =\
    \ max\n        result[(idx + 1) % result.count] = min\n        result[idx] = swap\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpgb8rvqkq/tmpgb8rvqkq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad310dd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad310ad0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad310ad0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad310acf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgb8rvqkq                        0x000055fc1197d664 <unavailable> + 5732

    5    libc.so.6                          0x00002ad310fc5460 __libc_start_main +
    245

    6    tmpgb8rvqkq                        0x000055fc1197d259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        }\n        if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpv7et8n4v.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpv7et8n4v.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for element in lst {\n        if element\
    \ < min {\n            min = element\n        }\n        if element > max {\n\
    \            max = element\n        }\n    }\n    for element in lst {\n     \
    \   if element == min {\n            result.insert(element, min)\n        }\n\
    \        if element == max {\n            result.insert(element, max)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpc136rrqc.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, min)\n                 \
    \  ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpc136rrqc.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[index\
    \ + 1]\n        for value in result[index..<index+2] {\n            if value <\
    \ min {\n                result[index] = value\n            }\n            if\
    \ value > max {\n                result[index + 1] = value\n            }\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f4f2bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f4efb2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6f4efb2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6f4efb213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6f4efb1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6f4edb1e83 <unavailable> + 188035

    6    tmpubh9xwcr                        0x000055a1c6a085b8 <unavailable> + 9656

    7    tmpubh9xwcr                        0x000055a1c6a0779c <unavailable> + 6044

    8    libc.so.6                          0x00002b6f4f4a7460 __libc_start_main +
    245

    9    tmpubh9xwcr                        0x000055a1c6a07479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if min > num {\n            min = num\n        }\n        if\
    \ max < num {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if min > num {\n            min = num\n        }\n        if max < num\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ min > num {\n            min = num\n        }\n        if max < num {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpxu1g6xjo.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpxu1g6xjo.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpxu1g6xjo.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpxu1g6xjo.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        } else {\n            result.insert(value, value)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpzhngsmm8.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpzhngsmm8.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmpzhngsmm8.swift:30:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(value,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min = lst[0]\n    var max = lst[0]\n    for el in lst {\n        if el < min\
    \ {\n            min = el\n        }\n        if el > max {\n            max =\
    \ el\n        }\n    }\n    for el in lst {\n        if el == min {\n        \
    \    result.insert(el, el)\n        }\n        if el == max {\n            result.insert(el,\
    \ el)\n        }\n    }\n    for el in lst {\n        if el == min {\n       \
    \     result.insert(el, el)\n        }\n        if el == max {\n            result.insert(el,\
    \ el)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpsn34ws82.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(el, el)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpsn34ws82.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(el,\
    \ el)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpsn34ws82.swift:34:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(el, el)\n           \
    \        ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpsn34ws82.swift:37:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(el,\
    \ el)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ min)\n        }\n        if x == max {\n            result.insert(x, max)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpsj8n1ahw.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, min)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpsj8n1ahw.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    for value in lst {\n        if value < minValue {\n \
    \           minValue = value\n        }\n    }\n    for value in lst {\n     \
    \   if value == minValue {\n            continue\n        }\n        for value2\
    \ in lst {\n            if value == value2 {\n                continue\n     \
    \       }\n            if value < value2 {\n                result.insert(value,\
    \ at: 0)\n                result.insert(value2, at: 0)\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp80gli29k/tmp80gli29k.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44c9435c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44c912cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44c912c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44c912b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp80gli29k                        0x000055fa8d1fd644 <unavailable> + 5700

    5    libc.so.6                          0x00002b44c9621460 __libc_start_main +
    245

    6    tmp80gli29k                        0x000055fa8d1fd239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        }\n        if num == max {\n      \
    \      result.insert(num, num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpvlrtipwx.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpvlrtipwx.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let minIndex = index\n        let maxIndex =\
    \ index\n        while maxIndex < result.count && result[maxIndex] < result[minIndex]\
    \ {\n            maxIndex += 1\n        }\n        if maxIndex < result.count\
    \ {\n            let temp = result[index]\n            result[index] = result[maxIndex]\n\
    \            result[maxIndex] = temp\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp3t6ck7rz.swift:18:22: error: left side of mutating operator isn't\
    \ mutable: 'maxIndex' is a 'let' constant\n            maxIndex += 1\n       \
    \     ~~~~~~~~ ^\n/tmp/tmp3t6ck7rz.swift:16:9: note: change 'let' to 'var' to\
    \ make it mutable\n        let maxIndex = index\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        } else if value\
    \ > maxValue {\n            maxValue = value\n        }\n    }\n    for value\
    \ in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        } else {\n            result.insert(value, value)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpao539ejf.swift:25:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpao539ejf.swift:27:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmpao539ejf.swift:29:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(value,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int\n    var max: Int\n    for v in lst {\n        if min == nil {\n  \
    \          min = v\n            max = v\n        } else {\n            if v <\
    \ min {\n                min = v\n            }\n            if v > max {\n  \
    \              max = v\n            }\n        }\n    }\n    for v in lst {\n\
    \        if v == min {\n            result.insert(v, min)\n        } else {\n\
    \            result.insert(v, max)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp9a1j9m6s.swift:17:16: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if min == nil {\n        \
    \   ~~~ ^  ~~~\n/tmp/tmp9a1j9m6s.swift:31:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(v, min)\n           \
    \        ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp9a1j9m6s.swift:33:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(v,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int? = nil\n    var max: Int? = nil\n    for el in lst {\n        if min\
    \ == nil || el < min {\n            min = el\n        }\n        if max == nil\
    \ || el > max {\n            max = el\n        }\n    }\n    if min != nil {\n\
    \        result.insert(min!, at: 0)\n    }\n    if max != nil {\n        result.insert(max!,\
    \ at: result.count - 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpdvqbygk_.swift:17:31: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if min == nil || el < min {\n\
    \                              ^\n/tmp/tmpdvqbygk_.swift:17:31: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     if min == nil || el < min {\n                              ^\n         \
    \                         ?? <#default value#>\n/tmp/tmpdvqbygk_.swift:17:31:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if min == nil || el < min {\n                              ^\n\
    \                                 !\n/tmp/tmpdvqbygk_.swift:20:31: error: value\
    \ of optional type 'Int?' must be unwrapped to a value of type 'Int'\n       \
    \ if max == nil || el > max {\n                              ^\n/tmp/tmpdvqbygk_.swift:20:31:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if max == nil || el > max {\n                              ^\n\
    \                                  ?? <#default value#>\n/tmp/tmpdvqbygk_.swift:20:31:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if max == nil || el > max {\n                              ^\n\
    \                                 !\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var min: Int\n    var max: Int\n    var minIndex: Int\n\
    \    var maxIndex: Int\n    var temp: Int\n    for index in 0..<lst.count {\n\
    \        min = lst[index]\n        max = lst[index]\n        minIndex = index\n\
    \        maxIndex = index\n        for index2 in index..<lst.count {\n       \
    \     if lst[index2] < min {\n                min = lst[index2]\n            \
    \    minIndex = index2\n            }\n            if lst[index2] > max {\n  \
    \              max = lst[index2]\n                maxIndex = index2\n        \
    \    }\n        }\n        temp = min\n        minIndex = minIndex\n        lst[minIndex]\
    \ = max\n        lst[maxIndex] = temp\n    }\n    return lst\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpxgcnt9bx.swift:37:18: error: assigning a variable to itself\n \
    \       minIndex = minIndex\n        ~~~~~~~~ ^ ~~~~~~~~\n/tmp/tmpxgcnt9bx.swift:38:12:\
    \ error: cannot assign through subscript: 'lst' is a 'let' constant\n        lst[minIndex]\
    \ = max\n        ~~~^\n/tmp/tmpxgcnt9bx.swift:39:12: error: cannot assign through\
    \ subscript: 'lst' is a 'let' constant\n        lst[maxIndex] = temp\n       \
    \ ~~~^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[index\
    \ + 1]\n        for value in result[index..<index+1] {\n            if value <\
    \ min {\n                result[index] = value\n                index = index\
    \ + 1\n                continue\n            }\n            if value > max {\n\
    \                result[index] = value\n                index = index + 1\n  \
    \              continue\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpc4zo1o57.swift:20:17: error: cannot assign to value: 'index' is\
    \ a 'let' constant\n                index = index + 1\n                ^~~~~\n\
    /tmp/tmpc4zo1o57.swift:25:17: error: cannot assign to value: 'index' is a 'let'\
    \ constant\n                index = index + 1\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        }\n        if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpv7et8n4v.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpv7et8n4v.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = Int.max\n    var max: Int = Int.min\n    for v in lst {\n       \
    \ if v < min {\n            min = v\n        }\n        if v > max {\n       \
    \     max = v\n        }\n    }\n    for v in lst {\n        if v < min {\n  \
    \          min = v\n        }\n        if v > max {\n            max = v\n   \
    \     }\n    }\n    for v in lst {\n        if v < min {\n            min = v\n\
    \        }\n        if v > max {\n            max = v\n        }\n    }\n    for\
    \ v in lst {\n        if v < min {\n            min = v\n        }\n        if\
    \ v > max {\n            max = v\n        }\n    }\n    for v in lst {\n     \
    \   if v < min {\n            min = v\n        }\n        if v > max {\n     \
    \       max = v\n        }\n    }\n    for v in lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    for v in lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    for v in lst {\n        if v < min {\n            min = v\n        }\n  \
    \      if v > max {\n            max = v\n        }\n    }\n    for v in lst {\n\
    \        if v < min {\n            min = v\n        }\n        if v > max {\n\
    \            max = v\n        }\n    }\n    for v in lst {\n        if v < min\
    \ {\n            min = v\n        }\n        if v > max {\n            max = v\n\
    \        }\n    }\n    for v in lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    for v in lst {\n        if v < min {\n            min = v\n        }\n  \
    \      if v > max {\n            max = v\n        }\n    }\n    for v in lst {\n\
    \        if v < min {\n            min = v\n        }\n        if v > max {\n\
    \            max = v\n        }\n    }\n    for v in lst {\n        if v < min\
    \ {\n            min = v\n        }\n        if v > max {\n            max = v\n\
    \        }\n    }\n    for v in lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    for v in lst {\n        if \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpfts_132m.swift:137:11: error: expected expression, var, or let\
    \ in 'if' condition\n        if \n          ^\n/tmp/tmpfts_132m.swift:161:53:\
    \ error: expected '}' at end of brace statement\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])\n                                                   \
    \ ^\n/tmp/tmpfts_132m.swift:12:45: note: to match this opening '{'\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n                                            ^\n/tmp/tmpfts_132m.swift:141:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var min: Int = lst[0]\n    var max: Int = lst[0]\n\
    \    for x in lst {\n        if x < min {\n            min = x\n        }\n  \
    \      if x > max {\n            max = x\n        }\n    }\n    var result = [Int]()\n\
    \    for x in lst {\n        if x == min {\n            result.insert(x, min)\n\
    \        }\n        if x == max {\n            result.insert(x, max)\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp4by4sqnt.swift:29:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, min)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp4by4sqnt.swift:32:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for v in lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    for v in lst {\n        if v == min {\n            result.insert(v,\
    \ min)\n        }\n        if v == max {\n            result.insert(v, max)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpsvc8hzsy.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(v, min)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpsvc8hzsy.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(v,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in stride(from: 0, to: result.count, by: 1) {\n        let min = result[index]\n\
    \        let max = result[index + 1]\n        if min > max {\n            let\
    \ temp = min\n            min = max\n            max = temp\n        }\n     \
    \   result[index] = min\n        result[index + 1] = max\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpfvvt51i8.swift:19:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = max\n            ^~~\n/tmp/tmpfvvt51i8.swift:15:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let min = result[index]\n\
    \        ^~~\n        var\n/tmp/tmpfvvt51i8.swift:20:13: error: cannot assign\
    \ to value: 'max' is a 'let' constant\n            max = temp\n            ^~~\n\
    /tmp/tmpfvvt51i8.swift:16:9: note: change 'let' to 'var' to make it mutable\n\
    \        let max = result[index + 1]\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else {\n            result.insert(value, maxValue)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpz4azctr1.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpz4azctr1.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(value,\
    \ maxValue)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        } else if value\
    \ > maxValue {\n            maxValue = value\n        }\n    }\n    for value\
    \ in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        } else {\n            result.insert(value, minValue)\n     \
    \       result.insert(value, maxValue)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmprhf_27b5.swift:25:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmprhf_27b5.swift:27:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmprhf_27b5.swift:29:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(value,\
    \ minValue)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmprhf_27b5.swift:30:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(value,\
    \ maxValue)\n                   ^\nSwift.Array:11:37: note: incorrect"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        }\n        if num == max {\n      \
    \      result.insert(num, num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpvlrtipwx.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpvlrtipwx.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for i\
    \ := 0; i < len(result); i++ {\n        for j := 0; j < len(result) - i - 1; j++\
    \ {\n            if result[j] > result[j+1] {\n                let tmp = result[j]\n\
    \                result[j] = result[j+1]\n                result[j+1] = tmp\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpw5cf5dv8.swift:14:12: error: expected type\n    for i := 0; i <\
    \ len(result); i++ {\n           ^\n            <#type#>\n/tmp/tmpw5cf5dv8.swift:14:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(result);\
    \ i++ {\n           ^\n/tmp/tmpw5cf5dv8.swift:14:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(result); i++ {\n     \
    \      ^\n/tmp/tmpw5cf5dv8.swift:15:16: error: expected type\n        for j :=\
    \ 0; j < len(result) - i - 1; j++ {\n               ^\n                <#type#>\n\
    /tmp/tmpw5cf5dv8.swift:15:16: error: expected 'in' after for-each pattern\n  \
    \      for j := 0; j < len(result) - i - 1; j++ {\n               ^\n/tmp/tmpw5cf5dv8.swift:15:16:\
    \ error: expected Sequence expression for for-each loop\n        for j := 0; j\
    \ < len(result) - i - 1; j++ {\n               ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count < 2 {\n      \
    \  return lst\n    }\n    var min: Int = 0\n    var max: Int = lst.count - 1\n\
    \    var middle: Int = 0\n    var swapped: Bool = false\n    while !swapped {\n\
    \        swapped = false\n        middle = min + ((max - min) / 2)\n        if\
    \ lst[middle] > lst[min] {\n            min = middle\n            swapped = true\n\
    \        } else if lst[middle] < lst[max] {\n            max = middle\n      \
    \      swapped = true\n        } else {\n            min = middle\n        }\n\
    \    }\n    var result = [Int]()\n    for var i = min; i <= max; i++ {\n     \
    \   result.append(lst[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpk51sph09.swift:34:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = min; i <= max; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        }\n        if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpv7et8n4v.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpv7et8n4v.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[(index\
    \ + 1) % result.count]\n        result[index] = max\n        result[(index + 1)\
    \ % result.count] = min\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpup1rmh0o/tmpup1rmh0o.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6779a0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6779706b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6779706988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67797057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpup1rmh0o                        0x000055b145f79664 <unavailable> + 5732

    5    libc.so.6                          0x00002b6779bfb460 __libc_start_main +
    245

    6    tmpup1rmh0o                        0x000055b145f79259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825053
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var result = [Int]()\n    var min: Int = 0\n    var\
    \ max: Int = lst.count - 1\n    while min < max {\n        let mid = min + ((max\
    \ - min) / 2)\n        let value = lst[mid]\n        if value < lst[min] {\n \
    \           min = mid + 1\n        } else if value > lst[max] {\n            max\
    \ = mid - 1\n        } else {\n            result.append(value)\n            min\
    \ = mid + 1\n            max = mid - 1\n        }\n    }\n    result.append(lst[min])\n\
    \    result.append(lst[max])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpzqs5oeha/tmpzqs5oeha.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0346933c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b034662ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b034662a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03466297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzqs5oeha                        0x00005570a8d905c4 <unavailable> + 5572

    5    libc.so.6                          0x00002b0346b1f460 __libc_start_main +
    245

    6    tmpzqs5oeha                        0x00005570a8d901b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmptc_x33pu.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, 0)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmptc_x33pu.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ result.count - 1)\n                   ^\nSwift.Array:11:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Element, at i: Int)\n           \
    \                         ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = value\n        }\n        if value > max {\n    \
    \        max = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < min {\n            min = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpawkre4lm.swift:147:1: error: expected expression in assignment\n\
    }\n^\n/tmp/tmpawkre4lm.swift:170:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpawkre4lm.swift:144:22: note: to match\
    \ this opening '{'\n    for value in lst {\n                     ^\n/tmp/tmpawkre4lm.swift:170:53:\
    \ error: expected '}' at end of brace statement\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])\n                                                   \
    \ ^\n/tmp/tmpawkre4lm.swift:12:45: note: to match this opening '{'\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n                                            ^\n/tmp/tmpawkre4lm.swift:150:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        } else {\n            result.insert(value, minValue)\n     \
    \       result.insert(value, maxValue)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpc1g0vr75.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpc1g0vr75.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmpc1g0vr75.swift:30:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(value,\
    \ minValue)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmpc1g0vr75.swift:31:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(value,\
    \ maxValue)\n                   ^\nSwift.Array:11:37: note: incorrect"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int\n    var max: Int\n    for x in lst {\n        if min == 0 {\n    \
    \        min = x\n        }\n        if x == min {\n            continue\n   \
    \     }\n        if x > max {\n            max = x\n        }\n    }\n    for\
    \ x in lst {\n        if x == max {\n            result.append(x)\n          \
    \  continue\n        }\n        if x > max {\n            result.append(x)\n \
    \           continue\n        }\n        if x < min {\n            result.append(x)\n\
    \            continue\n        }\n        if x == min {\n            result.append(x)\n\
    \            continue\n        }\n        if x < min {\n            result.append(x)\n\
    \            continue\n        }\n        if x == max {\n            result.append(x)\n\
    \            continue\n        }\n        if x < min {\n            result.append(x)\n\
    \            continue\n        }\n        if x == min {\n            result.append(x)\n\
    \            continue\n        }\n        if x < min {\n            result.append(x)\n\
    \            continue\n        }\n        if x == max {\n            result.append(x)\n\
    \            continue\n        }\n        if x < min {\n            result.append(x)\n\
    \            continue\n        }\n        if x == min {\n            result.append(x)\n\
    \            continue\n        }\n        if x < min {\n            result.append(x)\n\
    \            continue\n        }\n        if x == max {\n            result.append(x)\n\
    \            continue\n        }\n        if x < min {\n            result.append(x)\n\
    \            continue\n        }\n        if x == min {\n            result.append(x)\n\
    \            continue\n        }\n        if x < min {\n            result.append(x)\n\
    \            continue\n        }\n        if x == max {\n            result.append(x)\n\
    \            continue\n        }\n        if x < min {\n            result.append(x)\n\
    \            continue\n        }\n        if x == min {\n            result.append(x)\n\
    \            continue\n        }\n        if x < min {\n            result.append(x)\n\
    \            continue\n        }\n        if x == max {\n            result.append(x)\n\
    \            continue\n        }\n        if x < min {\n            result.append(x)\n\
    \            continue\n        }\n        if x == min {\n            result.append(x)\n\
    \            continue\n        }\n        if x < min {\n            result.append(x)\n\
    \            continue\n        }\n        if x == max {\n            result.append(x)\n\
    \            continue\n        }\n        if x < min {\n            result.append(x)\n\
    \            continue\n        }\n        if x == min {\n            result.append(x)\n\
    \            continue\n        }\n        if x < min {\n            result.append(x)\n\
    \            continue\n        }\n        if x == max {\n            result.append(x)\n\
    \            continue\n        }\n        if x < min {\n            result.append(x)\n\
    \            continue\n        }\n        if x == min {\n            result.append(x)\n\
    \            continue\n        }\n        if x < min {\n            result.append(x)\n\
    \            continue\n        }\n        if x == max {\n            result.append(x)\n\
    \            continue\n        }\n        if x < min {\n            result.append(x)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpmzm3hacg.swift:189:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpmzm3hacg.swift:27:18: note: to match\
    \ this opening '{'\n    for x in lst {\n                 ^\n/tmp/tmpmzm3hacg.swift:189:53:\
    \ error: expected '}' at end of brace statement\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])\n                                                   \
    \ ^\n/tmp/tmpmzm3hacg.swift:12:45: note: to match this opening '{'\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n                                            ^\n/tmp/tmpmzm3hacg.swift:169:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmptc_x33pu.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, 0)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmptc_x33pu.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ result.count - 1)\n                   ^\nSwift.Array:11:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Element, at i: Int)\n           \
    \                         ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count < 2 {\n      \
    \  return lst\n    }\n    var min: Int = Int.max\n    var max: Int = Int.min\n\
    \    for x in lst {\n        if x < min {\n            min = x\n        }\n  \
    \      if x > max {\n            max = x\n        }\n    }\n    var result: [Int]\
    \ = []\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpyksffen1.swift:29:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, 0)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpyksffen1.swift:32:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ result.count - 1)\n                   ^\nSwift.Array:11:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Element, at i: Int)\n           \
    \                         ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var min: Int\n    var max: Int\n    var minIndex: Int\n\
    \    var maxIndex: Int\n    var i: Int\n    var j: Int\n    for i = 0; i < lst.count;\
    \ i++ {\n        min = lst[i]\n        minIndex = i\n        for j = i + 1; j\
    \ < lst.count; j++ {\n            if lst[j] < min {\n                min = lst[j]\n\
    \                minIndex = j\n            }\n        }\n        max = lst[i]\n\
    \        maxIndex = i\n        for j = i + 1; j < lst.count; j++ {\n         \
    \   if lst[j] > max {\n                max = lst[j]\n                maxIndex\
    \ = j\n            }\n        }\n        lst[minIndex], lst[maxIndex] = lst[maxIndex],\
    \ lst[minIndex]\n    }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpbfg1ik5k.swift:22:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 0; i < lst.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpbfg1ik5k.swift:25:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for j = i + 1; j < lst.count; j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpbfg1ik5k.swift:33:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for j = i + 1; j < lst.count; j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min = lst[0]\n    var max = lst[0]\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpfwh05qo5.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, 0)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpfwh05qo5.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ result.count - 1)\n                   ^\nSwift.Array:11:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Element, at i: Int)\n           \
    \                         ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int? = nil\n    var max: Int? = nil\n    for x in lst {\n        if min\
    \ == nil || x < min {\n            min = x\n        }\n        if max == nil ||\
    \ x > max {\n            max = x\n        }\n    }\n    if min != nil {\n    \
    \    result.insert(min!, 0)\n    }\n    if max != nil {\n        result.insert(max!,\
    \ result.count - 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp6lkorzyi.swift:17:30: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if min == nil || x < min {\n\
    \                             ^\n/tmp/tmp6lkorzyi.swift:17:30: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     if min == nil || x < min {\n                             ^\n           \
    \                      ?? <#default value#>\n/tmp/tmp6lkorzyi.swift:17:30: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \        if min == nil || x < min {\n                             ^\n        \
    \                        !\n/tmp/tmp6lkorzyi.swift:20:30: error: value of optional\
    \ type 'Int?' must be unwrapped to a value of type 'Int'\n        if max == nil\
    \ || x > max {\n                             ^\n/tmp/tmp6lkorzyi.swift:20:30:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if max == nil || x > max {\n                             ^\n\
    \                                 ?? <#default value#>\n/tmp/tmp6lkorzyi.swift:20:30:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if max == nil || x > max {\n                             ^\n\
    \                                !\n/tmp/tmp6lkorzyi.swift:25:16: error: no exact\
    \ matches in call to instance method 'insert'\n        result.insert(min!, 0)\n\
    \               ^\nSwift.Array:11:37: note: incorrect labels for candidate (have:\
    \ '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmp6lkorzyi.swift:28:16: error: no exact matches in call\
    \ to instance method 'insert'\n        result.insert(max!, result.count - 1)\n\
    \               ^\nSwift.Array:11:37: note: incorrect la"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let minIndex = index\n        for index2 in minIndex..<result.count\
    \ {\n            if result[index2] < result[index] {\n                minIndex\
    \ = index2\n            }\n        }\n        let tmp = result[index]\n      \
    \  result[index] = result[minIndex]\n        result[minIndex] = tmp\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmprzx1mf2v.swift:18:17: error: cannot assign to value: 'minIndex'\
    \ is a 'let' constant\n                minIndex = index2\n                ^~~~~~~~\n\
    /tmp/tmprzx1mf2v.swift:15:9: note: change 'let' to 'var' to make it mutable\n\
    \        let minIndex = index\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        } else if num == max {\n          \
    \  result.append(num)\n        } else {\n            result.insert(num, num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpzmw883ha.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpzmw883ha.swift:30:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for element in lst {\n        if element\
    \ < min {\n            min = element\n        }\n        if element > max {\n\
    \            max = element\n        }\n    }\n    for element in lst {\n     \
    \   if element == min {\n            result.insert(element, max)\n        }\n\
    \        if element == max {\n            result.insert(element, min)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmputtpx6sv.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, max)\n                 \
    \  ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmputtpx6sv.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            minValue = value\n\
    \        }\n        if value > maxValue {\n            maxValue = value\n    \
    \    }\n    }\n    for value in lst {\n        if value < minValue {\n       \
    \     minValue = value\n        }\n        if value > maxValue {\n           \
    \ maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp13h0pj8l.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmp13h0pj8l.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmp13h0pj8l.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp13h0pj8l.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    for value in lst {\n        if value < minValue {\n \
    \           minValue = value\n        }\n    }\n    for value in lst {\n     \
    \   if value == minValue {\n            continue\n        }\n        if value\
    \ < minValue {\n            minValue = value\n        }\n    }\n    for value\
    \ in lst {\n        if value == minValue {\n            continue\n        }\n\
    \        if value > minValue {\n            minValue = value\n        }\n    }\n\
    \    for value in lst {\n        if value == minValue {\n            continue\n\
    \        }\n        if value > minValue {\n            minValue = value\n    \
    \    }\n    }\n    for value in lst {\n        if value == minValue {\n      \
    \      continue\n        }\n        if value < minValue {\n            minValue\
    \ = value\n        }\n    }\n    for value in lst {\n        if value == minValue\
    \ {\n            continue\n        }\n        if value < minValue {\n        \
    \    minValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ == minValue {\n            continue\n        }\n        if value > minValue\
    \ {\n            minValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value == minValue {\n            continue\n        }\n        if value\
    \ > minValue {\n            minValue = value\n        }\n    }\n    for value\
    \ in lst {\n        if value == minValue {\n            continue\n        }\n\
    \        if value < minValue {\n            minValue = value\n        }\n    }\n\
    \    for value in lst {\n        if value == minValue {\n            continue\n\
    \        }\n        if value < minValue {\n            minValue = value\n    \
    \    }\n    }\n    for value in lst {\n        if value == minValue {\n      \
    \      continue\n        }\n        if value > minValue {\n            minValue\
    \ = value\n        }\n    }\n    for value in lst {\n        if value == minValue\
    \ {\n            continue\n        }\n        if value > minValue {\n        \
    \    minValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ == minValue {\n            continue\n        }\n        if value < minValue\
    \ {\n            minValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value == minValue {\n            continue\n        }\n        if value\
    \ < minValue {\n            minValue = value\n        }\n    }\n    for value\
    \ in lst {\n        if value == minValue {\n            continue\n        }\n\
    \        if value > minValue {\n            minValue = value\n        }\n    }\n\
    \    for value in lst {\n        if value == minValue {\n            continue\n\
    \        }\n        if value > minValue {\n            minValue = value\n    \
    \    }\n    }\n    for value in lst {\n        if value == minValue {\n      \
    \      continue\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp69ybp63h.swift:166:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmp69ybp63h.swift:140:22: note: to match\
    \ this opening '{'\n    for value in lst {\n                     ^\n/tmp/tmp69ybp63h.swift:166:53:\
    \ error: expected '}' at end of brace statement\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])\n                                                   \
    \ ^\n/tmp/tmp69ybp63h.swift:12:45: note: to match this opening '{'\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n                                            ^\n/tmp/tmp69ybp63h.swift:146:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp69ybp63h.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    if lst.count\
    \ > 0 {\n        let minValue = lst[0]\n        let maxValue = lst[lst.count -\
    \ 1]\n        for index in lst.indices {\n            if index != lst.count -\
    \ 1 {\n                result[index] = minValue\n            } else {\n      \
    \          result[index] = maxValue\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmppr1sdodk/tmppr1sdodk.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c36112c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c35e09b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c35e09988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c35e087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppr1sdodk                        0x000056197b8a7664 <unavailable> + 5732

    5    libc.so.6                          0x00002b2c362fe460 __libc_start_main +
    245

    6    tmppr1sdodk                        0x000056197b8a7259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for element in lst {\n        if element\
    \ < min {\n            min = element\n        }\n        if element > max {\n\
    \            max = element\n        }\n    }\n    for element in lst {\n     \
    \   if element == min {\n            result.insert(element, max)\n        }\n\
    \        if element == max {\n            result.insert(element, min)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmputtpx6sv.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, max)\n                 \
    \  ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmputtpx6sv.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[index\
    \ + 1]\n        if min > max {\n            let temp = result[index]\n       \
    \     result[index] = result[index + 1]\n            result[index + 1] = temp\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b37181cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3717ec1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3717ec1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3717ec113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3717ec0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3717cc0e83 <unavailable> + 188035

    6    tmp0t_10i0f                        0x000056209ad7d385 <unavailable> + 9093

    7    tmp0t_10i0f                        0x000056209ad7c57c <unavailable> + 5500

    8    libc.so.6                          0x00002b37183b6460 __libc_start_main +
    245

    9    tmp0t_10i0f                        0x000056209ad7c259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min = lst[0]\n    for v in lst {\n        if v < min {\n            min = v\n\
    \        }\n    }\n    for v in lst {\n        if v == min {\n            result.insert(v,\
    \ min)\n        } else {\n            result.insert(v, v)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpu81ztmr2.swift:22:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(v, min)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpu81ztmr2.swift:24:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(v,\
    \ v)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        }\n        if num == max {\n      \
    \      result.insert(num, num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpvlrtipwx.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpvlrtipwx.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for el in lst {\n        if el < min\
    \ {\n            min = el\n        }\n        if el > max {\n            max =\
    \ el\n        }\n    }\n    for el in lst {\n        if el == min {\n        \
    \    result.insert(el, max)\n        } else {\n            result.insert(el, min)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp491xh1d9.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(el, max)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp491xh1d9.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(el,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        } else if value\
    \ > maxValue {\n            maxValue = value\n        }\n    }\n    for value\
    \ in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        } else {\n            result.insert(value, value)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpao539ejf.swift:25:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpao539ejf.swift:27:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmpao539ejf.swift:29:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(value,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpiyuqrcpg.swift:155:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpiyuqrcpg.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpiyuqrcpg.swift:29:20: error: no\
    \ exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpiyuqrcpg.swift:37:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(num, num)\n         \
    \          ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpiyuqrcpg.swift:45:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @i"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        }\n        if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpv7et8n4v.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpv7et8n4v.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[(index\
    \ + 1) % result.count]\n        let swap = result[(index + 1) % result.count]\n\
    \        result[(index + 1) % result.count] = min\n        result[index] = max\n\
    \        result[(index + 1) % result.count] = swap\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp9837fnc4/tmp9837fnc4.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e70900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e705f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e705f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e705f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9837fnc4                        0x0000559b88a9a664 <unavailable> + 5732

    5    libc.so.6                          0x00002b3e70aec460 __libc_start_main +
    245

    6    tmp9837fnc4                        0x0000559b88a9a259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        }\n        if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpv7et8n4v.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpv7et8n4v.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmptc_x33pu.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, 0)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmptc_x33pu.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ result.count - 1)\n                   ^\nSwift.Array:11:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Element, at i: Int)\n           \
    \                         ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int? = nil\n    for value in lst {\n        if min == nil {\n         \
    \   min = value\n        } else {\n            if value < min {\n            \
    \    min = value\n            }\n        }\n    }\n    if min != nil {\n     \
    \   result.insert(min, 0)\n    }\n    for value in lst {\n        if value < min\
    \ {\n            result.insert(value, 0)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmptyzvk7b7.swift:19:24: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            if value < min {\n      \
    \                 ^\n/tmp/tmptyzvk7b7.swift:19:24: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n            if value\
    \ < min {\n                       ^\n                           ?? <#default value#>\n\
    /tmp/tmptyzvk7b7.swift:19:24: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            if value < min {\n       \
    \                ^\n                          !\n/tmp/tmptyzvk7b7.swift:25:16:\
    \ error: no exact matches in call to instance method 'insert'\n        result.insert(min,\
    \ 0)\n               ^\n/tmp/tmptyzvk7b7.swift:25:16: note: candidate has partially\
    \ matching parameter list (__owned Int, at: Int)\n        result.insert(min, 0)\n\
    \               ^\n/tmp/tmptyzvk7b7.swift:25:16: note: candidate has partially\
    \ matching parameter list (__owned Int, at: Array<Int>.Index)\n        result.insert(min,\
    \ 0)\n               ^\n/tmp/tmptyzvk7b7.swift:28:20: error: value of optional\
    \ type 'Int?' must be unwrapped to a value of type 'Int'\n        if value < min\
    \ {\n                   ^\n/tmp/tmptyzvk7b7.swift:28:20: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n        if\
    \ value < min {\n                   ^\n                       ?? <#default value#>\n\
    /tmp/tmptyzvk7b7.swift:28:20: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n        if value < min {\n           \
    \        ^\n                      !\n/tmp/tmptyzvk7b7.swift:29:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(value,\
    \ 0)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expecte"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var min: Int = lst[0]\n    var max: Int = lst[0]\n\
    \    for x in lst {\n        if x < min {\n            min = x\n        }\n  \
    \      if x > max {\n            max = x\n        }\n    }\n    var result: [Int]\
    \ = []\n    for x in lst {\n        if x == min {\n            result.insert(0,\
    \ x)\n        }\n        if x == max {\n            result.append(x)\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpsdieibzt.swift:29:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(0, x)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[index\
    \ + 1]\n        let min = index == 0 ? min : result[index - 1]\n        let max\
    \ = index == result.count - 1 ? max : result[index + 1]\n        let tmp = result[index]\n\
    \        result[index] = min\n        result[index + 1] = max\n        result[index\
    \ - 1] = tmp\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpcs71cgb8.swift:17:13: error: invalid redeclaration of 'min'\n \
    \       let min = index == 0 ? min : result[index - 1]\n            ^\n/tmp/tmpcs71cgb8.swift:15:13:\
    \ note: 'min' previously declared here\n        let min = result[index]\n    \
    \        ^\n/tmp/tmpcs71cgb8.swift:18:13: error: invalid redeclaration of 'max'\n\
    \        let max = index == result.count - 1 ? max : result[index + 1]\n     \
    \       ^\n/tmp/tmpcs71cgb8.swift:16:13: note: 'max' previously declared here\n\
    \        let max = result[index + 1]\n            ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ max)\n        }\n        if x == max {\n            result.insert(x, min)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpy0rt29bt.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, max)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpy0rt29bt.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in stride(from: 0, to: result.count, by: -1) {\n        let min = result[index]\n\
    \        let max = result[index + 1]\n        let temp = result[index]\n     \
    \   result[index] = max\n        result[index + 1] = min\n        result[index]\
    \ = temp\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpkro_jftu/tmpkro_jftu.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c34e18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c34b0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c34b0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c34b0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkro_jftu                        0x0000557448b236e4 <unavailable> + 5860

    5    libc.so.6                          0x00002b0c35004460 __libc_start_main +
    245

    6    tmpkro_jftu                        0x0000557448b232d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = Int.max\n    for x in lst {\n        if x < min {\n            min\
    \ = x\n        }\n    }\n    for x in lst {\n        if x == min {\n         \
    \   continue\n        }\n        if x > min {\n            result.insert(x, min)\n\
    \        } else {\n            result.insert(x, x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp9zp3rzoe.swift:25:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, min)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp9zp3rzoe.swift:27:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ x)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = Int.max\n    for el in lst {\n        if el < min {\n           \
    \ min = el\n        }\n    }\n    for el in lst {\n        if el == min {\n  \
    \          result.insert(el, min)\n        } else {\n            result.insert(el,\
    \ min)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpyo65q70v.swift:22:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(el, min)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpyo65q70v.swift:24:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(el,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        }\n        if num == max {\n      \
    \      result.insert(num, num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpvlrtipwx.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpvlrtipwx.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = Int.max\n    var max: Int = Int.min\n    for element in lst {\n \
    \       if element < min {\n            min = element\n        }\n        if element\
    \ > max {\n            max = element\n        }\n    }\n    for element in lst\
    \ {\n        if element == min {\n            result.insert(element, max)\n  \
    \      }\n        if element == max {\n            result.insert(element, min)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp5gfz0ijq.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, max)\n                 \
    \  ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp5gfz0ijq.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var min: Int\n    var max: Int\n    var minIndex: Int\n\
    \    var maxIndex: Int\n    var minVal: Int\n    var maxVal: Int\n    var minValIndex:\
    \ Int\n    var maxValIndex: Int\n    var minValVal: Int\n    var maxValVal: Int\n\
    \    var minValValIndex: Int\n    var maxValValIndex: Int\n    var minValValVal:\
    \ Int\n    var maxValValVal: Int\n    var minValValValIndex: Int\n    var maxValValValIndex:\
    \ Int\n    var minValValValVal: Int\n    var maxValValVal: Int\n    var minValValValIndex:\
    \ Int\n    var maxValValValIndex: Int\n    var minValValValVal: Int\n    var maxValValVal:\
    \ Int\n    var minValValValIndex: Int\n    var maxValValValIndex: Int\n    var\
    \ minValValValVal: Int\n    var maxValValVal: Int\n    var minValValValIndex:\
    \ Int\n    var maxValValValIndex: Int\n    var minValValValVal: Int\n    var maxValValVal:\
    \ Int\n    var minValValValIndex: Int\n    var maxValValValIndex: Int\n    var\
    \ minValValValVal: Int\n    var maxValValVal: Int\n    var minValValValIndex:\
    \ Int\n    var maxValValValIndex: Int\n    var minValValValVal: Int\n    var maxValValVal:\
    \ Int\n    var minValValValIndex: Int\n    var maxValValValIndex: Int\n    var\
    \ minValValValVal: Int\n    var maxValValVal: Int\n    var minValValValIndex:\
    \ Int\n    var maxValValValIndex: Int\n    var minValValValVal: Int\n    var maxValValVal:\
    \ Int\n    var minValValValIndex: Int\n    var maxValValValIndex: Int\n    var\
    \ minValValValVal: Int\n    var maxValValVal: Int\n    var minValValValIndex:\
    \ Int\n    var maxValValValIndex: Int\n    var minValValValVal: Int\n    var maxValValVal:\
    \ Int\n    var minValValValIndex: Int\n    var maxValValValIndex: Int\n    var\
    \ minValValValVal: Int\n    var maxValValVal: Int\n    var minValValValIndex:\
    \ Int\n    var maxValValValIndex: Int\n    var minValVal\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp5imlt0bp.swift:33:9: error: invalid redeclaration of 'maxValValVal'\n\
    \    var maxValValVal: Int\n        ^\n/tmp/tmp5imlt0bp.swift:29:9: note: 'maxValValVal'\
    \ previously declared here\n    var maxValValVal: Int\n        ^\n/tmp/tmp5imlt0bp.swift:34:9:\
    \ error: invalid redeclaration of 'minValValValIndex'\n    var minValValValIndex:\
    \ Int\n        ^\n/tmp/tmp5imlt0bp.swift:30:9: note: 'minValValValIndex' previously\
    \ declared here\n    var minValValValIndex: Int\n        ^\n/tmp/tmp5imlt0bp.swift:35:9:\
    \ error: invalid redeclaration of 'maxValValValIndex'\n    var maxValValValIndex:\
    \ Int\n        ^\n/tmp/tmp5imlt0bp.swift:31:9: note: 'maxValValValIndex' previously\
    \ declared here\n    var maxValValValIndex: Int\n        ^\n/tmp/tmp5imlt0bp.swift:36:9:\
    \ error: invalid redeclaration of 'minValValValVal'\n    var minValValValVal:\
    \ Int\n        ^\n/tmp/tmp5imlt0bp.swift:32:9: note: 'minValValValVal' previously\
    \ declared here\n    var minValValValVal: Int\n        ^\n/tmp/tmp5imlt0bp.swift:37:9:\
    \ error: invalid redeclaration of 'maxValValVal'\n    var maxValValVal: Int\n\
    \        ^\n/tmp/tmp5imlt0bp.swift:29:9: note: 'maxValValVal' previously declared\
    \ here\n    var maxValValVal: Int\n        ^\n/tmp/tmp5imlt0bp.swift:38:9: error:\
    \ invalid redeclaration of 'minValValValIndex'\n    var minValValValIndex: Int\n\
    \        ^\n/tmp/tmp5imlt0bp.swift:30:9: note: 'minValValValIndex' previously\
    \ declared here\n    var minValValValIndex: Int\n        ^\n/tmp/tmp5imlt0bp.swift:39:9:\
    \ error: invalid redeclaration of 'maxValValValIndex'\n    var maxValValValIndex:\
    \ Int\n        ^\n/tmp/tmp5imlt0bp.swift:31:9: note: 'maxValValValIndex' previously\
    \ declared here\n    var maxValValValIndex: Int\n        ^\n/tmp/tmp5imlt0bp.swift:40:9:\
    \ error: invalid redeclaration of 'minValValValVal'\n    var minValValValVal:\
    \ Int\n        ^\n/tmp/tmp5imlt0bp.swift:32:9: note: 'minValValValVal' previously\
    \ declared here\n    var minValValValVal: Int\n        ^\n/tmp/tmp5imlt0bp.swift:41:9:\
    \ error: invalid redeclaration of 'maxValValVal'\n    var maxValValVal: Int\n\
    \        ^\n/tmp/tmp5imlt0bp.swift:29:9: note: 'maxValValVal"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        }\n        if num == max {\n      \
    \      result.insert(num, num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpvlrtipwx.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpvlrtipwx.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min = lst[0]\n    var max = lst[0]\n    for element in lst {\n        if element\
    \ < min {\n            min = element\n        }\n        if element > max {\n\
    \            max = element\n        }\n    }\n    for element in lst {\n     \
    \   if element == min {\n            result.insert(element, max)\n        } else\
    \ {\n            result.insert(element, min)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmptd4li44r.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, max)\n                 \
    \  ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmptd4li44r.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min = lst[0]\n    var max = lst[0]\n    for element in lst {\n        if element\
    \ < min {\n            min = element\n        }\n        if element > max {\n\
    \            max = element\n        }\n    }\n    for element in lst {\n     \
    \   if element == min {\n            result.insert(element, min)\n        }\n\
    \        if element == max {\n            result.insert(element, max)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpcn_c0_aw.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, min)\n                 \
    \  ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpcn_c0_aw.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, 0)\n    \
    \    }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, 0)\n    \
    \    }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, 0)\n    \
    \    }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, 0)\n    \
    \    }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, 0)\n    \
    \    }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, 0)\n    \
    \    }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, 0)\n    \
    \    }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, 0)\n    \
    \    }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, 0)\n    \
    \    }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, 0)\n    \
    \    }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, 0)\n    \
    \    }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, 0)\n    \
    \    }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, 0)\n    \
    \    }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, 0)\n    \
    \    }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2,\
    \ 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5,\
    \ 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    assert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp5qrl6baa.swift:162:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmp5qrl6baa.swift:136:18: note: to match\
    \ this opening '{'\n    for x in lst {\n                 ^\n/tmp/tmp5qrl6baa.swift:162:53:\
    \ error: expected '}' at end of brace statement\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])\n                                                   \
    \ ^\n/tmp/tmp5qrl6baa.swift:12:45: note: to match this opening '{'\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n                                            ^\n/tmp/tmp5qrl6baa.swift:26:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ 0)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmp5qrl6baa.swift:29:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(x, 0)\n             \
    \      ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp5qrl6baa.swift:34:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ 0)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num < min {\n    \
    \        result.insert(min, num)\n        } else if num > max {\n            result.insert(max,\
    \ num)\n        } else {\n            result.insert(num, num)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp0sbjdlnn.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(min, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp0sbjdlnn.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(max,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmp0sbjdlnn.swift:30:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(num, num)\n         \
    \          ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min = lst[0]\n    var max = lst[0]\n    for v in lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    for v in lst {\n        if v == min {\n            result.insert(v,\
    \ min)\n        }\n        if v == max {\n            result.insert(v, max)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmppaoh0hzk.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(v, min)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmppaoh0hzk.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(v,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = Int.max\n    for el in lst {\n        if el < min {\n           \
    \ min = el\n        }\n    }\n    for el in lst {\n        if el == min {\n  \
    \          continue\n        }\n        if el > min {\n            result.insert(el,\
    \ min)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp0eo0o6un.swift:25:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(el, min)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count < 2 {\n      \
    \  return lst\n    }\n    var min: Int\n    var max: Int\n    var minIndex: Int\n\
    \    var maxIndex: Int\n    var minVal: Int\n    var maxVal: Int\n    var minValIndex:\
    \ Int\n    var maxValIndex: Int\n    var minValVal: Int\n    var maxValVal: Int\n\
    \    var minValValIndex: Int\n    var maxValValIndex: Int\n    var minValValVal:\
    \ Int\n    var maxValValVal: Int\n    var minValValValIndex: Int\n    var maxValValValIndex:\
    \ Int\n    var minValValValVal: Int\n    var maxValValVal: Int\n    var minValValValIndex:\
    \ Int\n    var maxValValValIndex: Int\n    var minValValValVal: Int\n    var maxValValVal:\
    \ Int\n    var minValValValIndex: Int\n    var maxValValValIndex: Int\n    var\
    \ minValValValVal: Int\n    var maxValValVal: Int\n    var minValValValIndex:\
    \ Int\n    var maxValValValIndex: Int\n    var minValValValVal: Int\n    var maxValValVal:\
    \ Int\n    var minValValValIndex: Int\n    var maxValValValIndex: Int\n    var\
    \ minValValValVal: Int\n    var maxValValVal: Int\n    var minValValValIndex:\
    \ Int\n    var maxValValValIndex: Int\n    var minValValValVal: Int\n    var maxValValVal:\
    \ Int\n    var minValValValIndex: Int\n    var maxValValValIndex: Int\n    var\
    \ minValValValVal: Int\n    var maxValValVal: Int\n    var minValValValIndex:\
    \ Int\n    var maxValValValIndex: Int\n    var minValValValVal: Int\n    var maxValValVal:\
    \ Int\n    var minValValValIndex: Int\n    var maxValValValIndex: Int\n    var\
    \ minValValValVal: Int\n    var maxValValVal: Int\n    var minValValValIndex:\
    \ Int\n    var maxValValValIndex: Int\n    var minValValValVal: Int\n    var maxValValVal:\
    \ Int\n    var minValValValIndex: Int\n    var maxValValValIndex: Int\n    var\
    \ minValValValVal: Int\n    var maxValValVal: Int\n    var minValValValIndex:\
    \ Int\n    var maxValValValIndex: Int\n    var minVal\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp0ceiyjap.swift:33:9: error: invalid redeclaration of 'maxValValVal'\n\
    \    var maxValValVal: Int\n        ^\n/tmp/tmp0ceiyjap.swift:29:9: note: 'maxValValVal'\
    \ previously declared here\n    var maxValValVal: Int\n        ^\n/tmp/tmp0ceiyjap.swift:34:9:\
    \ error: invalid redeclaration of 'minValValValIndex'\n    var minValValValIndex:\
    \ Int\n        ^\n/tmp/tmp0ceiyjap.swift:30:9: note: 'minValValValIndex' previously\
    \ declared here\n    var minValValValIndex: Int\n        ^\n/tmp/tmp0ceiyjap.swift:35:9:\
    \ error: invalid redeclaration of 'maxValValValIndex'\n    var maxValValValIndex:\
    \ Int\n        ^\n/tmp/tmp0ceiyjap.swift:31:9: note: 'maxValValValIndex' previously\
    \ declared here\n    var maxValValValIndex: Int\n        ^\n/tmp/tmp0ceiyjap.swift:36:9:\
    \ error: invalid redeclaration of 'minValValValVal'\n    var minValValValVal:\
    \ Int\n        ^\n/tmp/tmp0ceiyjap.swift:32:9: note: 'minValValValVal' previously\
    \ declared here\n    var minValValValVal: Int\n        ^\n/tmp/tmp0ceiyjap.swift:37:9:\
    \ error: invalid redeclaration of 'maxValValVal'\n    var maxValValVal: Int\n\
    \        ^\n/tmp/tmp0ceiyjap.swift:29:9: note: 'maxValValVal' previously declared\
    \ here\n    var maxValValVal: Int\n        ^\n/tmp/tmp0ceiyjap.swift:38:9: error:\
    \ invalid redeclaration of 'minValValValIndex'\n    var minValValValIndex: Int\n\
    \        ^\n/tmp/tmp0ceiyjap.swift:30:9: note: 'minValValValIndex' previously\
    \ declared here\n    var minValValValIndex: Int\n        ^\n/tmp/tmp0ceiyjap.swift:39:9:\
    \ error: invalid redeclaration of 'maxValValValIndex'\n    var maxValValValIndex:\
    \ Int\n        ^\n/tmp/tmp0ceiyjap.swift:31:9: note: 'maxValValValIndex' previously\
    \ declared here\n    var maxValValValIndex: Int\n        ^\n/tmp/tmp0ceiyjap.swift:40:9:\
    \ error: invalid redeclaration of 'minValValValVal'\n    var minValValValVal:\
    \ Int\n        ^\n/tmp/tmp0ceiyjap.swift:32:9: note: 'minValValValVal' previously\
    \ declared here\n    var minValValValVal: Int\n        ^\n/tmp/tmp0ceiyjap.swift:41:9:\
    \ error: invalid redeclaration of 'maxValValVal'\n    var maxValValVal: Int\n\
    \        ^\n/tmp/tmp0ceiyjap.swift:29:9: note: 'maxValValVal"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in stride(from: 0, to: result.count, by: -1) {\n        let min = result[index]\n\
    \        let max = result[index + 1]\n        if min > max {\n            let\
    \ temp = min\n            min = max\n            max = temp\n        }\n     \
    \   result[index] = min\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpb11szt44.swift:19:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = max\n            ^~~\n/tmp/tmpb11szt44.swift:15:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let min = result[index]\n\
    \        ^~~\n        var\n/tmp/tmpb11szt44.swift:20:13: error: cannot assign\
    \ to value: 'max' is a 'let' constant\n            max = temp\n            ^~~\n\
    /tmp/tmpb11szt44.swift:16:9: note: change 'let' to 'var' to make it mutable\n\
    \        let max = result[index + 1]\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            minValue = value\n\
    \        }\n        if value > maxValue {\n            maxValue = value\n    \
    \    }\n    }\n    for value in lst {\n        if value < minValue {\n       \
    \     minValue = value\n        }\n        if value > maxValue {\n           \
    \ maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp13h0pj8l.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmp13h0pj8l.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmp13h0pj8l.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp13h0pj8l.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            minValue = value\n\
    \        }\n        if value > maxValue {\n            maxValue = value\n    \
    \    }\n    }\n    for value in lst {\n        if value < minValue {\n       \
    \     minValue = value\n        }\n        if value > maxValue {\n           \
    \ maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp13h0pj8l.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmp13h0pj8l.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmp13h0pj8l.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp13h0pj8l.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[index\
    \ + 1]\n        if min > max {\n            let temp = result[index]\n       \
    \     result[index] = result[index + 1]\n            result[index + 1] = temp\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b37181cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3717ec1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3717ec1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3717ec113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3717ec0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3717cc0e83 <unavailable> + 188035

    6    tmp0t_10i0f                        0x000056209ad7d385 <unavailable> + 9093

    7    tmp0t_10i0f                        0x000056209ad7c57c <unavailable> + 5500

    8    libc.so.6                          0x00002b37183b6460 __libc_start_main +
    245

    9    tmp0t_10i0f                        0x000056209ad7c259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count < 2 {\n      \
    \  return lst\n    }\n    var min: Int = Int.max\n    var max: Int = Int.min\n\
    \    var i: Int = 0\n    for element in lst {\n        if element < min {\n  \
    \          min = element\n        }\n        if element > max {\n            max\
    \ = element\n        }\n        i += 1\n    }\n    var result = [Int]()\n    for\
    \ element in lst {\n        if element == min {\n            result.insert(element,\
    \ i)\n        }\n        if element == max {\n            result.insert(element,\
    \ i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp3v6wdrm8.swift:31:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, i)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp3v6wdrm8.swift:34:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ i)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpiyuqrcpg.swift:155:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpiyuqrcpg.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpiyuqrcpg.swift:29:20: error: no\
    \ exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpiyuqrcpg.swift:37:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(num, num)\n         \
    \          ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpiyuqrcpg.swift:45:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @i"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var min: Int = 0\n    var max: Int = lst.count - 1\n\
    \    var swapped: Bool = false\n    while !swapped {\n        swapped = false\n\
    \        if min > max {\n            break\n        }\n        for i in min..<max\
    \ {\n            if lst[i] > lst[min] {\n                lst[i], lst[min] = lst[min],\
    \ lst[i]\n                swapped = true\n            }\n            if lst[i]\
    \ < lst[max] {\n                lst[i], lst[max] = lst[max], lst[i]\n        \
    \        swapped = true\n            }\n        }\n        min = min + 1\n   \
    \     max = max - 2\n    }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpjbauu7fl.swift:26:23: error: consecutive statements on a line must\
    \ be separated by ';'\n                lst[i], lst[min] = lst[min], lst[i]\n \
    \                     ^\n                      ;\n/tmp/tmpjbauu7fl.swift:26:23:\
    \ error: expected expression\n                lst[i], lst[min] = lst[min], lst[i]\n\
    \                      ^\n/tmp/tmpjbauu7fl.swift:30:23: error: consecutive statements\
    \ on a line must be separated by ';'\n                lst[i], lst[max] = lst[max],\
    \ lst[i]\n                      ^\n                      ;\n/tmp/tmpjbauu7fl.swift:30:23:\
    \ error: expected expression\n                lst[i], lst[max] = lst[max], lst[i]\n\
    \                      ^\n/tmp/tmpjbauu7fl.swift:26:20: warning: expression of\
    \ type 'Int' is unused\n                lst[i], lst[min] = lst[min], lst[i]\n\
    \                ~~~^~~\n/tmp/tmpjbauu7fl.swift:30:20: warning: expression of\
    \ type 'Int' is unused\n                lst[i], lst[max] = lst[max], lst[i]\n\
    \                ~~~^~~\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min = lst[0]\n    var max = lst[0]\n    for v in lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    for v in lst {\n        if v == min {\n            result.insert(v,\
    \ min)\n        }\n        if v == max {\n            result.insert(v, max)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmppaoh0hzk.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(v, min)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmppaoh0hzk.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(v,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        for index2 in\
    \ index..<result.count {\n            if result[index2] < min {\n            \
    \    min = result[index2]\n            }\n        }\n        result[index] = min\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmphijq_cj1.swift:18:17: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n                min = result[index2]\n                ^~~\n\
    /tmp/tmphijq_cj1.swift:15:9: note: change 'let' to 'var' to make it mutable\n\
    \        let min = result[index]\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int\n    var max: Int\n    for element in lst {\n        if min == nil\
    \ {\n            min = element\n            max = element\n        } else {\n\
    \            if element < min {\n                min = element\n            }\n\
    \            if element > max {\n                max = element\n            }\n\
    \        }\n    }\n    for element in lst {\n        if element == min {\n   \
    \         result.insert(element, min)\n        }\n        if element == max {\n\
    \            result.insert(element, max)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpyzperty8.swift:17:16: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if min == nil {\n        \
    \   ~~~ ^  ~~~\n/tmp/tmpyzperty8.swift:31:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(element, min)\n     \
    \              ^\nSwift.Array:11:37: note: incorrect labels for candidate (have:\
    \ '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpyzperty8.swift:34:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(element, max)\n     \
    \              ^\nSwift.Array:11:37: note: incorrect labels for candidate (have:\
    \ '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in stride(from: 0, to: result.count, by: 1) {\n        let min = result[index]\n\
    \        let max = result[index + 1]\n        let middle = min + max / 2\n   \
    \     result[index] = middle\n        result[index + 1] = middle\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3067231c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3066f28561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3066f28286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3066f2813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3066f27bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3066d27e83 <unavailable> + 188035

    6    tmpb7eys4gi                        0x000055bface944c5 <unavailable> + 9413

    7    tmpb7eys4gi                        0x000055bface9369c <unavailable> + 5788

    8    libc.so.6                          0x00002b306741d460 __libc_start_main +
    245

    9    tmpb7eys4gi                        0x000055bface93379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        }\n        if num == max {\n      \
    \      result.insert(num, num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpvlrtipwx.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpvlrtipwx.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else {\n            result.insert(maxValue, value)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpeiwdoqz_.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpeiwdoqz_.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[index\
    \ + 1]\n        if min > max {\n            let temp = min\n            min =\
    \ max\n            max = temp\n        }\n        result[index] = min\n      \
    \  result[index + 1] = max\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpwamkzb59.swift:19:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = max\n            ^~~\n/tmp/tmpwamkzb59.swift:15:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let min = result[index]\n\
    \        ^~~\n        var\n/tmp/tmpwamkzb59.swift:20:13: error: cannot assign\
    \ to value: 'max' is a 'let' constant\n            max = temp\n            ^~~\n\
    /tmp/tmpwamkzb59.swift:16:9: note: change 'let' to 'var' to make it mutable\n\
    \        let max = result[index + 1]\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[index+1]\n\
    \        for value in result[index..<index+2] {\n            if value < min {\n\
    \                result.insert(value, at: index)\n                result.insert(min,\
    \ at: index)\n                result.insert(max, at: index)\n                result.insert(value,\
    \ at: index+1)\n                result.insert(max, at: index+1)\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b384261ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3842315561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3842315286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b384231513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3842314bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3842114e83 <unavailable> + 188035

    6    tmpggkq2h4g                        0x000055a0aa6f75ad <unavailable> + 9645

    7    tmpggkq2h4g                        0x000055a0aa6f679c <unavailable> + 6044

    8    libc.so.6                          0x00002b384280a460 __libc_start_main +
    245

    9    tmpggkq2h4g                        0x000055a0aa6f6479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min = lst[0]\n    var max = lst[0]\n    for el in lst {\n        if el < min\
    \ {\n            min = el\n        }\n        if el > max {\n            max =\
    \ el\n        }\n    }\n    for el in lst {\n        if el == min {\n        \
    \    result.insert(el, max)\n        } else {\n            result.insert(el, min)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpx_i0j39l.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(el, max)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpx_i0j39l.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(el,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpiyuqrcpg.swift:155:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpiyuqrcpg.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpiyuqrcpg.swift:29:20: error: no\
    \ exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpiyuqrcpg.swift:37:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(num, num)\n         \
    \          ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpiyuqrcpg.swift:45:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @i"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int\n    var max: Int\n    for value in lst {\n        if min == nil {\n\
    \            min = value\n            max = value\n        } else {\n        \
    \    if value < min {\n                min = value\n            }\n          \
    \  if value > max {\n                max = value\n            }\n        }\n \
    \   }\n    for value in lst {\n        if min == nil {\n            min = value\n\
    \            max = value\n        } else {\n            if value < min {\n   \
    \             min = value\n            }\n            if value > max {\n     \
    \           max = value\n            }\n        }\n    }\n    for value in lst\
    \ {\n        if min == nil {\n            min = value\n            max = value\n\
    \        } else {\n            if value < min {\n                min = value\n\
    \            }\n            if value > max {\n                max = value\n  \
    \          }\n        }\n    }\n    for value in lst {\n        if min == nil\
    \ {\n            min = value\n            max = value\n        } else {\n    \
    \        if value < min {\n                min = value\n            }\n      \
    \      if value > max {\n                max = value\n            }\n        }\n\
    \    }\n    for value in lst {\n        if min == nil {\n            min = value\n\
    \            max = value\n        } else {\n            if value < min {\n   \
    \             min = value\n            }\n            if value > max {\n     \
    \           max = value\n            }\n        }\n    }\n    for value in lst\
    \ {\n        if min == nil {\n            min = value\n            max = value\n\
    \        } else {\n            if value < min {\n                min = value\n\
    \            }\n            if value > max {\n                max = value\n  \
    \          }\n        }\n    }\n    for value in lst {\n        if min == nil\
    \ {\n            min = value\n            max = value\n        } else {\n    \
    \        if value < min {\n                min = value\n            }\n      \
    \      if value > max {\n                max = value\n            }\n        }\n\
    \    }\n    for value in lst {\n        if min == nil {\n            min = value\n\
    \            max = value\n        } else {\n            if value < min {\n   \
    \             min = value\n            }\n            if value > max {\n     \
    \           max = value\n            }\n        }\n    }\n    for value in lst\
    \ {\n        if min == nil {\n            min = value\n            max = value\n\
    \        } else {\n            if value < min {\n                min = value\n\
    \            }\n            if value > max {\n                max = value\n  \
    \          }\n        }\n    }\n    for value in lst {\n        if min == nil\
    \ {\n            min = value\n            max = value\n        } else {\n    \
    \        if value < min {\n                min = value\n            }\n      \
    \      if value > max {\n                max = value\n            }\n        }\n\
    \    }\n    for value in lst {\n        if min == nil {\n            min = value\n\
    \            max = value\n        } else {\n            if value < min {\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpzdkd3yrf.swift:175:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpzdkd3yrf.swift:150:16: note: to match\
    \ this opening '{'\n        } else {\n               ^\n/tmp/tmpzdkd3yrf.swift:175:53:\
    \ error: expected '}' at end of brace statement\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])\n                                                   \
    \ ^\n/tmp/tmpzdkd3yrf.swift:146:22: note: to match this opening '{'\n    for value\
    \ in lst {\n                     ^\n/tmp/tmpzdkd3yrf.swift:175:53: error: expected\
    \ '}' at end of brace statement\nassert(strange_sort_list(lst: [111111]) == [111111])\n\
    \                                                    ^\n/tmp/tmpzdkd3yrf.swift:12:45:\
    \ note: to match this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int]\
    \ {\n                                            ^\n/tmp/tmpzdkd3yrf.swift:17:16:\
    \ warning: comparing non-optional value of type 'Int' to 'nil' always returns\
    \ false\n        if min == nil {\n           ~~~ ^  ~~~\n/tmp/tmpzdkd3yrf.swift:30:16:\
    \ warning: comparing non-optional value of type 'Int' to 'nil' always returns\
    \ false\n        if min == nil {\n           ~~~ ^  ~~~\n/tmp/tmpzdkd3yrf.swift:43:16:\
    \ warning: comparing non-optional value of type 'Int' to 'nil' always returns\
    \ false\n        if min == nil {\n           ~~~ ^  ~~~\n/tmp/tmpzdkd3yrf.swift:56:16:\
    \ warning: comparing non-optional value of type 'Int' to 'nil' always returns\
    \ false\n        if min == nil {\n           ~~~ ^  ~~~\n/tmp/tmpzdkd3yrf.swift:69:16:\
    \ warning: comparing non-optional value of type 'Int' to 'nil' always returns\
    \ false\n        if min == nil {\n           ~~~ ^  ~~~\n/tmp/tmpzdkd3yrf.swift:82:16:\
    \ warning: comparing non-optional value of type 'Int' to 'nil' always returns\
    \ false\n        if min == nil {\n           ~~~ ^  ~~~\n/tmp/tmpzdkd3yrf.swift:95:16:\
    \ warning: comparing non-optional value of type 'Int' to 'nil' always returns\
    \ false\n        if min == nil {\n           ~~~ ^  ~~~\n/tmp/tmpzdkd3yrf.swift:108:16:"
  stdout: ''
  timestamp: 1659825053
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in stride(from: 0, to: result.count, by: 1) {\n        let min = result[index]\n\
    \        let max = result[index + 1]\n        let value = result[index + 2]\n\
    \        if value < min {\n            result[index] = value\n            result[index\
    \ + 1] = min\n            result[index + 2] = max\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d0fcecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d0f9e3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1d0f9e3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1d0f9e313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1d0f9e2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1d0f7e2e83 <unavailable> + 188035

    6    tmpsj73xn_u                        0x0000560a42a01471 <unavailable> + 9329

    7    tmpsj73xn_u                        0x0000560a42a005fc <unavailable> + 5628

    8    libc.so.6                          0x00002b1d0fed8460 __libc_start_main +
    245

    9    tmpsj73xn_u                        0x0000560a42a002d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            result.append(num)\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp3qzxc87y.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmp3qzxc87y.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmp3qzxc87y.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var min: Int\n    var max: Int\n    var minIndex: Int\n\
    \    var maxIndex: Int\n    var minVal: Int\n    var maxVal: Int\n    var i: Int\n\
    \    var j: Int\n    var k: Int\n    var temp: Int\n    for i = 0; i < lst.count;\
    \ i++ {\n        minIndex = i\n        minVal = lst[i]\n        for j = i + 1;\
    \ j < lst.count; j++ {\n            if lst[j] < minVal {\n                minIndex\
    \ = j\n                minVal = lst[j]\n            }\n        }\n        maxIndex\
    \ = i\n        maxVal = lst[i]\n        for k = i + 1; k < lst.count; k++ {\n\
    \            if lst[k] > maxVal {\n                maxIndex = k\n            \
    \    maxVal = lst[k]\n            }\n        }\n        if minIndex != maxIndex\
    \ {\n            temp = lst[minIndex]\n            lst[minIndex] = lst[maxIndex]\n\
    \            lst[maxIndex] = temp\n        }\n    }\n    return lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpmy5zhcxx.swift:26:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 0; i < lst.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpmy5zhcxx.swift:29:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for j = i + 1; j < lst.count; j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpmy5zhcxx.swift:37:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for k = i + 1; k < lst.count; k++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n\n    var min: Int = 0\n    var max: Int = lst.count -\
    \ 1\n\n    while min < max {\n        var tmp: Int = min(max, min + max)\n   \
    \     var tmp2: Int = min(max, tmp)\n        var tmp3: Int = min(max, tmp2)\n\n\
    \        if tmp3 > tmp2 {\n            max = tmp3\n        } else {\n        \
    \    min = tmp2\n        }\n    }\n\n    return lst\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp8ok58593.swift:21:24: error: cannot call value of non-function\
    \ type 'Int'\n        var tmp: Int = min(max, min + max)\n                   \
    \    ^\n/tmp/tmp8ok58593.swift:22:25: error: cannot call value of non-function\
    \ type 'Int'\n        var tmp2: Int = min(max, tmp)\n                        ^\n\
    /tmp/tmp8ok58593.swift:23:25: error: cannot call value of non-function type 'Int'\n\
    \        var tmp3: Int = min(max, tmp2)\n                        ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if min > num {\n            min = num\n        }\n        if\
    \ max < num {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if min > num {\n            min = num\n        }\n        if max < num\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ min > num {\n            min = num\n        }\n        if max < num {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpxu1g6xjo.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpxu1g6xjo.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpxu1g6xjo.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpxu1g6xjo.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        }\n        if num == max {\n      \
    \      result.insert(num, num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpvlrtipwx.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpvlrtipwx.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpiyuqrcpg.swift:155:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpiyuqrcpg.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpiyuqrcpg.swift:29:20: error: no\
    \ exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpiyuqrcpg.swift:37:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(num, num)\n         \
    \          ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpiyuqrcpg.swift:45:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @i"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        } else {\n            result.insert(value, value)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpzhngsmm8.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpzhngsmm8.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmpzhngsmm8.swift:30:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(value,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for idx\
    \ in stride(from: 0, to: lst.count, by: 1) {\n        let minIdx = idx\n     \
    \   let maxIdx = idx + 1\n        if minIdx > lst.count {\n            break\n\
    \        }\n        if maxIdx > lst.count {\n            maxIdx = lst.count\n\
    \        }\n        if result[minIdx] > result[maxIdx] {\n            let tmp\
    \ = result[minIdx]\n            result[minIdx] = result[maxIdx]\n            result[maxIdx]\
    \ = tmp\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpxz5wpvb3.swift:21:13: error: cannot assign to value: 'maxIdx' is\
    \ a 'let' constant\n            maxIdx = lst.count\n            ^~~~~~\n/tmp/tmpxz5wpvb3.swift:16:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let maxIdx = idx + 1\n\
    \        ^~~\n        var\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if min > num {\n            min = num\n        }\n        if\
    \ max < num {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if min > num {\n            min = num\n        }\n        if max < num\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ min > num {\n            min = num\n        }\n        if max < num {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpxu1g6xjo.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpxu1g6xjo.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpxu1g6xjo.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpxu1g6xjo.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        }\n        if num == max {\n      \
    \      result.insert(num, num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpvlrtipwx.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpvlrtipwx.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[(index\
    \ + 1) % result.count]\n        result[index] = min\n        result[(index + 1)\
    \ % result.count] = max\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp043t1q5r/tmp043t1q5r.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86c4301c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86c3ff8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86c3ff8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86c3ff77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp043t1q5r                        0x000055af304cf664 <unavailable> + 5732

    5    libc.so.6                          0x00002b86c44ed460 __libc_start_main +
    245

    6    tmp043t1q5r                        0x000055af304cf259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[index\
    \ + 1]\n        if min > max {\n            let temp = min\n            min =\
    \ max\n            max = temp\n        }\n        if min == max {\n          \
    \  result[index] = min\n            continue\n        }\n        let middle =\
    \ min + ((max - min) / 2)\n        if middle == max {\n            result[index]\
    \ = middle\n            continue\n        }\n        if middle > max {\n     \
    \       result[index] = middle\n            continue\n        }\n        if middle\
    \ < min {\n            result[index] = middle\n            continue\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp1ppq_7mg.swift:19:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = max\n            ^~~\n/tmp/tmp1ppq_7mg.swift:15:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let min = result[index]\n\
    \        ^~~\n        var\n/tmp/tmp1ppq_7mg.swift:20:13: error: cannot assign\
    \ to value: 'max' is a 'let' constant\n            max = temp\n            ^~~\n\
    /tmp/tmp1ppq_7mg.swift:16:9: note: change 'let' to 'var' to make it mutable\n\
    \        let max = result[index + 1]\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ min)\n        }\n        if x == max {\n            result.insert(x, max)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpsj8n1ahw.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, min)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpsj8n1ahw.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            result.append(num)\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp3qzxc87y.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmp3qzxc87y.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmp3qzxc87y.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n\n    var min: Int = 0\n    var max: Int = 0\n    var minIndex:\
    \ Int = 0\n    var maxIndex: Int = 0\n\n    for index in 0..<lst.count {\n   \
    \     if min > lst[index] {\n            min = lst[index]\n            minIndex\
    \ = index\n        }\n\n        if max < lst[index] {\n            max = lst[index]\n\
    \            maxIndex = index\n        }\n    }\n\n    var result: [Int] = []\n\
    \    for index in minIndex..<maxIndex {\n        result.append(lst[index])\n \
    \   }\n\n    for index in maxIndex..<lst.count {\n        result.append(lst[index])\n\
    \    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpcu8vbolp/tmpcu8vbolp.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d074cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d071c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d071c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d071c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcu8vbolp                        0x0000564bc0c2e664 <unavailable> + 5732

    5    libc.so.6                          0x00002b6d076bb460 __libc_start_main +
    245

    6    tmpcu8vbolp                        0x0000564bc0c2e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min = lst[0]\n    var max = lst[0]\n    for el in lst {\n        if el < min\
    \ {\n            min = el\n        }\n        if el > max {\n            max =\
    \ el\n        }\n    }\n    for el in lst {\n        if el < min {\n         \
    \   min = el\n        }\n        if el > max {\n            max = el\n       \
    \ }\n    }\n    for el in lst {\n        if el < min {\n            min = el\n\
    \        }\n        if el > max {\n            max = el\n        }\n    }\n  \
    \  for el in lst {\n        if el < min {\n            min = el\n        }\n \
    \       if el > max {\n            max = el\n        }\n    }\n    for el in lst\
    \ {\n        if el < min {\n            min = el\n        }\n        if el > max\
    \ {\n            max = el\n        }\n    }\n    for el in lst {\n        if el\
    \ < min {\n            min = el\n        }\n        if el > max {\n          \
    \  max = el\n        }\n    }\n    for el in lst {\n        if el < min {\n  \
    \          min = el\n        }\n        if el > max {\n            max = el\n\
    \        }\n    }\n    for el in lst {\n        if el < min {\n            min\
    \ = el\n        }\n        if el > max {\n            max = el\n        }\n  \
    \  }\n    for el in lst {\n        if el < min {\n            min = el\n     \
    \   }\n        if el > max {\n            max = el\n        }\n    }\n    for\
    \ el in lst {\n        if el < min {\n            min = el\n        }\n      \
    \  if el > max {\n            max = el\n        }\n    }\n    for el in lst {\n\
    \        if el < min {\n            min = el\n        }\n        if el > max {\n\
    \            max = el\n        }\n    }\n    for el in lst {\n        if el <\
    \ min {\n            min = el\n        }\n        if el > max {\n            max\
    \ = el\n        }\n    }\n    for el in lst {\n        if el < min {\n       \
    \     min = el\n        }\n        if el > max {\n            max = el\n     \
    \   }\n    }\n    for el in lst {\n        if el < min {\n            min = el\n\
    \        }\n        if el > max {\n            max = el\n        }\n    }\n  \
    \  for el in lst {\n        if el < min {\n            min = el\n        }\n \
    \       if el > max {\n            max = el\n        }\n    }\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp9ws6dvwi.swift:13:9: warning: initialization of variable 'result'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var result = [Int]()\n    ~~~~^~~~~~\n    _\n/tmp/tmp9ws6dvwi.swift:137:1:\
    \ error: missing return in global function expected to return '[Int]'\n}\n^\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if min > num {\n            min = num\n        }\n        if\
    \ max < num {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if min > num {\n            min = num\n        }\n        if max < num\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ min > num {\n            min = num\n        }\n        if max < num {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpxu1g6xjo.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpxu1g6xjo.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpxu1g6xjo.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpxu1g6xjo.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        } else if value\
    \ > maxValue {\n            maxValue = value\n        }\n    }\n    for value\
    \ in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        } else {\n            result.insert(value, value)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpao539ejf.swift:25:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpao539ejf.swift:27:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmpao539ejf.swift:29:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(value,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var min: Int = 0\n    var max: Int = 0\n    var minIndex:\
    \ Int = 0\n    var maxIndex: Int = 0\n    for index in 0..<lst.count {\n     \
    \   if min > lst[index] {\n            min = lst[index]\n            minIndex\
    \ = index\n        }\n        if max < lst[index] {\n            max = lst[index]\n\
    \            maxIndex = index\n        }\n    }\n    var result: [Int] = []\n\
    \    for index in minIndex..<maxIndex {\n        result.append(lst[index])\n \
    \   }\n    for index in maxIndex..<lst.count {\n        result.append(lst[index])\n\
    \    }\n    for index in minIndex..<lst.count {\n        result.append(lst[index])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmplcetgddi/tmplcetgddi.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61709aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61706a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61706a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61706a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplcetgddi                        0x00005615b785d664 <unavailable> + 5732

    5    libc.so.6                          0x00002b6170b9a460 __libc_start_main +
    245

    6    tmplcetgddi                        0x00005615b785d259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min = lst[0]\n    var max = lst[0]\n    for el in lst {\n        if el < min\
    \ {\n            min = el\n        }\n        if el > max {\n            max =\
    \ el\n        }\n    }\n    for el in lst {\n        if el == min {\n        \
    \    result.insert(el, max)\n        } else {\n            result.insert(el, min)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpx_i0j39l.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(el, max)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpx_i0j39l.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(el,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int? = nil\n    var max: Int? = nil\n    for num in lst {\n        if min\
    \ == nil || num < min {\n            min = num\n        }\n        if max == nil\
    \ || num > max {\n            max = num\n        }\n    }\n    if min == nil {\n\
    \        return lst\n    }\n    if max == nil {\n        return lst\n    }\n \
    \   for num in lst {\n        if num == min {\n            result.insert(num,\
    \ 0)\n        }\n        if num == max {\n            result.insert(num, result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpcuvr391y.swift:17:32: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if min == nil || num < min {\n\
    \                               ^\n/tmp/tmpcuvr391y.swift:17:32: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     if min == nil || num < min {\n                               ^\n       \
    \                            ?? <#default value#>\n/tmp/tmpcuvr391y.swift:17:32:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if min == nil || num < min {\n                              \
    \ ^\n                                  !\n/tmp/tmpcuvr391y.swift:20:32: error:\
    \ value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n \
    \       if max == nil || num > max {\n                               ^\n/tmp/tmpcuvr391y.swift:20:32:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if max == nil || num > max {\n                              \
    \ ^\n                                   ?? <#default value#>\n/tmp/tmpcuvr391y.swift:20:32:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if max == nil || num > max {\n                              \
    \ ^\n                                  !\n/tmp/tmpcuvr391y.swift:32:20: error:\
    \ no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ 0)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpcuvr391y.swift:35:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(num, result.count - 1)\n\
    \            "
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var result = [Int]()\n    var min = lst[0]\n    var\
    \ max = lst[0]\n    for el in lst {\n        if el < min {\n            min =\
    \ el\n        }\n        if el > max {\n            max = el\n        }\n    }\n\
    \    for el in lst {\n        if el == min {\n            result.insert(el, min)\n\
    \        }\n        if el == max {\n            result.insert(el, max)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp84hxla_0.swift:29:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(el, min)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp84hxla_0.swift:32:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(el,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n        if max < num {\n            result.insert(num,\
    \ num)\n        }\n    }\n    for num in lst {\n        if min > num {\n     \
    \       min = num\n        }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpiyuqrcpg.swift:155:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpiyuqrcpg.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpiyuqrcpg.swift:29:20: error: no\
    \ exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpiyuqrcpg.swift:37:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(num, num)\n         \
    \          ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpiyuqrcpg.swift:45:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @i"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count < 2 {\n      \
    \  return lst\n    }\n\n    var min: Int\n    var max: Int\n    var i: Int\n \
    \   var j: Int\n    var k: Int\n    var temp: Int\n\n    for i = 0, j = 0, k =\
    \ lst.count - 1; i < k; i, j, k = i+1, j+1, k-1 {\n        if lst[i] < lst[j]\
    \ {\n            temp = lst[i]\n            lst[i] = lst[j]\n            lst[j]\
    \ = temp\n        }\n    }\n\n    min = lst[0]\n    max = lst[lst.count - 1]\n\
    \n    for i = 1, j = lst.count - 2; i < j; i, j = i+1, j-1 {\n        if lst[i]\
    \ > lst[j] {\n            temp = lst[i]\n            lst[i] = lst[j]\n       \
    \     lst[j] = temp\n        }\n    }\n\n    return lst\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp8b6johon.swift:24:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 0, j = 0, k = lst.count - 1; i < k; i, j, k = i+1, j+1,\
    \ k-1 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp8b6johon.swift:35:5: error: C-style for statement has been removed in\
    \ Swift 3\n    for i = 1, j = lst.count - 2; i < j; i, j = i+1, j-1 {\n    ^ \
    \  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            minValue = value\n\
    \        }\n        if value > maxValue {\n            maxValue = value\n    \
    \    }\n    }\n    for value in lst {\n        if value < minValue {\n       \
    \     minValue = value\n        }\n        if value > maxValue {\n           \
    \ maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp13h0pj8l.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmp13h0pj8l.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmp13h0pj8l.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp13h0pj8l.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = Int.max\n    var max: Int = Int.min\n    for value in lst {\n   \
    \     if value < min {\n            min = value\n        }\n        if value >\
    \ max {\n            max = value\n        }\n    }\n    for value in lst {\n \
    \       if value < min {\n            min = value\n        }\n        if value\
    \ > max {\n            max = value\n        }\n    }\n    for value in lst {\n\
    \        if value < min {\n            min = value\n        }\n        if value\
    \ > max {\n            max = value\n        }\n    }\n    for value in lst {\n\
    \        if value < min {\n            min = value\n        }\n        if value\
    \ > max {\n            max = value\n        }\n    }\n    for value in lst {\n\
    \        if value < min {\n            min = value\n        }\n        if value\
    \ > max {\n            max = value\n        }\n    }\n    for value in lst {\n\
    \        if value < min {\n            min = value\n        }\n        if value\
    \ > max {\n            max = value\n        }\n    }\n    for value in lst {\n\
    \        if value < min {\n            min = value\n        }\n        if value\
    \ > max {\n            max = value\n        }\n    }\n    for value in lst {\n\
    \        if value < min {\n            min = value\n        }\n        if value\
    \ > max {\n            max = value\n        }\n    }\n    for value in lst {\n\
    \        if value < min {\n            min = value\n        }\n        if value\
    \ > max {\n            max = value\n        }\n    }\n    for value in lst {\n\
    \        if value < min {\n            min = value\n        }\n        if value\
    \ > max {\n            max = value\n        }\n    }\n    for value in lst {\n\
    \        if value < min {\n            min = value\n        }\n        if value\
    \ > max {\n            max = value\n        }\n    }\n    for value in lst {\n\
    \        if value < min {\n            min = value\n        }\n        if value\
    \ > max {\n            max = value\n        }\n    }\n    for value in lst {\n\
    \        if value < min {\n            min = value\n        }\n        if value\
    \ > max {\n            max = value\n        }\n    }\n    for value in lst {\n\
    \        if value < min {\n            min = value\n        }\n        if value\
    \ > max {\n            max = value\n        }\n    }\n    for value in lst {\n\
    \        if value < min {\n            min = value\n        }\n        if value\
    \ > max {\n            max = value\n        }\n    }\n    for value in lst {\n\
    \        if value < min {\n            min = value\n        }\n        if value\
    \ > max {\n            max = value\n        }\n    }\n    for value in lst {\n\
    \        if \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp0z9j6e2a.swift:145:11: error: expected expression, var, or let\
    \ in 'if' condition\n        if \n          ^\n/tmp/tmp0z9j6e2a.swift:169:53:\
    \ error: expected '}' at end of brace statement\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])\n                                                   \
    \ ^\n/tmp/tmp0z9j6e2a.swift:12:45: note: to match this opening '{'\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n                                            ^\n/tmp/tmp0z9j6e2a.swift:149:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return []\n    }\n    var min: Int = 0\n    var max: Int = lst.count - 1\n\
    \    var swapped: Bool = false\n    var result: [Int] = []\n    while !swapped\
    \ {\n        swapped = false\n        if min > max {\n            break\n    \
    \    }\n        for i in min..<max {\n            if lst[i] > lst[min] {\n   \
    \             swap(lst[min], lst[i])\n                swapped = true\n       \
    \     }\n        }\n        min = min + 1\n        max = max - 2\n    }\n    for\
    \ i in min..<max {\n        result.append(lst[i])\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpow3yzltg.swift:27:17: error: cannot pass immutable value as inout\
    \ argument: 'lst' is a 'let' constant\n                swap(lst[min], lst[i])\n\
    \                ^              ~~~\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        }\n        if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpv7et8n4v.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpv7et8n4v.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[(index\
    \ + 1) % result.count]\n        result[index] = min\n        result[(index + 1)\
    \ % result.count] = max\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp043t1q5r/tmp043t1q5r.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86c4301c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86c3ff8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86c3ff8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86c3ff77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp043t1q5r                        0x000055af304cf664 <unavailable> + 5732

    5    libc.so.6                          0x00002b86c44ed460 __libc_start_main +
    245

    6    tmp043t1q5r                        0x000055af304cf259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825054
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var result = lst\n    var min = lst[0]\n    var max\
    \ = lst[0]\n    for v in lst {\n        if v < min {\n            min = v\n  \
    \      }\n        if v > max {\n            max = v\n        }\n    }\n    for\
    \ v in lst {\n        if v == min {\n            result.insert(v, at: 0)\n   \
    \     }\n        if v == max {\n            result.insert(v, at: result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp33d2zzhk/tmp33d2zzhk.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae79be39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae79bb30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae79bb30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae79bb2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp33d2zzhk                        0x000055c26c0b1644 <unavailable> + 5700

    5    libc.so.6                          0x00002ae79c025460 __libc_start_main +
    245

    6    tmp33d2zzhk                        0x000055c26c0b1239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return []\n    }\n    var result = [Int]()\n    var minValue = lst[0]\n  \
    \  var maxValue = lst[0]\n    for value in lst {\n        if value < minValue\
    \ {\n            minValue = value\n        }\n        if value > maxValue {\n\
    \            maxValue = value\n        }\n    }\n    for value in lst {\n    \
    \    if value < minValue {\n            result.insert(minValue, value)\n     \
    \   }\n        if value > maxValue {\n            result.insert(maxValue, value)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpgz1zzsz8.swift:29:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpgz1zzsz8.swift:32:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count < 2 {\n      \
    \  return lst\n    }\n\n    var min: Int? = nil\n    var max: Int? = nil\n   \
    \ for x in lst {\n        if min == nil || x < min {\n            min = x\n  \
    \      }\n        if max == nil || x > max {\n            max = x\n        }\n\
    \    }\n\n    var result: [Int] = []\n    if min != nil {\n        result.insert(min,\
    \ 0)\n    }\n    if max != nil {\n        result.insert(max, lst.count - 1)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpukdpl3s5.swift:20:30: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if min == nil || x < min {\n\
    \                             ^\n/tmp/tmpukdpl3s5.swift:20:30: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     if min == nil || x < min {\n                             ^\n           \
    \                      ?? <#default value#>\n/tmp/tmpukdpl3s5.swift:20:30: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \        if min == nil || x < min {\n                             ^\n        \
    \                        !\n/tmp/tmpukdpl3s5.swift:23:30: error: value of optional\
    \ type 'Int?' must be unwrapped to a value of type 'Int'\n        if max == nil\
    \ || x > max {\n                             ^\n/tmp/tmpukdpl3s5.swift:23:30:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if max == nil || x > max {\n                             ^\n\
    \                                 ?? <#default value#>\n/tmp/tmpukdpl3s5.swift:23:30:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if max == nil || x > max {\n                             ^\n\
    \                                !\n/tmp/tmpukdpl3s5.swift:30:16: error: no exact\
    \ matches in call to instance method 'insert'\n        result.insert(min, 0)\n\
    \               ^\n/tmp/tmpukdpl3s5.swift:30:16: note: candidate has partially\
    \ matching parameter list (__owned Int, at: Int)\n        result.insert(min, 0)\n\
    \               ^\n/tmp/tmpukdpl3s5.swift:30:16: note: candidate has partially\
    \ matching parameter list (__owned Int, at: Array<Int>.Index)\n        result.insert(min,\
    \ 0)\n               ^\n/tmp/tmpukdpl3s5.swift:33:16: error: no exact matches\
    \ in call to instance method 'insert'\n        result.insert(max, lst.count -\
    \ 1)\n               ^\n/tmp/tmpukdpl3s5.swift:33:16: note: candidate has partially\
    \ matching parameter list (__owned Int, at: Int)\n        result.insert(max, lst.count\
    \ - 1)\n               ^\n/tmp/tmpukdpl3s5.swif"
  stdout: ''
  timestamp: 1659825054
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in stride(from: 0, to: result.count, by: -1) {\n        let min = result[index]\n\
    \        let max = result[index + 1]\n        let temp = result[index]\n     \
    \   result[index] = max\n        result[index + 1] = min\n        result[index]\
    \ = temp\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpkro_jftu/tmpkro_jftu.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c34e18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c34b0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c34b0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c34b0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkro_jftu                        0x0000557448b236e4 <unavailable> + 5860

    5    libc.so.6                          0x00002b0c35004460 __libc_start_main +
    245

    6    tmpkro_jftu                        0x0000557448b232d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int? = nil\n    for v in lst {\n        if min == nil || v < min {\n  \
    \          min = v\n        }\n    }\n    if min == nil {\n        return result\n\
    \    }\n    for v in lst {\n        if v == min {\n            result.insert(v,\
    \ min)\n        }\n    }\n    for v in lst {\n        if v == min {\n        \
    \    result.insert(v, min)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpj51rj_i4.swift:16:30: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if min == nil || v < min {\n\
    \                             ^\n/tmp/tmpj51rj_i4.swift:16:30: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     if min == nil || v < min {\n                             ^\n           \
    \                      ?? <#default value#>\n/tmp/tmpj51rj_i4.swift:16:30: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \        if min == nil || v < min {\n                             ^\n        \
    \                        !\n/tmp/tmpj51rj_i4.swift:25:20: error: no exact matches\
    \ in call to instance method 'insert'\n            result.insert(v, min)\n   \
    \                ^\n/tmp/tmpj51rj_i4.swift:25:20: note: candidate has partially\
    \ matching parameter list (__owned Int, at: Int)\n            result.insert(v,\
    \ min)\n                   ^\n/tmp/tmpj51rj_i4.swift:25:20: note: candidate has\
    \ partially matching parameter list (__owned Int, at: Array<Int>.Index)\n    \
    \        result.insert(v, min)\n                   ^\n/tmp/tmpj51rj_i4.swift:30:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(v,\
    \ min)\n                   ^\n/tmp/tmpj51rj_i4.swift:30:20: note: candidate has\
    \ partially matching parameter list (__owned Int, at: Int)\n            result.insert(v,\
    \ min)\n                   ^\n/tmp/tmpj51rj_i4.swift:30:20: note: candidate has\
    \ partially matching parameter list (__owned Int, at: Array<Int>.Index)\n    \
    \        result.insert(v, min)\n                   ^\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = Int.max\n    var max: Int = Int.min\n    for element in lst {\n \
    \       if element < min {\n            min = element\n        }\n        if element\
    \ > max {\n            max = element\n        }\n    }\n    for element in lst\
    \ {\n        if element == min {\n            result.insert(element, min)\n  \
    \      }\n        if element == max {\n            result.insert(element, max)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp48gkh8hz.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, min)\n                 \
    \  ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp48gkh8hz.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            result.append(num)\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            result.append(num)\n \
    \       }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp3qzxc87y.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmp3qzxc87y.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmp3qzxc87y.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = Int.max\n    var max: Int = Int.min\n    for element in lst {\n \
    \       if element < min {\n            min = element\n        }\n        if element\
    \ > max {\n            max = element\n        }\n    }\n    for element in lst\
    \ {\n        if element == min {\n            result.insert(element, min)\n  \
    \      }\n        if element == max {\n            result.insert(element, max)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp48gkh8hz.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, min)\n                 \
    \  ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp48gkh8hz.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        }\n        if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpv7et8n4v.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpv7et8n4v.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num < min {\n    \
    \        result.insert(min, num)\n        } else if num > max {\n            result.insert(max,\
    \ num)\n        } else {\n            result.insert(num, num)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpy878pb_2.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(min, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpy878pb_2.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(max,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpy878pb_2.swift:30:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(num, num)\n         \
    \          ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        } else if value\
    \ > maxValue {\n            maxValue = value\n        }\n    }\n    for value\
    \ in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        } else {\n            result.insert(value, value)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpao539ejf.swift:25:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpao539ejf.swift:27:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmpao539ejf.swift:29:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(value,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        } else {\n            result.insert(value, value)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpzhngsmm8.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpzhngsmm8.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmpzhngsmm8.swift:30:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(value,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in stride(from: 0, to: result.count, by: 1) {\n        let minIndex = index\n\
    \        let maxIndex = index\n        while minIndex < maxIndex {\n         \
    \   let minValue = result[minIndex]\n            let maxValue = result[maxIndex]\n\
    \            if minValue > maxValue {\n                let tmp = minValue\n  \
    \              minValue = maxValue\n                maxValue = tmp\n         \
    \   }\n            if minValue == maxValue {\n                minIndex += 1\n\
    \                maxIndex += 1\n            } else {\n                let tmp\
    \ = minIndex\n                minIndex = maxIndex\n                maxIndex =\
    \ tmp\n            }\n        }\n        result[minIndex] = result[index]\n  \
    \      result[index] = minValue\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpd35ilsee.swift:22:17: error: cannot assign to value: 'minValue'\
    \ is a 'let' constant\n                minValue = maxValue\n                ^~~~~~~~\n\
    /tmp/tmpd35ilsee.swift:18:13: note: change 'let' to 'var' to make it mutable\n\
    \            let minValue = result[minIndex]\n            ^~~\n            var\n\
    /tmp/tmpd35ilsee.swift:23:17: error: cannot assign to value: 'maxValue' is a 'let'\
    \ constant\n                maxValue = tmp\n                ^~~~~~~~\n/tmp/tmpd35ilsee.swift:19:13:\
    \ note: change 'let' to 'var' to make it mutable\n            let maxValue = result[maxIndex]\n\
    \            ^~~\n            var\n/tmp/tmpd35ilsee.swift:26:26: error: left side\
    \ of mutating operator isn't mutable: 'minIndex' is a 'let' constant\n       \
    \         minIndex += 1\n                ~~~~~~~~ ^\n/tmp/tmpd35ilsee.swift:15:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let minIndex = index\n\
    \        ^~~\n        var\n/tmp/tmpd35ilsee.swift:27:26: error: left side of mutating\
    \ operator isn't mutable: 'maxIndex' is a 'let' constant\n                maxIndex\
    \ += 1\n                ~~~~~~~~ ^\n/tmp/tmpd35ilsee.swift:16:9: note: change\
    \ 'let' to 'var' to make it mutable\n        let maxIndex = index\n        ^~~\n\
    \        var\n/tmp/tmpd35ilsee.swift:30:17: error: cannot assign to value: 'minIndex'\
    \ is a 'let' constant\n                minIndex = maxIndex\n                ^~~~~~~~\n\
    /tmp/tmpd35ilsee.swift:15:9: note: change 'let' to 'var' to make it mutable\n\
    \        let minIndex = index\n        ^~~\n        var\n/tmp/tmpd35ilsee.swift:31:17:\
    \ error: cannot assign to value: 'maxIndex' is a 'let' constant\n            \
    \    maxIndex = tmp\n                ^~~~~~~~\n/tmp/tmpd35ilsee.swift:16:9: note:\
    \ change 'let' to 'var' to make it mutable\n        let maxIndex = index\n   \
    \     ^~~\n        var\n/tmp/tmpd35ilsee.swift:35:25: error: cannot find 'minValue'\
    \ in scope\n        result[index] = minValue\n                        ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            minValue = value\n\
    \        }\n        if value > maxValue {\n            maxValue = value\n    \
    \    }\n    }\n    for value in lst {\n        if value < minValue {\n       \
    \     minValue = value\n        }\n        if value > maxValue {\n           \
    \ maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp13h0pj8l.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmp13h0pj8l.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmp13h0pj8l.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp13h0pj8l.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        }\n        if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpv7et8n4v.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpv7et8n4v.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min = lst[0]\n    var max = lst[0]\n    for element in lst {\n        if element\
    \ < min {\n            min = element\n        }\n        if element > max {\n\
    \            max = element\n        }\n    }\n    for element in lst {\n     \
    \   if element == min {\n            result.insert(element, 0)\n        }\n  \
    \      if element == max {\n            result.insert(element, result.count -\
    \ 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmppapt0jr2.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, 0)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmppapt0jr2.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ result.count - 1)\n                   ^\nSwift.Array:11:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Element, at i: Int)\n           \
    \                         ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int? = nil\n    for value in lst {\n        if min == nil || value < min\
    \ {\n            min = value\n        } else {\n            result.append(min)\n\
    \            min = value\n        }\n    }\n    if min != nil {\n        result.append(min)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpn40uqib4.swift:16:34: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if min == nil || value < min\
    \ {\n                                 ^\n/tmp/tmpn40uqib4.swift:16:34: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     if min == nil || value < min {\n                                 ^\n   \
    \                                  ?? <#default value#>\n/tmp/tmpn40uqib4.swift:16:34:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if min == nil || value < min {\n                            \
    \     ^\n                                    !\n/tmp/tmpn40uqib4.swift:19:27:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \            result.append(min)\n                          ^\n/tmp/tmpn40uqib4.swift:19:27:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            result.append(min)\n                          ^\n       \
    \                       ?? <#default value#>\n/tmp/tmpn40uqib4.swift:19:27: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \            result.append(min)\n                          ^\n               \
    \              !\n/tmp/tmpn40uqib4.swift:24:23: error: value of optional type\
    \ 'Int?' must be unwrapped to a value of type 'Int'\n        result.append(min)\n\
    \                      ^\n/tmp/tmpn40uqib4.swift:24:23: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n        result.append(min)\n\
    \                      ^\n                          ?? <#default value#>\n/tmp/tmpn40uqib4.swift:24:23:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        result.append(min)\n                      ^\n               \
    \          !\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[(index\
    \ + 1) % result.count]\n        result[index] = min\n        result[(index + 1)\
    \ % result.count] = max\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp043t1q5r/tmp043t1q5r.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86c4301c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86c3ff8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86c3ff8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86c3ff77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp043t1q5r                        0x000055af304cf664 <unavailable> + 5732

    5    libc.so.6                          0x00002b86c44ed460 __libc_start_main +
    245

    6    tmp043t1q5r                        0x000055af304cf259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ min)\n        }\n        if x == max {\n            result.insert(x, max)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpsj8n1ahw.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, min)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpsj8n1ahw.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for element in lst {\n        if element\
    \ > max {\n            max = element\n        }\n        if element < min {\n\
    \            min = element\n        }\n    }\n    for element in lst {\n     \
    \   if element > max {\n            max = element\n        }\n        if element\
    \ < min {\n            min = element\n        }\n    }\n    for element in lst\
    \ {\n        if element > max {\n            max = element\n        }\n      \
    \  if element < min {\n            min = element\n        }\n    }\n    for element\
    \ in lst {\n        if element > max {\n            max = element\n        }\n\
    \        if element < min {\n            min = element\n        }\n    }\n   \
    \ for element in lst {\n        if element > max {\n            max = element\n\
    \        }\n        if element < min {\n            min = element\n        }\n\
    \    }\n    for element in lst {\n        if element > max {\n            max\
    \ = element\n        }\n        if element < min {\n            min = element\n\
    \        }\n    }\n    for element in lst {\n        if element > max {\n    \
    \        max = element\n        }\n        if element < min {\n            min\
    \ = element\n        }\n    }\n    for element in lst {\n        if element >\
    \ max {\n            max = element\n        }\n        if element < min {\n  \
    \          min = element\n        }\n    }\n    for element in lst {\n       \
    \ if element > max {\n            max = element\n        }\n        if element\
    \ < min {\n            min = element\n        }\n    }\n    for element in lst\
    \ {\n        if element > max {\n            max = element\n        }\n      \
    \  if element < min {\n            min = element\n        }\n    }\n    for element\
    \ in lst {\n        if element > max {\n            max = element\n        }\n\
    \        if element < min {\n            min = element\n        }\n    }\n   \
    \ for element in lst {\n        if element > max {\n            max = element\n\
    \        }\n        if element < min {\n            min = element\n        }\n\
    \    }\n    for element in lst {\n        if element > max {\n            max\
    \ = element\n        }\n        if element < min {\n            min = element\n\
    \        }\n    }\n    for element in lst {\n        if element > max {\n    \
    \        max = element\n        }\n        if element < min {\n            min\
    \ = element\n        }\n    }\n    for element in lst {\n        if element >\
    \ max {\n            max = element\n        }\n        if element < min {\n  \
    \          min = element\n        }\n    }\n    for element in lst {\n       \
    \ if element > max {\n            \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpoy9_pfbo.swift:162:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpoy9_pfbo.swift:136:24: note: to match\
    \ this opening '{'\n    for element in lst {\n                       ^\n/tmp/tmpoy9_pfbo.swift:162:53:\
    \ error: expected '}' at end of brace statement\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])\n                                                   \
    \ ^\n/tmp/tmpoy9_pfbo.swift:12:45: note: to match this opening '{'\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n                                            ^\n/tmp/tmpoy9_pfbo.swift:142:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpoy9_pfbo.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else {\n            result.insert(maxValue, value)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpeiwdoqz_.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpeiwdoqz_.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var min: Int = Int.max\n    var max: Int = Int.min\n\
    \    for num in lst {\n        if num < min {\n            min = num\n       \
    \ }\n        if num > max {\n            max = num\n        }\n    }\n    var\
    \ result = [Int]()\n    for num in lst {\n        if num == min {\n          \
    \  result.insert(0, num)\n        }\n        if num == max {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpzs0algn3.swift:29:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(0, num)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for v in lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    for v in lst {\n        if v == min {\n            result.insert(v,\
    \ max)\n        } else {\n            result.insert(v, min)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpe3b9f47q.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(v, max)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpe3b9f47q.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(v,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[index\
    \ + 1]\n        if min > max {\n            let temp = result[index]\n       \
    \     result[index] = result[index + 1]\n            result[index + 1] = temp\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b37181cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3717ec1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3717ec1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3717ec113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3717ec0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3717cc0e83 <unavailable> + 188035

    6    tmp0t_10i0f                        0x000056209ad7d385 <unavailable> + 9093

    7    tmp0t_10i0f                        0x000056209ad7c57c <unavailable> + 5500

    8    libc.so.6                          0x00002b37183b6460 __libc_start_main +
    245

    9    tmp0t_10i0f                        0x000056209ad7c259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for element in lst {\n        if element\
    \ < min {\n            min = element\n        }\n        if element > max {\n\
    \            max = element\n        }\n    }\n    for element in lst {\n     \
    \   if element == min {\n            result.insert(element, max)\n        }\n\
    \        if element == max {\n            result.insert(element, min)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmputtpx6sv.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, max)\n                 \
    \  ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmputtpx6sv.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[index\
    \ + 1]\n        if min > max {\n            let temp = min\n            min =\
    \ max\n            max = temp\n        }\n        result[index] = min\n      \
    \  result[index + 1] = max\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpwamkzb59.swift:19:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = max\n            ^~~\n/tmp/tmpwamkzb59.swift:15:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let min = result[index]\n\
    \        ^~~\n        var\n/tmp/tmpwamkzb59.swift:20:13: error: cannot assign\
    \ to value: 'max' is a 'let' constant\n            max = temp\n            ^~~\n\
    /tmp/tmpwamkzb59.swift:16:9: note: change 'let' to 'var' to make it mutable\n\
    \        let max = result[index + 1]\n        ^~~\n        var\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for v in lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    for v in lst {\n        if v == min {\n            result.insert(v,\
    \ min)\n        }\n        if v == max {\n            result.insert(v, max)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpsvc8hzsy.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(v, min)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpsvc8hzsy.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(v,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var min: Int?\n    var max: Int?\n    for element in\
    \ lst {\n        if min == nil {\n            min = element\n        } else {\n\
    \            if element < min {\n                min = element\n            }\n\
    \        }\n        if max == nil {\n            max = element\n        } else\
    \ {\n            if element > max {\n                max = element\n         \
    \   }\n        }\n    }\n    if min == nil {\n        return lst\n    }\n    if\
    \ max == nil {\n        return lst\n    }\n    var result = [Int]()\n    for element\
    \ in lst {\n        if element == min {\n            result.insert(0, element)\n\
    \        }\n        if element == max {\n            result.append(element)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpopa1rzx1.swift:22:26: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            if element < min {\n    \
    \                     ^\n/tmp/tmpopa1rzx1.swift:22:26: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n            if\
    \ element < min {\n                         ^\n                             ??\
    \ <#default value#>\n/tmp/tmpopa1rzx1.swift:22:26: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n            if element\
    \ < min {\n                         ^\n                            !\n/tmp/tmpopa1rzx1.swift:29:26:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \            if element > max {\n                         ^\n/tmp/tmpopa1rzx1.swift:29:26:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            if element > max {\n                         ^\n        \
    \                     ?? <#default value#>\n/tmp/tmpopa1rzx1.swift:29:26: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \            if element > max {\n                         ^\n                \
    \            !\n/tmp/tmpopa1rzx1.swift:43:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(0, element)\n       \
    \            ^\nSwift.Array:11:37: note: incorrect labels for candidate (have:\
    \ '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[(index\
    \ + 1) % result.count]\n        result[index] = min\n        result[(index + 1)\
    \ % result.count] = max\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp043t1q5r/tmp043t1q5r.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86c4301c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86c3ff8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86c3ff8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86c3ff77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp043t1q5r                        0x000055af304cf664 <unavailable> + 5732

    5    libc.so.6                          0x00002b86c44ed460 __libc_start_main +
    245

    6    tmp043t1q5r                        0x000055af304cf259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n    }\n    for num in\
    \ lst {\n        if min > num {\n            min = num\n        }\n        if\
    \ max < num {\n            max = num\n        }\n    }\n    for num in lst {\n\
    \        if min > num {\n            min = num\n        }\n        if max < num\
    \ {\n            max = num\n        }\n    }\n    for num in lst {\n        if\
    \ min > num {\n            min = num\n        }\n        if max < num {\n    \
    \        max = num\n        }\n    }\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if min > num {\n    \
    \        min = num\n        }\n        if max < num {\n            max = num\n\
    \        }\n    }\n    for num in lst {\n        if min > num {\n            min\
    \ = num\n        }\n        if max < num {\n            max = num\n        }\n\
    \    }\n    for num in lst {\n        if min > num {\n            min = num\n\
    \        }\n        if max < num {\n            max = num\n        }\n    }\n\
    \    for num in lst {\n        if min > num {\n            min = num\n       \
    \ }\n        if max < num {\n            max = num\n        }\n    }\n    for\
    \ num in lst {\n        if min > num {\n            min = num\n        }\n   \
    \     if max < num {\n            max = num\n        }\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpxu1g6xjo.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpxu1g6xjo.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmpxu1g6xjo.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpxu1g6xjo.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int\n    var max: Int\n    for element in lst {\n        if min == nil\
    \ {\n            min = element\n            max = element\n        } else {\n\
    \            if element < min {\n                min = element\n            }\n\
    \            if element > max {\n                max = element\n            }\n\
    \        }\n    }\n    for element in lst {\n        if element == min {\n   \
    \         result.insert(element, max)\n        } else {\n            result.insert(element,\
    \ min)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpayqhiq1y.swift:17:16: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if min == nil {\n        \
    \   ~~~ ^  ~~~\n/tmp/tmpayqhiq1y.swift:31:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(element, max)\n     \
    \              ^\nSwift.Array:11:37: note: incorrect labels for candidate (have:\
    \ '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpayqhiq1y.swift:33:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(element, min)\n     \
    \              ^\nSwift.Array:11:37: note: incorrect labels for candidate (have:\
    \ '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        }\n        if num == max {\n      \
    \      result.insert(num, num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpvlrtipwx.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpvlrtipwx.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        }\n        if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpv7et8n4v.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpv7et8n4v.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var result = [Int]()\n    var min = lst[0]\n    var\
    \ max = lst[0]\n    for v in lst {\n        if v < min {\n            min = v\n\
    \        }\n        if v > max {\n            max = v\n        }\n    }\n    for\
    \ v in lst {\n        if v == min {\n            result.insert(v, min)\n     \
    \   }\n        if v == max {\n            result.insert(v, max)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmptfztlyq1.swift:29:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(v, min)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmptfztlyq1.swift:32:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(v,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = Int.max\n    var max: Int = Int.min\n    for element in lst {\n \
    \       if element < min {\n            min = element\n        }\n        if element\
    \ > max {\n            max = element\n        }\n    }\n    for element in lst\
    \ {\n        if element == min {\n            result.insert(element, min)\n  \
    \      }\n        if element == max {\n            result.insert(element, max)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp48gkh8hz.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, min)\n                 \
    \  ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp48gkh8hz.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min = lst[0]\n    var max = lst[0]\n    for v in lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    for v in lst {\n        if v == min {\n            result.insert(v,\
    \ min)\n        }\n        if v == max {\n            result.insert(v, max)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmppaoh0hzk.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(v, min)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmppaoh0hzk.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(v,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        for index2 in\
    \ index..<result.count {\n            let max = result[index2]\n            if\
    \ max < min {\n                let tmp = result[index]\n                result[index]\
    \ = result[index2]\n                result[index2] = tmp\n            }\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp_zoyyqpb/tmp_zoyyqpb.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abdf21f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abdf1eebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abdf1eeb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abdf1eea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zoyyqpb                        0x000055d5da697664 <unavailable> + 5732

    5    libc.so.6                          0x00002abdf23e0460 __libc_start_main +
    245

    6    tmp_zoyyqpb                        0x000055d5da697259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for element in lst {\n        if element\
    \ < min {\n            min = element\n        }\n        if element > max {\n\
    \            max = element\n        }\n    }\n    for element in lst {\n     \
    \   if element == min {\n            result.insert(element, max)\n        } else\
    \ {\n            result.insert(element, min)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpaprb98e4.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, max)\n                 \
    \  ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpaprb98e4.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int\n    var max: Int\n    for x in lst {\n        if min == nil {\n  \
    \          min = x\n            max = x\n        } else {\n            if x <\
    \ min {\n                min = x\n            }\n            if x > max {\n  \
    \              max = x\n            }\n        }\n    }\n    for x in lst {\n\
    \        if x == min {\n            result.insert(x, 0)\n        }\n        if\
    \ x == max {\n            result.insert(x, result.count - 1)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpqcnwdjri.swift:17:16: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if min == nil {\n        \
    \   ~~~ ^  ~~~\n/tmp/tmpqcnwdjri.swift:31:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(x, 0)\n             \
    \      ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpqcnwdjri.swift:34:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ result.count - 1)\n                   ^\nSwift.Array:11:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Element, at i: Int)\n           \
    \                         ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        } else {\n            result.insert(value, value)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpzhngsmm8.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpzhngsmm8.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmpzhngsmm8.swift:30:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(value,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int\n    var max: Int\n    for x in lst {\n        if min == 0 {\n    \
    \        min = x\n            max = x\n        } else {\n            if x < min\
    \ {\n                min = x\n            }\n            if x > max {\n      \
    \          max = x\n            }\n        }\n    }\n    for x in lst {\n    \
    \    if x == min {\n            result.insert(x, 0)\n        } else {\n      \
    \      result.insert(x, 1)\n        }\n    }\n    for x in lst {\n        if x\
    \ == max {\n            result.insert(x, 0)\n        } else {\n            result.insert(x,\
    \ 2)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpnnpnkxtr.swift:31:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, 0)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpnnpnkxtr.swift:33:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ 1)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpnnpnkxtr.swift:38:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(x, 0)\n             \
    \      ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpnnpnkxtr.swift:40:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ 2)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expec"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var min: Int = 0\n    var max: Int = lst.count - 1\n\
    \    var middle: Int\n    var middle2: Int\n    var middle3: Int\n    var middle4:\
    \ Int\n    var middle5: Int\n    var middle6: Int\n    var middle7: Int\n    var\
    \ middle8: Int\n    var middle9: Int\n    var middle10: Int\n    var middle11:\
    \ Int\n    var middle12: Int\n    var middle13: Int\n    var middle14: Int\n \
    \   var middle15: Int\n    var middle16: Int\n    var middle17: Int\n    var middle18:\
    \ Int\n    var middle19: Int\n    var middle20: Int\n    var middle21: Int\n \
    \   var middle22: Int\n    var middle23: Int\n    var middle24: Int\n    var middle25:\
    \ Int\n    var middle26: Int\n    var middle27: Int\n    var middle28: Int\n \
    \   var middle29: Int\n    var middle30: Int\n    var middle31: Int\n    var middle32:\
    \ Int\n    var middle33: Int\n    var middle34: Int\n    var middle35: Int\n \
    \   var middle36: Int\n    var middle37: Int\n    var middle38: Int\n    var middle39:\
    \ Int\n    var middle40: Int\n    var middle41: Int\n    var middle42: Int\n \
    \   var middle43: Int\n    var middle44: Int\n    var middle45: Int\n    var middle46:\
    \ Int\n    var middle47: Int\n    var middle48: Int\n    var middle49: Int\n \
    \   var middle50: Int\n    var middle51: Int\n    var middle52: Int\n    var middle53:\
    \ Int\n    var middle54: Int\n    var middle55: Int\n    var middle56: Int\n \
    \   var middle57: Int\n    var middle58: Int\n    var middle59: Int\n    var middle60:\
    \ Int\n    var middle61: Int\n    var middle62: Int\n    var middle63: Int\n \
    \   var middle64: Int\n    var middle65: Int\n    var middle66: Int\n    var middle67:\
    \ Int\n    var middle68: Int\n    var middle69: Int\n    var middle70: Int\n \
    \   var middle71: Int\n    var middle72: Int\n    var middle73: Int\n    var middle74:\
    \ Int\n    var middle75: Int\n    var middle76: Int\n    var middle77: Int\n \
    \   var middle78: Int\n    var middle79: Int\n    var middle80: Int\n    var middle81:\
    \ Int\n    var middle82: \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpgraazes7.swift:99:18: error: expected type\n    var middle82: \n\
    \                 ^\n                  <#type#>\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else {\n            result.insert(value, maxValue)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpz4azctr1.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpz4azctr1.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(value,\
    \ maxValue)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmptc_x33pu.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, 0)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmptc_x33pu.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ result.count - 1)\n                   ^\nSwift.Array:11:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Element, at i: Int)\n           \
    \                         ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let min = result[index]\n        let max = result[index\
    \ + 1]\n        if min > max {\n            let temp = result[index]\n       \
    \     result[index] = result[index + 1]\n            result[index + 1] = temp\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b37181cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3717ec1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3717ec1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3717ec113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3717ec0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3717cc0e83 <unavailable> + 188035

    6    tmp0t_10i0f                        0x000056209ad7d385 <unavailable> + 9093

    7    tmp0t_10i0f                        0x000056209ad7c57c <unavailable> + 5500

    8    libc.so.6                          0x00002b37183b6460 __libc_start_main +
    245

    9    tmp0t_10i0f                        0x000056209ad7c259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in 0..<result.count {\n        let minIndex = index\n        let maxIndex =\
    \ index\n        for index2 in minIndex..<result.count {\n            if result[index2]\
    \ < result[minIndex] {\n                minIndex = index2\n            }\n   \
    \         if result[index2] > result[maxIndex] {\n                maxIndex = index2\n\
    \            }\n        }\n        let tmp = result[index]\n        result[index]\
    \ = result[minIndex]\n        result[minIndex] = tmp\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpu1ts_3f8.swift:19:17: error: cannot assign to value: 'minIndex'\
    \ is a 'let' constant\n                minIndex = index2\n                ^~~~~~~~\n\
    /tmp/tmpu1ts_3f8.swift:15:9: note: change 'let' to 'var' to make it mutable\n\
    \        let minIndex = index\n        ^~~\n        var\n/tmp/tmpu1ts_3f8.swift:22:17:\
    \ error: cannot assign to value: 'maxIndex' is a 'let' constant\n            \
    \    maxIndex = index2\n                ^~~~~~~~\n/tmp/tmpu1ts_3f8.swift:16:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let maxIndex = index\n\
    \        ^~~\n        var\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        } else if num == max {\n          \
    \  result.insert(num, num)\n        } else {\n            result.insert(num, num)\n\
    \            result.insert(num, num)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp4xu1t891.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp4xu1t891.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmp4xu1t891.swift:30:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(num, num)\n         \
    \          ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp4xu1t891.swift:31:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have:"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var result = [Int]()\n    var min = lst[0]\n    var\
    \ max = lst[0]\n    for value in lst {\n        if value < min {\n           \
    \ min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in lst {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in lst {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in lst {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in lst {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in lst {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in lst {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in lst {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in lst {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in lst {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in lst {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in lst {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in lst {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in lst {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in lst {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in lst {\n        if value < min {\n        \
    \    min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    for value in lst \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpuyios91_.swift:147:21: error: expected '{' to start the body of\
    \ for-each loop\n    for value in lst \n                    ^\n/tmp/tmpuyios91_.swift:16:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmpuyios91_.swift:147:9: warning: immutable value 'value' was never\
    \ used; consider replacing with '_' or removing it\n    for value in lst \n  \
    \      ^~~~~\n        _\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmptc_x33pu.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, 0)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmptc_x33pu.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ result.count - 1)\n                   ^\nSwift.Array:11:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Element, at i: Int)\n           \
    \                         ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    for index\
    \ in stride(from: 0, to: result.count, by: 1) {\n        let min = result[index]\n\
    \        let max = result[index + 1]\n        let tmp = result[index]\n      \
    \  result[index] = max\n        result[index + 1] = min\n        result[index]\
    \ = tmp\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b89fab29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89fa820561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b89fa820286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b89fa82013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b89fa81fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b89fa61fe83 <unavailable> + 188035

    6    tmp8ute68ot                        0x000056464e30d425 <unavailable> + 9253

    7    tmp8ute68ot                        0x000056464e30c5fc <unavailable> + 5628

    8    libc.so.6                          0x00002b89fad15460 __libc_start_main +
    245

    9    tmp8ute68ot                        0x000056464e30c2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659825054
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if min > num\
    \ {\n            min = num\n        }\n        if max < num {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, at: 0)\n        } else if num == max {\n        \
    \    result.insert(num, at: result.count - 1)\n        } else {\n            result.insert(num,\
    \ at: result.count)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpfdlssk3f/tmpfdlssk3f.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51a1d2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51a1a23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51a1a23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51a1a227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfdlssk3f                        0x000055aaa220f654 <unavailable> + 5716

    5    libc.so.6                          0x00002b51a1f18460 __libc_start_main +
    245

    6    tmpfdlssk3f                        0x000055aaa220f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min = lst[0]\n    var max = lst[0]\n    for el in lst {\n        if el < min\
    \ {\n            min = el\n        } else if el > max {\n            max = el\n\
    \        }\n    }\n    for el in lst {\n        if el == min {\n            result.insert(el,\
    \ el)\n        } else if el == max {\n            result.insert(el, el)\n    \
    \    } else {\n            result.insert(el, el)\n            result.insert(el,\
    \ el)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpyqwnpmb2.swift:25:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(el, el)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpyqwnpmb2.swift:27:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(el,\
    \ el)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpyqwnpmb2.swift:29:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(el, el)\n           \
    \        ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpyqwnpmb2.swift:30:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(el,\
    \ el)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var min: Int = lst[0]\n    var max: Int = lst[0]\n\
    \    for val in lst {\n        if val < min {\n            min = val\n       \
    \ }\n        if val > max {\n            max = val\n        }\n    }\n    var\
    \ result: [Int] = []\n    for val in lst {\n        if val == min {\n        \
    \    result.insert(val, 0)\n        }\n        if val == max {\n            result.insert(val,\
    \ result.count - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp06mqfdut.swift:29:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(val, 0)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp06mqfdut.swift:32:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(val,\
    \ result.count - 1)\n                   ^\nSwift.Array:11:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Element, at i: Int)\n           \
    \                         ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    for value in lst {\n        if value < minValue {\n \
    \           minValue = value\n        }\n    }\n    for value in lst {\n     \
    \   if value == minValue {\n            continue\n        }\n        for value2\
    \ in lst {\n            if value2 == minValue {\n                continue\n  \
    \          }\n            if value < value2 {\n                result.insert(value,\
    \ at: 0)\n                result.insert(value2, at: 0)\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpsobe4p_m/tmpsobe4p_m.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91bcebbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91bcbb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91bcbb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91bcbb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsobe4p_m                        0x000055b507c8f644 <unavailable> + 5700

    5    libc.so.6                          0x00002b91bd0a7460 __libc_start_main +
    245

    6    tmpsobe4p_m                        0x000055b507c8f239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for v in lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    for v in lst {\n        if v == min {\n            result.insert(v,\
    \ min)\n        }\n        if v == max {\n            result.insert(v, max)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpsvc8hzsy.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(v, min)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpsvc8hzsy.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(v,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        }\n        if value > maxValue {\n            result.insert(maxValue,\
    \ value)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpv7et8n4v.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpv7et8n4v.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int\n    var max: Int\n    for element in lst {\n        if min == 0 {\n\
    \            min = element\n            max = element\n        } else {\n    \
    \        if element < min {\n                min = element\n            }\n  \
    \          if element > max {\n                max = element\n            }\n\
    \        }\n    }\n    for element in lst {\n        if element == min {\n   \
    \         result.insert(element, 0)\n        } else {\n            result.insert(element,\
    \ 1)\n        }\n    }\n    for element in lst {\n        if element == max {\n\
    \            result.insert(element, 0)\n        } else {\n            result.insert(element,\
    \ -1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpm0ngc23i.swift:31:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, 0)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpm0ngc23i.swift:33:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ 1)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpm0ngc23i.swift:38:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(element, 0)\n       \
    \            ^\nSwift.Array:11:37: note: incorrect labels for candidate (have:\
    \ '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpm0ngc23i.swift:40:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(element, -1)\n      \
    \             ^\nSwift.Array:11:37: note: incorrect labels for candida"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count < 2 {\n      \
    \  return lst\n    }\n    var result = [Int]()\n    var minValue = lst[0]\n  \
    \  var maxValue = lst[0]\n    for value in lst {\n        if value < minValue\
    \ {\n            minValue = value\n        }\n        if value > maxValue {\n\
    \            maxValue = value\n        }\n    }\n    for value in lst {\n    \
    \    if value < minValue {\n            result.insert(value, minValue)\n     \
    \   } else {\n            result.insert(value, maxValue)\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpqs7awvw2.swift:29:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(value, minValue)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpqs7awvw2.swift:31:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(value,\
    \ maxValue)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            minValue = value\n\
    \        }\n        if value > maxValue {\n            maxValue = value\n    \
    \    }\n    }\n    for value in lst {\n        if value < minValue {\n       \
    \     minValue = value\n        }\n        if value > maxValue {\n           \
    \ maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n    }\n    for value in lst {\n        if value\
    \ < minValue {\n            minValue = value\n        }\n        if value > maxValue\
    \ {\n            maxValue = value\n        }\n    }\n    for value in lst {\n\
    \        if value < minValue {\n            minValue = value\n        }\n    \
    \    if value > maxValue {\n            maxValue = value\n        }\n    }\n \
    \   for value in lst {\n        if value < minValue {\n            minValue =\
    \ value\n        }\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    for value in lst {\n        if value < minValue {\n   \
    \         minValue = value\n        }\n        if value > maxValue {\n       \
    \     maxValue = value\n        }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp13h0pj8l.swift:159:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmp13h0pj8l.swift:12:45: note: to match\
    \ this opening '{'\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n          \
    \                                  ^\n/tmp/tmp13h0pj8l.swift:139:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp13h0pj8l.swift:13:9:\
    \ warning: initialization of variable 'result' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ minValue = lst[0]\n    var maxValue = lst[0]\n    for value in lst {\n     \
    \   if value < minValue {\n            minValue = value\n        }\n        if\
    \ value > maxValue {\n            maxValue = value\n        }\n    }\n    for\
    \ value in lst {\n        if value < minValue {\n            result.insert(minValue,\
    \ value)\n        } else {\n            result.insert(maxValue, value)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpeiwdoqz_.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(minValue, value)\n              \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpeiwdoqz_.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(maxValue,\
    \ value)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num < min {\n    \
    \        result.insert(min, num)\n        }\n        if num > max {\n        \
    \    result.insert(max, num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpze7qgbts.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(min, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpze7qgbts.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(max,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for x in lst {\n        if x < min {\n\
    \            min = x\n        }\n        if x > max {\n            max = x\n \
    \       }\n    }\n    for x in lst {\n        if x == min {\n            result.insert(x,\
    \ 0)\n        }\n        if x == max {\n            result.insert(x, result.count\
    \ - 1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmptc_x33pu.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(x, 0)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmptc_x33pu.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(x,\
    \ result.count - 1)\n                   ^\nSwift.Array:11:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Element, at i: Int)\n           \
    \                         ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect\
    \ labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public\
    \ mutating func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659825053
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    }\n    var result = [Int]()\n    var min: Int = Int.max\n\
    \    var max: Int = Int.min\n    for el in lst {\n        if el < min {\n    \
    \        min = el\n        }\n        if el > max {\n            max = el\n  \
    \      }\n    }\n    for el in lst {\n        if el == min {\n            result.insert(el,\
    \ min)\n        }\n        if el == max {\n            result.insert(el, max)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpqeiyoaoq.swift:29:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(el, min)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpqeiyoaoq.swift:32:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(el,\
    \ max)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    var min:\
    \ Int = 0\n    var max: Int = result.count - 1\n    for index in 0..<result.count\
    \ {\n        if result[index] < min {\n            min = result[index]\n     \
    \   }\n        if result[index] > max {\n            max = result[index]\n   \
    \     }\n    }\n    for index in min..<max {\n        let temp = result[index]\n\
    \        let index = index\n        let value = result[index]\n        result[index]\
    \ = result[index]\n        result[index] = temp\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpwvg8vaaz/tmpwvg8vaaz.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac93497ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac934671b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac934671988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9346707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwvg8vaaz                        0x000055df1eb31664 <unavailable> + 5732

    5    libc.so.6                          0x00002ac934b66460 __libc_start_main +
    245

    6    tmpwvg8vaaz                        0x000055df1eb31259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int? = nil\n    var max: Int? = nil\n    for x in lst {\n        if x ==\
    \ nil {\n            continue\n        }\n        if min == nil || x < min {\n\
    \            min = x\n        }\n        if max == nil || x > max {\n        \
    \    max = x\n        }\n    }\n    if min == nil {\n        min = 1\n    }\n\
    \    if max == nil {\n        max = 1\n    }\n    for x in lst {\n        if x\
    \ == nil {\n            continue\n        }\n        if x == min {\n         \
    \   result.insert(x, 0)\n            continue\n        }\n        if x == max\
    \ {\n            result.insert(x, result.count - 1)\n            continue\n  \
    \      }\n        result.insert(x, result.count - 1)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpmxyuj_v7.swift:17:14: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns false\n        if x == nil {\n          \
    \ ~ ^  ~~~\n/tmp/tmpmxyuj_v7.swift:20:30: error: value of optional type 'Int?'\
    \ must be unwrapped to a value of type 'Int'\n        if min == nil || x < min\
    \ {\n                             ^\n/tmp/tmpmxyuj_v7.swift:20:30: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     if min == nil || x < min {\n                             ^\n           \
    \                      ?? <#default value#>\n/tmp/tmpmxyuj_v7.swift:20:30: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \        if min == nil || x < min {\n                             ^\n        \
    \                        !\n/tmp/tmpmxyuj_v7.swift:23:30: error: value of optional\
    \ type 'Int?' must be unwrapped to a value of type 'Int'\n        if max == nil\
    \ || x > max {\n                             ^\n/tmp/tmpmxyuj_v7.swift:23:30:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        if max == nil || x > max {\n                             ^\n\
    \                                 ?? <#default value#>\n/tmp/tmpmxyuj_v7.swift:23:30:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        if max == nil || x > max {\n                             ^\n\
    \                                !\n/tmp/tmpmxyuj_v7.swift:34:14: warning: comparing\
    \ non-optional value of type 'Int' to 'nil' always returns false\n        if x\
    \ == nil {\n           ~ ^  ~~~\n/tmp/tmpmxyuj_v7.swift:38:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(x, 0)\n\
    \                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinab"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for num in lst {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    for num in lst {\n        if num == min {\n   \
    \         result.insert(num, num)\n        }\n        if num == max {\n      \
    \      result.insert(num, num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpvlrtipwx.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpvlrtipwx.swift:29:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ num)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825052
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = lst\n    if lst.count\
    \ == 0 {\n        return result\n    }\n    var min: Int = 0\n    var max: Int\
    \ = lst.count - 1\n    while min < max {\n        let mid = min + ((max - min)\
    \ / 2)\n        if result[mid] > result[min] {\n            max = mid - 1\n  \
    \      } else {\n            min = mid + 1\n        }\n    }\n    if min < lst.count\
    \ {\n        result = result[0..<min]\n    }\n    if max > 0 {\n        result\
    \ = result[0..<max]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpw135ogkp.swift:28:24: error: cannot assign value of type 'ArraySlice<Int>'\
    \ to type '[Int]'\n        result = result[0..<min]\n                 ~~~~~~^~~~~~~~~\n\
    /tmp/tmpw135ogkp.swift:31:24: error: cannot assign value of type 'ArraySlice<Int>'\
    \ to type '[Int]'\n        result = result[0..<max]\n                 ~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = 0\n    var max: Int = 0\n    for element in lst {\n        if element\
    \ < min {\n            min = element\n        }\n        if element > max {\n\
    \            max = element\n        }\n    }\n    for element in lst {\n     \
    \   if element == min {\n            result.insert(element, max)\n        } else\
    \ {\n            result.insert(element, min)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpaprb98e4.swift:26:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(element, max)\n                 \
    \  ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpaprb98e4.swift:28:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ min)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659825054
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min: Int = Int.max\n    var max: Int = Int.min\n    for v in lst {\n       \
    \ if v < min {\n            min = v\n        }\n        if v > max {\n       \
    \     max = v\n        }\n    }\n    for v in lst {\n        if v < min {\n  \
    \          min = v\n        }\n        if v > max {\n            max = v\n   \
    \     }\n    }\n    for v in lst {\n        if v < min {\n            min = v\n\
    \        }\n        if v > max {\n            max = v\n        }\n    }\n    for\
    \ v in lst {\n        if v < min {\n            min = v\n        }\n        if\
    \ v > max {\n            max = v\n        }\n    }\n    for v in lst {\n     \
    \   if v < min {\n            min = v\n        }\n        if v > max {\n     \
    \       max = v\n        }\n    }\n    for v in lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    for v in lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    for v in lst {\n        if v < min {\n            min = v\n        }\n  \
    \      if v > max {\n            max = v\n        }\n    }\n    for v in lst {\n\
    \        if v < min {\n            min = v\n        }\n        if v > max {\n\
    \            max = v\n        }\n    }\n    for v in lst {\n        if v < min\
    \ {\n            min = v\n        }\n        if v > max {\n            max = v\n\
    \        }\n    }\n    for v in lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    for v in lst {\n        if v < min {\n            min = v\n        }\n  \
    \      if v > max {\n            max = v\n        }\n    }\n    for v in lst {\n\
    \        if v < min {\n            min = v\n        }\n        if v > max {\n\
    \            max = v\n        }\n    }\n    for v in lst {\n        if v < min\
    \ {\n            min = v\n        }\n        if v > max {\n            max = v\n\
    \        }\n    }\n    for v in lst {\n        if v < min {\n            min =\
    \ v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    for v in lst {\n        if \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpfts_132m.swift:137:11: error: expected expression, var, or let\
    \ in 'if' condition\n        if \n          ^\n/tmp/tmpfts_132m.swift:161:53:\
    \ error: expected '}' at end of brace statement\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])\n                                                   \
    \ ^\n/tmp/tmpfts_132m.swift:12:45: note: to match this opening '{'\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n                                            ^\n/tmp/tmpfts_132m.swift:141:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659825053
