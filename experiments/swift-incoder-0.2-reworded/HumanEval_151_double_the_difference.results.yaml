language: swift
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        if num\
    \ % 2 == 1 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpensb4la_.swift:17:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpensb4la_.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ != 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpch6r67tm.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 != 0 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpch6r67tm.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for i in 0..<lst.count\
    \ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjxs62mwm.swift:19:19: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if lst[i] % 2 == 1 {\n    \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpjxs62mwm.swift:20:23: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            sum += lst[i]\n      \
    \                ^\n                   Int(  )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for number in lst {\n        if\
    \ number % 2 == 1 {\n            sum += number\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp0yt3t66u.swift:17:19: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if number % 2 == 1 {\n    \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmp0yt3t66u.swift:18:20: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            sum += number\n      \
    \             ^\n                   Int(  )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        if num\
    \ > 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9ioztwj9.swift:18:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for x in lst {\n     \
    \   if x % 2 == 1 {\n            sum += x * x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfn0qamza.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpfn0qamza.swift:20:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for i in lst {\n     \
    \   if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpo1rbt2sp.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpo1rbt2sp.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        if num\
    \ > 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9ioztwj9.swift:18:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        if num\
    \ > 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9ioztwj9.swift:18:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ != 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpch6r67tm.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 != 0 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpch6r67tm.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        if num\
    \ > 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9ioztwj9.swift:18:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        if num\
    \ > 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9ioztwj9.swift:18:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        if num\
    \ % 2 == 1 {\n            sum += num * num\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmphehjpo98.swift:17:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmphehjpo98.swift:18:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ != 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpch6r67tm.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 != 0 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpch6r67tm.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        if num\
    \ > 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9ioztwj9.swift:18:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for i in lst {\n     \
    \   if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpo1rbt2sp.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpo1rbt2sp.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        sum += i\
    \ * i\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6kqv75fy.swift:17:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += i * i\n                 ^\n\
    \               Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        sum += i\
    \ * i\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6kqv75fy.swift:17:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += i * i\n                 ^\n\
    \               Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in 0..<lst.count {\n     \
    \   if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbta52m21.swift:17:19: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if lst[i] % 2 == 1 {\n    \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpbta52m21.swift:18:23: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            sum += lst[i]\n      \
    \                ^\n                   Int(  )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 {\n            sum += num * num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpvviualc5.swift:17:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for x in lst {\n     \
    \   if x % 2 == 1 {\n            sum += x * x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfn0qamza.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpfn0qamza.swift:20:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        if num\
    \ % 2 == 1 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpensb4la_.swift:17:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpensb4la_.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for i in lst {\n     \
    \   if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpo1rbt2sp.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpo1rbt2sp.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 {\n            sum += num * num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpvviualc5.swift:17:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for x in lst {\n        if x < 0\
    \ {\n            sum += x\n        } else {\n            sum += x * x\n      \
    \  }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpwo05mcbn.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x\n                   ^\n\
    \                   Int( )\n/tmp/tmpwo05mcbn.swift:20:22: error: cannot convert\
    \ value of type 'Double' to expected argument type 'Int'\n            sum += x\
    \ * x\n                     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        sum += i\
    \ * i\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6kqv75fy.swift:17:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += i * i\n                 ^\n\
    \               Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for x in lst {\n     \
    \   if x % 2 == 1 {\n            sum += x * x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfn0qamza.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpfn0qamza.swift:20:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        if num\
    \ % 2 == 1 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpensb4la_.swift:17:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpensb4la_.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num % 2 == 1 {\n            sum += num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6li0xwqh.swift:19:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp6li0xwqh.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for x in lst {\n     \
    \   if x % 2 == 1 {\n            sum += x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpy09m_wrg.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpy09m_wrg.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for x in lst {\n        if x % 2\
    \ == 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpzktrknso.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpzktrknso.swift:18:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in 0..<lst.count {\n     \
    \   if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbta52m21.swift:17:19: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if lst[i] % 2 == 1 {\n    \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpbta52m21.swift:18:23: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            sum += lst[i]\n      \
    \                ^\n                   Int(  )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        if num\
    \ > 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9ioztwj9.swift:18:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for x in lst {\n     \
    \   if x % 2 == 1 {\n            sum += x * x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfn0qamza.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpfn0qamza.swift:20:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 {\n            sum += num * num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpvviualc5.swift:17:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        if num\
    \ > 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9ioztwj9.swift:18:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ < 1 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n    \
    \    if num % 2 == 1 {\n            sum += num\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6ma4xsmk.swift:19:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp6ma4xsmk.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for x in lst {\n     \
    \   if x % 2 == 1 {\n            sum += x * x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfn0qamza.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpfn0qamza.swift:20:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        if num\
    \ > 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9ioztwj9.swift:18:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for number in lst {\n\
    \        if number % 2 == 1 {\n            sum += number\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp2bp5mxh.swift:19:19: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if number % 2 == 1 {\n    \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpp2bp5mxh.swift:20:20: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            sum += number\n      \
    \             ^\n                   Int(  )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for x in lst {\n     \
    \   if x % 2 == 1 {\n            sum += x * x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfn0qamza.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpfn0qamza.swift:20:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for number in lst {\n\
    \        if number > 0 {\n            sum += number * number\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpsfgv6ugz.swift:20:27: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += number * number\n      \
    \                    ^\n                   Int(           )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for x in lst {\n     \
    \   if x % 2 == 1 {\n            sum += x * x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfn0qamza.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpfn0qamza.swift:20:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num % 2 == 1 {\n            sum += num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6li0xwqh.swift:19:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp6li0xwqh.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for x in lst {\n     \
    \   if x % 2 == 1 {\n            sum += x * x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfn0qamza.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpfn0qamza.swift:20:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for x in lst {\n     \
    \   if x % 2 == 1 {\n            sum += x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpy09m_wrg.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpy09m_wrg.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for i in lst {\n     \
    \   if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpo1rbt2sp.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpo1rbt2sp.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        sum +=\
    \ num * num\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiwg67odn.swift:17:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for i in lst {\n     \
    \   if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpo1rbt2sp.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpo1rbt2sp.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for x in lst {\n     \
    \   if x % 2 == 1 {\n            sum += x * x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfn0qamza.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpfn0qamza.swift:20:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        if num\
    \ % 2 == 1 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpensb4la_.swift:17:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpensb4la_.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        sum +=\
    \ num * num\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiwg67odn.swift:17:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpqnetfkav.swift:16:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpqnetfkav.swift:17:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for i in lst {\n     \
    \   if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpo1rbt2sp.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpo1rbt2sp.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        sum +=\
    \ num * num\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiwg67odn.swift:17:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for i in lst {\n     \
    \   if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpo1rbt2sp.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpo1rbt2sp.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for x in lst {\n     \
    \   if x % 2 == 1 {\n            sum += x * x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfn0qamza.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpfn0qamza.swift:20:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for i in lst {\n     \
    \   if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpo1rbt2sp.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpo1rbt2sp.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for i in lst {\n     \
    \   if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpo1rbt2sp.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpo1rbt2sp.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        sum +=\
    \ num * num\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiwg67odn.swift:17:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for n in lst {\n        if n % 2\
    \ == 1 {\n            sum += n * n\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpffx6nzf1.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if n % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpffx6nzf1.swift:18:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += n * n\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        if num\
    \ % 2 == 1 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpensb4la_.swift:17:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpensb4la_.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        sum += i\
    \ * i\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6kqv75fy.swift:17:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += i * i\n                 ^\n\
    \               Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num % 2 == 1 {\n            sum += num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6li0xwqh.swift:19:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp6li0xwqh.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ != 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpch6r67tm.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 != 0 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpch6r67tm.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        sum += i\
    \ * i\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6kqv75fy.swift:17:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += i * i\n                 ^\n\
    \               Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for x in lst {\n     \
    \   if x % 2 == 1 {\n            sum += x * x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfn0qamza.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpfn0qamza.swift:20:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in 0..<lst.count {\n     \
    \   sum += lst[i] * lst[i]\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpy6ewjw6c.swift:17:23: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += lst[i] * lst[i]\n          \
    \            ^\n               Int(           )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for i in lst {\n     \
    \   if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpo1rbt2sp.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpo1rbt2sp.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        if num\
    \ > 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9ioztwj9.swift:18:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in 0..<lst.count {\n     \
    \   if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbta52m21.swift:17:19: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if lst[i] % 2 == 1 {\n    \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpbta52m21.swift:18:23: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            sum += lst[i]\n      \
    \                ^\n                   Int(  )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for i in lst {\n     \
    \   if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpo1rbt2sp.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpo1rbt2sp.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for i in lst {\n     \
    \   if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpo1rbt2sp.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpo1rbt2sp.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 {\n            sum += num * num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpvviualc5.swift:17:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in 0..<lst.count {\n     \
    \   if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbta52m21.swift:17:19: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if lst[i] % 2 == 1 {\n    \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpbta52m21.swift:18:23: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            sum += lst[i]\n      \
    \                ^\n                   Int(  )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        sum += i\
    \ * i\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6kqv75fy.swift:17:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += i * i\n                 ^\n\
    \               Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 {\n            sum += num * num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpvviualc5.swift:17:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpqnetfkav.swift:16:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpqnetfkav.swift:17:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ < 1 {\n        return 0\n    }\n    var sum = 0\n    for i in lst {\n      \
    \  if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpggv12yyi.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpggv12yyi.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for i in lst {\n     \
    \   if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpo1rbt2sp.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpo1rbt2sp.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for x in lst {\n     \
    \   if x % 2 == 1 {\n            sum += x * x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfn0qamza.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpfn0qamza.swift:20:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ != 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpch6r67tm.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 != 0 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpch6r67tm.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        if num\
    \ % 2 == 1 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpensb4la_.swift:17:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpensb4la_.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for x in lst {\n     \
    \   if x % 2 == 1 {\n            sum += x * x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfn0qamza.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpfn0qamza.swift:20:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for number in lst {\n\
    \        if number % 2 == 1 {\n            sum += number\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp2bp5mxh.swift:19:19: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if number % 2 == 1 {\n    \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpp2bp5mxh.swift:20:20: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            sum += number\n      \
    \             ^\n                   Int(  )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for n in lst {\n        sum += n\
    \ * n\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpem457wyc.swift:17:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        if num\
    \ % 2 == 1 {\n            sum += num * num\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmphehjpo98.swift:17:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmphehjpo98.swift:18:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for x in lst {\n     \
    \   if x % 2 == 1 {\n            sum += x * x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfn0qamza.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpfn0qamza.swift:20:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        if num\
    \ > 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9ioztwj9.swift:18:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        if num\
    \ % 2 == 1 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpensb4la_.swift:17:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpensb4la_.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for x in lst {\n     \
    \   if x % 2 == 1 {\n            sum += x * x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfn0qamza.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpfn0qamza.swift:20:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num % 2 == 1 {\n            sum += num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6li0xwqh.swift:19:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp6li0xwqh.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for x in lst {\n     \
    \   if x % 2 == 1 {\n            sum += x * x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfn0qamza.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpfn0qamza.swift:20:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in 0..<lst.count {\n     \
    \   if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbta52m21.swift:17:19: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if lst[i] % 2 == 1 {\n    \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpbta52m21.swift:18:23: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            sum += lst[i]\n      \
    \                ^\n                   Int(  )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num % 2 == 1 {\n            sum += num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6li0xwqh.swift:19:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp6li0xwqh.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 {\n            sum += num * num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpvviualc5.swift:17:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for i in lst {\n     \
    \   if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpo1rbt2sp.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpo1rbt2sp.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in 0..<lst.count {\n     \
    \   if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbta52m21.swift:17:19: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if lst[i] % 2 == 1 {\n    \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpbta52m21.swift:18:23: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            sum += lst[i]\n      \
    \                ^\n                   Int(  )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        if num\
    \ % 2 == 1 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpensb4la_.swift:17:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpensb4la_.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        if num\
    \ > 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9ioztwj9.swift:18:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        if num\
    \ > 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9ioztwj9.swift:18:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for i in lst {\n     \
    \   if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpo1rbt2sp.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpo1rbt2sp.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ != 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpch6r67tm.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 != 0 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpch6r67tm.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num % 2 == 1 {\n            sum += num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6li0xwqh.swift:19:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp6li0xwqh.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for i in lst {\n     \
    \   if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpo1rbt2sp.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpo1rbt2sp.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num % 2 == 1 {\n            sum += num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6li0xwqh.swift:19:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp6li0xwqh.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for n in lst {\n        sum += n\
    \ * n\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpem457wyc.swift:17:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for x in lst {\n     \
    \   if x % 2 == 1 {\n            sum += x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpy09m_wrg.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpy09m_wrg.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for number in lst {\n\
    \        if number % 2 == 1 {\n            sum += number\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp2bp5mxh.swift:19:19: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if number % 2 == 1 {\n    \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpp2bp5mxh.swift:20:20: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            sum += number\n      \
    \             ^\n                   Int(  )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        if num\
    \ % 2 == 1 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpensb4la_.swift:17:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpensb4la_.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpqnetfkav.swift:16:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpqnetfkav.swift:17:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for i in lst {\n     \
    \   if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpo1rbt2sp.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpo1rbt2sp.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num % 2 == 1 {\n            sum += num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6li0xwqh.swift:19:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp6li0xwqh.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for x in lst {\n     \
    \   if x % 2 == 1 {\n            sum += x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpy09m_wrg.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpy09m_wrg.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for x in lst {\n        if x % 2\
    \ == 1 {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpq46os9h0.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpq46os9h0.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num % 2 == 1 {\n            sum += num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6li0xwqh.swift:19:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp6li0xwqh.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for n in lst {\n        sum += n\
    \ * n\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpem457wyc.swift:17:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for i in lst {\n     \
    \   if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpo1rbt2sp.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpo1rbt2sp.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for x in lst {\n        if x < 0\
    \ {\n            sum += x\n        } else {\n            sum += x * x\n      \
    \  }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpwo05mcbn.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x\n                   ^\n\
    \                   Int( )\n/tmp/tmpwo05mcbn.swift:20:22: error: cannot convert\
    \ value of type 'Double' to expected argument type 'Int'\n            sum += x\
    \ * x\n                     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num % 2 == 1 {\n            sum += num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6li0xwqh.swift:19:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp6li0xwqh.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num % 2 == 1 {\n            sum += num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6li0xwqh.swift:19:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp6li0xwqh.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        sum +=\
    \ num * num\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiwg67odn.swift:17:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for i in lst {\n     \
    \   if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpo1rbt2sp.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpo1rbt2sp.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in 0..<lst.count {\n     \
    \   if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpbta52m21.swift:17:19: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if lst[i] % 2 == 1 {\n    \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpbta52m21.swift:18:23: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            sum += lst[i]\n      \
    \                ^\n                   Int(  )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for i in lst {\n     \
    \   if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpo1rbt2sp.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpo1rbt2sp.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for i in lst {\n     \
    \   if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpo1rbt2sp.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpo1rbt2sp.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        sum +=\
    \ num * num\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiwg67odn.swift:17:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for x in lst {\n     \
    \   if x % 2 == 1 {\n            sum += x * x\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfn0qamza.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpfn0qamza.swift:20:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 {\n            sum += num * num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpvviualc5.swift:17:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for i in lst {\n        if i % 2\
    \ == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp_l9225n.swift:17:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpp_l9225n.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for i in lst {\n     \
    \   if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpo1rbt2sp.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpo1rbt2sp.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        if num\
    \ % 2 == 1 {\n            sum += num * num\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmphehjpo98.swift:17:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmphehjpo98.swift:18:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for number in lst {\n\
    \        if number > 0 {\n            sum += number\n        }\n    }\n    return\
    \ sum * sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpufr3xrbo.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += number\n               \
    \    ^\n                   Int(  )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        if num\
    \ % 2 == 1 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpensb4la_.swift:17:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpensb4la_.swift:18:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        if num\
    \ > 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9ioztwj9.swift:18:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for number in lst {\n\
    \        if number % 2 == 1 {\n            sum += number\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpp2bp5mxh.swift:19:19: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if number % 2 == 1 {\n    \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpp2bp5mxh.swift:20:20: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            sum += number\n      \
    \             ^\n                   Int(  )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for i in lst {\n     \
    \   if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpo1rbt2sp.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpo1rbt2sp.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    guard lst.count\
    \ > 0 else { return 0 }\n    var sum = 0\n    for num in lst {\n        if num\
    \ > 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9ioztwj9.swift:18:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 {\n            sum += num * num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpvviualc5.swift:17:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for i in lst {\n     \
    \   if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpo1rbt2sp.swift:19:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpo1rbt2sp.swift:20:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824476
- exit_code: 1
  program: "\n/// Given an array of numbers, return the sum of squares of the numbers\n\
    /// in the array that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst:\
    \ [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n///\
    \ >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty,\
    \ return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    if lst.count\
    \ == 0 {\n        return 0\n    }\n    var sum = 0\n    for num in lst {\n   \
    \     if num > 0 {\n            sum += num * num\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpf_c5bnhm.swift:20:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824476
