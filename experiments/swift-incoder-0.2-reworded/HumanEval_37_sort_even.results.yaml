language: swift
name: HumanEval_37_sort_even
results:
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted().append(odd).sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpbb1d8z7h.swift:19:33: error: missing argument label 'contentsOf:'\
    \ in call\n    return even.sorted().append(odd).sorted()\n                   \
    \             ^\n                                contentsOf: \n/tmp/tmpbb1d8z7h.swift:19:26:\
    \ error: cannot use mutating member on immutable value: function call returns\
    \ immutable value\n    return even.sorted().append(odd).sorted()\n           ~~~~~~~~~~~~~\
    \ ^\n/tmp/tmpbb1d8z7h.swift:19:38: error: value of tuple type '()' has no member\
    \ 'sorted'\n    return even.sorted().append(odd).sorted()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmphelrqgl3.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmphelrqgl3.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmphelrqgl3.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpmpb8lpbx.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpmpb8lpbx.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = l\n    for\
    \ index in 0..<l.count {\n        if index % 2 == 0 {\n            even[index]\
    \ = even[index]\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpv39r1ysw/tmpv39r1ysw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a0f1cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a0eec4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a0eec4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a0eec37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv39r1ysw                        0x0000556acd595803 <unavailable> + 6147

    5    libc.so.6                          0x00002b2a0f3b9460 __libc_start_main +
    245

    6    tmpv39r1ysw                        0x0000556acd595259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    even = even.sorted(by: <)\n    odd = odd.sorted(by: >)\n    return even\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp_jalo5p1/tmp_jalo5p1.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b868f176c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b868ee6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b868ee6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b868ee6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jalo5p1                        0x000055fc01487744 <unavailable> + 5956

    5    libc.so.6                          0x00002b868f362460 __libc_start_main +
    245

    6    tmp_jalo5p1                        0x000055fc01487349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = l\n    for\
    \ index in 0..<l.count {\n        if index % 2 == 0 {\n            even[index]\
    \ = even[index]\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpv39r1ysw/tmpv39r1ysw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a0f1cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a0eec4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a0eec4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a0eec37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv39r1ysw                        0x0000556acd595803 <unavailable> + 6147

    5    libc.so.6                          0x00002b2a0f3b9460 __libc_start_main +
    245

    6    tmpv39r1ysw                        0x0000556acd595259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmphelrqgl3.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmphelrqgl3.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmphelrqgl3.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = l\n    var\
    \ odd = l\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n            even[i]\
    \ = even[i]\n        } else {\n            odd[i] = odd[i]\n        }\n    }\n\
    \    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp_m_m9daq/tmp_m_m9daq.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68ff42fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68ff126b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68ff126988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68ff1257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_m_m9daq                        0x000055b1d6d51803 <unavailable> + 6147

    5    libc.so.6                          0x00002b68ff61b460 __libc_start_main +
    245

    6    tmp_m_m9daq                        0x000055b1d6d51259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    even.sort()\n    odd.sort()\n    return even + odd\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp8bmasiat/tmp8bmasiat.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac71f212c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac71ef09b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac71ef09988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac71ef087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8bmasiat                        0x0000563227fc37f4 <unavailable> + 6132

    5    libc.so.6                          0x00002ac71f3fe460 __libc_start_main +
    245

    6    tmp8bmasiat                        0x0000563227fc33f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    even = even.sorted()\n    odd = odd.sorted()\n    return even + odd\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp7cbaicjb/tmp7cbaicjb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95a95efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95a92e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95a92e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95a92e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7cbaicjb                        0x000055d1ed290774 <unavailable> + 6004

    5    libc.so.6                          0x00002b95a97db460 __libc_start_main +
    245

    6    tmp7cbaicjb                        0x000055d1ed290379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for v in l {\n        if v%2 == 0 {\n            even.append(v)\n\
    \        } else {\n            odd.append(v)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp7zngyyg1.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp7zngyyg1.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp7zngyyg1.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    even = even.sorted()\n    for x in even {\n        odd.remove(x)\n \
    \   }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp122u0qda.swift:21:13: error: no exact matches in call to instance\
    \ method 'remove'\n        odd.remove(x)\n            ^\nSwift.Array:10:37: note:\
    \ incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable\
    \ public mutating func remove(at index: Int) -> Element\n                    \
    \                ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public mutating\
    \ func remove(at position: Self.Index) -> Self.Element\n                     \
    \               ^\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            even.append(l[i])\n        } else {\n            odd.append(l[i])\n\
    \        }\n    }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp7szp3yh0/tmp7szp3yh0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cc3ba7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cc389eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cc389e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cc389d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7szp3yh0                        0x000055d288a547a4 <unavailable> + 6052

    5    libc.so.6                          0x00002b6cc3d93460 __libc_start_main +
    245

    6    tmp7szp3yh0                        0x000055d288a543a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = l\n    var\
    \ odd = l\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n            even[i]\
    \ = even[i]\n        } else {\n            odd[i] = odd[i]\n        }\n    }\n\
    \    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp_m_m9daq/tmp_m_m9daq.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68ff42fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68ff126b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68ff126988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68ff1257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_m_m9daq                        0x000055b1d6d51803 <unavailable> + 6147

    5    libc.so.6                          0x00002b68ff61b460 __libc_start_main +
    245

    6    tmp_m_m9daq                        0x000055b1d6d51259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted().append(odd).sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpbb1d8z7h.swift:19:33: error: missing argument label 'contentsOf:'\
    \ in call\n    return even.sorted().append(odd).sorted()\n                   \
    \             ^\n                                contentsOf: \n/tmp/tmpbb1d8z7h.swift:19:26:\
    \ error: cannot use mutating member on immutable value: function call returns\
    \ immutable value\n    return even.sorted().append(odd).sorted()\n           ~~~~~~~~~~~~~\
    \ ^\n/tmp/tmpbb1d8z7h.swift:19:38: error: value of tuple type '()' has no member\
    \ 'sorted'\n    return even.sorted().append(odd).sorted()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    even = even.sorted()\n    odd = odd.sorted()\n    var result = [Int]()\n\
    \    for i in 0..<min(even.count, odd.count) {\n        if i < even.count {\n\
    \            result.append(even[i])\n        } else {\n            result.append(odd[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp02nfo9d7/tmp02nfo9d7.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc7758fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc77286b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc77286988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc772857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp02nfo9d7                        0x00005560eb99f914 <unavailable> + 6420

    5    libc.so.6                          0x00002adc7777b460 __libc_start_main +
    245

    6    tmp02nfo9d7                        0x00005560eb99f519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = l\n    var\
    \ odd = l\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n            even[i]\
    \ = even[i]\n        } else {\n            odd[i] = odd[i]\n        }\n    }\n\
    \    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp_m_m9daq/tmp_m_m9daq.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68ff42fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68ff126b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68ff126988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68ff1257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_m_m9daq                        0x000055b1d6d51803 <unavailable> + 6147

    5    libc.so.6                          0x00002b68ff61b460 __libc_start_main +
    245

    6    tmp_m_m9daq                        0x000055b1d6d51259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            even.append(l[i])\n        } else {\n            odd.append(l[i])\n\
    \        }\n    }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp7szp3yh0/tmp7szp3yh0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cc3ba7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cc389eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cc389e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cc389d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7szp3yh0                        0x000055d288a547a4 <unavailable> + 6052

    5    libc.so.6                          0x00002b6cc3d93460 __libc_start_main +
    245

    6    tmp7szp3yh0                        0x000055d288a543a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmprzjb728y.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmprzjb728y.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    even = even.sorted()\n    for x in even {\n        odd.remove(x)\n \
    \   }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp122u0qda.swift:21:13: error: no exact matches in call to instance\
    \ method 'remove'\n        odd.remove(x)\n            ^\nSwift.Array:10:37: note:\
    \ incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable\
    \ public mutating func remove(at index: Int) -> Element\n                    \
    \                ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public mutating\
    \ func remove(at position: Self.Index) -> Self.Element\n                     \
    \               ^\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = l\n    for\
    \ index in stride(from: 0, to: l.count, by: 2) {\n        even[index] = even[index].sorted()\n\
    \    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmphfvj8lai.swift:12:35: error: value of type 'Int' has no member\
    \ 'sorted'\n        even[index] = even[index].sorted()\n                     \
    \ ~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    even.sort()\n    odd.sort()\n    return even.concat(odd)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpo7wwtdds.swift:21:17: error: value of type '[Int]' has no member\
    \ 'concat'\n    return even.concat(odd)\n           ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpmpb8lpbx.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpmpb8lpbx.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for v in l {\n        if v%2 == 0 {\n            even.append(v)\n\
    \        } else {\n            odd.append(v)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp7zngyyg1.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp7zngyyg1.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp7zngyyg1.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted().append(odd).sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpbb1d8z7h.swift:19:33: error: missing argument label 'contentsOf:'\
    \ in call\n    return even.sorted().append(odd).sorted()\n                   \
    \             ^\n                                contentsOf: \n/tmp/tmpbb1d8z7h.swift:19:26:\
    \ error: cannot use mutating member on immutable value: function call returns\
    \ immutable value\n    return even.sorted().append(odd).sorted()\n           ~~~~~~~~~~~~~\
    \ ^\n/tmp/tmpbb1d8z7h.swift:19:38: error: value of tuple type '()' has no member\
    \ 'sorted'\n    return even.sorted().append(odd).sorted()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpmpb8lpbx.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpmpb8lpbx.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for v in l {\n        if v%2 == 0 {\n            even.append(v)\n\
    \        } else {\n            odd.append(v)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3347l7ir/tmp3347l7ir.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4c8282c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4c7f79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4c7f79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4c7f787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3347l7ir                        0x000055d308af9774 <unavailable> + 6004

    5    libc.so.6                          0x00002ba4c846e460 __libc_start_main +
    245

    6    tmp3347l7ir                        0x000055d308af9379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd).sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_u2120id.swift:19:26: error: cannot use mutating member on immutable\
    \ value: function call returns immutable value\n    return even.sorted().append(odd).sorted()\n\
    \           ~~~~~~~~~~~~~ ^\n/tmp/tmp_u2120id.swift:19:33: error: missing argument\
    \ label 'contentsOf:' in call\n    return even.sorted().append(odd).sorted()\n\
    \                                ^\n                                contentsOf:\
    \ \n/tmp/tmp_u2120id.swift:19:38: error: value of tuple type '()' has no member\
    \ 'sorted'\n    return even.sorted().append(odd).sorted()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpmpb8lpbx.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpmpb8lpbx.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmphelrqgl3.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmphelrqgl3.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmphelrqgl3.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmphelrqgl3.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmphelrqgl3.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmphelrqgl3.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = l\n    var\
    \ odd = l\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n            even[i]\
    \ = even[i]\n        } else {\n            odd[i] = odd[i]\n        }\n    }\n\
    \    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp_m_m9daq/tmp_m_m9daq.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68ff42fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68ff126b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68ff126988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68ff1257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_m_m9daq                        0x000055b1d6d51803 <unavailable> + 6147

    5    libc.so.6                          0x00002b68ff61b460 __libc_start_main +
    245

    6    tmp_m_m9daq                        0x000055b1d6d51259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = l\n    var\
    \ odd = l\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n            even[i]\
    \ = even[i]\n        } else {\n            odd[i] = odd[i]\n        }\n    }\n\
    \    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp_m_m9daq/tmp_m_m9daq.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68ff42fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68ff126b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68ff126988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68ff1257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_m_m9daq                        0x000055b1d6d51803 <unavailable> + 6147

    5    libc.so.6                          0x00002b68ff61b460 __libc_start_main +
    245

    6    tmp_m_m9daq                        0x000055b1d6d51259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = l\n    var\
    \ odd = l\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n            even[i]\
    \ = even[i]\n        } else {\n            odd[i] = odd[i]\n        }\n    }\n\
    \    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp_m_m9daq/tmp_m_m9daq.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68ff42fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68ff126b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68ff126988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68ff1257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_m_m9daq                        0x000055b1d6d51803 <unavailable> + 6147

    5    libc.so.6                          0x00002b68ff61b460 __libc_start_main +
    245

    6    tmp_m_m9daq                        0x000055b1d6d51259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted().append(odd).sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpbb1d8z7h.swift:19:33: error: missing argument label 'contentsOf:'\
    \ in call\n    return even.sorted().append(odd).sorted()\n                   \
    \             ^\n                                contentsOf: \n/tmp/tmpbb1d8z7h.swift:19:26:\
    \ error: cannot use mutating member on immutable value: function call returns\
    \ immutable value\n    return even.sorted().append(odd).sorted()\n           ~~~~~~~~~~~~~\
    \ ^\n/tmp/tmpbb1d8z7h.swift:19:38: error: value of tuple type '()' has no member\
    \ 'sorted'\n    return even.sorted().append(odd).sorted()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmphelrqgl3.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmphelrqgl3.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmphelrqgl3.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            even.append(l[i])\n        } else {\n            odd.append(l[i])\n\
    \        }\n    }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp7szp3yh0/tmp7szp3yh0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cc3ba7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cc389eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cc389e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cc389d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7szp3yh0                        0x000055d288a547a4 <unavailable> + 6052

    5    libc.so.6                          0x00002b6cc3d93460 __libc_start_main +
    245

    6    tmp7szp3yh0                        0x000055d288a543a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted().append(odd).sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpbb1d8z7h.swift:19:33: error: missing argument label 'contentsOf:'\
    \ in call\n    return even.sorted().append(odd).sorted()\n                   \
    \             ^\n                                contentsOf: \n/tmp/tmpbb1d8z7h.swift:19:26:\
    \ error: cannot use mutating member on immutable value: function call returns\
    \ immutable value\n    return even.sorted().append(odd).sorted()\n           ~~~~~~~~~~~~~\
    \ ^\n/tmp/tmpbb1d8z7h.swift:19:38: error: value of tuple type '()' has no member\
    \ 'sorted'\n    return even.sorted().append(odd).sorted()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmphelrqgl3.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmphelrqgl3.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmphelrqgl3.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    even = even.sorted()\n    for x in even {\n        odd.remove(x)\n \
    \   }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp122u0qda.swift:21:13: error: no exact matches in call to instance\
    \ method 'remove'\n        odd.remove(x)\n            ^\nSwift.Array:10:37: note:\
    \ incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable\
    \ public mutating func remove(at index: Int) -> Element\n                    \
    \                ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public mutating\
    \ func remove(at position: Self.Index) -> Self.Element\n                     \
    \               ^\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmphelrqgl3.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmphelrqgl3.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmphelrqgl3.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpmpb8lpbx.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpmpb8lpbx.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd).sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_u2120id.swift:19:26: error: cannot use mutating member on immutable\
    \ value: function call returns immutable value\n    return even.sorted().append(odd).sorted()\n\
    \           ~~~~~~~~~~~~~ ^\n/tmp/tmp_u2120id.swift:19:33: error: missing argument\
    \ label 'contentsOf:' in call\n    return even.sorted().append(odd).sorted()\n\
    \                                ^\n                                contentsOf:\
    \ \n/tmp/tmp_u2120id.swift:19:38: error: value of tuple type '()' has no member\
    \ 'sorted'\n    return even.sorted().append(odd).sorted()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpmpb8lpbx.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpmpb8lpbx.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmphelrqgl3.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmphelrqgl3.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmphelrqgl3.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            even.append(l[i])\n        } else {\n            odd.append(l[i])\n\
    \        }\n    }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp7szp3yh0/tmp7szp3yh0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cc3ba7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cc389eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cc389e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cc389d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7szp3yh0                        0x000055d288a547a4 <unavailable> + 6052

    5    libc.so.6                          0x00002b6cc3d93460 __libc_start_main +
    245

    6    tmp7szp3yh0                        0x000055d288a543a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i : Int in l {\n        if i % 2 == 0 {\n    \
    \        even.append(i)\n        } else {\n            odd.append(i)\n       \
    \ }\n    }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpwy7gml7s.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpwy7gml7s.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpwy7gml7s.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmplbz413nv/tmplbz413nv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e2dfac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e2af1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e2af1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e2af07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplbz413nv                        0x00005589e16f6714 <unavailable> + 5908

    5    libc.so.6                          0x00002b21e2fe6460 __libc_start_main +
    245

    6    tmplbz413nv                        0x00005589e16f6319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpmpb8lpbx.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpmpb8lpbx.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    even = even.sorted()\n    for x in even {\n        odd.remove(x)\n \
    \   }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp122u0qda.swift:21:13: error: no exact matches in call to instance\
    \ method 'remove'\n        odd.remove(x)\n            ^\nSwift.Array:10:37: note:\
    \ incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable\
    \ public mutating func remove(at index: Int) -> Element\n                    \
    \                ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public mutating\
    \ func remove(at position: Self.Index) -> Self.Element\n                     \
    \               ^\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmphelrqgl3.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmphelrqgl3.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmphelrqgl3.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for v in l {\n        if v%2 == 0 {\n            even.append(v)\n\
    \        } else {\n            odd.append(v)\n        }\n    }\n    even = even.sorted()\n\
    \    for v in even {\n        odd.remove(v)\n    }\n    return odd\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp6o6ijpbg.swift:21:13: error: no exact matches in call to instance\
    \ method 'remove'\n        odd.remove(v)\n            ^\nSwift.Array:10:37: note:\
    \ incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable\
    \ public mutating func remove(at index: Int) -> Element\n                    \
    \                ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public mutating\
    \ func remove(at position: Self.Index) -> Self.Element\n                     \
    \               ^\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmphelrqgl3.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmphelrqgl3.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmphelrqgl3.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmphelrqgl3.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmphelrqgl3.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmphelrqgl3.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    even = even.sorted()\n    odd = odd.sorted()\n    var result = [Int]()\n\
    \    for i in 0..<even.count {\n        result.append(even[i])\n    }\n    for\
    \ i in 0..<odd.count {\n        result.append(odd[i])\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpvsy062iu/tmpvsy062iu.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d799ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d796e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d796e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d796e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsy062iu                        0x0000556c83ffd8b4 <unavailable> + 6324

    5    libc.so.6                          0x00002b0d79bd8460 __libc_start_main +
    245

    6    tmpvsy062iu                        0x0000556c83ffd4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824782
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmphelrqgl3.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmphelrqgl3.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmphelrqgl3.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpmpb8lpbx.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpmpb8lpbx.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpf8nwj1i5/tmpf8nwj1i5.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0eaae4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0eaab43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0eaab43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0eaab427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8nwj1i5                        0x0000557c5bb4e714 <unavailable> + 5908

    5    libc.so.6                          0x00002b0eab038460 __libc_start_main +
    245

    6    tmpf8nwj1i5                        0x0000557c5bb4e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824782
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmphelrqgl3.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmphelrqgl3.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmphelrqgl3.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmprzjb728y.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmprzjb728y.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for v in l {\n        if v%2 == 0 {\n            even.append(v)\n\
    \        } else {\n            odd.append(v)\n        }\n    }\n    return even.sorted().append(odd).sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpa3_n8lqr.swift:19:33: error: missing argument label 'contentsOf:'\
    \ in call\n    return even.sorted().append(odd).sorted()\n                   \
    \             ^\n                                contentsOf: \n/tmp/tmpa3_n8lqr.swift:19:26:\
    \ error: cannot use mutating member on immutable value: function call returns\
    \ immutable value\n    return even.sorted().append(odd).sorted()\n           ~~~~~~~~~~~~~\
    \ ^\n/tmp/tmpa3_n8lqr.swift:19:38: error: value of tuple type '()' has no member\
    \ 'sorted'\n    return even.sorted().append(odd).sorted()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd).sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_u2120id.swift:19:26: error: cannot use mutating member on immutable\
    \ value: function call returns immutable value\n    return even.sorted().append(odd).sorted()\n\
    \           ~~~~~~~~~~~~~ ^\n/tmp/tmp_u2120id.swift:19:33: error: missing argument\
    \ label 'contentsOf:' in call\n    return even.sorted().append(odd).sorted()\n\
    \                                ^\n                                contentsOf:\
    \ \n/tmp/tmp_u2120id.swift:19:38: error: value of tuple type '()' has no member\
    \ 'sorted'\n    return even.sorted().append(odd).sorted()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    even = even.sorted()\n    for x in even {\n        odd.remove(x)\n \
    \   }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp122u0qda.swift:21:13: error: no exact matches in call to instance\
    \ method 'remove'\n        odd.remove(x)\n            ^\nSwift.Array:10:37: note:\
    \ incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable\
    \ public mutating func remove(at index: Int) -> Element\n                    \
    \                ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public mutating\
    \ func remove(at position: Self.Index) -> Self.Element\n                     \
    \               ^\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpmpb8lpbx.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpmpb8lpbx.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = l\n    for\
    \ index in 0..<l.count {\n        if index % 2 == 0 {\n            even[index]\
    \ = even[index].sorted()\n        }\n    }\n    return even\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpqv_5jmtb.swift:13:39: error: value of type 'Int' has no member\
    \ 'sorted'\n            even[index] = even[index].sorted()\n                 \
    \         ~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmplbz413nv/tmplbz413nv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e2dfac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e2af1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e2af1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e2af07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplbz413nv                        0x00005589e16f6714 <unavailable> + 5908

    5    libc.so.6                          0x00002b21e2fe6460 __libc_start_main +
    245

    6    tmplbz413nv                        0x00005589e16f6319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd).sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_u2120id.swift:19:26: error: cannot use mutating member on immutable\
    \ value: function call returns immutable value\n    return even.sorted().append(odd).sorted()\n\
    \           ~~~~~~~~~~~~~ ^\n/tmp/tmp_u2120id.swift:19:33: error: missing argument\
    \ label 'contentsOf:' in call\n    return even.sorted().append(odd).sorted()\n\
    \                                ^\n                                contentsOf:\
    \ \n/tmp/tmp_u2120id.swift:19:38: error: value of tuple type '()' has no member\
    \ 'sorted'\n    return even.sorted().append(odd).sorted()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            even.append(l[i])\n        } else {\n            odd.append(l[i])\n\
    \        }\n    }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp7szp3yh0/tmp7szp3yh0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cc3ba7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cc389eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cc389e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cc389d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7szp3yh0                        0x000055d288a547a4 <unavailable> + 6052

    5    libc.so.6                          0x00002b6cc3d93460 __libc_start_main +
    245

    6    tmp7szp3yh0                        0x000055d288a543a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    even = even.sorted()\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpdy9opqgg/tmpdy9opqgg.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b045f99ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b045f691b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b045f691988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b045f6907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdy9opqgg                        0x00005630993e2714 <unavailable> + 5908

    5    libc.so.6                          0x00002b045fb86460 __libc_start_main +
    245

    6    tmpdy9opqgg                        0x00005630993e2319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824782
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i : Int in l {\n        if i % 2 == 0 {\n    \
    \        even.append(i)\n        } else {\n            odd.append(i)\n       \
    \ }\n    }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpwy7gml7s.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpwy7gml7s.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpwy7gml7s.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = l\n    for\
    \ index in 0..<l.count {\n        if index % 2 == 0 {\n            even[index]\
    \ = even[index].sorted()\n        }\n    }\n    return even\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpqv_5jmtb.swift:13:39: error: value of type 'Int' has no member\
    \ 'sorted'\n            even[index] = even[index].sorted()\n                 \
    \         ~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = l\n    var\
    \ odd = l\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n            even[i]\
    \ = even[i]\n        } else {\n            odd[i] = odd[i]\n        }\n    }\n\
    \    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp_m_m9daq/tmp_m_m9daq.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68ff42fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68ff126b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68ff126988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68ff1257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_m_m9daq                        0x000055b1d6d51803 <unavailable> + 6147

    5    libc.so.6                          0x00002b68ff61b460 __libc_start_main +
    245

    6    tmp_m_m9daq                        0x000055b1d6d51259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = l\n    for\
    \ index in 0..<l.count {\n        if index % 2 == 0 {\n            even[index]\
    \ = even[index].sorted()\n        }\n    }\n    return even\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpqv_5jmtb.swift:13:39: error: value of type 'Int' has no member\
    \ 'sorted'\n            even[index] = even[index].sorted()\n                 \
    \         ~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            even.append(l[i])\n        } else {\n            odd.append(l[i])\n\
    \        }\n    }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpfrp3vcid.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpfrp3vcid.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpfrp3vcid.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            even.append(l[i])\n        } else {\n            odd.append(l[i])\n\
    \        }\n    }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp7szp3yh0/tmp7szp3yh0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cc3ba7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cc389eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cc389e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cc389d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7szp3yh0                        0x000055d288a547a4 <unavailable> + 6052

    5    libc.so.6                          0x00002b6cc3d93460 __libc_start_main +
    245

    6    tmp7szp3yh0                        0x000055d288a543a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    even = even.sorted()\n    for x in even {\n        odd.remove(x)\n \
    \   }\n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp122u0qda.swift:21:13: error: no exact matches in call to instance\
    \ method 'remove'\n        odd.remove(x)\n            ^\nSwift.Array:10:37: note:\
    \ incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable\
    \ public mutating func remove(at index: Int) -> Element\n                    \
    \                ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public mutating\
    \ func remove(at position: Self.Index) -> Self.Element\n                     \
    \               ^\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd).sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_u2120id.swift:19:26: error: cannot use mutating member on immutable\
    \ value: function call returns immutable value\n    return even.sorted().append(odd).sorted()\n\
    \           ~~~~~~~~~~~~~ ^\n/tmp/tmp_u2120id.swift:19:33: error: missing argument\
    \ label 'contentsOf:' in call\n    return even.sorted().append(odd).sorted()\n\
    \                                ^\n                                contentsOf:\
    \ \n/tmp/tmp_u2120id.swift:19:38: error: value of tuple type '()' has no member\
    \ 'sorted'\n    return even.sorted().append(odd).sorted()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            even.append(l[i])\n        } else {\n            odd.append(l[i])\n\
    \        }\n    }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp7szp3yh0/tmp7szp3yh0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cc3ba7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cc389eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cc389e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cc389d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7szp3yh0                        0x000055d288a547a4 <unavailable> + 6052

    5    libc.so.6                          0x00002b6cc3d93460 __libc_start_main +
    245

    6    tmp7szp3yh0                        0x000055d288a543a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for v in l {\n        if v%2 == 0 {\n            even.append(v)\n\
    \        } else {\n            odd.append(v)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp7zngyyg1.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp7zngyyg1.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp7zngyyg1.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmphelrqgl3.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmphelrqgl3.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmphelrqgl3.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted().append(odd).sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpbb1d8z7h.swift:19:33: error: missing argument label 'contentsOf:'\
    \ in call\n    return even.sorted().append(odd).sorted()\n                   \
    \             ^\n                                contentsOf: \n/tmp/tmpbb1d8z7h.swift:19:26:\
    \ error: cannot use mutating member on immutable value: function call returns\
    \ immutable value\n    return even.sorted().append(odd).sorted()\n           ~~~~~~~~~~~~~\
    \ ^\n/tmp/tmpbb1d8z7h.swift:19:38: error: value of tuple type '()' has no member\
    \ 'sorted'\n    return even.sorted().append(odd).sorted()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = l\n    for\
    \ index in 0..<l.count {\n        if index % 2 == 0 {\n            even[index]\
    \ = even[index].sorted()\n        }\n    }\n    return even\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpqv_5jmtb.swift:13:39: error: value of type 'Int' has no member\
    \ 'sorted'\n            even[index] = even[index].sorted()\n                 \
    \         ~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = l\n    var\
    \ odd = l\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n            even[i]\
    \ = even[i]\n        } else {\n            odd[i] = odd[i]\n        }\n    }\n\
    \    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp_m_m9daq/tmp_m_m9daq.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68ff42fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68ff126b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68ff126988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68ff1257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_m_m9daq                        0x000055b1d6d51803 <unavailable> + 6147

    5    libc.so.6                          0x00002b68ff61b460 __libc_start_main +
    245

    6    tmp_m_m9daq                        0x000055b1d6d51259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    even.sort()\n    odd.sort()\n    return even + odd\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpyrq68csc/tmpyrq68csc.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b965c741c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b965c438b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b965c438988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b965c4377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyrq68csc                        0x000055dc7e3397f4 <unavailable> + 6132

    5    libc.so.6                          0x00002b965c92d460 __libc_start_main +
    245

    6    tmpyrq68csc                        0x000055dc7e3393f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824782
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmprzjb728y.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmprzjb728y.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp90d75kg0/tmp90d75kg0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0219cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02199f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02199f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02199ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90d75kg0                        0x0000560653576774 <unavailable> + 6004

    5    libc.so.6                          0x00002b0219ee5460 __libc_start_main +
    245

    6    tmp90d75kg0                        0x0000560653576379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmprzjb728y.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmprzjb728y.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpmpb8lpbx.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpmpb8lpbx.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd).sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_u2120id.swift:19:26: error: cannot use mutating member on immutable\
    \ value: function call returns immutable value\n    return even.sorted().append(odd).sorted()\n\
    \           ~~~~~~~~~~~~~ ^\n/tmp/tmp_u2120id.swift:19:33: error: missing argument\
    \ label 'contentsOf:' in call\n    return even.sorted().append(odd).sorted()\n\
    \                                ^\n                                contentsOf:\
    \ \n/tmp/tmp_u2120id.swift:19:38: error: value of tuple type '()' has no member\
    \ 'sorted'\n    return even.sorted().append(odd).sorted()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmphelrqgl3.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmphelrqgl3.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmphelrqgl3.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpf8nwj1i5/tmpf8nwj1i5.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0eaae4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0eaab43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0eaab43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0eaab427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8nwj1i5                        0x0000557c5bb4e714 <unavailable> + 5908

    5    libc.so.6                          0x00002b0eab038460 __libc_start_main +
    245

    6    tmpf8nwj1i5                        0x0000557c5bb4e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824782
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n\
    \            even.append(l[i])\n        } else {\n            odd.append(l[i])\n\
    \        }\n    }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp7szp3yh0/tmp7szp3yh0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cc3ba7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cc389eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cc389e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cc389d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7szp3yh0                        0x000055d288a547a4 <unavailable> + 6052

    5    libc.so.6                          0x00002b6cc3d93460 __libc_start_main +
    245

    6    tmp7szp3yh0                        0x000055d288a543a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmps8rxwocu.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmps8rxwocu.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmps8rxwocu.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted() + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3xlh53al/tmp3xlh53al.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e384c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e381bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e381bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e381be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xlh53al                        0x000055a130122774 <unavailable> + 6004

    5    libc.so.6                          0x00002b1e386b4460 __libc_start_main +
    245

    6    tmp3xlh53al                        0x000055a130122379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: -4
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for v in l {\n        if v%2 == 0 {\n            even.append(v)\n\
    \        } else {\n            odd.append(v)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3347l7ir/tmp3347l7ir.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4c8282c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4c7f79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4c7f79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4c7f787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3347l7ir                        0x000055d308af9774 <unavailable> + 6004

    5    libc.so.6                          0x00002ba4c846e460 __libc_start_main +
    245

    6    tmp3347l7ir                        0x000055d308af9379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n          \
    \  even.append(i)\n        } else {\n            odd.append(i)\n        }\n  \
    \  }\n    return even.sorted().append(odd.sorted())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmphelrqgl3.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmphelrqgl3.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmphelrqgl3.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824781
- exit_code: 1
  program: "\n/// This function takes an array l and returns an array l' such that\n\
    /// l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n\
    /// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n          \
    \  even.append(x)\n        } else {\n            odd.append(x)\n        }\n  \
    \  }\n    return even.sorted().append(odd).sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_u2120id.swift:19:26: error: cannot use mutating member on immutable\
    \ value: function call returns immutable value\n    return even.sorted().append(odd).sorted()\n\
    \           ~~~~~~~~~~~~~ ^\n/tmp/tmp_u2120id.swift:19:33: error: missing argument\
    \ label 'contentsOf:' in call\n    return even.sorted().append(odd).sorted()\n\
    \                                ^\n                                contentsOf:\
    \ \n/tmp/tmp_u2120id.swift:19:38: error: value of tuple type '()' has no member\
    \ 'sorted'\n    return even.sorted().append(odd).sorted()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824781
