language: swift
name: HumanEval_113_odd_count
results:
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ count = 0\n        for c in s {\n            if c == '1' {\n               \
    \ count += 1\n            }\n        }\n        result.append(String(count))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9u_al2em.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_count = [String]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c == '1' {\n           \
    \     odd_count += 1\n            }\n        }\n        odd_count = \"the number\
    \ of odd elements \\(odd_count) in the str\\(String(s.count)) of the \\(String(s.count)).\"\
    \n        odd_counts.append(odd_count)\n    }\n    return odd_counts\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpm_789519.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n/tmp/tmpm_789519.swift:19:21: error: cannot assign value of type\
    \ 'String' to type 'Int'\n        odd_count = \"the number of odd elements \\\
    (odd_count) in the str\\(String(s.count)) of the \\(String(s.count)).\"\n    \
    \                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpm_789519.swift:20:9: error: cannot find 'odd_counts' in scope\n      \
    \  odd_counts.append(odd_count)\n        ^~~~~~~~~~\n/tmp/tmpm_789519.swift:22:12:\
    \ error: cannot find 'odd_counts' in scope\n    return odd_counts\n          \
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c >= '0' && c <= '9' {\n\
    \                odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    var result = [String]()\n    for odd_count in odd_counts {\n     \
    \   let str = String(odd_count)\n        result.append(str)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpd_3s15fu.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c >= '0' && c <= '9' {\n                    ^~~\n \
    \                   \"0\"\n/tmp/tmpd_3s15fu.swift:15:33: error: single-quoted\
    \ string literal found, use '\"'\n            if c >= '0' && c <= '9' {\n    \
    \                            ^~~\n                                \"9\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_count_str = [String]()\n    for s in lst {\n    \
    \    var odd_count = 0\n        for c in s {\n            if Int(c) % 2 != 0 {\n\
    \                odd_count += 1\n            }\n        }\n        odd_count_str.append(String(odd_count))\n\
    \    }\n    return odd_count_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpixwsxo1t.swift:15:16: error: no exact matches in call to initializer\
    \ \n            if Int(c) % 2 != 0 {\n               ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n    }\n    return lst.map { String(odd_counts[$0]) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5zfolrzx.swift:13:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n                                                ^\n/tmp/tmp5zfolrzx.swift:15:40:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \    return lst.map { String(odd_counts[$0]) }\n                             \
    \          ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_count_str = [String]()\n    for s in lst {\n    \
    \    var odd_count = 0\n        for c in s {\n            if c == '1' {\n    \
    \            odd_count += 1\n            }\n        }\n        odd_count_str.append(String(odd_count))\n\
    \    }\n    return odd_count_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnyzq0vll.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c >= '0' && c <= '9' {\n\
    \                odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    var result = [String]()\n    for odd_count in odd_counts {\n     \
    \   let s = String(odd_count)\n        result.append(s)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6wqh7anq.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c >= '0' && c <= '9' {\n                    ^~~\n \
    \                   \"0\"\n/tmp/tmp6wqh7anq.swift:15:33: error: single-quoted\
    \ string literal found, use '\"'\n            if c >= '0' && c <= '9' {\n    \
    \                            ^~~\n                                \"9\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts: [String] = []\n    for s in lst {\n     \
    \   var odd_count = 0\n        for c in s {\n            if c == '1' {\n     \
    \           odd_count += 1\n            }\n        }\n        odd_counts.append(String(odd_count))\n\
    \    }\n    return odd_counts\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpi8f4keo3.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n\tvar odd_count [String]\n\tfor i := 0; i < len(lst); i++ {\n\
    \t\todd_count[i] = \"the number of odd elements \" + odd_count(lst[i]) + \" of\
    \ the \" + lst[i]\n\t}\n\treturn odd_count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n\
    \ the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnmvi9hl6.swift:11:15: error: consecutive statements on a line must\
    \ be separated by ';'\n        var odd_count [String]\n                     ^\n\
    \                     ;\n/tmp/tmpnmvi9hl6.swift:12:9: error: expected type\n \
    \       for i := 0; i < len(lst); i++ {\n               ^\n                <#type#>\n\
    /tmp/tmpnmvi9hl6.swift:12:9: error: expected 'in' after for-each pattern\n   \
    \     for i := 0; i < len(lst); i++ {\n               ^\n/tmp/tmpnmvi9hl6.swift:12:9:\
    \ error: expected Sequence expression for for-each loop\n        for i := 0; i\
    \ < len(lst); i++ {\n               ^\n/tmp/tmpnmvi9hl6.swift:11:6: error: type\
    \ annotation missing in pattern\n        var odd_count [String]\n            ^\n\
    /tmp/tmpnmvi9hl6.swift:11:16: error: expected member name or constructor call\
    \ after type name\n        var odd_count [String]\n                      ^\n/tmp/tmpnmvi9hl6.swift:11:23:\
    \ note: add arguments after the type to construct a value of the type\n      \
    \  var odd_count [String]\n                             ^\n                  \
    \            ()\n/tmp/tmpnmvi9hl6.swift:11:23: note: use '.self' to reference\
    \ the type object\n        var odd_count [String]\n                          \
    \   ^\n                              .self\n/tmp/tmpnmvi9hl6.swift:11:16: warning:\
    \ expression of type '[String].Type' is unused\n        var odd_count [String]\n\
    \                      ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCount = [String]()\n    for s in lst {\n        var\
    \ count = 0\n        for c in s {\n            if c == '1' {\n               \
    \ count += 1\n            }\n        }\n        oddCount = append(oddCount, String(count))\n\
    \    }\n    return oddCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqoi2ra90.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n/tmp/tmpqoi2ra90.swift:19:20: error: cannot find 'append' in scope\n\
    \        oddCount = append(oddCount, String(count))\n                   ^~~~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_count_str = [String]()\n    for s in lst {\n    \
    \    odd_count_str = append(odd_count_str, fmt.Sprintf(\"the number of odd elements\
    \ %n the str%v %v of the %v\", len(s), len(s), len(s), len(s)))\n    }\n    return\
    \ odd_count_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    assert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp60j78bpf.swift:13:25: error: cannot find 'append' in scope\n  \
    \      odd_count_str = append(odd_count_str, fmt.Sprintf(\"the number of odd elements\
    \ %n the str%v %v of the %v\", len(s), len(s), len(s), len(s)))\n            \
    \            ^~~~~~\n/tmp/tmp60j78bpf.swift:13:47: error: cannot find 'fmt' in\
    \ scope\n        odd_count_str = append(odd_count_str, fmt.Sprintf(\"the number\
    \ of odd elements %n the str%v %v of the %v\", len(s), len(s), len(s), len(s)))\n\
    \                                              ^~~\n/tmp/tmp60j78bpf.swift:13:115:\
    \ error: cannot find 'len' in scope\n        odd_count_str = append(odd_count_str,\
    \ fmt.Sprintf(\"the number of odd elements %n the str%v %v of the %v\", len(s),\
    \ len(s), len(s), len(s)))\n                                                 \
    \                                                                 ^~~\n/tmp/tmp60j78bpf.swift:13:123:\
    \ error: cannot find 'len' in scope\n        odd_count_str = append(odd_count_str,\
    \ fmt.Sprintf(\"the number of odd elements %n the str%v %v of the %v\", len(s),\
    \ len(s), len(s), len(s)))\n                                                 \
    \                                                                         ^~~\n\
    /tmp/tmp60j78bpf.swift:13:131: error: cannot find 'len' in scope\n        odd_count_str\
    \ = append(odd_count_str, fmt.Sprintf(\"the number of odd elements %n the str%v\
    \ %v of the %v\", len(s), len(s), len(s), len(s)))\n                         \
    \                                                                            \
    \                             ^~~\n/tmp/tmp60j78bpf.swift:13:139: error: cannot\
    \ find 'len' in scope\n        odd_count_str = append(odd_count_str, fmt.Sprintf(\"\
    the number of odd elements %n the str%v %v of the %v\", len(s), len(s), len(s),\
    \ len(s)))\n                                                                 \
    \                                                                         ^~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n\tvar odd_count [String: Int] = [:]\n\tfor _, s := range lst\
    \ {\n\t\tfor i, c := range s {\n\t\t\tif odd_count[c] == nil {\n\t\t\t\todd_count[c]\
    \ = s[i]\n\t\t\t} else {\n\t\t\t\todd_count[c] = odd_count[c] + s[i]\n\t\t\t}\n\
    \t\t}\n\t}\n\tvar result [String]\n\tfor _, v := range odd_count {\n\t\tresult.append(v\
    \ + \" \" + String(odd_count[v]))\n\t}\n\treturn result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg5yodziq.swift:11:15: error: consecutive statements on a line must\
    \ be separated by ';'\n        var odd_count [String: Int] = [:]\n           \
    \          ^\n                     ;\n/tmp/tmpg5yodziq.swift:12:7: error: expected\
    \ 'in' after for-each pattern\n        for _, s := range lst {\n             ^\n\
    /tmp/tmpg5yodziq.swift:12:7: error: expected Sequence expression for for-each\
    \ loop\n        for _, s := range lst {\n             ^\n/tmp/tmpg5yodziq.swift:13:8:\
    \ error: expected 'in' after for-each pattern\n                for i, c := range\
    \ s {\n                     ^\n/tmp/tmpg5yodziq.swift:13:8: error: expected Sequence\
    \ expression for for-each loop\n                for i, c := range s {\n      \
    \               ^\n/tmp/tmpg5yodziq.swift:21:12: error: consecutive statements\
    \ on a line must be separated by ';'\n        var result [String]\n          \
    \        ^\n                  ;\n/tmp/tmpg5yodziq.swift:22:7: error: expected\
    \ 'in' after for-each pattern\n        for _, v := range odd_count {\n       \
    \      ^\n/tmp/tmpg5yodziq.swift:22:7: error: expected Sequence expression for\
    \ for-each loop\n        for _, v := range odd_count {\n             ^\n/tmp/tmpg5yodziq.swift:11:6:\
    \ error: type annotation missing in pattern\n        var odd_count [String: Int]\
    \ = [:]\n            ^\n/tmp/tmpg5yodziq.swift:11:16: error: cannot assign to\
    \ immutable expression of type '[String : Int].Type'\n        var odd_count [String:\
    \ Int] = [:]\n                      ^~~~~~~~~~~~~\n/tmp/tmpg5yodziq.swift:11:32:\
    \ error: cannot assign value of type '[AnyHashable : Any]' to type '[String :\
    \ Int].Type'\n        var odd_count [String: Int] = [:]\n                    \
    \                  ^~~\n/tmp/tmpg5yodziq.swift:21:6: error: type annotation missing\
    \ in pattern\n        var result [String]\n            ^\n/tmp/tmpg5yodziq.swift:21:13:\
    \ error: expected member name or constructor call after type name\n        var\
    \ result [String]\n                   ^\n/tmp/tmpg5yodziq.swift:21:20: note: add\
    \ arguments after the type to construct a value of the type\n        var result\
    \ [String]\n                   "
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ count = 0\n        for c in s {\n            if c >= '0' && c <= '9' {\n   \
    \             count += 1\n            }\n        }\n        result.append(String(count))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpshnamuag.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c >= '0' && c <= '9' {\n                    ^~~\n \
    \                   \"0\"\n/tmp/tmpshnamuag.swift:15:33: error: single-quoted\
    \ string literal found, use '\"'\n            if c >= '0' && c <= '9' {\n    \
    \                            ^~~\n                                \"9\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCounts = [Int]()\n    for s in lst {\n        oddCounts\
    \ = append(oddCounts, s.countOdd())\n    }\n    return lst.map { s -> String in\n\
    \        let odds = oddCounts.filter{$0 % 2 == 1}\n        return s.stringByReplacingOccurrencesOfString(\"\
    n\", withString: String(odds.count), options: .LiteralSearch, range: nil)\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"])\
    \ == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7hqoutzh.swift:13:21: error: cannot find 'append' in scope\n  \
    \      oddCounts = append(oddCounts, s.countOdd())\n                    ^~~~~~\n\
    /tmp/tmp7hqoutzh.swift:13:41: error: value of type 'String' has no member 'countOdd'\n\
    \        oddCounts = append(oddCounts, s.countOdd())\n                       \
    \               ~ ^~~~~~~~\n/tmp/tmp7hqoutzh.swift:17:18: error: value of type\
    \ 'String' has no member 'stringByReplacingOccurrencesOfString'\n        return\
    \ s.stringByReplacingOccurrencesOfString(\"n\", withString: String(odds.count),\
    \ options: .LiteralSearch, range: nil)\n               ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp7hqoutzh.swift:17:102: error: cannot infer contextual base in reference\
    \ to member 'LiteralSearch'\n        return s.stringByReplacingOccurrencesOfString(\"\
    n\", withString: String(odds.count), options: .LiteralSearch, range: nil)\n  \
    \                                                                            \
    \                      ~^~~~~~~~~~~~~\n/tmp/tmp7hqoutzh.swift:17:124: error: 'nil'\
    \ requires a contextual type\n        return s.stringByReplacingOccurrencesOfString(\"\
    n\", withString: String(odds.count), options: .LiteralSearch, range: nil)\n  \
    \                                                                            \
    \                                             ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c % 2 != 0 {\n         \
    \       odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    var result = [String]()\n    for odd_count in odd_counts {\n     \
    \   let s = String(odd_count)\n        result.append(s)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpopvjr1w4.swift:15:16: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n            if c % 2 != 0 {\n             \
    \  ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s.characters {\n            if c % 2 != 0 {\n\
    \                odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    var result = [String]()\n    for odd_count in odd_counts {\n     \
    \   result.append(String(odd_count))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdnk5ck7r.swift:14:20: error: 'characters' is unavailable: Please\
    \ use String directly\n        for c in s.characters {\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpdnk5ck7r.swift:15:16:\
    \ error: cannot convert value of type 'Character' to expected argument type 'Int'\n\
    \            if c % 2 != 0 {\n               ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c >= '0' && c <= '9' {\n\
    \                odd_count += 1\n            }\n        }\n        result.append(String(odd_count))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc4egynz0.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c >= '0' && c <= '9' {\n                    ^~~\n \
    \                   \"0\"\n/tmp/tmpc4egynz0.swift:15:33: error: single-quoted\
    \ string literal found, use '\"'\n            if c >= '0' && c <= '9' {\n    \
    \                            ^~~\n                                \"9\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.countOf(\"\
    0\"))\n    }\n    return lst.map { s -> String in\n        let odd_count = odd_counts[s.startIndex]\n\
    \        return String(format: \"the number of odd elements %n the str%n %n of\
    \ the %nput.\", odd_count, s.startIndex, s.endIndex)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxczg132_.swift:13:29: error: value of type 'String' has no member\
    \ 'countOf'\n        odd_counts.append(s.countOf(\"0\"))\n                   \
    \       ~ ^~~~~~~\n/tmp/tmpxczg132_.swift:16:35: error: subscript 'subscript(_:)'\
    \ requires that 'String.Index' conform to 'RangeExpression'\n        let odd_count\
    \ = odd_counts[s.startIndex]\n                                  ^\nSwift.MutableCollection:2:23:\
    \ note: where 'R' = 'String.Index'\n    @inlinable public subscript<R>(r: R) ->\
    \ Self.SubSequence where R : RangeExpression, Self.Index == R.Bound { get set\
    \ }\n                      ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c == '1' {\n           \
    \     odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    return odd_counts.map { String($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp08azyl31.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCounts = [Int]()\n    for s in lst {\n        var\
    \ count = 0\n        for c in s {\n            if c == '0' {\n               \
    \ count = count + 1\n            } else {\n                count = count + 0\n\
    \            }\n        }\n        oddCounts.append(count)\n    }\n    var output\
    \ = [String]()\n    for count in oddCounts {\n        let str = String(count)\n\
    \        output.append(str)\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpp21rq76w.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '0' {\n                    ^~~\n             \
    \       \"0\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.countOf(\"\
    0\"))\n    }\n    return lst.map { i -> String in\n        let odd_count = odd_counts[i]\n\
    \        return String(format: \"the number of odd elements %n the str%n %n of\
    \ the %nput.\", odd_count, i, odd_count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n\
    \ the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3hu8r0x3.swift:13:29: error: value of type 'String' has no member\
    \ 'countOf'\n        odd_counts.append(s.countOf(\"0\"))\n                   \
    \       ~ ^~~~~~~\n/tmp/tmp3hu8r0x3.swift:16:35: error: no exact matches in call\
    \ to subscript \n        let odd_count = odd_counts[i]\n                     \
    \             ^\nSwift.Array:16:23: note: candidate expects value of type 'Int'\
    \ for parameter #1 (got 'String')\n    @inlinable public subscript(index: Int)\
    \ -> Element { get set }\n                      ^\nSwift.Array:17:23: note: candidate\
    \ expects value of type 'Range<Int>' for parameter #1 (got 'String')\n    @inlinable\
    \ public subscript(bounds: Range<Int>) -> ArraySlice<Element> { get set }\n  \
    \                    ^\nSwift.Collection:3:23: note: candidate expects value of\
    \ type '(UnboundedRange_) -> ()' for parameter #1 (got 'String')\n    @inlinable\
    \ public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n \
    \                     ^\nSwift.MutableCollection:3:23: note: candidate expects\
    \ value of type '(UnboundedRange_) -> ()' for parameter #1 (got 'String')\n  \
    \  @inlinable public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence\
    \ { get set }\n                      ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c == '1' {\n           \
    \     odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    return odd_counts.map { String($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp08azyl31.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n\tvar odd_counts: [String] = []\n\tfor _, s := range lst {\n\t\
    \todd_counts = append(odd_counts, fmt.Sprintf(\"the number of odd elements %n\
    \ the str%v %v of the %v\", len(s), len(s), len(s), len(s)))\n\t}\n\treturn odd_counts\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_c1b_rnq.swift:12:7: error: expected 'in' after for-each pattern\n\
    \        for _, s := range lst {\n             ^\n/tmp/tmp_c1b_rnq.swift:12:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, s := range\
    \ lst {\n             ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_count = [String]()\n    for s in lst {\n        odd_count\
    \ = append(odd_count, s.countOdd())\n    }\n    return odd_count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpv40mn36d.swift:13:21: error: cannot find 'append' in scope\n  \
    \      odd_count = append(odd_count, s.countOdd())\n                    ^~~~~~\n\
    /tmp/tmpv40mn36d.swift:13:41: error: value of type 'String' has no member 'countOdd'\n\
    \        odd_count = append(odd_count, s.countOdd())\n                       \
    \               ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if Int(c) % 2 != 0 {\n    \
    \            odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    var result = [String]()\n    for index in 0..<odd_counts.count {\n\
    \        let odd_count = odd_counts[index]\n        let s = String(odd_count)\n\
    \        result.append(s)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpz4sib3hd.swift:15:16: error: no exact matches in call to initializer\
    \ \n            if Int(c) % 2 != 0 {\n               ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCounts = [Int]()\n    for s in lst {\n        var\
    \ count = 0\n        for c in s.characters {\n            if Int(c) % 2 == 1 {\n\
    \                count += 1\n            }\n        }\n        oddCounts.append(count)\n\
    \    }\n    return oddCounts.map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n\
    \ the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5trxy2n8.swift:14:20: error: 'characters' is unavailable: Please\
    \ use String directly\n        for c in s.characters {\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5trxy2n8.swift:15:16:\
    \ error: no exact matches in call to initializer \n            if Int(c) % 2 ==\
    \ 1 {\n               ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_count = [String]()\n    for s in lst {\n        var\
    \ odd_digits = [Int]()\n        for c in s.characters {\n            if Int(c)\
    \ % 2 != 0 {\n                odd_digits.append(0)\n            } else {\n   \
    \             odd_digits.append(1)\n            }\n        }\n        odd_count[s.characters.count]\
    \ = String(odd_digits.count)\n    }\n    return odd_count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpm46c16tx.swift:14:20: error: 'characters' is unavailable: Please\
    \ use String directly\n        for c in s.characters {\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpm46c16tx.swift:15:16:\
    \ error: no exact matches in call to initializer \n            if Int(c) % 2 !=\
    \ 0 {\n               ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n/tmp/tmpm46c16tx.swift:21:21:\
    \ error: 'characters' is unavailable: Please use String directly\n        odd_count[s.characters.count]\
    \ = String(odd_digits.count)\n                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCount = [String]()\n    for s in lst {\n        var\
    \ count = 0\n        for c in s {\n            if c >= '0' && c <= '9' {\n   \
    \             count += 1\n            }\n        }\n        oddCount = append(oddCount,\
    \ String(count))\n    }\n    return oddCount\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n\
    \ the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmplh3h87yp.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c >= '0' && c <= '9' {\n                    ^~~\n \
    \                   \"0\"\n/tmp/tmplh3h87yp.swift:15:33: error: single-quoted\
    \ string literal found, use '\"'\n            if c >= '0' && c <= '9' {\n    \
    \                            ^~~\n                                \"9\"\n/tmp/tmplh3h87yp.swift:19:20:\
    \ error: cannot find 'append' in scope\n        oddCount = append(oddCount, String(count))\n\
    \                   ^~~~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c == '1' {\n           \
    \     odd_count += 1\n            }\n        }\n        result.append(String(odd_count))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8_zzhrff.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if Int(c) % 2 != 0 {\n    \
    \            odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    var result = [String]()\n    for odd_count in odd_counts {\n     \
    \   let s = String(odd_count)\n        result.append(s)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4xa5tofq.swift:15:16: error: no exact matches in call to initializer\
    \ \n            if Int(c) % 2 != 0 {\n               ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.countOdd())\n\
    \    }\n    return lst.map { s -> String in\n        let odd_count = odd_counts[s.startIndex]\n\
    \        return String(format: \"the number of odd elements %n the str%n %n of\
    \ the %nput.\", odd_count, s.startIndex, s.endIndex)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxk8scndv.swift:13:29: error: value of type 'String' has no member\
    \ 'countOdd'\n        odd_counts.append(s.countOdd())\n                      \
    \    ~ ^~~~~~~~\n/tmp/tmpxk8scndv.swift:16:35: error: subscript 'subscript(_:)'\
    \ requires that 'String.Index' conform to 'RangeExpression'\n        let odd_count\
    \ = odd_counts[s.startIndex]\n                                  ^\nSwift.MutableCollection:2:23:\
    \ note: where 'R' = 'String.Index'\n    @inlinable public subscript<R>(r: R) ->\
    \ Self.SubSequence where R : RangeExpression, Self.Index == R.Bound { get set\
    \ }\n                      ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n    }\n    return lst.map { \"the number of odd elements\
    \ \\(odd_counts[lst.index(of: $0)]) \\(String(s[odd_counts[lst.index(of: $0)]..<s.count]))\
    \ in the \\(lst.index(of: $0)+1)'th string of the \\(lst.count)'th input.\" }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyk0hd48p.swift:13:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n                                                ^\n/tmp/tmpyk0hd48p.swift:15:92:\
    \ error: cannot find 's' in scope\n    return lst.map { \"the number of odd elements\
    \ \\(odd_counts[lst.index(of: $0)]) \\(String(s[odd_counts[lst.index(of: $0)]..<s.count]))\
    \ in the \\(lst.index(of: $0)+1)'th string of the \\(lst.count)'th input.\" }\n\
    \                                                                            \
    \               ^\n/tmp/tmpyk0hd48p.swift:15:126: error: cannot find 's' in scope\n\
    \    return lst.map { \"the number of odd elements \\(odd_counts[lst.index(of:\
    \ $0)]) \\(String(s[odd_counts[lst.index(of: $0)]..<s.count])) in the \\(lst.index(of:\
    \ $0)+1)'th string of the \\(lst.count)'th input.\" }\n                      \
    \                                                                            \
    \                           ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts: [String] = []\n    for s in lst {\n     \
    \   var odd_count = 0\n        for c in s {\n            if c % 2 == 1 {\n   \
    \             odd_count += 1\n            }\n        }\n        odd_counts.append(String(odd_count))\n\
    \    }\n    return odd_counts\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpirycbz8h.swift:15:16: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n            if c % 2 == 1 {\n             \
    \  ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.countOdd())\n\
    \    }\n    return lst.map { i in\n        let s = String(i)\n        let odd_count\
    \ = odd_counts[i]\n        return \"the number of odd elements \\(odd_count) in\
    \ the str\\(s) of the str\\(s).\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the\
    \ number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\",\
    \ \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxxh5zv90.swift:13:29: error: value of type 'String' has no member\
    \ 'countOdd'\n        odd_counts.append(s.countOdd())\n                      \
    \    ~ ^~~~~~~~\n/tmp/tmpxxh5zv90.swift:17:35: error: no exact matches in call\
    \ to subscript \n        let odd_count = odd_counts[i]\n                     \
    \             ^\nSwift.Array:16:23: note: candidate expects value of type 'Int'\
    \ for parameter #1 (got 'String')\n    @inlinable public subscript(index: Int)\
    \ -> Element { get set }\n                      ^\nSwift.Array:17:23: note: candidate\
    \ expects value of type 'Range<Int>' for parameter #1 (got 'String')\n    @inlinable\
    \ public subscript(bounds: Range<Int>) -> ArraySlice<Element> { get set }\n  \
    \                    ^\nSwift.Collection:3:23: note: candidate expects value of\
    \ type '(UnboundedRange_) -> ()' for parameter #1 (got 'String')\n    @inlinable\
    \ public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n \
    \                     ^\nSwift.MutableCollection:3:23: note: candidate expects\
    \ value of type '(UnboundedRange_) -> ()' for parameter #1 (got 'String')\n  \
    \  @inlinable public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence\
    \ { get set }\n                      ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ count = 0\n        for c in s {\n            if c == '1' {\n               \
    \ count += 1\n            }\n        }\n        result.append(String(count))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9u_al2em.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n\tvar odd_counts: [String] = []\n\tfor _, s := range lst {\n\t\
    \todd_counts = append(odd_counts, strings.Count(s, \"1\") + strings.Count(s, \"\
    8\"))\n\t}\n\treturn odd_counts\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_9_j_iaf.swift:12:7: error: expected 'in' after for-each pattern\n\
    \        for _, s := range lst {\n             ^\n/tmp/tmp_9_j_iaf.swift:12:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, s := range\
    \ lst {\n             ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n    }\n    return odd_counts.map { String($0) }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1vdaup_w.swift:13:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n                                                ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n    }\n    return lst.map { \"the number of odd elements\
    \ \\(odd_counts[lst.index(of: $0)]) \\($0)\" }.joined(separator: \", \")\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp71fgq2_p.swift:13:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n                                                ^\n/tmp/tmp71fgq2_p.swift:15:92:\
    \ error: no 'joined' candidates produce the expected contextual result type '[String]'\n\
    \    return lst.map { \"the number of odd elements \\(odd_counts[lst.index(of:\
    \ $0)]) \\($0)\" }.joined(separator: \", \")\n                               \
    \                                                            ^\nSwift.Sequence:2:40:\
    \ note: 'joined(separator:)' produces 'JoinedSequence<[String]>', not the expected\
    \ contextual result type '[String]'\n    @inlinable public __consuming func joined<Separator>(separator:\
    \ Separator) -> JoinedSequence<Self> where Separator : Sequence, Separator.Element\
    \ == Self.Element.Element\n                                       ^\nSwift.Sequence:2:17:\
    \ note: 'joined(separator:)' produces 'String', not the expected contextual result\
    \ type '[String]'\n    public func joined(separator: String = \"\") -> String\n\
    \                ^\nSwift.BidirectionalCollection:2:17: note: 'joined(separator:)'\
    \ produces 'String', not the expected contextual result type '[String]'\n    public\
    \ func joined(separator: String = \"\") -> String\n                ^\nSwift.Sequence:2:40:\
    \ note: 'joined(separator:)' produces 'JoinedSequence<[String]>', not the expected\
    \ contextual result type '[String]'\n    @inlinable public __consuming func joined<Separator>(separator:\
    \ Separator) -> JoinedSequence<Self> where Separator : Sequence, Separator.Element\
    \ == Self.Element.Element\n                                       ^\nSwift.Sequence:2:17:\
    \ note: 'joined(separator:)' produces 'String', not the expected contextual result\
    \ type '[String]'\n    public func joined(separator: String = \"\") -> String\n\
    \                ^\nSwift.BidirectionalCollection:2:17: note: 'joined(separator:)'\
    \ produces 'String', not the expected contextual result type '[String]'\n    public\
    \ func joined(separator: String = \"\""
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ odd = 0\n        for c in s {\n            if c >= '0' && c <= '9' {\n     \
    \           odd += 1\n            }\n        }\n        result.append(String(odd))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmplufboa4c.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c >= '0' && c <= '9' {\n                    ^~~\n \
    \                   \"0\"\n/tmp/tmplufboa4c.swift:15:33: error: single-quoted\
    \ string literal found, use '\"'\n            if c >= '0' && c <= '9' {\n    \
    \                            ^~~\n                                \"9\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n    }\n    return lst.map { String(odd_counts[$0]) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5zfolrzx.swift:13:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n                                                ^\n/tmp/tmp5zfolrzx.swift:15:40:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \    return lst.map { String(odd_counts[$0]) }\n                             \
    \          ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n    }\n    return odd_counts.map { String($0) }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1vdaup_w.swift:13:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n                                                ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts: [Int] = []\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if isOdd(Int(c)) {\n      \
    \          odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    return odd_counts.map { String($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpp3w5j0tw.swift:15:16: error: cannot find 'isOdd' in scope\n   \
    \         if isOdd(Int(c)) {\n               ^~~~~\n/tmp/tmpp3w5j0tw.swift:15:22:\
    \ error: no exact matches in call to initializer \n            if isOdd(Int(c))\
    \ {\n                     ^\n/tmp/tmpp3w5j0tw.swift:15:22: note: found candidate\
    \ with type '(Float16) -> Int'\n            if isOdd(Int(c)) {\n             \
    \        ^\n/tmp/tmpp3w5j0tw.swift:15:22: note: found candidate with type '(Float)\
    \ -> Int'\n            if isOdd(Int(c)) {\n                     ^\n/tmp/tmpp3w5j0tw.swift:15:22:\
    \ note: found candidate with type '(Double) -> Int'\n            if isOdd(Int(c))\
    \ {\n                     ^\n/tmp/tmpp3w5j0tw.swift:15:22: note: found candidate\
    \ with type '(Float80) -> Int'\n            if isOdd(Int(c)) {\n             \
    \        ^\n/tmp/tmpp3w5j0tw.swift:15:22: note: found candidate with type '(Builtin.Int64)\
    \ -> Int'\n            if isOdd(Int(c)) {\n                     ^\n/tmp/tmpp3w5j0tw.swift:15:22:\
    \ note: found candidate with type '(Builtin.Word) -> Int'\n            if isOdd(Int(c))\
    \ {\n                     ^\n/tmp/tmpp3w5j0tw.swift:15:22: note: found candidate\
    \ with type '(String) -> Int?'\n            if isOdd(Int(c)) {\n             \
    \        ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts: [Int] = []\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s.characters {\n            if Int(c) % 2 !=\
    \ 0 {\n                odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    return odd_counts.map { String($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfegk1_eb.swift:14:20: error: 'characters' is unavailable: Please\
    \ use String directly\n        for c in s.characters {\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpfegk1_eb.swift:15:16:\
    \ error: no exact matches in call to initializer \n            if Int(c) % 2 !=\
    \ 0 {\n               ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s.characters {\n            if Int(c) % 2 ==\
    \ 1 {\n                odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    return odd_counts.map { String($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmphn_is794.swift:14:20: error: 'characters' is unavailable: Please\
    \ use String directly\n        for c in s.characters {\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmphn_is794.swift:15:16:\
    \ error: no exact matches in call to initializer \n            if Int(c) % 2 ==\
    \ 1 {\n               ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCounts = [Int]()\n    for s in lst {\n        var\
    \ count = 0\n        for c in s {\n            if c == '1' {\n               \
    \ count += 1\n            }\n        }\n        oddCounts.append(count)\n    }\n\
    \    var result = [String]()\n    for count in oddCounts {\n        let str =\
    \ String(count)\n        result.append(str + \" in \" + str)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmphk_i8ay1.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCounts = [Int]()\n    for s in lst {\n        var\
    \ count = 0\n        for c in s {\n            if Int(c) % 2 != 0 {\n        \
    \        count += 1\n            }\n        }\n        oddCounts.append(count)\n\
    \    }\n    return oddCounts.map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n\
    \ the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgwrvqli9.swift:15:16: error: no exact matches in call to initializer\
    \ \n            if Int(c) % 2 != 0 {\n               ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts: [Int] = [0]\n    for s in lst {\n       \
    \ odd_counts[s.count(\"0\")!] += 1\n    }\n    var result: [String] = []\n   \
    \ for n in 0..<odd_counts.count {\n        result.append(String(odd_counts[n]))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnlonpi_1.swift:13:22: error: cannot call value of non-function\
    \ type 'Int'\n        odd_counts[s.count(\"0\")!] += 1\n                     ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_count = [String]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c >= '0' && c <= '9' {\n\
    \                odd_count += 1\n            }\n        }\n        odd_count =\
    \ \"the number of odd elements \\(odd_count) in the str\\(String(s.count)) of\
    \ the \\(String(s.count)) input.\"\n        odd_count.append(odd_count)\n    }\n\
    \    return odd_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpr6hd81du.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c >= '0' && c <= '9' {\n                    ^~~\n \
    \                   \"0\"\n/tmp/tmpr6hd81du.swift:15:33: error: single-quoted\
    \ string literal found, use '\"'\n            if c >= '0' && c <= '9' {\n    \
    \                            ^~~\n                                \"9\"\n/tmp/tmpr6hd81du.swift:19:21:\
    \ error: cannot assign value of type 'String' to type 'Int'\n        odd_count\
    \ = \"the number of odd elements \\(odd_count) in the str\\(String(s.count)) of\
    \ the \\(String(s.count)) input.\"\n                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr6hd81du.swift:20:19: error: value of type 'Int' has no member 'append'\n\
    \        odd_count.append(odd_count)\n        ~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n\tvar odd_count [String: Int] = [:]\n\tfor i := 0; i < len(lst);\
    \ i++ {\n\t\todd_count[lst[i]] = odd_count[lst[i]]! + Int(lst[i].count(\"1\"))\n\
    \t}\n\tvar result [String]\n\tfor key, value := range odd_count {\n\t\tresult.append(String(value))\n\
    \t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmphdxqxfki.swift:11:15: error: consecutive statements on a line must\
    \ be separated by ';'\n        var odd_count [String: Int] = [:]\n           \
    \          ^\n                     ;\n/tmp/tmphdxqxfki.swift:12:9: error: expected\
    \ type\n        for i := 0; i < len(lst); i++ {\n               ^\n          \
    \      <#type#>\n/tmp/tmphdxqxfki.swift:12:9: error: expected 'in' after for-each\
    \ pattern\n        for i := 0; i < len(lst); i++ {\n               ^\n/tmp/tmphdxqxfki.swift:12:9:\
    \ error: expected Sequence expression for for-each loop\n        for i := 0; i\
    \ < len(lst); i++ {\n               ^\n/tmp/tmphdxqxfki.swift:15:12: error: consecutive\
    \ statements on a line must be separated by ';'\n        var result [String]\n\
    \                  ^\n                  ;\n/tmp/tmphdxqxfki.swift:16:9: error:\
    \ expected 'in' after for-each pattern\n        for key, value := range odd_count\
    \ {\n               ^\n/tmp/tmphdxqxfki.swift:16:9: error: expected Sequence expression\
    \ for for-each loop\n        for key, value := range odd_count {\n           \
    \    ^\n/tmp/tmphdxqxfki.swift:11:6: error: type annotation missing in pattern\n\
    \        var odd_count [String: Int] = [:]\n            ^\n/tmp/tmphdxqxfki.swift:11:16:\
    \ error: cannot assign to immutable expression of type '[String : Int].Type'\n\
    \        var odd_count [String: Int] = [:]\n                      ^~~~~~~~~~~~~\n\
    /tmp/tmphdxqxfki.swift:11:32: error: cannot assign value of type '[AnyHashable\
    \ : Any]' to type '[String : Int].Type'\n        var odd_count [String: Int] =\
    \ [:]\n                                      ^~~\n/tmp/tmphdxqxfki.swift:15:6:\
    \ error: type annotation missing in pattern\n        var result [String]\n   \
    \         ^\n/tmp/tmphdxqxfki.swift:15:13: error: expected member name or constructor\
    \ call after type name\n        var result [String]\n                   ^\n/tmp/tmphdxqxfki.swift:15:20:\
    \ note: add arguments after the type to construct a value of the type\n      \
    \  var result [String]\n                          ^\n                        \
    \   ()\n/tmp/tmphdxqxfki.swift:15:20: note: use '.self' to reference the type\
    \ o"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n    }\n    return lst.map { \"the number of odd elements\
    \ \\(odd_counts[lst.index(of: $0)]) \\(String(s[odd_counts[lst.index(of: $0)]]))\
    \ in the \\(lst.index(of: $0)+1)'th string of the \\(lst.count) strings of the\
    \ input\" }.joined(separator: \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the\
    \ number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\",\
    \ \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc5qorwhh.swift:13:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n                                                ^\n/tmp/tmpc5qorwhh.swift:15:92:\
    \ error: cannot find 's' in scope\n    return lst.map { \"the number of odd elements\
    \ \\(odd_counts[lst.index(of: $0)]) \\(String(s[odd_counts[lst.index(of: $0)]]))\
    \ in the \\(lst.index(of: $0)+1)'th string of the \\(lst.count) strings of the\
    \ input\" }.joined(separator: \", \")\n                                      \
    \                                                     ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n    }\n    return lst.map { String(odd_counts[$0]) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5zfolrzx.swift:13:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n                                                ^\n/tmp/tmp5zfolrzx.swift:15:40:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \    return lst.map { String(odd_counts[$0]) }\n                             \
    \          ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_count = [String]()\n    for s in lst {\n        var\
    \ odd_digits = [Int]()\n        for c in s.characters {\n            odd_digits.append(Int(c)\
    \ % 2)\n        }\n        odd_count = append(odd_count, String(odd_digits.count))\n\
    \    }\n    return odd_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmptn7egip1.swift:14:20: error: 'characters' is unavailable: Please\
    \ use String directly\n        for c in s.characters {\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmptn7egip1.swift:15:31:\
    \ error: no exact matches in call to initializer \n            odd_digits.append(Int(c)\
    \ % 2)\n                              ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init(_ source: Double)\n\
    \           ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float80)\n   \
    \        ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n/tmp/tmptn7egip1.swift:17:21: error: cannot find 'append' in scope\n\
    \        odd_count = append(odd_count, String(odd_digits.count))\n           \
    \         ^~~~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCounts = [Int]()\n    for s in lst {\n        var\
    \ oddCount = 0\n        for c in s.characters {\n            if c % 2 == 1 {\n\
    \                oddCount += 1\n            }\n        }\n        oddCounts.append(oddCount)\n\
    \    }\n    return oddCounts.map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n\
    \ the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4u4lh8fa.swift:14:20: error: 'characters' is unavailable: Please\
    \ use String directly\n        for c in s.characters {\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp4u4lh8fa.swift:15:16:\
    \ error: cannot convert value of type 'Character' to expected argument type 'Int'\n\
    \            if c % 2 == 1 {\n               ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s.characters {\n            if isOdd(Int(c))\
    \ {\n                odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    return odd_counts.map { String($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1q6tn2cw.swift:14:20: error: 'characters' is unavailable: Please\
    \ use String directly\n        for c in s.characters {\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1q6tn2cw.swift:15:16:\
    \ error: cannot find 'isOdd' in scope\n            if isOdd(Int(c)) {\n      \
    \         ^~~~~\n/tmp/tmp1q6tn2cw.swift:15:22: error: no exact matches in call\
    \ to initializer \n            if isOdd(Int(c)) {\n                     ^\n/tmp/tmp1q6tn2cw.swift:15:22:\
    \ note: found candidate with type '(Float16) -> Int'\n            if isOdd(Int(c))\
    \ {\n                     ^\n/tmp/tmp1q6tn2cw.swift:15:22: note: found candidate\
    \ with type '(Float) -> Int'\n            if isOdd(Int(c)) {\n               \
    \      ^\n/tmp/tmp1q6tn2cw.swift:15:22: note: found candidate with type '(Double)\
    \ -> Int'\n            if isOdd(Int(c)) {\n                     ^\n/tmp/tmp1q6tn2cw.swift:15:22:\
    \ note: found candidate with type '(Float80) -> Int'\n            if isOdd(Int(c))\
    \ {\n                     ^\n/tmp/tmp1q6tn2cw.swift:15:22: note: found candidate\
    \ with type '(Builtin.Int64) -> Int'\n            if isOdd(Int(c)) {\n       \
    \              ^\n/tmp/tmp1q6tn2cw.swift:15:22: note: found candidate with type\
    \ '(Builtin.Word) -> Int'\n            if isOdd(Int(c)) {\n                  \
    \   ^\n/tmp/tmp1q6tn2cw.swift:15:22: note: found candidate with type '(String)\
    \ -> Int?'\n            if isOdd(Int(c)) {\n                     ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result: [String] = []\n    for s in lst {\n        var\
    \ count = 0\n        for c in s {\n            if c == '1' {\n               \
    \ count += 1\n            }\n        }\n        result.append(String(count))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8xdkklla.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if Int(c) % 2 != 0 {\n    \
    \            odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    return odd_counts.map { String($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmptkkvsnxa.swift:15:16: error: no exact matches in call to initializer\
    \ \n            if Int(c) % 2 != 0 {\n               ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ count = 0\n        for c in s {\n            if c == '0' {\n               \
    \ count++\n            } else {\n                break\n            }\n      \
    \  }\n        result.append(String(count))\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7txnnk7o.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '0' {\n                    ^~~\n             \
    \       \"0\"\n/tmp/tmp7txnnk7o.swift:16:22: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n                count++\n                  \
    \   ^~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCounts = [Int]()\n    for s in lst {\n        var\
    \ count = 0\n        for c in s {\n            if Int(c) % 2 != 0 {\n        \
    \        count += 1\n            }\n        }\n        oddCounts.append(count)\n\
    \    }\n    var result = [String]()\n    for count in oddCounts {\n        let\
    \ str = String(count)\n        result.append(str + \" odd elements\")\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    assert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpw7vttjni.swift:15:16: error: no exact matches in call to initializer\
    \ \n            if Int(c) % 2 != 0 {\n               ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c % 2 != 0 {\n         \
    \       odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    return odd_counts.map { String($0) }.map { $0.replaceFirst(\"n\",\
    \ \"o\") }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpshjvya87.swift:15:16: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n            if c % 2 != 0 {\n             \
    \  ^\n/tmp/tmpshjvya87.swift:21:51: error: value of type 'String' has no member\
    \ 'replaceFirst'\n    return odd_counts.map { String($0) }.map { $0.replaceFirst(\"\
    n\", \"o\") }\n                                               ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts: [String] = []\n    for s in lst {\n     \
    \   var odd_count = 0\n        for c in s {\n            if Int(c) % 2 == 1 {\n\
    \                odd_count += 1\n            }\n        }\n        odd_counts.append(String(odd_count))\n\
    \    }\n    return odd_counts\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_vqsoiau.swift:15:16: error: no exact matches in call to initializer\
    \ \n            if Int(c) % 2 == 1 {\n               ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s.characters {\n            if Int(c) % 2 !=\
    \ 0 {\n                odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    return lst.map { String(odd_counts[$0]) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5uluq10g.swift:14:20: error: 'characters' is unavailable: Please\
    \ use String directly\n        for c in s.characters {\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5uluq10g.swift:15:16:\
    \ error: no exact matches in call to initializer \n            if Int(c) % 2 !=\
    \ 0 {\n               ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n/tmp/tmp5uluq10g.swift:21:40:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \    return lst.map { String(odd_counts[$0]) }\n                             \
    \          ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_count = [String]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c >= '0' && c <= '9' {\n\
    \                odd_count += 1\n            }\n        }\n        odd_count =\
    \ \"the number of odd elements \\(odd_count) in the str\\(c).\"\n        odd_count.append(odd_count)\n\
    \    }\n    return odd_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpljd98c0l.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c >= '0' && c <= '9' {\n                    ^~~\n \
    \                   \"0\"\n/tmp/tmpljd98c0l.swift:15:33: error: single-quoted\
    \ string literal found, use '\"'\n            if c >= '0' && c <= '9' {\n    \
    \                            ^~~\n                                \"9\"\n/tmp/tmpljd98c0l.swift:19:74:\
    \ error: cannot find 'c' in scope\n        odd_count = \"the number of odd elements\
    \ \\(odd_count) in the str\\(c).\"\n                                         \
    \                                ^\n/tmp/tmpljd98c0l.swift:19:21: error: cannot\
    \ assign value of type 'String' to type 'Int'\n        odd_count = \"the number\
    \ of odd elements \\(odd_count) in the str\\(c).\"\n                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpljd98c0l.swift:20:19: error: value of type 'Int' has no member 'append'\n\
    \        odd_count.append(odd_count)\n        ~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n    }\n    return odd_counts.map { String($0) }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1vdaup_w.swift:13:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n                                                ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n    }\n    return lst.map { String(odd_counts[$0]) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5zfolrzx.swift:13:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n                                                ^\n/tmp/tmp5zfolrzx.swift:15:40:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \    return lst.map { String(odd_counts[$0]) }\n                             \
    \          ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.countOf(\"\
    0\"))\n    }\n    return lst.map { s -> String in\n        let odd_count = odd_counts[s.startIndex]\n\
    \        return String(format: \"the number of odd elements %n the str%n %n of\
    \ the %nput.\", odd_count, s.startIndex, s.endIndex)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxczg132_.swift:13:29: error: value of type 'String' has no member\
    \ 'countOf'\n        odd_counts.append(s.countOf(\"0\"))\n                   \
    \       ~ ^~~~~~~\n/tmp/tmpxczg132_.swift:16:35: error: subscript 'subscript(_:)'\
    \ requires that 'String.Index' conform to 'RangeExpression'\n        let odd_count\
    \ = odd_counts[s.startIndex]\n                                  ^\nSwift.MutableCollection:2:23:\
    \ note: where 'R' = 'String.Index'\n    @inlinable public subscript<R>(r: R) ->\
    \ Self.SubSequence where R : RangeExpression, Self.Index == R.Bound { get set\
    \ }\n                      ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c == '0' {\n           \
    \     continue\n            }\n            if c != '1' {\n                odd_count++\n\
    \            }\n        }\n        odd_counts.append(odd_count)\n    }\n    var\
    \ result = [String]()\n    for count in odd_counts {\n        let str = String(count)\n\
    \        result.append(str)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpz36srl7y.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '0' {\n                    ^~~\n             \
    \       \"0\"\n/tmp/tmpz36srl7y.swift:18:21: error: single-quoted string literal\
    \ found, use '\"'\n            if c != '1' {\n                    ^~~\n      \
    \              \"1\"\n/tmp/tmpz36srl7y.swift:19:26: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n                odd_count++\n         \
    \                ^~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s.characters {\n            if isOdd(c) {\n\
    \                odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    return lst.map { String(format: \"the number of odd elements %n the\
    \ str%n %n of the %nput.\", odd_counts[$0], odd_counts[$1], odd_counts[$2]) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdlrhpql4.swift:14:20: error: 'characters' is unavailable: Please\
    \ use String directly\n        for c in s.characters {\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpdlrhpql4.swift:15:16:\
    \ error: cannot find 'isOdd' in scope\n            if isOdd(c) {\n           \
    \    ^~~~~\n/tmp/tmpdlrhpql4.swift:21:139: error: extra argument in call\n   \
    \ return lst.map { String(format: \"the number of odd elements %n the str%n %n\
    \ of the %nput.\", odd_counts[$0], odd_counts[$1], odd_counts[$2]) }\n       \
    \                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpdlrhpql4.swift:21:20: error: contextual closure type '(String) throws\
    \ -> String' expects 1 argument, but 3 were used in closure body\n    return lst.map\
    \ { String(format: \"the number of odd elements %n the str%n %n of the %nput.\"\
    , odd_counts[$0], odd_counts[$1], odd_counts[$2]) }\n                   ^\n"
  stdout: ''
  timestamp: 1659824780
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCounts = [Int]()\n    for s in lst {\n        var\
    \ count = 0\n        for c in s {\n            if c % 2 != 0 {\n             \
    \   count += 1\n            }\n        }\n        oddCounts.append(count)\n  \
    \  }\n    return oddCounts.map { String($0) }.map { $0.replaceFirst(\"n\", \"\
    o\") }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3sr990ra.swift:15:16: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n            if c % 2 != 0 {\n             \
    \  ^\n/tmp/tmp3sr990ra.swift:21:50: error: value of type 'String' has no member\
    \ 'replaceFirst'\n    return oddCounts.map { String($0) }.map { $0.replaceFirst(\"\
    n\", \"o\") }\n                                              ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s.characters {\n            if isOdd(c) {\n\
    \                odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    return odd_counts.map { String($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmphgi79plp.swift:14:20: error: 'characters' is unavailable: Please\
    \ use String directly\n        for c in s.characters {\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmphgi79plp.swift:15:16:\
    \ error: cannot find 'isOdd' in scope\n            if isOdd(c) {\n           \
    \    ^~~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c == '1' {\n           \
    \     odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    return lst.map { String(odd_counts[$0]) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6q_q7jlo.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n/tmp/tmp6q_q7jlo.swift:21:40: error: cannot convert value of type\
    \ 'String' to expected argument type 'Int'\n    return lst.map { String(odd_counts[$0])\
    \ }\n                                       ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts: [Int] = []\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if Int(c) % 2 != 0 {\n    \
    \            odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    return odd_counts.map { String($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4k2wngvr.swift:15:16: error: no exact matches in call to initializer\
    \ \n            if Int(c) % 2 != 0 {\n               ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_count = [String]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c == '1' {\n           \
    \     odd_count += 1\n            }\n        }\n        odd_count = \"the number\
    \ of odd elements \\(odd_count) in the str\\(s.count) of\"\n        odd_counts.append(odd_count)\n\
    \    }\n    return odd_counts\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpx80tnz9i.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n/tmp/tmpx80tnz9i.swift:19:21: error: cannot assign value of type\
    \ 'String' to type 'Int'\n        odd_count = \"the number of odd elements \\\
    (odd_count) in the str\\(s.count) of\"\n                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpx80tnz9i.swift:20:9: error: cannot find 'odd_counts' in scope\n      \
    \  odd_counts.append(odd_count)\n        ^~~~~~~~~~\n/tmp/tmpx80tnz9i.swift:22:12:\
    \ error: cannot find 'odd_counts' in scope\n    return odd_counts\n          \
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n    }\n    return lst.map { String(odd_counts[$0]) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5zfolrzx.swift:13:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n                                                ^\n/tmp/tmp5zfolrzx.swift:15:40:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \    return lst.map { String(odd_counts[$0]) }\n                             \
    \          ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.countOfOdd())\n\
    \    }\n    return lst.map { s -> String in\n        let odd_count = odd_counts[s.countOfOdd()\
    \ - 1]\n        return String(format: \"the number of odd elements %n the str%nd\
    \ %n of the %nput.\", odd_count, s.countOfOdd(), s.countOfOdd() - 1, s.countOfOdd()\
    \ + 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    assert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcdhqk4rl.swift:13:29: error: value of type 'String' has no member\
    \ 'countOfOdd'\n        odd_counts.append(s.countOfOdd())\n                  \
    \        ~ ^~~~~~~~~~\n/tmp/tmpcdhqk4rl.swift:16:38: error: value of type 'String'\
    \ has no member 'countOfOdd'\n        let odd_count = odd_counts[s.countOfOdd()\
    \ - 1]\n                                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.countOdd())\n\
    \    }\n    return lst.map { s -> String in\n        let odd_count = odd_counts[lst.index(of:\
    \ s)]\n        return String(format: \"the number of odd elements %n the str%n\
    \ %n of the %nput.\", odd_count, s, odd_count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj8pgmlh7.swift:13:29: error: value of type 'String' has no member\
    \ 'countOdd'\n        odd_counts.append(s.countOdd())\n                      \
    \    ~ ^~~~~~~~\n/tmp/tmpj8pgmlh7.swift:16:40: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n        let odd_count = odd_counts[lst.index(of: s)]\n        \
    \                               ^\n/tmp/tmpj8pgmlh7.swift:16:40: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     let odd_count = odd_counts[lst.index(of: s)]\n                         \
    \              ^\n                                                    ?? <#default\
    \ value#>\n/tmp/tmpj8pgmlh7.swift:16:40: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n        let odd_count = odd_counts[lst.index(of:\
    \ s)]\n                                       ^\n                            \
    \                       !\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c == '0' {\n           \
    \     odd_count += 1\n            } else {\n                break\n          \
    \  }\n        }\n        odd_counts.append(odd_count)\n    }\n    var result =\
    \ [String]()\n    for odd_count in odd_counts {\n        let str = String(odd_count)\n\
    \        result.append(str)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpb3v9lub2.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '0' {\n                    ^~~\n             \
    \       \"0\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n    }\n    return odd_counts.map { String($0) }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1vdaup_w.swift:13:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n                                                ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.countOdd())\n\
    \    }\n    return lst.map { i in\n        let s = String(i)\n        return s.countOdd()\
    \ + \" number of odd elements in the \" + s + \" of the \" + s\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxog5qo7t.swift:13:29: error: value of type 'String' has no member\
    \ 'countOdd'\n        odd_counts.append(s.countOdd())\n                      \
    \    ~ ^~~~~~~~\n/tmp/tmpxog5qo7t.swift:17:18: error: value of type 'String' has\
    \ no member 'countOdd'\n        return s.countOdd() + \" number of odd elements\
    \ in the \" + s + \" of the \" + s\n               ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.countOdd())\n\
    \    }\n    return lst.map { s -> String in\n        let odd_count = odd_counts[s.startIndex]\n\
    \        return String(format: \"the number of odd elements %n the str%n %n of\
    \ the %nput.\", odd_count, s.startIndex, s.endIndex)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxk8scndv.swift:13:29: error: value of type 'String' has no member\
    \ 'countOdd'\n        odd_counts.append(s.countOdd())\n                      \
    \    ~ ^~~~~~~~\n/tmp/tmpxk8scndv.swift:16:35: error: subscript 'subscript(_:)'\
    \ requires that 'String.Index' conform to 'RangeExpression'\n        let odd_count\
    \ = odd_counts[s.startIndex]\n                                  ^\nSwift.MutableCollection:2:23:\
    \ note: where 'R' = 'String.Index'\n    @inlinable public subscript<R>(r: R) ->\
    \ Self.SubSequence where R : RangeExpression, Self.Index == R.Bound { get set\
    \ }\n                      ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ count = 0\n        for c in s {\n            if c == '0' {\n               \
    \ count = count + 1\n            } else {\n                count = count - 1\n\
    \            }\n        }\n        result.append(String(count))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpufzwaox8.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '0' {\n                    ^~~\n             \
    \       \"0\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s.characters {\n            if isOdd(Int(c))\
    \ {\n                odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    return odd_counts.map { String($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1q6tn2cw.swift:14:20: error: 'characters' is unavailable: Please\
    \ use String directly\n        for c in s.characters {\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1q6tn2cw.swift:15:16:\
    \ error: cannot find 'isOdd' in scope\n            if isOdd(Int(c)) {\n      \
    \         ^~~~~\n/tmp/tmp1q6tn2cw.swift:15:22: error: no exact matches in call\
    \ to initializer \n            if isOdd(Int(c)) {\n                     ^\n/tmp/tmp1q6tn2cw.swift:15:22:\
    \ note: found candidate with type '(Float16) -> Int'\n            if isOdd(Int(c))\
    \ {\n                     ^\n/tmp/tmp1q6tn2cw.swift:15:22: note: found candidate\
    \ with type '(Float) -> Int'\n            if isOdd(Int(c)) {\n               \
    \      ^\n/tmp/tmp1q6tn2cw.swift:15:22: note: found candidate with type '(Double)\
    \ -> Int'\n            if isOdd(Int(c)) {\n                     ^\n/tmp/tmp1q6tn2cw.swift:15:22:\
    \ note: found candidate with type '(Float80) -> Int'\n            if isOdd(Int(c))\
    \ {\n                     ^\n/tmp/tmp1q6tn2cw.swift:15:22: note: found candidate\
    \ with type '(Builtin.Int64) -> Int'\n            if isOdd(Int(c)) {\n       \
    \              ^\n/tmp/tmp1q6tn2cw.swift:15:22: note: found candidate with type\
    \ '(Builtin.Word) -> Int'\n            if isOdd(Int(c)) {\n                  \
    \   ^\n/tmp/tmp1q6tn2cw.swift:15:22: note: found candidate with type '(String)\
    \ -> Int?'\n            if isOdd(Int(c)) {\n                     ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_count = [String]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if Int(c) % 2 != 0 {\n    \
    \            odd_count += 1\n            }\n        }\n        odd_count = \"\
    the number of odd elements \\(odd_count) in the str\\(String(s.count)) of the\
    \ \\(String(s.count))\".\n        odd_count.append(odd_count)\n    }\n    return\
    \ odd_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpubqji7z1.swift:19:117: error: expected member name following '.'\n\
    \        odd_count = \"the number of odd elements \\(odd_count) in the str\\(String(s.count))\
    \ of the \\(String(s.count))\".\n                                            \
    \                                                                        ^\n/tmp/tmpubqji7z1.swift:15:16:\
    \ error: no exact matches in call to initializer \n            if Int(c) % 2 !=\
    \ 0 {\n               ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n/tmp/tmpubqji7z1.swift:20:19:\
    \ error: value of type 'Int' has no member 'append'\n        odd_count.append(odd_count)\n\
    \        ~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ count = 0\n        for c in s {\n            if c == '1' {\n               \
    \ count += 1\n            }\n        }\n        result.append(String(count))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9u_al2em.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_count_str = [String]()\n    for s in lst {\n    \
    \    var odd_count = 0\n        for c in s {\n            if c >= '0' && c <=\
    \ '9' {\n                odd_count += 1\n            }\n        }\n        odd_count_str.append(String(odd_count))\n\
    \    }\n    return odd_count_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5dtyw9ac.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c >= '0' && c <= '9' {\n                    ^~~\n \
    \                   \"0\"\n/tmp/tmp5dtyw9ac.swift:15:33: error: single-quoted\
    \ string literal found, use '\"'\n            if c >= '0' && c <= '9' {\n    \
    \                            ^~~\n                                \"9\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s.characters {\n            if Int(c) % 2 !=\
    \ 0 {\n                odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    return lst.map { s -> String in\n        let odd_count = odd_counts[lst.index(of:\
    \ s)]\n        return String(format: \"the number of odd elements %n the str%n\
    \ %n of the %nput.\", odd_count, odd_count, odd_count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpx80bnalm.swift:14:20: error: 'characters' is unavailable: Please\
    \ use String directly\n        for c in s.characters {\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpx80bnalm.swift:15:16:\
    \ error: no exact matches in call to initializer \n            if Int(c) % 2 !=\
    \ 0 {\n               ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n/tmp/tmpx80bnalm.swift:22:40:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        let\
    \ odd_count = odd_counts[lst.index(of: s)]\n                                 \
    \      ^\n/tmp/tmpx80bnalm.swift:22:40: note: coalesce using '??' to provide a\
    \ default when the optional value contains 'nil'\n        let odd_count = odd_counts[lst.index(of:\
    \ s)]\n                                       ^\n                            \
    \                        ?? <#default value#>\n/tmp/tmpx80bnalm.swift:22:40: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \        let odd_count = odd_counts[lst.index(of: s)]\n                 "
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s.characters {\n            if Int(c) % 2 !=\
    \ 0 {\n                odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    var result = [String]()\n    for n in odd_counts {\n        let s\
    \ = String(n)\n        result.append(s)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpik6igij8.swift:14:20: error: 'characters' is unavailable: Please\
    \ use String directly\n        for c in s.characters {\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpik6igij8.swift:15:16:\
    \ error: no exact matches in call to initializer \n            if Int(c) % 2 !=\
    \ 0 {\n               ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if Int(c) % 2 != 0 {\n    \
    \            odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    return odd_counts.map { String($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmptkkvsnxa.swift:15:16: error: no exact matches in call to initializer\
    \ \n            if Int(c) % 2 != 0 {\n               ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s.characters {\n            if isOdd(c) {\n\
    \                odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    var result = [String]()\n    for count in odd_counts {\n        let\
    \ s = String(count)\n        result.append(s)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmph8nhyqvk.swift:14:20: error: 'characters' is unavailable: Please\
    \ use String directly\n        for c in s.characters {\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmph8nhyqvk.swift:15:16:\
    \ error: cannot find 'isOdd' in scope\n            if isOdd(c) {\n           \
    \    ^~~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.countOdd())\n\
    \    }\n    return lst.map { s -> String in\n        let odd_count = odd_counts[s.startIndex]\n\
    \        return String(format: \"the number of odd elements %n the str%nd %n of\
    \ the %nput.\", odd_count, s.startIndex, s.endIndex)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4cjvzdn2.swift:13:29: error: value of type 'String' has no member\
    \ 'countOdd'\n        odd_counts.append(s.countOdd())\n                      \
    \    ~ ^~~~~~~~\n/tmp/tmp4cjvzdn2.swift:16:35: error: subscript 'subscript(_:)'\
    \ requires that 'String.Index' conform to 'RangeExpression'\n        let odd_count\
    \ = odd_counts[s.startIndex]\n                                  ^\nSwift.MutableCollection:2:23:\
    \ note: where 'R' = 'String.Index'\n    @inlinable public subscript<R>(r: R) ->\
    \ Self.SubSequence where R : RangeExpression, Self.Index == R.Bound { get set\
    \ }\n                      ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_count_str = [String]()\n    for s in lst {\n    \
    \    var odd_count = 0\n        for c in s {\n            if c == '1' {\n    \
    \            odd_count += 1\n            }\n        }\n        odd_count_str.append(String(odd_count))\n\
    \    }\n    return odd_count_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnyzq0vll.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ odd = 0\n        for c in s {\n            if c == '1' {\n                odd\
    \ += 1\n            }\n        }\n        result.append(String(odd))\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    assert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmplt59inn5.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if Int(c) % 2 != 0 {\n    \
    \            odd_count += 1\n            }\n        }\n        result.append(String(odd_count))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2xhkc5zd.swift:15:16: error: no exact matches in call to initializer\
    \ \n            if Int(c) % 2 != 0 {\n               ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts: [String] = []\n    for s in lst {\n     \
    \   var odd_count = 0\n        for c in s {\n            if c == '1' {\n     \
    \           odd_count += 1\n            }\n        }\n        odd_counts.append(String(odd_count))\n\
    \    }\n    return odd_counts\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpi8f4keo3.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts: [Int] = []\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if Int(c) % 2 != 0 {\n    \
    \            odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    return odd_counts.map { String($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4k2wngvr.swift:15:16: error: no exact matches in call to initializer\
    \ \n            if Int(c) % 2 != 0 {\n               ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_count_str = [String]()\n    for s in lst {\n    \
    \    var odd_count = 0\n        for c in s {\n            if Int(c) % 2 != 0 {\n\
    \                odd_count += 1\n            }\n        }\n        odd_count_str.append(String(odd_count))\n\
    \    }\n    return odd_count_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpixwsxo1t.swift:15:16: error: no exact matches in call to initializer\
    \ \n            if Int(c) % 2 != 0 {\n               ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n    }\n    return lst.map { String(odd_counts[$0]) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5zfolrzx.swift:13:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n                                                ^\n/tmp/tmp5zfolrzx.swift:15:40:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \    return lst.map { String(odd_counts[$0]) }\n                             \
    \          ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n    }\n    return lst.map { String(odd_counts[$0]) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5zfolrzx.swift:13:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n                                                ^\n/tmp/tmp5zfolrzx.swift:15:40:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \    return lst.map { String(odd_counts[$0]) }\n                             \
    \          ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ odd = 0\n        for c in s {\n            if c == '1' {\n                odd\
    \ += 1\n            }\n        }\n        result.append(String(odd))\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    assert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmplt59inn5.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result: [String] = []\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c == '1' {\n           \
    \     odd_count += 1\n            }\n        }\n        result.append(String(odd_count))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpou19jgpl.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts: [Int] = []\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if Int(c) % 2 != 0 {\n    \
    \            odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    return odd_counts.map { String($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4k2wngvr.swift:15:16: error: no exact matches in call to initializer\
    \ \n            if Int(c) % 2 != 0 {\n               ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c >= '0' && c <= '9' {\n\
    \                odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    var result = [String]()\n    for i := 0; i < len(odd_counts); i++\
    \ {\n        result.append(String(odd_counts[i]))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkgm7lhlo.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c >= '0' && c <= '9' {\n                    ^~~\n \
    \                   \"0\"\n/tmp/tmpkgm7lhlo.swift:15:33: error: single-quoted\
    \ string literal found, use '\"'\n            if c >= '0' && c <= '9' {\n    \
    \                            ^~~\n                                \"9\"\n/tmp/tmpkgm7lhlo.swift:22:12:\
    \ error: expected type\n    for i := 0; i < len(odd_counts); i++ {\n         \
    \  ^\n            <#type#>\n/tmp/tmpkgm7lhlo.swift:22:12: error: expected 'in'\
    \ after for-each pattern\n    for i := 0; i < len(odd_counts); i++ {\n       \
    \    ^\n/tmp/tmpkgm7lhlo.swift:22:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 0; i < len(odd_counts); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n\tvar odd_counts: [Int] = []\n\tfor _, s := range lst {\n\t\t\
    odd_counts = append(odd_counts, count_odd_digits(s))\n\t}\n\treturn odd_counts\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzqfmecef.swift:12:7: error: expected 'in' after for-each pattern\n\
    \        for _, s := range lst {\n             ^\n/tmp/tmpzqfmecef.swift:12:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, s := range\
    \ lst {\n             ^\n/tmp/tmpzqfmecef.swift:15:9: error: cannot convert return\
    \ expression of type '[Int]' to return type '[String]'\n        return odd_counts\n\
    \               ^\n/tmp/tmpzqfmecef.swift:15:9: note: arguments to generic parameter\
    \ 'Element' ('Int' and 'String') are expected to be equal\n        return odd_counts\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c >= '0' && c <= '9' {\n\
    \                odd_count += 1\n            }\n        }\n        result.append(String(odd_count))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc4egynz0.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c >= '0' && c <= '9' {\n                    ^~~\n \
    \                   \"0\"\n/tmp/tmpc4egynz0.swift:15:33: error: single-quoted\
    \ string literal found, use '\"'\n            if c >= '0' && c <= '9' {\n    \
    \                            ^~~\n                                \"9\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCounts = [Int]()\n    for s in lst {\n        oddCounts.append(s.characters.filter({\
    \ $0 % 2 }).count)\n    }\n    return lst.map { String(oddCounts[$0]) }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpam93_4q5.swift:13:48: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        oddCounts.append(s.characters.filter({\
    \ $0 % 2 }).count)\n                                               ^\n/tmp/tmpam93_4q5.swift:13:51:\
    \ error: cannot convert value of type 'Int' to closure result type 'Bool'\n  \
    \      oddCounts.append(s.characters.filter({ $0 % 2 }).count)\n             \
    \                                  ~~~^~~\n/tmp/tmpam93_4q5.swift:15:39: error:\
    \ cannot convert value of type 'String' to expected argument type 'Int'\n    return\
    \ lst.map { String(oddCounts[$0]) }\n                                      ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_count = [String]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c == '1' {\n           \
    \     odd_count += 1\n            }\n        }\n        odd_count = \"the number\
    \ of odd elements \\(odd_count) in the str\\(String(s.count)) of the \\(String(s.count)).\"\
    \n        odd_counts.append(odd_count)\n    }\n    return odd_counts\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpm_789519.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n/tmp/tmpm_789519.swift:19:21: error: cannot assign value of type\
    \ 'String' to type 'Int'\n        odd_count = \"the number of odd elements \\\
    (odd_count) in the str\\(String(s.count)) of the \\(String(s.count)).\"\n    \
    \                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpm_789519.swift:20:9: error: cannot find 'odd_counts' in scope\n      \
    \  odd_counts.append(odd_count)\n        ^~~~~~~~~~\n/tmp/tmpm_789519.swift:22:12:\
    \ error: cannot find 'odd_counts' in scope\n    return odd_counts\n          \
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if Int(c) % 2 != 0 {\n    \
    \            odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    return lst.map { String(odd_counts[$0]) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4kgsnvit.swift:15:16: error: no exact matches in call to initializer\
    \ \n            if Int(c) % 2 != 0 {\n               ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n/tmp/tmp4kgsnvit.swift:21:40: error: cannot\
    \ convert value of type 'String' to expected argument type 'Int'\n    return lst.map\
    \ { String(odd_counts[$0]) }\n                                       ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCounts = [Int]()\n    for str in lst {\n        var\
    \ count = 0\n        for char in str {\n            if char == '1' {\n       \
    \         count += 1\n            }\n        }\n        oddCounts.append(count)\n\
    \    }\n    var result = [String]()\n    for index in 0..<oddCounts.count {\n\
    \        let count = oddCounts[index]\n        let str = String(index)\n     \
    \   result.append(String(format: \"the number of odd elements %n the str%n %n\
    \ of the %nput.\", count, count, str))\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpphnho5i0.swift:15:24: error: single-quoted string literal found,\
    \ use '\"'\n            if char == '1' {\n                       ^~~\n       \
    \                \"1\"\n/tmp/tmpphnho5i0.swift:25:112: error: extra argument in\
    \ call\n        result.append(String(format: \"the number of odd elements %n the\
    \ str%n %n of the %nput.\", count, count, str))\n                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCounts = [Int]()\n    for s in lst {\n        var\
    \ count = 0\n        for c in s.characters {\n            if Int(c) % 2 != 0 {\n\
    \                count += 1\n            }\n        }\n        oddCounts.append(count)\n\
    \    }\n    var result = [String]()\n    for count in oddCounts {\n        let\
    \ str = String(count)\n        result.append(str)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpv0z7oy6b.swift:14:20: error: 'characters' is unavailable: Please\
    \ use String directly\n        for c in s.characters {\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpv0z7oy6b.swift:15:16:\
    \ error: no exact matches in call to initializer \n            if Int(c) % 2 !=\
    \ 0 {\n               ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c == '1' {\n           \
    \     odd_count += 1\n            }\n        }\n        result.append(String(odd_count))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8_zzhrff.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n    }\n    return lst.map { String(odd_counts[$0]) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5zfolrzx.swift:13:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n                                                ^\n/tmp/tmp5zfolrzx.swift:15:40:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \    return lst.map { String(odd_counts[$0]) }\n                             \
    \          ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c == '0' {\n           \
    \     continue\n            }\n            odd_count += 1\n        }\n       \
    \ odd_counts.append(odd_count)\n    }\n    var result = [String]()\n    for n\
    \ in odd_counts {\n        var s = \"\"\n        for _ in 0..<n {\n          \
    \  s += \"1\"\n        }\n        result.append(s)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjcwponzi.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '0' {\n                    ^~~\n             \
    \       \"0\"\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCount = [String]()\n    for s in lst {\n        var\
    \ oddCountString = \"\"\n        for c in s {\n            if Int(c) % 2 != 0\
    \ {\n                oddCountString += String(c)\n            }\n        }\n \
    \       oddCountString += \" number of odd elements\"\n        oddCountString\
    \ += \" in the str\"\n        oddCountString += String(s.count) + \"n\"\n    \
    \    oddCountString += String(s) + \"n\"\n        oddCountString += \" of the\
    \ \"\n        oddCountString += String(s.count) + \"n\"\n        oddCountString\
    \ += String(s) + \"n\"\n        oddCountString += \".\"\n        oddCount[s.count]\
    \ = oddCountString\n    }\n    return oddCount\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n\
    \ the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpuxqmsatv.swift:15:16: error: no exact matches in call to initializer\
    \ \n            if Int(c) % 2 != 0 {\n               ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if Int(c) % 2 != 0 {\n    \
    \            odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    return odd_counts.map { String($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmptkkvsnxa.swift:15:16: error: no exact matches in call to initializer\
    \ \n            if Int(c) % 2 != 0 {\n               ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result: [String] = []\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if Int(c) % 2 == 1 {\n    \
    \            odd_count += 1\n            }\n        }\n        result.append(String(odd_count))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmpow731y.swift:15:16: error: no exact matches in call to initializer\
    \ \n            if Int(c) % 2 == 1 {\n               ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n    }\n    return lst.map { String(odd_counts[$0]) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5zfolrzx.swift:13:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n                                                ^\n/tmp/tmp5zfolrzx.swift:15:40:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \    return lst.map { String(odd_counts[$0]) }\n                             \
    \          ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ count = 0\n        for c in s {\n            if c == '1' {\n               \
    \ count += 1\n            }\n        }\n        result.append(String(count))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9u_al2em.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c == '1' {\n           \
    \     odd_count += 1\n            }\n        }\n        result.append(String(odd_count))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8_zzhrff.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if isOdd(Int(c)) {\n      \
    \          odd_count += 1\n            }\n        }\n        result.append(String(odd_count))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5k_irop8.swift:15:16: error: cannot find 'isOdd' in scope\n   \
    \         if isOdd(Int(c)) {\n               ^~~~~\n/tmp/tmp5k_irop8.swift:15:22:\
    \ error: no exact matches in call to initializer \n            if isOdd(Int(c))\
    \ {\n                     ^\n/tmp/tmp5k_irop8.swift:15:22: note: found candidate\
    \ with type '(Float16) -> Int'\n            if isOdd(Int(c)) {\n             \
    \        ^\n/tmp/tmp5k_irop8.swift:15:22: note: found candidate with type '(Float)\
    \ -> Int'\n            if isOdd(Int(c)) {\n                     ^\n/tmp/tmp5k_irop8.swift:15:22:\
    \ note: found candidate with type '(Double) -> Int'\n            if isOdd(Int(c))\
    \ {\n                     ^\n/tmp/tmp5k_irop8.swift:15:22: note: found candidate\
    \ with type '(Float80) -> Int'\n            if isOdd(Int(c)) {\n             \
    \        ^\n/tmp/tmp5k_irop8.swift:15:22: note: found candidate with type '(Builtin.Int64)\
    \ -> Int'\n            if isOdd(Int(c)) {\n                     ^\n/tmp/tmp5k_irop8.swift:15:22:\
    \ note: found candidate with type '(Builtin.Word) -> Int'\n            if isOdd(Int(c))\
    \ {\n                     ^\n/tmp/tmp5k_irop8.swift:15:22: note: found candidate\
    \ with type '(String) -> Int?'\n            if isOdd(Int(c)) {\n             \
    \        ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts: [Int] = [0]\n    for s in lst {\n       \
    \ odd_counts = append(odd_counts, s.countOdd())\n    }\n    return lst.map { s\
    \ -> String in\n        let odd_count = odd_counts[s.startIndex]\n        let\
    \ start = s.startIndex\n        let end = s.endIndex\n        let mid = s.startIndex\
    \ + s.endIndex / 2\n        let midStr = s[mid]\n        let midStr = String(midStr)\n\
    \        let midStr = midStr.stringByReplacingOccurrencesOfString(\" \", withString:\
    \ \"\")\n        let midStr = midStr.stringByReplacingOccurrencesOfString(\",\"\
    , withString: \"\")\n        let midStr = midStr.stringByReplacingOccurrencesOfString(\"\
    '\", withString: \"\")\n        let midStr = midStr.stringByReplacingOccurrencesOfString(\"\
    \\\"\", withString: \"\")\n        let midStr = midStr.stringByReplacingOccurrencesOfString(\"\
    (\", withString: \"\")\n        let midStr = midStr.stringByReplacingOccurrencesOfString(\"\
    )\", withString: \"\")\n        let midStr = midStr.stringByReplacingOccurrencesOfString(\"\
    [\", withString: \"\")\n        let midStr = midStr.stringByReplacingOccurrencesOfString(\"\
    ]\", withString: \"\")\n        let midStr = midStr.stringByReplacingOccurrencesOfString(\"\
    {\", withString: \"\")\n        let midStr = midStr.stringByReplacingOccurrencesOfString(\"\
    }\", withString: \"\")\n        let midStr = midStr.stringByReplacingOccurrencesOfString(\"\
    :\", withString: \"\")\n        let midStr = midStr.stringByReplacingOccurrencesOfString(\"\
    ;\", withString: \"\")\n        let midStr = midStr.stringByReplacingOccurrencesOfString(\"\
    ,\", withString: \"\")\n        let midStr = midStr.stringByReplacingOccurrencesOfString(\"\
    =\", withString: \"\")\n        let midStr = midStr.stringByReplacingOccurrencesOfString(\"\
    !\", withString: \"\")\n        let midStr = midStr.stringByReplacingOccurrencesOfString(\"\
    ?\", withString: \"\")\n        let midStr = midStr.stringByReplacingOccurrencesOfString(\"\
    %\", withString: \"\")\n        let midStr = midStr.stringByReplacingOccurrencesOfString(\"\
    @\", withString: \"\")\n        let midStr = midStr.stringByReplacingOccurrencesOfString(\"\
    ^\", withString: \"\")\n        let mid\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the\
    \ number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\",\
    \ \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkewmj6t6.swift:59:230: error: expected '}' at end of brace statement\n\
    assert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"the number of odd elements\
    \ 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng\
    \ 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    ])\n                                                                         \
    \                                                                            \
    \                                                                            \
    \    ^\n/tmp/tmpkewmj6t6.swift:10:43: note: to match this opening '{'\nfunc odd_count(lst:\
    \ [String]) -> [String] {\n                                          ^\n/tmp/tmpkewmj6t6.swift:13:22:\
    \ error: cannot find 'append' in scope\n        odd_counts = append(odd_counts,\
    \ s.countOdd())\n                     ^~~~~~\n/tmp/tmpkewmj6t6.swift:13:43: error:\
    \ value of type 'String' has no member 'countOdd'\n        odd_counts = append(odd_counts,\
    \ s.countOdd())\n                                        ~ ^~~~~~~~\n/tmp/tmpkewmj6t6.swift:16:35:\
    \ error: subscript 'subscript(_:)' requires that 'String.Index' conform to 'RangeExpression'\n\
    \        let odd_count = odd_counts[s.startIndex]\n                          \
    \        ^\nSwift.MutableCollection:2:23: note: where 'R' = 'String.Index'\n \
    \   @inlinable public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression,\
    \ Self.Index == R.Bound { get set }\n                      ^\n/tmp/tmpkewmj6t6.swift:45:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_count = [String]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c == '1' {\n           \
    \     odd_count += 1\n            }\n        }\n        odd_count = \"the number\
    \ of odd elements \\(odd_count) in the str\\(String(s.count)) of the \\(String(s.count))\"\
    \n        odd_count.append(odd_count)\n    }\n    return odd_count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgsus5llm.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n/tmp/tmpgsus5llm.swift:19:21: error: cannot assign value of type\
    \ 'String' to type 'Int'\n        odd_count = \"the number of odd elements \\\
    (odd_count) in the str\\(String(s.count)) of the \\(String(s.count))\"\n     \
    \               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgsus5llm.swift:20:19: error: value of type 'Int' has no member 'append'\n\
    \        odd_count.append(odd_count)\n        ~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n\tvar odd_counts: [String] = []\n\tfor _, s := range lst {\n\t\
    \todd_counts = append(odd_counts, odd_count(s)...)\n\t}\n\treturn odd_counts\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_aoae73l.swift:12:7: error: expected 'in' after for-each pattern\n\
    \        for _, s := range lst {\n             ^\n/tmp/tmp_aoae73l.swift:12:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, s := range\
    \ lst {\n             ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts: [String] = []\n    for s in lst {\n     \
    \   var odd_count = 0\n        for c in s {\n            if c % 2 != 0 {\n   \
    \             odd_count += 1\n            }\n        }\n        odd_counts.append(String(odd_count))\n\
    \    }\n    return odd_counts\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7eswvdi9.swift:15:16: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n            if c % 2 != 0 {\n             \
    \  ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s.characters {\n            if c % 2 == 1 {\n\
    \                odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    return lst.map { s -> String in\n        let odd_count = odd_counts[lst.index(of:\
    \ s)]\n        return String(format: \"the number of odd elements %n the str%n\
    \ %n of the %nput.\", odd_count, odd_count, odd_count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmplo0aobfs.swift:14:20: error: 'characters' is unavailable: Please\
    \ use String directly\n        for c in s.characters {\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmplo0aobfs.swift:15:16:\
    \ error: cannot convert value of type 'Character' to expected argument type 'Int'\n\
    \            if c % 2 == 1 {\n               ^\n/tmp/tmplo0aobfs.swift:22:40:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        let\
    \ odd_count = odd_counts[lst.index(of: s)]\n                                 \
    \      ^\n/tmp/tmplo0aobfs.swift:22:40: note: coalesce using '??' to provide a\
    \ default when the optional value contains 'nil'\n        let odd_count = odd_counts[lst.index(of:\
    \ s)]\n                                       ^\n                            \
    \                        ?? <#default value#>\n/tmp/tmplo0aobfs.swift:22:40: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \        let odd_count = odd_counts[lst.index(of: s)]\n                      \
    \                 ^\n                                                   !\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n    }\n    return lst.map { String(format: \"the number\
    \ of odd elements %n the str%n %n of the %nput.\", odd_counts[$0], String($0),\
    \ odd_counts[$0]) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    assert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7hba2q87.swift:13:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n                                                ^\n/tmp/tmp7hba2q87.swift:15:135:\
    \ error: no exact matches in call to subscript \n    return lst.map { String(format:\
    \ \"the number of odd elements %n the str%n %n of the %nput.\", odd_counts[$0],\
    \ String($0), odd_counts[$0]) }\n                                            \
    \                                                                            \
    \              ^\n/tmp/tmp7hba2q87.swift:15:135: note: found candidate with type\
    \ '(Int) -> @lvalue Int'\n    return lst.map { String(format: \"the number of\
    \ odd elements %n the str%n %n of the %nput.\", odd_counts[$0], String($0), odd_counts[$0])\
    \ }\n                                                                        \
    \                                                              ^\n/tmp/tmp7hba2q87.swift:15:135:\
    \ note: found candidate with type '(Range<Int>) -> @lvalue ArraySlice<Int>'\n\
    \    return lst.map { String(format: \"the number of odd elements %n the str%n\
    \ %n of the %nput.\", odd_counts[$0], String($0), odd_counts[$0]) }\n        \
    \                                                                            \
    \                                                  ^\n/tmp/tmp7hba2q87.swift:15:135:\
    \ note: found candidate with type '((UnboundedRange_) -> ()) -> ArraySlice<Int>'\n\
    \    return lst.map { String(format: \"the number of odd elements %n the str%n\
    \ %n of the %nput.\", odd_counts[$0], String($0), odd_counts[$0]) }\n        \
    \                                                                            \
    \                                                  ^\n/tmp/tmp7hba2q87.swift:15:135:\
    \ note: found candidate with type '((UnboundedRange_) -> ()) -> @lvalue ArraySlice<Int>'\n\
    \    return lst.map { String(format: \"the number of odd elements %n the str%n\
    \ %n of the %nput.\", odd_counts[$0], String($0), odd_counts[$0]) }\n        \
    \                                     "
  stdout: ''
  timestamp: 1659824787
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ odd = 0\n        for c in s {\n            if c == '1' {\n                odd\
    \ += 1\n            }\n        }\n        result.append(String(odd + \"n\"))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu4oe4orl.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n/tmp/tmpu4oe4orl.swift:19:34: error: binary operator '+' cannot\
    \ be applied to operands of type 'Int' and 'String'\n        result.append(String(odd\
    \ + \"n\"))\n                             ~~~ ^ ~~~\n/tmp/tmpu4oe4orl.swift:19:34:\
    \ note: overloads for '+' exist with these partially matching parameter lists:\
    \ (Int, Int), (String, String)\n        result.append(String(odd + \"n\"))\n \
    \                                ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n\tvar odd_counts = [Int]()\n\tfor _, s := range lst {\n\t\todd_counts\
    \ = append(odd_counts, s.Count(charToInt('0'))+1)\n\t}\n\treturn odd_counts.mapString(strconv.Itoa).sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzqgm397e.swift:12:7: error: expected 'in' after for-each pattern\n\
    \        for _, s := range lst {\n             ^\n/tmp/tmpzqgm397e.swift:12:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, s := range\
    \ lst {\n             ^\n/tmp/tmpzqgm397e.swift:13:53: error: single-quoted string\
    \ literal found, use '\"'\n                odd_counts = append(odd_counts, s.Count(charToInt('0'))+1)\n\
    \                                                                  ^~~\n     \
    \                                                             \"0\"\n/tmp/tmpzqgm397e.swift:15:30:\
    \ error: cannot find 'strconv' in scope\n        return odd_counts.mapString(strconv.Itoa).sorted()\n\
    \                                    ^~~~~~~\n/tmp/tmpzqgm397e.swift:15:20: error:\
    \ value of type '[Int]' has no member 'mapString'\n        return odd_counts.mapString(strconv.Itoa).sorted()\n\
    \               ~~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c == '1' {\n           \
    \     odd_count += 1\n            }\n        }\n        result.append(String(odd_count))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8_zzhrff.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCounts = [Int]()\n    for s in lst {\n        var\
    \ count = 0\n        for c in s {\n            if c >= '0' && c <= '9' {\n   \
    \             count += 1\n            }\n        }\n        oddCounts.append(count)\n\
    \    }\n    var result = [String]()\n    for count in oddCounts {\n        let\
    \ str = String(count)\n        result.append(str + \" in \" + str)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    assert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp06glv05g.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c >= '0' && c <= '9' {\n                    ^~~\n \
    \                   \"0\"\n/tmp/tmp06glv05g.swift:15:33: error: single-quoted\
    \ string literal found, use '\"'\n            if c >= '0' && c <= '9' {\n    \
    \                            ^~~\n                                \"9\"\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ odd = 0\n        for c in s {\n            if c >= '0' && c <= '9' {\n     \
    \           odd += 1\n            }\n        }\n        result.append(String(odd))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmplufboa4c.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c >= '0' && c <= '9' {\n                    ^~~\n \
    \                   \"0\"\n/tmp/tmplufboa4c.swift:15:33: error: single-quoted\
    \ string literal found, use '\"'\n            if c >= '0' && c <= '9' {\n    \
    \                            ^~~\n                                \"9\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCounts = [Int]()\n    for s in lst {\n        oddCounts.append(s.countOdd())\n\
    \    }\n    return lst.map { s -> String in\n        let oddCount = oddCounts[s.count]\n\
    \        return \"the number of odd elements \\(oddCount) in the \\(s) string.\"\
    \n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmphlyawvzn.swift:13:28: error: value of type 'String' has no member\
    \ 'countOdd'\n        oddCounts.append(s.countOdd())\n                       \
    \  ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c >= '0' && c <= '9' {\n\
    \                odd_count += 1\n            }\n        }\n        result.append(String(odd_count))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc4egynz0.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c >= '0' && c <= '9' {\n                    ^~~\n \
    \                   \"0\"\n/tmp/tmpc4egynz0.swift:15:33: error: single-quoted\
    \ string literal found, use '\"'\n            if c >= '0' && c <= '9' {\n    \
    \                            ^~~\n                                \"9\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_count = [String]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c == '1' {\n           \
    \     odd_count += 1\n            }\n        }\n        odd_count = \"the number\
    \ of odd elements \\(odd_count) in the str\\(String(odd_count)) of the \\(String(odd_count)).\"\
    \n        odd_counts.append(odd_count)\n    }\n    return odd_counts\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2c1vbnp_.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n/tmp/tmp2c1vbnp_.swift:19:21: error: cannot assign value of type\
    \ 'String' to type 'Int'\n        odd_count = \"the number of odd elements \\\
    (odd_count) in the str\\(String(odd_count)) of the \\(String(odd_count)).\"\n\
    \                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2c1vbnp_.swift:20:9: error: cannot find 'odd_counts' in scope\n      \
    \  odd_counts.append(odd_count)\n        ^~~~~~~~~~\n/tmp/tmp2c1vbnp_.swift:22:12:\
    \ error: cannot find 'odd_counts' in scope\n    return odd_counts\n          \
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ count = 0\n        for c in s {\n            if c == '0' {\n               \
    \ count++\n            } else {\n                break\n            }\n      \
    \  }\n        result.append(String(count))\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7txnnk7o.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '0' {\n                    ^~~\n             \
    \       \"0\"\n/tmp/tmp7txnnk7o.swift:16:22: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n                count++\n                  \
    \   ^~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n    }\n    return lst.map { String(odd_counts[$0]) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5zfolrzx.swift:13:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n                                                ^\n/tmp/tmp5zfolrzx.swift:15:40:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \    return lst.map { String(odd_counts[$0]) }\n                             \
    \          ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c >= '0' && c <= '9' {\n\
    \                odd_count += 1\n            }\n        }\n        result.append(String(odd_count))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc4egynz0.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c >= '0' && c <= '9' {\n                    ^~~\n \
    \                   \"0\"\n/tmp/tmpc4egynz0.swift:15:33: error: single-quoted\
    \ string literal found, use '\"'\n            if c >= '0' && c <= '9' {\n    \
    \                            ^~~\n                                \"9\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.countOdd())\n\
    \    }\n    return lst.map { s -> String in\n        let odd_count = odd_counts[s.startIndex]\n\
    \        return String(format: \"the number of odd elements %n the str%n %n of\
    \ the %nput.\", odd_count, s.startIndex, s.endIndex)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxk8scndv.swift:13:29: error: value of type 'String' has no member\
    \ 'countOdd'\n        odd_counts.append(s.countOdd())\n                      \
    \    ~ ^~~~~~~~\n/tmp/tmpxk8scndv.swift:16:35: error: subscript 'subscript(_:)'\
    \ requires that 'String.Index' conform to 'RangeExpression'\n        let odd_count\
    \ = odd_counts[s.startIndex]\n                                  ^\nSwift.MutableCollection:2:23:\
    \ note: where 'R' = 'String.Index'\n    @inlinable public subscript<R>(r: R) ->\
    \ Self.SubSequence where R : RangeExpression, Self.Index == R.Bound { get set\
    \ }\n                      ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s.characters {\n            if isOdd(c) {\n\
    \                odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    return lst.map { s -> String in\n        let odd_count = odd_counts[s.characters.startIndex]\n\
    \        return String(format: \"the number of odd elements %n the str%n %n of\
    \ the %nput.\", odd_count, s.characters.startIndex, s.characters.count)\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpn4a_tihd.swift:14:20: error: 'characters' is unavailable: Please\
    \ use String directly\n        for c in s.characters {\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpn4a_tihd.swift:15:16:\
    \ error: cannot find 'isOdd' in scope\n            if isOdd(c) {\n           \
    \    ^~~~~\n/tmp/tmpn4a_tihd.swift:22:35: error: subscript 'subscript(_:)' requires\
    \ that 'String.Index' conform to 'RangeExpression'\n        let odd_count = odd_counts[s.characters.startIndex]\n\
    \                                  ^\nSwift.MutableCollection:2:23: note: where\
    \ 'R' = 'String.Index'\n    @inlinable public subscript<R>(r: R) -> Self.SubSequence\
    \ where R : RangeExpression, Self.Index == R.Bound { get set }\n             \
    \         ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c % 2 != 0 {\n         \
    \       odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    var result = [String]()\n    for i := 0; i < len(odd_counts); i++\
    \ {\n        result.append(String(odd_counts[i]))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzjg6dd28.swift:22:12: error: expected type\n    for i := 0; i <\
    \ len(odd_counts); i++ {\n           ^\n            <#type#>\n/tmp/tmpzjg6dd28.swift:22:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(odd_counts);\
    \ i++ {\n           ^\n/tmp/tmpzjg6dd28.swift:22:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(odd_counts); i++ {\n \
    \          ^\n/tmp/tmpzjg6dd28.swift:15:16: error: cannot convert value of type\
    \ 'Character' to expected argument type 'Int'\n            if c % 2 != 0 {\n \
    \              ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 }).count)\n    }\n    return lst.map { \"the number of odd elements \\\
    (odd_counts[lst.index(of: s)!]) the str\\(s.characters.filter({ $0 % 2 }).count)\
    \ of\\(s) the \\(s.characters.filter({ $0 % 2 }).count) input\" }.joined(separator:\
    \ \", \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzur0as58.swift:13:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 }).count)\n                                                ^\n/tmp/tmpzur0as58.swift:13:52:\
    \ error: cannot convert value of type 'Int' to closure result type 'Bool'\n  \
    \      odd_counts.append(s.characters.filter({ $0 % 2 }).count)\n            \
    \                                    ~~~^~~\n/tmp/tmpzur0as58.swift:15:77: error:\
    \ cannot find 's' in scope\n    return lst.map { \"the number of odd elements\
    \ \\(odd_counts[lst.index(of: s)!]) the str\\(s.characters.filter({ $0 % 2 }).count)\
    \ of\\(s) the \\(s.characters.filter({ $0 % 2 }).count) input\" }.joined(separator:\
    \ \", \")\n                                                                  \
    \          ^\n/tmp/tmpzur0as58.swift:15:92: error: cannot find 's' in scope\n\
    \    return lst.map { \"the number of odd elements \\(odd_counts[lst.index(of:\
    \ s)!]) the str\\(s.characters.filter({ $0 % 2 }).count) of\\(s) the \\(s.characters.filter({\
    \ $0 % 2 }).count) input\" }.joined(separator: \", \")\n                     \
    \                                                                      ^\n/tmp/tmpzur0as58.swift:15:135:\
    \ error: cannot find 's' in scope\n    return lst.map { \"the number of odd elements\
    \ \\(odd_counts[lst.index(of: s)!]) the str\\(s.characters.filter({ $0 % 2 }).count)\
    \ of\\(s) the \\(s.characters.filter({ $0 % 2 }).count) input\" }.joined(separator:\
    \ \", \")\n                                                                  \
    \                                                                    ^\n/tmp/tmpzur0as58.swift:15:144:\
    \ error: cannot find 's' in scope\n    return lst.map { \"the number of odd elements\
    \ \\(odd_counts[lst.index(of: s)!]) the str\\(s.characters.filter({ $0 % 2 }).count)\
    \ of\\(s) the \\(s.characters.filter({ $0 % 2 }).count) input\" }.joined(separator:\
    \ \", \")\n                                                                  \
    \                                                                            \
    \ ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n    }\n    return odd_counts.map { String($0) }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1vdaup_w.swift:13:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n                                                ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n    }\n    return lst.map { String(odd_counts[$0]) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5zfolrzx.swift:13:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n                                                ^\n/tmp/tmp5zfolrzx.swift:15:40:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \    return lst.map { String(odd_counts[$0]) }\n                             \
    \          ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCounts = [Int]()\n    for s in lst {\n        var\
    \ oddCount = 0\n        for c in s.characters {\n            if c % 2 != 0 {\n\
    \                oddCount += 1\n            }\n        }\n        oddCounts.append(oddCount)\n\
    \    }\n    return oddCounts.map { String($0) }.map { String($0) }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpy3ulatll.swift:14:20: error: 'characters' is unavailable: Please\
    \ use String directly\n        for c in s.characters {\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpy3ulatll.swift:15:16:\
    \ error: cannot convert value of type 'Character' to expected argument type 'Int'\n\
    \            if c % 2 != 0 {\n               ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCount = [String]()\n    for s in lst {\n        var\
    \ count = 0\n        for c in s {\n            if c == '1' {\n               \
    \ count += 1\n            }\n        }\n        oddCount = append(oddCount, String(count))\n\
    \    }\n    return oddCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqoi2ra90.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n/tmp/tmpqoi2ra90.swift:19:20: error: cannot find 'append' in scope\n\
    \        oddCount = append(oddCount, String(count))\n                   ^~~~~~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCounts = [Int]()\n    for s in lst {\n        var\
    \ count = 0\n        for c in s {\n            if c % 2 != 0 {\n             \
    \   count += 1\n            }\n        }\n        oddCounts.append(count)\n  \
    \  }\n    var result = [String]()\n    for i := 0; i < len(oddCounts); i += 2\
    \ {\n        result.append(String(oddCounts[i]))\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvaq6kaot.swift:22:12: error: expected type\n    for i := 0; i <\
    \ len(oddCounts); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpvaq6kaot.swift:22:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(oddCounts);\
    \ i += 2 {\n           ^\n/tmp/tmpvaq6kaot.swift:22:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(oddCounts); i += 2 {\n\
    \           ^\n/tmp/tmpvaq6kaot.swift:15:16: error: cannot convert value of type\
    \ 'Character' to expected argument type 'Int'\n            if c % 2 != 0 {\n \
    \              ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.countOdd())\n\
    \    }\n    return lst.map { s -> String in\n        let odd_count = odd_counts[s.count]\n\
    \        return String(format: \"the number of odd elements %n the str%n %n of\
    \ the %nput.\", odd_count, s.count, s.count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpiubc7009.swift:13:29: error: value of type 'String' has no member\
    \ 'countOdd'\n        odd_counts.append(s.countOdd())\n                      \
    \    ~ ^~~~~~~~\n/tmp/tmpiubc7009.swift:17:113: error: extra argument in call\n\
    \        return String(format: \"the number of odd elements %n the str%n %n of\
    \ the %nput.\", odd_count, s.count, s.count)\n                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n\
    /tmp/tmpiubc7009.swift:17:104: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n        return String(format: \"the number of odd elements\
    \ %n the str%n %n of the %nput.\", odd_count, s.count, s.count)\n            \
    \                                                                            \
    \               ^\n                                                          \
    \                                           (       != 0)\n/tmp/tmpiubc7009.swift:17:16:\
    \ error: initializer 'init(_:radix:uppercase:)' requires that 'String' conform\
    \ to 'BinaryInteger'\n        return String(format: \"the number of odd elements\
    \ %n the str%n %n of the %nput.\", odd_count, s.count, s.count)\n            \
    \   ^\nSwift.String:2:12: note: where 'T' = 'String'\n    public init<T>(_ value:\
    \ T, radix: Int = 10, uppercase: Bool = false) where T : BinaryInteger\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c == '1' {\n           \
    \     odd_count += 1\n            }\n        }\n        result.append(String(odd_count))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8_zzhrff.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_count_str = [String]()\n    for s in lst {\n    \
    \    var odd_count = 0\n        for c in s {\n            if c == '1' {\n    \
    \            odd_count += 1\n            }\n        }\n        odd_count_str.append(String(odd_count))\n\
    \    }\n    return odd_count_str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnyzq0vll.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.countOdd())\n\
    \    }\n    return lst.map { s -> String in\n        let odd_count = odd_counts[s.startIndex]\n\
    \        return String(format: \"the number of odd elements %n the str%n %n of\
    \ the %nput.\", odd_count, s.startIndex, s.endIndex)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxk8scndv.swift:13:29: error: value of type 'String' has no member\
    \ 'countOdd'\n        odd_counts.append(s.countOdd())\n                      \
    \    ~ ^~~~~~~~\n/tmp/tmpxk8scndv.swift:16:35: error: subscript 'subscript(_:)'\
    \ requires that 'String.Index' conform to 'RangeExpression'\n        let odd_count\
    \ = odd_counts[s.startIndex]\n                                  ^\nSwift.MutableCollection:2:23:\
    \ note: where 'R' = 'String.Index'\n    @inlinable public subscript<R>(r: R) ->\
    \ Self.SubSequence where R : RangeExpression, Self.Index == R.Bound { get set\
    \ }\n                      ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_count = [String]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if Int(c) % 2 != 0 {\n    \
    \            odd_count += 1\n            }\n        }\n        odd_count = \"\
    the number of odd elements \\(odd_count) in the str\\(String(s.count)) of the\
    \ \\(String(s.count))\"\n        odd_count.append(odd_count)\n    }\n    return\
    \ odd_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp077xj6cj.swift:15:16: error: no exact matches in call to initializer\
    \ \n            if Int(c) % 2 != 0 {\n               ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n/tmp/tmp077xj6cj.swift:19:21: error: cannot\
    \ assign value of type 'String' to type 'Int'\n        odd_count = \"the number\
    \ of odd elements \\(odd_count) in the str\\(String(s.count)) of the \\(String(s.count))\"\
    \n                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp077xj6cj.swift:20:19: error: value of type 'Int' has no member 'append'\n\
    \        odd_count.append(odd_count)\n        ~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCounts = [Int]()\n    for s in lst {\n        oddCounts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n    }\n    return lst.map { String(oddCounts[$0]) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpowsksth5.swift:13:48: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        oddCounts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n                                               ^\n/tmp/tmpowsksth5.swift:15:39:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \    return lst.map { String(oddCounts[$0]) }\n                              \
    \        ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s.characters {\n            if c == '0' {\n\
    \                odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    return lst.map { \"the number of odd elements \\(odd_counts[lst.index(of:\
    \ $0)]n) the\" + $0 + \"of the \" + $0 + \"input.\" }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqvdvc66z.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '0' {\n                    ^~~\n             \
    \       \"0\"\n/tmp/tmpqvdvc66z.swift:21:81: error: expected ',' separator\n \
    \   return lst.map { \"the number of odd elements \\(odd_counts[lst.index(of:\
    \ $0)]n) the\" + $0 + \"of the \" + $0 + \"input.\" }\n                      \
    \                                                          ^\n               \
    \                                                                 ,\n/tmp/tmpqvdvc66z.swift:14:20:\
    \ error: 'characters' is unavailable: Please use String directly\n        for\
    \ c in s.characters {\n                   ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpqvdvc66z.swift:21:81: error: cannot find\
    \ 'n' in scope\n    return lst.map { \"the number of odd elements \\(odd_counts[lst.index(of:\
    \ $0)]n) the\" + $0 + \"of the \" + $0 + \"input.\" }\n                      \
    \                                                          ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts: [Int] = []\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s.characters {\n            if c % 2 == 1 {\n\
    \                odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    return odd_counts.map { String($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmppozbnb38.swift:14:20: error: 'characters' is unavailable: Please\
    \ use String directly\n        for c in s.characters {\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmppozbnb38.swift:15:16:\
    \ error: cannot convert value of type 'Character' to expected argument type 'Int'\n\
    \            if c % 2 == 1 {\n               ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n    }\n    return lst.map { \"the number of odd elements\
    \ \\(odd_counts[lst.index(of: $0)]) \\(String(s[odd_counts[lst.index(of: $0)]]))\
    \ in the \\(lst.index(of: $0)+1)'th string of the \\(lst.count)'th input.\" }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmptkkx3z24.swift:13:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n                                                ^\n/tmp/tmptkkx3z24.swift:15:92:\
    \ error: cannot find 's' in scope\n    return lst.map { \"the number of odd elements\
    \ \\(odd_counts[lst.index(of: $0)]) \\(String(s[odd_counts[lst.index(of: $0)]]))\
    \ in the \\(lst.index(of: $0)+1)'th string of the \\(lst.count)'th input.\" }\n\
    \                                                                            \
    \               ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ odd = 0\n        for c in s {\n            if c % 2 != 0 {\n               \
    \ odd += 1\n            }\n        }\n        result.append(String(odd))\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmponwkkok_.swift:15:16: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n            if c % 2 != 0 {\n             \
    \  ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.countOdd())\n\
    \    }\n    return lst.map { s -> String in\n        let odd_count = odd_counts[s.startIndex]\n\
    \        return String(format: \"the number of odd elements %n the str%n %n of\
    \ the %nput.\", odd_count, s.startIndex, s.endIndex)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxk8scndv.swift:13:29: error: value of type 'String' has no member\
    \ 'countOdd'\n        odd_counts.append(s.countOdd())\n                      \
    \    ~ ^~~~~~~~\n/tmp/tmpxk8scndv.swift:16:35: error: subscript 'subscript(_:)'\
    \ requires that 'String.Index' conform to 'RangeExpression'\n        let odd_count\
    \ = odd_counts[s.startIndex]\n                                  ^\nSwift.MutableCollection:2:23:\
    \ note: where 'R' = 'String.Index'\n    @inlinable public subscript<R>(r: R) ->\
    \ Self.SubSequence where R : RangeExpression, Self.Index == R.Bound { get set\
    \ }\n                      ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n    }\n    return lst.map { String(odd_counts[$0]) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5zfolrzx.swift:13:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n                                                ^\n/tmp/tmp5zfolrzx.swift:15:40:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \    return lst.map { String(odd_counts[$0]) }\n                             \
    \          ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCount = [String]()\n    for str in lst {\n       \
    \ var oddCountString = \"\"\n        for char in str {\n            if char ==\
    \ \"1\" {\n                oddCountString += \"2\"\n            } else {\n   \
    \             oddCountString += \"1\"\n            }\n        }\n        oddCountString\
    \ += \"n\"\n        oddCount[str] = oddCountString\n    }\n    return oddCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpr7nydw46.swift:22:18: error: cannot convert value of type 'String'\
    \ to expected argument type 'Int'\n        oddCount[str] = oddCountString\n  \
    \               ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCounts = [Int]()\n    for s in lst {\n        var\
    \ count = 0\n        for c in s {\n            if c == '1' {\n               \
    \ count += 1\n            }\n        }\n        oddCounts.append(count)\n    }\n\
    \    var result = [String]()\n    for count in oddCounts {\n        let str =\
    \ String(count)\n        result.append(str)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpehe8b9jr.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.countOf(\"\
    0\"))\n    }\n    return lst.map { s -> String in\n        let odd_count = odd_counts[s.startIndex]\n\
    \        return String(format: \"the number of odd elements %n the str%n %n of\
    \ the %nput.\", odd_count, s.startIndex, s.endIndex)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxczg132_.swift:13:29: error: value of type 'String' has no member\
    \ 'countOf'\n        odd_counts.append(s.countOf(\"0\"))\n                   \
    \       ~ ^~~~~~~\n/tmp/tmpxczg132_.swift:16:35: error: subscript 'subscript(_:)'\
    \ requires that 'String.Index' conform to 'RangeExpression'\n        let odd_count\
    \ = odd_counts[s.startIndex]\n                                  ^\nSwift.MutableCollection:2:23:\
    \ note: where 'R' = 'String.Index'\n    @inlinable public subscript<R>(r: R) ->\
    \ Self.SubSequence where R : RangeExpression, Self.Index == R.Bound { get set\
    \ }\n                      ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c == '1' {\n           \
    \     odd_count += 1\n            }\n        }\n        result.append(String(odd_count))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8_zzhrff.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n    }\n    return lst.map { String(odd_counts[$0]) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5zfolrzx.swift:13:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n                                                ^\n/tmp/tmp5zfolrzx.swift:15:40:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \    return lst.map { String(odd_counts[$0]) }\n                             \
    \          ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_count = [String]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c == '0' {\n           \
    \     odd_count += 1\n            } else {\n                break\n          \
    \  }\n        }\n        odd_count = \"the number of odd elements \\(odd_count)\
    \ in the str\\(String(s.count)) of the \\(String(s.count)).\"\n        odd_counts.append(odd_count)\n\
    \    }\n    return odd_counts\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6ig9s1jd.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '0' {\n                    ^~~\n             \
    \       \"0\"\n/tmp/tmp6ig9s1jd.swift:21:21: error: cannot assign value of type\
    \ 'String' to type 'Int'\n        odd_count = \"the number of odd elements \\\
    (odd_count) in the str\\(String(s.count)) of the \\(String(s.count)).\"\n    \
    \                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6ig9s1jd.swift:22:9: error: cannot find 'odd_counts' in scope\n      \
    \  odd_counts.append(odd_count)\n        ^~~~~~~~~~\n/tmp/tmp6ig9s1jd.swift:24:12:\
    \ error: cannot find 'odd_counts' in scope\n    return odd_counts\n          \
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s.characters {\n            if c == '1' {\n\
    \                odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    var result = [String]()\n    for odd_count in odd_counts {\n     \
    \   let str = String(odd_count)\n        result.append(str)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9mzoafto.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n/tmp/tmp9mzoafto.swift:14:20: error: 'characters' is unavailable:\
    \ Please use String directly\n        for c in s.characters {\n              \
    \     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s.characters {\n            if Int(c) % 2 !=\
    \ 0 {\n                odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    var result = [String]()\n    for c in odd_counts {\n        result.append(String(format:\
    \ \"the number of odd elements %n the str%n %n of the %nput.\", c, c, c))\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7yt6cw10.swift:14:20: error: 'characters' is unavailable: Please\
    \ use String directly\n        for c in s.characters {\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7yt6cw10.swift:15:16:\
    \ error: no exact matches in call to initializer \n            if Int(c) % 2 !=\
    \ 0 {\n               ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n/tmp/tmp7yt6cw10.swift:23:104:\
    \ error: extra argument in call\n        result.append(String(format: \"the number\
    \ of odd elements %n the str%n %n of the %nput.\", c, c, c))\n               \
    \             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ oddCount = 0\n        for c in s {\n            if c == '1' {\n            \
    \    oddCount += 1\n            }\n        }\n        result.append(String(format:\
    \ \"the number of odd elements %n the str%n %n of the %nput.\", oddCount, s.count,\
    \ s.count))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the\
    \ number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\",\
    \ \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0tplaea9.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n/tmp/tmp0tplaea9.swift:19:119: error: extra argument in call\n\
    \        result.append(String(format: \"the number of odd elements %n the str%n\
    \ %n of the %nput.\", oddCount, s.count, s.count))\n                         \
    \   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n    }\n    return lst.map { String(odd_counts[$0]) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5zfolrzx.swift:13:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n                                                ^\n/tmp/tmp5zfolrzx.swift:15:40:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \    return lst.map { String(odd_counts[$0]) }\n                             \
    \          ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ count = 0\n        for c in s {\n            if c == '0' {\n               \
    \ count++\n            } else {\n                break\n            }\n      \
    \  }\n        result.append(String(count))\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7txnnk7o.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '0' {\n                    ^~~\n             \
    \       \"0\"\n/tmp/tmp7txnnk7o.swift:16:22: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n                count++\n                  \
    \   ^~\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n    }\n    return lst.map { String(odd_counts[$0]) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5zfolrzx.swift:13:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n                                                ^\n/tmp/tmp5zfolrzx.swift:15:40:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \    return lst.map { String(odd_counts[$0]) }\n                             \
    \          ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_count = [String]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c == '1' {\n           \
    \     odd_count += 1\n            }\n        }\n        odd_count = \"the number\
    \ of odd elements \\(odd_count) in the str\\(String(s.count)) of the \\(String(s.count))\
    \ input.\"\n        odd_counts.append(odd_count)\n    }\n    return odd_counts\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqt73kak5.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n/tmp/tmpqt73kak5.swift:19:21: error: cannot assign value of type\
    \ 'String' to type 'Int'\n        odd_count = \"the number of odd elements \\\
    (odd_count) in the str\\(String(s.count)) of the \\(String(s.count)) input.\"\n\
    \                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqt73kak5.swift:20:9: error: cannot find 'odd_counts' in scope\n      \
    \  odd_counts.append(odd_count)\n        ^~~~~~~~~~\n/tmp/tmpqt73kak5.swift:22:12:\
    \ error: cannot find 'odd_counts' in scope\n    return odd_counts\n          \
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.countOdd())\n\
    \    }\n    return lst.map { s -> String in\n        let odd_count = odd_counts[s.startIndex]\n\
    \        return String(format: \"the number of odd elements %n the str%n %n of\
    \ the %nput.\", odd_count, s.startIndex, s.endIndex)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxk8scndv.swift:13:29: error: value of type 'String' has no member\
    \ 'countOdd'\n        odd_counts.append(s.countOdd())\n                      \
    \    ~ ^~~~~~~~\n/tmp/tmpxk8scndv.swift:16:35: error: subscript 'subscript(_:)'\
    \ requires that 'String.Index' conform to 'RangeExpression'\n        let odd_count\
    \ = odd_counts[s.startIndex]\n                                  ^\nSwift.MutableCollection:2:23:\
    \ note: where 'R' = 'String.Index'\n    @inlinable public subscript<R>(r: R) ->\
    \ Self.SubSequence where R : RangeExpression, Self.Index == R.Bound { get set\
    \ }\n                      ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if Int(c) % 2 != 0 {\n    \
    \            odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    return lst.map { String(odd_counts[$0]) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4kgsnvit.swift:15:16: error: no exact matches in call to initializer\
    \ \n            if Int(c) % 2 != 0 {\n               ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n/tmp/tmp4kgsnvit.swift:21:40: error: cannot\
    \ convert value of type 'String' to expected argument type 'Int'\n    return lst.map\
    \ { String(odd_counts[$0]) }\n                                       ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.countOdd())\n\
    \    }\n    return lst.map { s -> String in\n        let odd_count = odd_counts[s.startIndex]\n\
    \        return String(format: \"the number of odd elements %n the str%n %n of\
    \ the %nput.\", odd_count, s.startIndex, s.endIndex)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxk8scndv.swift:13:29: error: value of type 'String' has no member\
    \ 'countOdd'\n        odd_counts.append(s.countOdd())\n                      \
    \    ~ ^~~~~~~~\n/tmp/tmpxk8scndv.swift:16:35: error: subscript 'subscript(_:)'\
    \ requires that 'String.Index' conform to 'RangeExpression'\n        let odd_count\
    \ = odd_counts[s.startIndex]\n                                  ^\nSwift.MutableCollection:2:23:\
    \ note: where 'R' = 'String.Index'\n    @inlinable public subscript<R>(r: R) ->\
    \ Self.SubSequence where R : RangeExpression, Self.Index == R.Bound { get set\
    \ }\n                      ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCount = [String]()\n    for s in lst {\n        var\
    \ count = 0\n        for c in s {\n            if c == '1' {\n               \
    \ count += 1\n            }\n        }\n        oddCount[s.count] = String(count)\n\
    \    }\n    return oddCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp59optb1n.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if Int(c) % 2 != 0 {\n    \
    \            odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    return odd_counts.map { String($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmptkkvsnxa.swift:15:16: error: no exact matches in call to initializer\
    \ \n            if Int(c) % 2 != 0 {\n               ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c >= '0' && c <= '9' {\n\
    \                odd_count++\n            }\n        }\n        result.append(String(odd_count))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyiir4z7p.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c >= '0' && c <= '9' {\n                    ^~~\n \
    \                   \"0\"\n/tmp/tmpyiir4z7p.swift:15:33: error: single-quoted\
    \ string literal found, use '\"'\n            if c >= '0' && c <= '9' {\n    \
    \                            ^~~\n                                \"9\"\n/tmp/tmpyiir4z7p.swift:16:26:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \      odd_count++\n                         ^~\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_count = [String]()\n    for s in lst {\n        var\
    \ odd_digits = [Int]()\n        for c in s.characters {\n            if isOdd(Int(c))\
    \ {\n                odd_digits.append(Int(c))\n            }\n        }\n   \
    \     odd_count = append(odd_count, String(odd_digits.count))\n    }\n    return\
    \ odd_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"1234567\"\
    ]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst:\
    \ [\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the\
    \ 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj3ezstw3.swift:14:20: error: 'characters' is unavailable: Please\
    \ use String directly\n        for c in s.characters {\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpj3ezstw3.swift:15:16:\
    \ error: cannot find 'isOdd' in scope\n            if isOdd(Int(c)) {\n      \
    \         ^~~~~\n/tmp/tmpj3ezstw3.swift:15:22: error: no exact matches in call\
    \ to initializer \n            if isOdd(Int(c)) {\n                     ^\n/tmp/tmpj3ezstw3.swift:15:22:\
    \ note: found candidate with type '(Float16) -> Int'\n            if isOdd(Int(c))\
    \ {\n                     ^\n/tmp/tmpj3ezstw3.swift:15:22: note: found candidate\
    \ with type '(Float) -> Int'\n            if isOdd(Int(c)) {\n               \
    \      ^\n/tmp/tmpj3ezstw3.swift:15:22: note: found candidate with type '(Double)\
    \ -> Int'\n            if isOdd(Int(c)) {\n                     ^\n/tmp/tmpj3ezstw3.swift:15:22:\
    \ note: found candidate with type '(Float80) -> Int'\n            if isOdd(Int(c))\
    \ {\n                     ^\n/tmp/tmpj3ezstw3.swift:15:22: note: found candidate\
    \ with type '(Builtin.Int64) -> Int'\n            if isOdd(Int(c)) {\n       \
    \              ^\n/tmp/tmpj3ezstw3.swift:15:22: note: found candidate with type\
    \ '(Builtin.Word) -> Int'\n            if isOdd(Int(c)) {\n                  \
    \   ^\n/tmp/tmpj3ezstw3.swift:15:22: note: found candidate with type '(String)\
    \ -> Int?'\n            if isOdd(Int(c)) {\n                     ^\n/tmp/tmpj3ezstw3.swift:16:35:\
    \ error: no exact matches in call to initializer \n                odd_digits.append(Int(c))\n\
    \                                  ^\nSwift.Int:7:12: note: candidate expects\
    \ value of type 'Float16' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value\
    \ of type 'Float' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float)\n           ^\nSwift.Int:12:12: note: candidate expects value of type\
    \ 'Double' for parameter #1 (got 'Character')\n    public init("
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n    }\n    return lst.map { String(odd_counts[$0]) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5zfolrzx.swift:13:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n                                                ^\n/tmp/tmp5zfolrzx.swift:15:40:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \    return lst.map { String(odd_counts[$0]) }\n                             \
    \          ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n    }\n    return lst.map { String(odd_counts[$0]) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5zfolrzx.swift:13:49: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        odd_counts.append(s.characters.filter({\
    \ $0 % 2 == 1 }).count)\n                                                ^\n/tmp/tmp5zfolrzx.swift:15:40:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \    return lst.map { String(odd_counts[$0]) }\n                             \
    \          ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts: [Int] = []\n    for s in lst {\n        odd_counts\
    \ = append(odd_counts, s.characters.filter({ $0 % 2 == 1 }).count)\n    }\n  \
    \  return odd_counts.map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the\
    \ number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\",\
    \ \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
    , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
    \ odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmptk4d2jqr.swift:13:22: error: cannot find 'append' in scope\n  \
    \      odd_counts = append(odd_counts, s.characters.filter({ $0 % 2 == 1 }).count)\n\
    \                     ^~~~~~\n/tmp/tmptk4d2jqr.swift:13:63: error: cannot convert\
    \ value of type 'String.Element' (aka 'Character') to expected argument type 'Int'\n\
    \        odd_counts = append(odd_counts, s.characters.filter({ $0 % 2 == 1 }).count)\n\
    \                                                              ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c == '1' {\n           \
    \     odd_count += 1\n            }\n        }\n        result.append(String(odd_count))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8_zzhrff.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCount = [String]()\n    for s in lst {\n        oddCount\
    \ = append(oddCount, s.countOdd())\n    }\n    return oddCount\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1nson13b.swift:13:20: error: cannot find 'append' in scope\n  \
    \      oddCount = append(oddCount, s.countOdd())\n                   ^~~~~~\n\
    /tmp/tmp1nson13b.swift:13:39: error: value of type 'String' has no member 'countOdd'\n\
    \        oddCount = append(oddCount, s.countOdd())\n                         \
    \           ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.countOdd())\n\
    \    }\n    return lst.map { s -> String in\n        let odd_count = odd_counts[s.startIndex]\n\
    \        return String(format: \"the number of odd elements %n the str%n %n of\
    \ the %nput.\", odd_count, s.startIndex, s.endIndex)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxk8scndv.swift:13:29: error: value of type 'String' has no member\
    \ 'countOdd'\n        odd_counts.append(s.countOdd())\n                      \
    \    ~ ^~~~~~~~\n/tmp/tmpxk8scndv.swift:16:35: error: subscript 'subscript(_:)'\
    \ requires that 'String.Index' conform to 'RangeExpression'\n        let odd_count\
    \ = odd_counts[s.startIndex]\n                                  ^\nSwift.MutableCollection:2:23:\
    \ note: where 'R' = 'String.Index'\n    @inlinable public subscript<R>(r: R) ->\
    \ Self.SubSequence where R : RangeExpression, Self.Index == R.Bound { get set\
    \ }\n                      ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCount = [String]()\n    for str in lst {\n       \
    \ var count = 0\n        for char in str {\n            if char == \"1\" {\n \
    \               count += 1\n            }\n        }\n        oddCount = append(oddCount,\
    \ String(count))\n    }\n    return oddCount\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements 4n\
    \ the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"])\
    \ == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9ge68zzv.swift:19:20: error: cannot find 'append' in scope\n  \
    \      oddCount = append(oddCount, String(count))\n                   ^~~~~~\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n\tvar odd_count [String]\n\tvar i int\n\tfor _, s := range lst\
    \ {\n\t\todd_count[i] = 0\n\t\tfor _, c := range s {\n\t\t\tif c == '1' {\n\t\t\
    \t\todd_count[i]++\n\t\t\t}\n\t\t}\n\t\ti++\n\t}\n\treturn odd_count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmph9084v9b.swift:11:15: error: consecutive statements on a line must\
    \ be separated by ';'\n        var odd_count [String]\n                     ^\n\
    \                     ;\n/tmp/tmph9084v9b.swift:12:8: error: found an unexpected\
    \ second identifier in variable declaration; is there an accidental break?\n \
    \       var i int\n              ^\n/tmp/tmph9084v9b.swift:12:8: note: join the\
    \ identifiers together\n        var i int\n            ~~^~~\n            iint\n\
    /tmp/tmph9084v9b.swift:12:8: note: join the identifiers together with camel-case\n\
    \        var i int\n            ~~^~~\n            iInt\n/tmp/tmph9084v9b.swift:13:7:\
    \ error: expected 'in' after for-each pattern\n        for _, s := range lst {\n\
    \             ^\n/tmp/tmph9084v9b.swift:13:7: error: expected Sequence expression\
    \ for for-each loop\n        for _, s := range lst {\n             ^\n/tmp/tmph9084v9b.swift:15:8:\
    \ error: expected 'in' after for-each pattern\n                for _, c := range\
    \ s {\n                     ^\n/tmp/tmph9084v9b.swift:15:8: error: expected Sequence\
    \ expression for for-each loop\n                for _, c := range s {\n      \
    \               ^\n/tmp/tmph9084v9b.swift:16:12: error: single-quoted string literal\
    \ found, use '\"'\n                        if c == '1' {\n                   \
    \             ^~~\n                                \"1\"\n/tmp/tmph9084v9b.swift:11:6:\
    \ error: type annotation missing in pattern\n        var odd_count [String]\n\
    \            ^\n/tmp/tmph9084v9b.swift:11:16: error: expected member name or constructor\
    \ call after type name\n        var odd_count [String]\n                     \
    \ ^\n/tmp/tmph9084v9b.swift:11:23: note: add arguments after the type to construct\
    \ a value of the type\n        var odd_count [String]\n                      \
    \       ^\n                              ()\n/tmp/tmph9084v9b.swift:11:23: note:\
    \ use '.self' to reference the type object\n        var odd_count [String]\n \
    \                            ^\n                              .self\n/tmp/tmph9084v9b.swift:11:16:\
    \ warning: expression of type '[String].Type' is unused\n        var odd_count\
    \ [St"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.countOdd())\n\
    \    }\n    return lst.map { s -> String in\n        let odd_count = odd_counts[s.startIndex]\n\
    \        return String(format: \"the number of odd elements %n the str%n %n of\
    \ the %nput.\", odd_count, s.startIndex, s.endIndex)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxk8scndv.swift:13:29: error: value of type 'String' has no member\
    \ 'countOdd'\n        odd_counts.append(s.countOdd())\n                      \
    \    ~ ^~~~~~~~\n/tmp/tmpxk8scndv.swift:16:35: error: subscript 'subscript(_:)'\
    \ requires that 'String.Index' conform to 'RangeExpression'\n        let odd_count\
    \ = odd_counts[s.startIndex]\n                                  ^\nSwift.MutableCollection:2:23:\
    \ note: where 'R' = 'String.Index'\n    @inlinable public subscript<R>(r: R) ->\
    \ Self.SubSequence where R : RangeExpression, Self.Index == R.Bound { get set\
    \ }\n                      ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for s in lst {\n        var\
    \ count = 0\n        for c in s {\n            if isOdd(c) {\n               \
    \ count += 1\n            }\n        }\n        result.append(String(count))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmprm20yagx.swift:15:16: error: cannot find 'isOdd' in scope\n   \
    \         if isOdd(c) {\n               ^~~~~\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s.characters {\n            if c % 2 == 1 {\n\
    \                odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    return odd_counts.map { String($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyfwc_2eu.swift:14:20: error: 'characters' is unavailable: Please\
    \ use String directly\n        for c in s.characters {\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpyfwc_2eu.swift:15:16:\
    \ error: cannot convert value of type 'Character' to expected argument type 'Int'\n\
    \            if c % 2 == 1 {\n               ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_count = [String]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c >= '0' && c <= '9' {\n\
    \                odd_count += 1\n            }\n        }\n        odd_count =\
    \ \"the number of odd elements \\(odd_count) in the str\\(String(s.count)) of\
    \ the \\(String(s.count)).\"\n        odd_count.append(odd_count)\n    }\n   \
    \ return odd_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(odd_count(lst: [\"\
    1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"])\n\
    assert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzgllkpme.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c >= '0' && c <= '9' {\n                    ^~~\n \
    \                   \"0\"\n/tmp/tmpzgllkpme.swift:15:33: error: single-quoted\
    \ string literal found, use '\"'\n            if c >= '0' && c <= '9' {\n    \
    \                            ^~~\n                                \"9\"\n/tmp/tmpzgllkpme.swift:19:21:\
    \ error: cannot assign value of type 'String' to type 'Int'\n        odd_count\
    \ = \"the number of odd elements \\(odd_count) in the str\\(String(s.count)) of\
    \ the \\(String(s.count)).\"\n                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzgllkpme.swift:20:19: error: value of type 'Int' has no member 'append'\n\
    \        odd_count.append(odd_count)\n        ~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c == '0' {\n           \
    \     continue\n            }\n            if c == '1' {\n                odd_count\
    \ += 1\n            }\n        }\n        odd_counts.append(odd_count)\n    }\n\
    \    var result = [String]()\n    for odd_count in odd_counts {\n        var s\
    \ = \"\"\n        for _ in 0..<odd_count {\n            s += \"1\"\n        }\n\
    \        result.append(s)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1i2vy4rb.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '0' {\n                    ^~~\n             \
    \       \"0\"\n/tmp/tmp1i2vy4rb.swift:18:21: error: single-quoted string literal\
    \ found, use '\"'\n            if c == '1' {\n                    ^~~\n      \
    \              \"1\"\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for str in lst {\n        var\
    \ count = 0\n        for char in str {\n            if char == '1' {\n       \
    \         count += 1\n            }\n        }\n        result.append(String(count))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe991evbr.swift:15:24: error: single-quoted string literal found,\
    \ use '\"'\n            if char == '1' {\n                       ^~~\n       \
    \                \"1\"\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for str in lst {\n        var\
    \ count = 0\n        for char in str {\n            if char == '1' {\n       \
    \         count += 1\n            }\n        }\n        result.append(String(count))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe991evbr.swift:15:24: error: single-quoted string literal found,\
    \ use '\"'\n            if char == '1' {\n                       ^~~\n       \
    \                \"1\"\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCount = [String]()\n    for s in lst {\n        var\
    \ oddCountString = \"\"\n        var oddCountInt = 0\n        for c in s {\n \
    \           if Int(c) % 2 != 0 {\n                oddCountString += \"1\"\n  \
    \              oddCountInt += 1\n            } else {\n                oddCountString\
    \ += \"0\"\n            }\n        }\n        oddCount[s.count] = String(oddCountInt)\n\
    \    }\n    return oddCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkrs_6hyz.swift:16:16: error: no exact matches in call to initializer\
    \ \n            if Int(c) % 2 != 0 {\n               ^\nSwift.Int:7:12: note:\
    \ candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for parameter #1 (got 'Character')\n    public init(_ _value:\
    \ Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate expects value\
    \ of type 'Builtin.Word' for parameter #1 (got 'Character')\n    public init(_\
    \ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts: [Int] = []\n    for s in lst {\n        odd_counts\
    \ = odd_counts + s.countOdd()\n    }\n    var result: [String] = []\n    for n\
    \ in odd_counts {\n        result.append(String(format: \"the number of odd elements\
    \ %n the str%n %n of the %nput.\", n, n, n))\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp38yz_65f.swift:13:37: error: value of type 'String' has no member\
    \ 'countOdd'\n        odd_counts = odd_counts + s.countOdd()\n               \
    \                   ~ ^~~~~~~~\n/tmp/tmp38yz_65f.swift:17:104: error: extra argument\
    \ in call\n        result.append(String(format: \"the number of odd elements %n\
    \ the str%n %n of the %nput.\", n, n, n))\n                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts: [Int] = []\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c == '1' {\n           \
    \     odd_count += 1\n            }\n        }\n        odd_counts.append(odd_count)\n\
    \    }\n    return odd_counts.map { String($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"11111111\"\
    ]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst: [\"\
    271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\
    \ \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj76gydyb.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCounts = [Int]()\n    for s in lst {\n        var\
    \ count = 0\n        for c in s {\n            if c == '1' {\n               \
    \ count += 1\n            }\n        }\n        oddCounts.append(count)\n    }\n\
    \    var result = [String]()\n    for i := 0; i < len(oddCounts); i++ {\n    \
    \    result.append(String(oddCounts[i]))\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpktajoaqc.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n/tmp/tmpktajoaqc.swift:22:12: error: expected type\n    for i :=\
    \ 0; i < len(oddCounts); i++ {\n           ^\n            <#type#>\n/tmp/tmpktajoaqc.swift:22:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(oddCounts);\
    \ i++ {\n           ^\n/tmp/tmpktajoaqc.swift:22:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(oddCounts); i++ {\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_count = [String]()\n    for s in lst {\n        var\
    \ odd_count = 0\n        for c in s {\n            if c == '1' {\n           \
    \     odd_count += 1\n            }\n        }\n        odd_count = \"the number\
    \ of odd elements \\(odd_count) in the str\\(c).\"\n        odd_count.append(odd_count)\n\
    \    }\n    return odd_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpghhfnh6c.swift:15:21: error: single-quoted string literal found,\
    \ use '\"'\n            if c == '1' {\n                    ^~~\n             \
    \       \"1\"\n/tmp/tmpghhfnh6c.swift:19:74: error: cannot find 'c' in scope\n\
    \        odd_count = \"the number of odd elements \\(odd_count) in the str\\(c).\"\
    \n                                                                         ^\n\
    /tmp/tmpghhfnh6c.swift:19:21: error: cannot assign value of type 'String' to type\
    \ 'Int'\n        odd_count = \"the number of odd elements \\(odd_count) in the\
    \ str\\(c).\"\n                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpghhfnh6c.swift:20:19: error: value of type 'Int' has no member 'append'\n\
    \        odd_count.append(odd_count)\n        ~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var odd_counts = [Int]()\n    for s in lst {\n        odd_counts.append(s.countOdd())\n\
    \    }\n    return lst.map { s -> String in\n        let odd_count = odd_counts[s.startIndex]\n\
    \        return String(format: \"the number of odd elements %n the str%n %n of\
    \ the %nput.\", odd_count, s.startIndex, s.endIndex)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"3\", \"\
    11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxk8scndv.swift:13:29: error: value of type 'String' has no member\
    \ 'countOdd'\n        odd_counts.append(s.countOdd())\n                      \
    \    ~ ^~~~~~~~\n/tmp/tmpxk8scndv.swift:16:35: error: subscript 'subscript(_:)'\
    \ requires that 'String.Index' conform to 'RangeExpression'\n        let odd_count\
    \ = odd_counts[s.startIndex]\n                                  ^\nSwift.MutableCollection:2:23:\
    \ note: where 'R' = 'String.Index'\n    @inlinable public subscript<R>(r: R) ->\
    \ Self.SubSequence where R : RangeExpression, Self.Index == R.Bound { get set\
    \ }\n                      ^\n"
  stdout: ''
  timestamp: 1659824772
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var result = [String]()\n    for str in lst {\n        var\
    \ count = 0\n        for char in str {\n            if char == '1' {\n       \
    \         count += 1\n            }\n        }\n        result.append(String(count))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe991evbr.swift:15:24: error: single-quoted string literal found,\
    \ use '\"'\n            if char == '1' {\n                       ^~~\n       \
    \                \"1\"\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCount = [String]()\n    for str in lst {\n       \
    \ var oddDigitCount = 0\n        for char in str {\n            if char == \"\
    1\" {\n                oddDigitCount += 1\n            }\n        }\n        oddCount\
    \ = \"the number of odd elements \\(oddDigitCount) in the \\(str) string.\"\n\
    \    }\n    return oddCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(odd_count(lst:\
    \ [\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ])\nassert(odd_count(lst: [\"3\", \"11111111\"]) == [\"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\"])\nassert(odd_count(lst: [\"271\", \"137\", \"314\"]) == [\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwihlqx25.swift:19:20: error: cannot assign value of type 'String'\
    \ to type '[String]'\n        oddCount = \"the number of odd elements \\(oddDigitCount)\
    \ in the \\(str) string.\"\n                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824773
- exit_code: 1
  program: "\n/// Given an array of strings, where each string consists of only digits,\
    \ return an array.\n/// Each element i of the output should be \"the number of\
    \ odd elements in the\n/// string i of the input.\" where all the i's should be\
    \ replaced by the number\n/// of odd digits in the i'th string of the input.\n\
    /// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n///\
    \ [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String])\
    \ -> [String] {\n    var oddCounts = [Int]()\n    for s in lst {\n        var\
    \ count = 0\n        for c in s.characters {\n            if Int(c) % 2 != 0 {\n\
    \                count += 1\n            }\n        }\n        oddCounts.append(count)\n\
    \    }\n    var result = [String]()\n    for i : Int in 0..<oddCounts.count {\n\
    \        result.append(String(oddCounts[i]))\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(odd_count(lst: [\"1234567\"]) == [\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"])\nassert(odd_count(lst: [\"\
    3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"])\nassert(odd_count(lst:\
    \ [\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"])"
  status: SyntaxError
  stderr: "/tmp/tmp26ewhz24.swift:14:20: error: 'characters' is unavailable: Please\
    \ use String directly\n        for c in s.characters {\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp26ewhz24.swift:15:16:\
    \ error: no exact matches in call to initializer \n            if Int(c) % 2 !=\
    \ 0 {\n               ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1659824773
