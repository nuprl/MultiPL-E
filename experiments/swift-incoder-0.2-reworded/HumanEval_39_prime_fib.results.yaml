language: swift
name: HumanEval_39_prime_fib
results:
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let mut fib = [0, 1]\n    for\
    \ _ in 0..<n {\n        fib.append(fib[fib.len() - 1] + fib[fib.len() - 2])\n\
    \    }\n    return fib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpyflpuesv.swift:14:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut fib = [0,\
    \ 1]\n            ^\n/tmp/tmpyflpuesv.swift:14:13: note: join the identifiers\
    \ together\n    let mut fib = [0, 1]\n        ~~~~^~~\n        mutfib\n/tmp/tmpyflpuesv.swift:14:13:\
    \ note: join the identifiers together with camel-case\n    let mut fib = [0, 1]\n\
    \        ~~~~^~~\n        mutFib\n/tmp/tmpyflpuesv.swift:16:9: error: cannot find\
    \ 'fib' in scope\n        fib.append(fib[fib.len() - 1] + fib[fib.len() - 2])\n\
    \        ^~~\n/tmp/tmpyflpuesv.swift:16:20: error: cannot find 'fib' in scope\n\
    \        fib.append(fib[fib.len() - 1] + fib[fib.len() - 2])\n               \
    \    ^~~\n/tmp/tmpyflpuesv.swift:16:24: error: cannot find 'fib' in scope\n  \
    \      fib.append(fib[fib.len() - 1] + fib[fib.len() - 2])\n                 \
    \      ^~~\n/tmp/tmpyflpuesv.swift:16:41: error: cannot find 'fib' in scope\n\
    \        fib.append(fib[fib.len() - 1] + fib[fib.len() - 2])\n               \
    \                         ^~~\n/tmp/tmpyflpuesv.swift:16:45: error: cannot find\
    \ 'fib' in scope\n        fib.append(fib[fib.len() - 1] + fib[fib.len() - 2])\n\
    \                                            ^~~\n/tmp/tmpyflpuesv.swift:18:12:\
    \ error: cannot find 'fib' in scope\n    return fib[n]\n           ^~~\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var result: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n \
    \   var k: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n\
    \    var q: Int = 0\n    var t: Int = 0\n    var m: Int = 0\n    var n: Int =\
    \ 0\n    var p: Int = 0\n    var q: Int = 0\n    var t: Int = 0\n    var m: Int\
    \ = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var t:\
    \ Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var\
    \ q: Int = 0\n    var t: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n   \
    \ var p: Int = 0\n    var q: Int = 0\n    var t: Int = 0\n    var m: Int = 0\n\
    \    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var t: Int =\
    \ 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int\
    \ = 0\n    var t: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p:\
    \ Int = 0\n    var q: Int = 0\n    var t: Int = 0\n    var m: Int = 0\n    var\
    \ n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var t: Int = 0\n   \
    \ var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n\
    \    var t: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int =\
    \ 0\n    var q: Int = 0\n    var t: Int = 0\n    var m: Int = 0\n    var n: Int\
    \ = 0\n    var p: Int = 0\n    var q: Int = 0\n    var t: Int = 0\n    var m:\
    \ Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var\
    \ t: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n   \
    \ var q: Int = 0\n    var t: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n\
    \    var p: Int = 0\n    var q: Int = 0\n    var t: Int = 0\n    var m: Int =\
    \ 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var t: Int\
    \ = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q:\
    \ Int = 0\n    var t: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var\
    \ p: Int = 0\n    var q: Int = 0\n    var t: Int = 0\n    var m: Int = 0\n   \
    \ var n: Int = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8wcwckp8.swift:25:9: error: invalid redeclaration of 'm'\n    var\
    \ m: Int = 0\n        ^\n/tmp/tmp8wcwckp8.swift:20:9: note: 'm' previously declared\
    \ here\n    var m: Int = 0\n        ^\n/tmp/tmp8wcwckp8.swift:26:9: error: invalid\
    \ redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmp8wcwckp8.swift:21:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmp8wcwckp8.swift:27:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmp8wcwckp8.swift:22:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmp8wcwckp8.swift:28:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmp8wcwckp8.swift:23:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmp8wcwckp8.swift:29:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmp8wcwckp8.swift:24:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmp8wcwckp8.swift:30:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmp8wcwckp8.swift:20:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmp8wcwckp8.swift:31:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmp8wcwckp8.swift:21:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmp8wcwckp8.swift:32:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmp8wcwckp8.swift:22:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmp8wcwckp8.swift:33:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmp8wcwckp8.swift:23:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmp8wcwckp8.swift:34:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmp8wcwckp8.swift:24:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmp8wcwckp8.swift:35:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmp8wcwckp8.swift:20:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n "
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool = false\n\
    \    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n    var\
    \ prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var prime_found7:\
    \ Bool = false\n    var prime_found8: Bool = false\n    var prime_found9: Bool\
    \ = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool =\
    \ false\n    var prime_found12: Bool = false\n    var prime_found13: Bool = false\n\
    \    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n  \
    \  var prime_found16: Bool = false\n    var prime_found17: Bool = false\n    var\
    \ prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var prime_found20:\
    \ Bool = false\n    var prime_found21: Bool = false\n    var prime_found22: Bool\
    \ = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool =\
    \ false\n    var prime_found25: Bool = false\n    var prime_found26: Bool = false\n\
    \    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n  \
    \  var prime_found29: Bool = false\n    var prime_found30: Bool = false\n    var\
    \ prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var prime_found33:\
    \ Bool = false\n    var prime_found34: Bool = false\n    var prime_found35: Bool\
    \ = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool =\
    \ false\n    var prime_found38: Bool = false\n    var prime_found39: Bool = false\n\
    \    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n  \
    \  var prime_found42: Bool = false\n    var prime_found43: Bool = false\n    var\
    \ prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var prime_found46:\
    \ Bool = false\n    var prime_found47: Bool = false\n    var prime_found48: Bool\
    \ = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool =\
    \ false\n    var prime_found51: Bool = false\n    var prime_found52: Bool = false\n\
    \    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n  \
    \  var prime_found55: Bool = false\n    var prime_found56: Bool = false\n    var\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp0ahnks8f.swift:72:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp0ahnks8f.swift:14:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp0ahnks8f.swift:15:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmp0ahnks8f.swift:16:9: warning: variable 'prime_found'\
    \ was never used; consider replacing with '_' or removing it\n    var prime_found:\
    \ Bool = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:17:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:18:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp0ahnks8f.swift:19:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:20:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:21:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp0ahnks8f.swift:22:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:23:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:24:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 2\n\
    \    var c = 0\n    var d = 0\n    var n1 = n\n    var n2 = n\n    var n3 = n\n\
    \    var n4 = n\n    var n5 = n\n    var n6 = n\n    var n7 = n\n    var n8 =\
    \ n\n    var n9 = n\n    var n10 = n\n    var n11 = n\n    var n12 = n\n    var\
    \ n13 = n\n    var n14 = n\n    var n15 = n\n    var n16 = n\n    var n17 = n\n\
    \    var n18 = n\n    var n19 = n\n    var n20 = n\n    var n21 = n\n    var n22\
    \ = n\n    var n23 = n\n    var n24 = n\n    var n25 = n\n    var n26 = n\n  \
    \  var n27 = n\n    var n28 = n\n    var n29 = n\n    var n30 = n\n    var n31\
    \ = n\n    var n32 = n\n    var n33 = n\n    var n34 = n\n    var n35 = n\n  \
    \  var n36 = n\n    var n37 = n\n    var n38 = n\n    var n39 = n\n    var n40\
    \ = n\n    var n41 = n\n    var n42 = n\n    var n43 = n\n    var n44 = n\n  \
    \  var n45 = n\n    var n46 = n\n    var n47 = n\n    var n48 = n\n    var n49\
    \ = n\n    var n50 = n\n    var n51 = n\n    var n52 = n\n    var n53 = n\n  \
    \  var n54 = n\n    var n55 = n\n    var n56 = n\n    var n57 = n\n    var n58\
    \ = n\n    var n59 = n\n    var n60 = n\n    var n61 = n\n    var n62 = n\n  \
    \  var n63 = n\n    var n64 = n\n    var n65 = n\n    var n66 = n\n    var n67\
    \ = n\n    var n68 = n\n    var n69 = n\n    var n70 = n\n    var n71 = n\n  \
    \  var n72 = n\n    var n73 = n\n    var n74 = n\n    var n75 = n\n    var n76\
    \ = n\n    var n77 = n\n    var n78 = n\n    var n79 = n\n    var n80 = n\n  \
    \  var n81 = n\n    var n82 = n\n    var n83 = n\n    var n84 = n\n    var n85\
    \ = n\n    var n86 = n\n    var n87 = n\n    var n88 = n\n    var n89 = n\n  \
    \  var n90 = n\n    var n91 = n\n    var n92 = n\n    var n93 = n\n    var n94\
    \ = n\n    var n95\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp3cl2p38s.swift:112:9: error: type annotation missing in pattern\n\
    \    var n95\n        ^\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1199231\n    }\n    if n == 32 {\n  \
    \      return 1864431\n    }\n    if n == 33 {\n        return 2128671\n    }\n\
    \    if n == 34 {\n        return 2616783\n    }\n    if n == 35 {\n        return\
    \ 4052707\n    }\n    if n == 36 {\n        return 5520331\n    }\n    if n ==\
    \ 37 {\n        return 7036283\n    }\n    if n == 38 {\n        return 9586943\n\
    \    }\n    if n == 39 {\n        return 13049697\n    }\n    if n == 40 {\n \
    \       return 16238809\n    }\n    if n == 41 {\n        return 20638171\n  \
    \  }\n    if n == 42 {\n        return 25551223\n    }\n    if n == 43 {\n   \
    \     return 30679007\n    }\n    if n == 44 {\n        return 36521573\n    }\n\
    \    if n == 45 {\n        return 41849673\n    }\n    if n == 46\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp6874ch1s.swift:149:15: error: expected '{' after 'if' condition\n\
    \    if n == 46\n              ^\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var fib: Int = 0\n    var prime: Int = 0\n    var prime2: Int\
    \ = 0\n    var prime3: Int = 0\n    var prime4: Int = 0\n    var prime5: Int =\
    \ 0\n    var prime6: Int = 0\n    var prime7: Int = 0\n    var prime8: Int = 0\n\
    \    var prime9: Int = 0\n    var prime10: Int = 0\n    var prime11: Int = 0\n\
    \    var prime12: Int = 0\n    var prime13: Int = 0\n    var prime14: Int = 0\n\
    \    var prime15: Int = 0\n    var prime16: Int = 0\n    var prime17: Int = 0\n\
    \    var prime18: Int = 0\n    var prime19: Int = 0\n    var prime20: Int = 0\n\
    \    var prime21: Int = 0\n    var prime22: Int = 0\n    var prime23: Int = 0\n\
    \    var prime24: Int = 0\n    var prime25: Int = 0\n    var prime26: Int = 0\n\
    \    var prime27: Int = 0\n    var prime28: Int = 0\n    var prime29: Int = 0\n\
    \    var prime30: Int = 0\n    var prime31: Int = 0\n    var prime32: Int = 0\n\
    \    var prime33: Int = 0\n    var prime34: Int = 0\n    var prime35: Int = 0\n\
    \    var prime36: Int = 0\n    var prime37: Int = 0\n    var prime38: Int = 0\n\
    \    var prime39: Int = 0\n    var prime40: Int = 0\n    var prime41: Int = 0\n\
    \    var prime42: Int = 0\n    var prime43: Int = 0\n    var prime44: Int = 0\n\
    \    var prime45: Int = 0\n    var prime46: Int = 0\n    var prime47: Int = 0\n\
    \    var prime48: Int = 0\n    var prime49: Int = 0\n    var prime50: Int = 0\n\
    \    var prime51: Int = 0\n    var prime52: Int = 0\n    var prime53: Int = 0\n\
    \    var prime54: Int = 0\n    var prime55: Int = 0\n    var prime56: Int = 0\n\
    \    var prime57: Int = 0\n    var prime58: Int = 0\n    var prime59: Int = 0\n\
    \    var prime60: Int = 0\n    var prime61: Int = 0\n    var prime62: Int = 0\n\
    \    var prime63: Int = 0\n    var prime64: Int = 0\n    var prime65: Int = 0\n\
    \    var prime66: Int = 0\n    var prime67: Int = 0\n    var prime68: Int = 0\n\
    \    var prime69: Int = 0\n    var prime70: Int = 0\n    var prime71: Int = 0\n\
    \    var prime72: Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp7oq11564.swift:17:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp7oq11564.swift:18:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmp7oq11564.swift:19:9: warning: variable 'prime2' was\
    \ never used; consider replacing with '_' or removing it\n    var prime2: Int\
    \ = 0\n        ^~~~~~\n        _\n/tmp/tmp7oq11564.swift:20:9: warning: variable\
    \ 'prime3' was never used; consider replacing with '_' or removing it\n    var\
    \ prime3: Int = 0\n        ^~~~~~\n        _\n/tmp/tmp7oq11564.swift:21:9: warning:\
    \ variable 'prime4' was never used; consider replacing with '_' or removing it\n\
    \    var prime4: Int = 0\n        ^~~~~~\n        _\n/tmp/tmp7oq11564.swift:22:9:\
    \ warning: variable 'prime5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime5: Int = 0\n        ^~~~~~\n        _\n/tmp/tmp7oq11564.swift:23:9:\
    \ warning: variable 'prime6' was never used; consider replacing with '_' or removing\
    \ it\n    var prime6: Int = 0\n        ^~~~~~\n        _\n/tmp/tmp7oq11564.swift:24:9:\
    \ warning: variable 'prime7' was never used; consider replacing with '_' or removing\
    \ it\n    var prime7: Int = 0\n        ^~~~~~\n        _\n/tmp/tmp7oq11564.swift:25:9:\
    \ warning: variable 'prime8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime8: Int = 0\n        ^~~~~~\n        _\n/tmp/tmp7oq11564.swift:26:9:\
    \ warning: variable 'prime9' was never used; consider replacing with '_' or removing\
    \ it\n    var prime9: Int = 0\n        ^~~~~~\n        _\n/tmp/tmp7oq11564.swift:27:9:\
    \ warning: variable 'prime10' was never used; consider replacing with '_' or removing\
    \ it\n    var prime10: Int = 0\n        ^~~~~~~\n        _\n/tmp/tmp7oq11564.swift:28:9:\
    \ warning: variable 'prime11' was never used; consider replacing with '_' or removing\
    \ it\n    var prime11: Int = 0\n        ^~~~~~~\n        _\n/tmp/tmp7oq11564.swift:29:9:\
    \ warning: variable 'prime12' was never used; consider repl"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1311569\n    }\n    if n == 32 {\n  \
    \      return 1922396\n    }\n    if n == 33 {\n        return 3175118\n    }\n\
    \    if n == 34 {\n        return 514229\n    }\n    if n == 35 {\n        return\
    \ 765571\n    }\n    if n == 36 {\n        return 1311569\n    }\n    if n ==\
    \ 37 {\n        return 1922396\n    }\n    if n == 38 {\n        return 3175118\n\
    \    }\n    if n == 39 {\n        return 514229\n    }\n    if n == 40 {\n   \
    \     return 765571\n    }\n    if n == 41 {\n        return 1311569\n    }\n\
    \    if n == 42 {\n        return 1922396\n    }\n    if n == 43 {\n        return\
    \ 3175118\n    }\n    if n == 44 {\n        return 514229\n    }\n    if n ==\
    \ 45 {\n        return 765571\n    }\n    if n == 46 {\n        return 1311569\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp7fnx7jne.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp7fnx7jne.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp7fnx7jne.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let primes = [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97]\n    let prime = primes[n]\n    return prime > n ? prime_fib(n + 1) : prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp_1oxjse8.swift:16:34: error: missing argument label 'n:' in call\n\
    \    return prime > n ? prime_fib(n + 1) : prime\n                           \
    \      ^\n                                 n: \n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1261035\n    }\n    if n == 32 {\n  \
    \      return 1699771\n    }\n    if n == 33 {\n        return 2554560\n    }\n\
    \    if n == 34 {\n        return 4107561\n    }\n    if n == 35 {\n        return\
    \ 5702881\n    }\n    if n == 36 {\n        return 7163351\n    }\n    if n ==\
    \ 37 {\n        return 9261682\n    }\n    if n == 38 {\n        return 11310067\n\
    \    }\n    if n == 39 {\n        return 13264136\n    }\n    if n == 40 {\n \
    \       return 15480046\n    }\n    if n == 41 {\n        return 1872896\n   \
    \ }\n    if n == 42 {\n        return 2145843\n    }\n    if n == 43 {\n     \
    \   return 2489273\n    }\n    if n == 44 {\n        return 2739225\n    }\n \
    \   if n == 45 {\n        return 3088853\n    }\n    if n == 46 {\n        return\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpjgbr6w22.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpjgbr6w22.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpjgbr6w22.swift:150:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmpjgbr6w22.swift:154:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1311569\n    }\n    if n == 32 {\n  \
    \      return 1922396\n    }\n    if n == 33 {\n        return 3175118\n    }\n\
    \    if n == 34 {\n        return 514229\n    }\n    if n == 35 {\n        return\
    \ 765571\n    }\n    if n == 36 {\n        return 1311569\n    }\n    if n ==\
    \ 37 {\n        return 1922396\n    }\n    if n == 38 {\n        return 3175118\n\
    \    }\n    if n == 39 {\n        return 514229\n    }\n    if n == 40 {\n   \
    \     return 765571\n    }\n    if n == 41 {\n        return 1311569\n    }\n\
    \    if n == 42 {\n        return 1922396\n    }\n    if n == 43 {\n        return\
    \ 3175118\n    }\n    if n == 44 {\n        return 514229\n    }\n    if n ==\
    \ 45 {\n        return 765571\n    }\n    if n == 46 {\n        return 1311569\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpbxub3zzi.swift:176:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpbxub3zzi.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpbxub3zzi.swift:155:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: [[Int]] = [\n    \
    \    [1, 1],\n        [1, 2]\n    ]\n    if n < 2 {\n        return fib[n][0]\n\
    \    }\n    if n == 2 {\n        return fib[n][1]\n    }\n    if n == 3 {\n  \
    \      return fib[n][1]\n    }\n    if n == 4 {\n        return fib[n][0] + fib[n][1]\n\
    \    }\n    if n == 5 {\n        return fib[n][0] + fib[n][1]\n    }\n    if n\
    \ == 6 {\n        return fib[n][0] + fib[n][1]\n    }\n    if n == 7 {\n     \
    \   return fib[n][0] + fib[n][1]\n    }\n    if n == 8 {\n        return fib[n][0]\
    \ + fib[n][1]\n    }\n    if n == 9 {\n        return fib[n][0] + fib[n][1]\n\
    \    }\n    if n == 10 {\n        return fib[n][0] + fib[n][1]\n    }\n    if\
    \ n == 11 {\n        return fib[n][0] + fib[n][1]\n    }\n    if n == 12 {\n \
    \       return fib[n][0] + fib[n][1]\n    }\n    if n == 13 {\n        return\
    \ fib[n][0] + fib[n][1]\n    }\n    if n == 14 {\n        return fib[n][0] + fib[n][1]\n\
    \    }\n    if n == 15 {\n        return fib[n][0] + fib[n][1]\n    }\n    if\
    \ n == 16 {\n        return fib[n][0] + fib[n][1]\n    }\n    if n == 17 {\n \
    \       return fib[n][0] + fib[n][1]\n    }\n    if n == 18 {\n        return\
    \ fib[n][0] + fib[n][1]\n    }\n    if n == 19 {\n        return fib[n][0] + fib[n][1]\n\
    \    }\n    if n == 20 {\n        return fib[n][0] + fib[n][1]\n    }\n    if\
    \ n == 21 {\n        return fib[n][0] + fib[n][1]\n    }\n    if n == 22 {\n \
    \       return fib[n][0] + fib[n][1]\n    }\n    if n == 23 {\n        return\
    \ fib[n][0] + fib[n][1]\n    }\n    if n == 24 {\n        return fib[n][0] + fib[n][1]\n\
    \    }\n    if n == 25 {\n        return fib[n][0] + fib[n][1]\n    }\n    if\
    \ n == 26 {\n        return fib[n][0] + fib[n][1]\n    }\n    if n == 27 {\n \
    \       return fib[n][0] + fib[n][1]\n    }\n    if n == 28 {\n        return\
    \ fib[n][0] + fib[n][1]\n    }\n    if n == 29 {\n        return fib[n][0] + fib[n][1]\n\
    \    }\n    if n == 30 {\n        return fib[n][0] + fib[n][1]\n    }\n    if\
    \ n == 31 {\n        return fib[n][0] + fib[n][1]\n    }\n    if n == 32 {\n \
    \       return fib[n][0] + fib[n][1]\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpf_t3carm.swift:138:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpf_t3carm.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpf_t3carm.swift:117:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let result = 1\n    let prime\
    \ = 2\n    let fib = 3\n    while prime < n {\n        if n % prime == 0 {\n \
    \           result += fib\n        }\n        prime += 2\n        fib += 2\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpa1ylv0dt.swift:19:20: error: left side of mutating operator isn't\
    \ mutable: 'result' is a 'let' constant\n            result += fib\n         \
    \   ~~~~~~ ^\n/tmp/tmpa1ylv0dt.swift:14:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let result = 1\n    ^~~\n    var\n/tmp/tmpa1ylv0dt.swift:21:15:\
    \ error: left side of mutating operator isn't mutable: 'prime' is a 'let' constant\n\
    \        prime += 2\n        ~~~~~ ^\n/tmp/tmpa1ylv0dt.swift:15:5: note: change\
    \ 'let' to 'var' to make it mutable\n    let prime = 2\n    ^~~\n    var\n/tmp/tmpa1ylv0dt.swift:22:13:\
    \ error: left side of mutating operator isn't mutable: 'fib' is a 'let' constant\n\
    \        fib += 2\n        ~~~ ^\n/tmp/tmpa1ylv0dt.swift:16:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let fib = 3\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1199231\n    }\n    if n == 32 {\n  \
    \      return 1855696\n    }\n    if n == 33 {\n        return 2329096\n    }\n\
    \    if n == 34 {\n        return 2814019\n    }\n    if n == 35 {\n        return\
    \ 3537545\n    }\n    if n == 36 {\n        return 4107601\n    }\n    if n ==\
    \ 37 {\n        return 4882813\n    }\n    if n == 38 {\n        return 5811263\n\
    \    }\n    if n == 39 {\n        return 6762736\n    }\n    if n == 40 {\n  \
    \      return 8235431\n    }\n    if n == 41 {\n        return 10407663\n    }\n\
    \    if n == 42 {\n        return 12665527\n    }\n    if n == 43 {\n        return\
    \ 14447921\n    }\n    if n == 44 {\n        return 17283791\n    }\n    if n\
    \ == 45 {\n        return 20996071\n    }\n    if n == 46\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp0cqabc6c.swift:149:15: error: expected '{' after 'if' condition\n\
    \    if n == 46\n              ^\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let mut fib = [0, 1]\n    for\
    \ _ in 0..<n {\n        fib.append(fib[fib.length - 1] + fib[fib.length - 2])\n\
    \    }\n    return fib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpi9xviou6.swift:14:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut fib = [0,\
    \ 1]\n            ^\n/tmp/tmpi9xviou6.swift:14:13: note: join the identifiers\
    \ together\n    let mut fib = [0, 1]\n        ~~~~^~~\n        mutfib\n/tmp/tmpi9xviou6.swift:14:13:\
    \ note: join the identifiers together with camel-case\n    let mut fib = [0, 1]\n\
    \        ~~~~^~~\n        mutFib\n/tmp/tmpi9xviou6.swift:16:9: error: cannot find\
    \ 'fib' in scope\n        fib.append(fib[fib.length - 1] + fib[fib.length - 2])\n\
    \        ^~~\n/tmp/tmpi9xviou6.swift:16:20: error: cannot find 'fib' in scope\n\
    \        fib.append(fib[fib.length - 1] + fib[fib.length - 2])\n             \
    \      ^~~\n/tmp/tmpi9xviou6.swift:16:24: error: cannot find 'fib' in scope\n\
    \        fib.append(fib[fib.length - 1] + fib[fib.length - 2])\n             \
    \          ^~~\n/tmp/tmpi9xviou6.swift:16:42: error: cannot find 'fib' in scope\n\
    \        fib.append(fib[fib.length - 1] + fib[fib.length - 2])\n             \
    \                            ^~~\n/tmp/tmpi9xviou6.swift:16:46: error: cannot\
    \ find 'fib' in scope\n        fib.append(fib[fib.length - 1] + fib[fib.length\
    \ - 2])\n                                             ^~~\n/tmp/tmpi9xviou6.swift:18:12:\
    \ error: cannot find 'fib' in scope\n    return fib[n]\n           ^~~\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    var a = 1\n    var b = 2\n    var c = 0\n    var d = 0\n   \
    \ var n = 0\n\n    while n <= n / 2 {\n        c = a + b\n        d = b - a\n\
    \        a = b\n        b = c\n        n = n + 1\n    }\n\n    return c\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmp2asfji_e/tmp2asfji_e.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08791eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0878ee1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0878ee1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0878ee07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2asfji_e                        0x000055f37ad79248 <unavailable> + 4680

    5    libc.so.6                          0x00002b08793d6460 __libc_start_main +
    245

    6    tmp2asfji_e                        0x000055f37ad78ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660013701
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    var a = 0\n    var b = 1\n    var c = 0\n    var d = 0\n\n \
    \   for _ in 0..<n {\n        c = a + b\n        d = b\n        a = c\n      \
    \  b = d\n    }\n\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpm9vpyros/tmpm9vpyros.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0baaac2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0baa7b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0baa7b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0baa7b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm9vpyros                        0x000055fdc7466338 <unavailable> + 4920

    5    libc.so.6                          0x00002b0baacae460 __libc_start_main +
    245

    6    tmpm9vpyros                        0x000055fdc7465fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013701
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let primes = [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97]\n    var result = primes[n]\n    for _ in 0..<n {\n        result = primes[result]\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmp_ghvw1mo/tmp_ghvw1mo.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b214db3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b214d835b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b214d835988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b214d8347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ghvw1mo                        0x000055827e41b498 <unavailable> + 5272

    5    libc.so.6                          0x00002b214dd2a460 __libc_start_main +
    245

    6    tmp_ghvw1mo                        0x000055827e41b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n   \
    \     return n\n    }\n    if n == 2 {\n        return 3\n    }\n    if n == 3\
    \ {\n        return 5\n    }\n    if n == 4 {\n        return 13\n    }\n    if\
    \ n == 5 {\n        return 89\n    }\n    if n == 6 {\n        return 103\n  \
    \  }\n    if n == 7 {\n        return 127\n    }\n    if n == 8 {\n        return\
    \ 173\n    }\n    if n == 9 {\n        return 207\n    }\n    if n == 10 {\n \
    \       return 229\n    }\n    if n == 11 {\n        return 257\n    }\n    if\
    \ n == 12 {\n        return 283\n    }\n    if n == 13 {\n        return 311\n\
    \    }\n    if n == 14 {\n        return 337\n    }\n    if n == 15 {\n      \
    \  return 361\n    }\n    if n == 16 {\n        return 389\n    }\n    if n ==\
    \ 17 {\n        return 415\n    }\n    if n == 18 {\n        return 441\n    }\n\
    \    if n == 19 {\n        return 467\n    }\n    if n == 20 {\n        return\
    \ 493\n    }\n    if n == 21 {\n        return 521\n    }\n    if n == 22 {\n\
    \        return 547\n    }\n    if n == 23 {\n        return 573\n    }\n    if\
    \ n == 24 {\n        return 599\n    }\n    if n == 25 {\n        return 623\n\
    \    }\n    if n == 26 {\n        return 647\n    }\n    if n == 27 {\n      \
    \  return 669\n    }\n    if n == 28 {\n        return 695\n    }\n    if n ==\
    \ 29 {\n        return 719\n    }\n    if n == 30 {\n        return 743\n    }\n\
    \    if n == 31 {\n        return 767\n    }\n    if n == 32 {\n        return\
    \ 791\n    }\n    if n == 33 {\n        return 815\n    }\n    if n == 34 {\n\
    \        return 839\n    }\n    if n == 35 {\n        return 863\n    }\n    if\
    \ n == 36 {\n        return 887\n    }\n    if n == 37 {\n        return 911\n\
    \    }\n    if n == 38 {\n        return 937\n    }\n    if n == 39 {\n      \
    \  return 963\n    }\n    if n == 40 {\n        return 989\n    }\n    if n ==\
    \ 41 {\n        return 1013\n    }\n    if n == 42 {\n        return 1039\n  \
    \  }\n    if n == 43 {\n        return 1063\n    }\n    if n == 44 {\n       \
    \ return 1089\n    }\n    if n == 45 {\n        return 1123\n    }\n    if n ==\
    \ 46 {\n        return 1147\n    }\n    if n == 47 {\n        return 1171\n  \
    \  }\n    if n == 48 {\n        return 1197\n    }\n    if n == 49 {\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpeg9ohwqp.swift:183:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpeg9ohwqp.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpeg9ohwqp.swift:162:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1188704\n    }\n    if n == 32 {\n  \
    \      return 1819871\n    }\n    if n == 33 {\n        return 3028877\n    }\n\
    \    if n == 34 {\n        return 4967641\n    }\n    if n == 35 {\n        return\
    \ 8059057\n    }\n    if n == 36 {\n        return 13049697\n    }\n    if n ==\
    \ 37 {\n        return 21199593\n    }\n    if n == 38 {\n        return 29238806\n\
    \    }\n    if n == 39 {\n        return 46537953\n    }\n    if n == 40 {\n \
    \       return 65574421\n    }\n    if n == 41 {\n        return 82354393\n  \
    \  }\n    if n == 42 {\n        return 109480953\n    }\n    if n == 43 {\n  \
    \      return 171455697\n    }\n    if n == 44 {\n        return 257703993\n \
    \   }\n    if n == 45 {\n        return 41889087\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp_8fzd_kr.swift:173:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp_8fzd_kr.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp_8fzd_kr.swift:152:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: Int = Int(pow(Double(n),\
    \ Double(1.0 / 2.0)))\n    let prime: Int = Int(pow(Double(n), Double(1.0 / 3.0)))\n\
    \    return fib % prime == 0 ? fib : prime_fib(n: n + 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpmzd1fxhi.swift:14:24: error: cannot find 'pow' in scope\n    let\
    \ fib: Int = Int(pow(Double(n), Double(1.0 / 2.0)))\n                       ^~~\n\
    /tmp/tmpmzd1fxhi.swift:15:26: error: cannot find 'pow' in scope\n    let prime:\
    \ Int = Int(pow(Double(n), Double(1.0 / 3.0)))\n                         ^~~\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1188723\n    }\n    if n == 32 {\n  \
    \      return 1819878\n    }\n    if n == 33 {\n        return 2365887\n    }\n\
    \    if n == 34 {\n        return 3035186\n    }\n    if n == 35 {\n        return\
    \ 3855899\n    }\n    if n == 36 {\n        return 4622373\n    }\n    if n ==\
    \ 37 {\n        return 6283104\n    }\n    if n == 38 {\n        return 8147099\n\
    \    }\n    if n == 39 {\n        return 10233437\n    }\n    if n == 40 {\n \
    \       return 12610519\n    }\n    if n == 41 {\n        return 15186523\n  \
    \  }\n    if n == 42 {\n        return 18356463\n    }\n    if n == 43 {\n   \
    \     return 21473789\n    }\n    if n == 44 {\n        return 25140737\n    }\n\
    \    if n == 45 {\n        return 27777259\n    }\n    if n == 46 {\n        return\
    \ 32\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpa0oynh42.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpa0oynh42.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpa0oynh42.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1198643\n    }\n    if n == 32 {\n  \
    \      return 1672865\n    }\n    if n == 33 {\n        return 2679141\n    }\n\
    \    if n == 34 {\n        return 4334944\n    }\n    if n == 35 {\n        return\
    \ 6928521\n    }\n    if n == 36 {\n        return 10608084\n    }\n    if n ==\
    \ 37 {\n        return 16549804\n    }\n    if n == 38 {\n        return 2679141\n\
    \    }\n    if n == 39 {\n        return 4334944\n    }\n    if n == 40 {\n  \
    \      return 6928521\n    }\n    if n == 41 {\n        return 10608084\n    }\n\
    \    if n == 42 {\n        return 16549804\n    }\n    if n == 43 {\n        return\
    \ 2679141\n    }\n    if n == 44 {\n        return 4334944\n    }\n    if n ==\
    \ 45 {\n        return 6928521\n    }\n    if n == 46 {\n        return 10608084\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp0i65q75m.swift:176:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp0i65q75m.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp0i65q75m.swift:155:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: [[Int]] = [[1, 1]]\n\
    \    for _ in 0..<n {\n        fib.append(fib[fib.count - 1] + fib[fib.count -\
    \ 2])\n    }\n    return fib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp81llpu3t.swift:16:13: error: cannot use mutating member on immutable\
    \ value: 'fib' is a 'let' constant\n        fib.append(fib[fib.count - 1] + fib[fib.count\
    \ - 2])\n        ~~~ ^\n/tmp/tmp81llpu3t.swift:14:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let fib: [[Int]] = [[1, 1]]\n    ^~~\n    var\n/tmp/tmp81llpu3t.swift:18:15:\
    \ error: cannot convert return expression of type '[Int]' to return type 'Int'\n\
    \    return fib[n]\n           ~~~^~~\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 3\n    }\n    if n == 3 {\n      \
    \  return 5\n    }\n    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n\
    \        return 89\n    }\n    if n == 6 {\n        return 103\n    }\n    if\
    \ n == 7 {\n        return 127\n    }\n    if n == 8 {\n        return 173\n \
    \   }\n    if n == 9 {\n        return 191\n    }\n    if n == 10 {\n        return\
    \ 229\n    }\n    if n == 11 {\n        return 251\n    }\n    if n == 12 {\n\
    \        return 289\n    }\n    if n == 13 {\n        return 311\n    }\n    if\
    \ n == 14 {\n        return 341\n    }\n    if n == 15 {\n        return 369\n\
    \    }\n    if n == 16 {\n        return 393\n    }\n    if n == 17 {\n      \
    \  return 419\n    }\n    if n == 18 {\n        return 443\n    }\n    if n ==\
    \ 19 {\n        return 467\n    }\n    if n == 20 {\n        return 491\n    }\n\
    \    if n == 21 {\n        return 521\n    }\n    if n == 22 {\n        return\
    \ 563\n    }\n    if n == 23 {\n        return 597\n    }\n    if n == 24 {\n\
    \        return 623\n    }\n    if n == 25 {\n        return 659\n    }\n    if\
    \ n == 26 {\n        return 683\n    }\n    if n == 27 {\n        return 709\n\
    \    }\n    if n == 28 {\n        return 743\n    }\n    if n == 29 {\n      \
    \  return 769\n    }\n    if n == 30 {\n        return 793\n    }\n    if n ==\
    \ 31 {\n        return 819\n    }\n    if n == 32 {\n        return 843\n    }\n\
    \    if n == 33 {\n        return 867\n    }\n    if n == 34 {\n        return\
    \ 891\n    }\n    if n == 35 {\n        return 917\n    }\n    if n == 36 {\n\
    \        return 943\n    }\n    if n == 37 {\n        return 969\n    }\n    if\
    \ n == 38 {\n        return 993\n    }\n    if n == 39 {\n        return 1019\n\
    \    }\n    if n == 40 {\n        return 1053\n    }\n    if n == 41 {\n     \
    \   return 1079\n    }\n    if n == 42 {\n        return 1113\n    }\n    if n\
    \ == 43 {\n        return 1137\n    }\n    if n == 44 {\n        return 1163\n\
    \    }\n    if n == 45 {\n        return 1199\n    }\n    if n == 46 {\n     \
    \   return 1225\n    }\n    if n == 47 {\n        return 1253\n    }\n    if n\
    \ == 48 {\n        return 1279\n    }\n    if \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp7jogom6p.swift:158:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1304969\n    }\n    if n == 32 {\n  \
    \      return 2111359\n    }\n    if n == 33 {\n        return 2926925\n    }\n\
    \    if n == 34 {\n        return 466578\n    }\n    if n == 35 {\n        return\
    \ 633826\n    }\n    if n == 36 {\n        return 904111\n    }\n    if n == 37\
    \ {\n        return 1236429\n    }\n    if n == 38 {\n        return 1586127\n\
    \    }\n    if n == 39 {\n        return 2119925\n    }\n    if n == 40 {\n  \
    \      return 2787953\n    }\n    if n == 41 {\n        return 418366\n    }\n\
    \    if n == 42 {\n        return 555750\n    }\n    if n == 43 {\n        return\
    \ 740771\n    }\n    if n == 44 {\n        return 909505\n    }\n    if n == 45\
    \ {\n        return 1207033\n    }\n    if n == 46 {\n        return 1520507\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: '/tmp/tmp1r7q_xrb.swift:152:1: error: missing return in global function
    expected to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var fib: Int = 0\n    var prime: Int = 0\n    var i: Int = 0\n\
    \    var j: Int = 0\n    var k: Int = 0\n    var temp: Int = 0\n    var flag:\
    \ Bool = false\n    var temp2: Int = 0\n    var temp3: Int = 0\n    var temp4:\
    \ Int = 0\n    var temp5: Int = 0\n    var temp6: Int = 0\n    var temp7: Int\
    \ = 0\n    var temp8: Int = 0\n    var temp9: Int = 0\n    var temp10: Int = 0\n\
    \    var temp11: Int = 0\n    var temp12: Int = 0\n    var temp13: Int = 0\n \
    \   var temp14: Int = 0\n    var temp15: Int = 0\n    var temp16: Int = 0\n  \
    \  var temp17: Int = 0\n    var temp18: Int = 0\n    var temp19: Int = 0\n   \
    \ var temp20: Int = 0\n    var temp21: Int = 0\n    var temp22: Int = 0\n    var\
    \ temp23: Int = 0\n    var temp24: Int = 0\n    var temp25: Int = 0\n    var temp26:\
    \ Int = 0\n    var temp27: Int = 0\n    var temp28: Int = 0\n    var temp29: Int\
    \ = 0\n    var temp30: Int = 0\n    var temp31: Int = 0\n    var temp32: Int =\
    \ 0\n    var temp33: Int = 0\n    var temp34: Int = 0\n    var temp35: Int = 0\n\
    \    var temp36: Int = 0\n    var temp37: Int = 0\n    var temp38: Int = 0\n \
    \   var temp39: Int = 0\n    var temp40: Int = 0\n    var temp41: Int = 0\n  \
    \  var temp42: Int = 0\n    var temp43: Int = 0\n    var temp44: Int = 0\n   \
    \ var temp45: Int = 0\n    var temp46: Int = 0\n    var temp47: Int = 0\n    var\
    \ temp48: Int = 0\n    var temp49: Int = 0\n    var temp50: Int = 0\n    var temp51:\
    \ Int = 0\n    var temp52: Int = 0\n    var temp53: Int = 0\n    var temp54: Int\
    \ = 0\n    var temp55: Int = 0\n    var temp56: Int = 0\n    var temp57: Int =\
    \ 0\n    var temp58: Int = 0\n    var temp59: Int = 0\n    var temp60: Int = 0\n\
    \    var temp61: Int = 0\n    var temp62: Int = 0\n    var temp63: Int = 0\n \
    \   var temp64: Int = 0\n    var temp65: Int = 0\n    var temp66: Int = 0\n  \
    \  var temp67: Int = 0\n    var temp68: Int\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpvbn3ra1k.swift:17:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmpvbn3ra1k.swift:18:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmpvbn3ra1k.swift:19:9: warning: variable 'i' was never\
    \ used; consider replacing with '_' or removing it\n    var i: Int = 0\n     \
    \   ^\n        _\n/tmp/tmpvbn3ra1k.swift:20:9: warning: variable 'j' was never\
    \ used; consider replacing with '_' or removing it\n    var j: Int = 0\n     \
    \   ^\n        _\n/tmp/tmpvbn3ra1k.swift:21:9: warning: variable 'k' was never\
    \ used; consider replacing with '_' or removing it\n    var k: Int = 0\n     \
    \   ^\n        _\n/tmp/tmpvbn3ra1k.swift:22:9: warning: variable 'temp' was never\
    \ used; consider replacing with '_' or removing it\n    var temp: Int = 0\n  \
    \      ^~~~\n        _\n/tmp/tmpvbn3ra1k.swift:23:9: warning: variable 'flag'\
    \ was never used; consider replacing with '_' or removing it\n    var flag: Bool\
    \ = false\n        ^~~~\n        _\n/tmp/tmpvbn3ra1k.swift:24:9: warning: variable\
    \ 'temp2' was never used; consider replacing with '_' or removing it\n    var\
    \ temp2: Int = 0\n        ^~~~~\n        _\n/tmp/tmpvbn3ra1k.swift:25:9: warning:\
    \ variable 'temp3' was never used; consider replacing with '_' or removing it\n\
    \    var temp3: Int = 0\n        ^~~~~\n        _\n/tmp/tmpvbn3ra1k.swift:26:9:\
    \ warning: variable 'temp4' was never used; consider replacing with '_' or removing\
    \ it\n    var temp4: Int = 0\n        ^~~~~\n        _\n/tmp/tmpvbn3ra1k.swift:27:9:\
    \ warning: variable 'temp5' was never used; consider replacing with '_' or removing\
    \ it\n    var temp5: Int = 0\n        ^~~~~\n        _\n/tmp/tmpvbn3ra1k.swift:28:9:\
    \ warning: variable 'temp6' was never used; consider replacing with '_' or removing\
    \ it\n    var temp6: Int = 0\n        ^~~~~\n        _\n/tmp/tmpvbn3ra1k.swift:29:9:\
    \ warning: variable 'temp7' was never used; consider replacing with '_' or removing\
    \ it\n    var temp7: Int = 0\n        ^~~~~\n        "
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: [[Int]] = [[1,1],[1,0]]\n\
    \    for i in 2..<n {\n        fib[0][1] = fib[1][0]\n        fib[1][0] = fib[0][1]\
    \ + fib[1][1]\n    }\n    return fib[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp5_r_ni7c.swift:16:15: error: cannot assign through subscript: 'fib'\
    \ is a 'let' constant\n        fib[0][1] = fib[1][0]\n        ~~~   ^\n/tmp/tmp5_r_ni7c.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let fib: [[Int]] = [[1,1],[1,0]]\n\
    \    ^~~\n    var\n/tmp/tmp5_r_ni7c.swift:17:15: error: cannot assign through\
    \ subscript: 'fib' is a 'let' constant\n        fib[1][0] = fib[0][1] + fib[1][1]\n\
    \        ~~~   ^\n/tmp/tmp5_r_ni7c.swift:14:5: note: change 'let' to 'var' to\
    \ make it mutable\n    let fib: [[Int]] = [[1,1],[1,0]]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n   \
    \     return n\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) +\
    \ prime_fib(n - 2)\n    }\n    return prime_fib(n - 1) + prime_fib(n - 3)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpmvqp34y9.swift:18:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpmvqp34y9.swift:18:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpmvqp34y9.swift:20:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 3)\n       \
    \              ^\n                     n: \n/tmp/tmpmvqp34y9.swift:20:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 3)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    var i: Int = 0\n    var j: Int\
    \ = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n:\
    \ Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var\
    \ r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n   \
    \ var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n\
    \    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int =\
    \ 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int\
    \ = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k:\
    \ Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var\
    \ o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n   \
    \ var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n\
    \    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int =\
    \ 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int\
    \ = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h:\
    \ Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var\
    \ l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n   \
    \ var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n\
    \    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int =\
    \ 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int\
    \ = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e:\
    \ Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var\
    \ i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n   \
    \ var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n\
    \    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int =\
    \ 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp540ogfoj.swift:43:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:17:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:44:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:18:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:45:9:\
    \ error: invalid redeclaration of 'k'\n    var k: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:19:9:\
    \ note: 'k' previously declared here\n    var k: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:46:9:\
    \ error: invalid redeclaration of 'l'\n    var l: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:20:9:\
    \ note: 'l' previously declared here\n    var l: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:47:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:21:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:48:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:22:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:49:9:\
    \ error: invalid redeclaration of 'o'\n    var o: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:23:9:\
    \ note: 'o' previously declared here\n    var o: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:50:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:24:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:51:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:25:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:52:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:26:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:53:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:27:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n "
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2) + prime_fib(n - 3) + prime_fib(n - 4)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpgaz1tayj.swift:24:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpgaz1tayj.swift:24:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpgaz1tayj.swift:27:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpgaz1tayj.swift:27:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpgaz1tayj.swift:27:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpgaz1tayj.swift:29:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n -\
    \ 3) + prime_fib(n - 4)\n                     ^\n                     n: \n/tmp/tmpgaz1tayj.swift:29:41:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3) + prime_fib(n - 4)\n                               \
    \         ^\n                                        n: \n/tmp/tmpgaz1tayj.swift:29:60:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3) + prime_fib(n - 4)\n                               \
    \                            ^\n                                             \
    \              n: \n/tmp/tmpgaz1tayj.swift:29:79: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n -\
    \ 3) + prime_fib(n - 4)\n                                                 "
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1188723\n    }\n    if n == 32 {\n  \
    \      return 1819878\n    }\n    if n == 33 {\n        return 3038976\n    }\n\
    \    if n == 34 {\n        return 5574771\n    }\n    if n == 35 {\n        return\
    \ 8128000\n    }\n    if n == 36 {\n        return 12610990\n    }\n    if n ==\
    \ 37 {\n        return 18721393\n    }\n    if n == 38 {\n        return 25151842\n\
    \    }\n    if n == 39 {\n        return 34845785\n    }\n    if n == 40 {\n \
    \       return 51022987\n    }\n    if n == 41 {\n        return 68157445\n  \
    \  }\n    if n == 42 {\n        return 92600691\n    }\n    if n == 43 {\n   \
    \     return 115689628\n    }\n    if n == 44 {\n        return 139561391\n  \
    \  }\n    if n == 45 {\n        return 167478899\n    }\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: '/tmp/tmpc5279gr6.swift:150:1: error: missing return in global function
    expected to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime2: Int = 0\n    var prime3: Int = 0\n    var prime4: Int\
    \ = 0\n    var prime5: Int = 0\n    var prime6: Int = 0\n    var prime7: Int =\
    \ 0\n    var prime8: Int = 0\n    var prime9: Int = 0\n    var prime10: Int =\
    \ 0\n    var prime11: Int = 0\n    var prime12: Int = 0\n    var prime13: Int\
    \ = 0\n    var prime14: Int = 0\n    var prime15: Int = 0\n    var prime16: Int\
    \ = 0\n    var prime17: Int = 0\n    var prime18: Int = 0\n    var prime19: Int\
    \ = 0\n    var prime20: Int = 0\n    var prime21: Int = 0\n    var prime22: Int\
    \ = 0\n    var prime23: Int = 0\n    var prime24: Int = 0\n    var prime25: Int\
    \ = 0\n    var prime26: Int = 0\n    var prime27: Int = 0\n    var prime28: Int\
    \ = 0\n    var prime29: Int = 0\n    var prime30: Int = 0\n    var prime31: Int\
    \ = 0\n    var prime32: Int = 0\n    var prime33: Int = 0\n    var prime34: Int\
    \ = 0\n    var prime35: Int = 0\n    var prime36: Int = 0\n    var prime37: Int\
    \ = 0\n    var prime38: Int = 0\n    var prime39: Int = 0\n    var prime40: Int\
    \ = 0\n    var prime41: Int = 0\n    var prime42: Int = 0\n    var prime43: Int\
    \ = 0\n    var prime44: Int = 0\n    var prime45: Int = 0\n    var prime46: Int\
    \ = 0\n    var prime47: Int = 0\n    var prime48: Int = 0\n    var prime49: Int\
    \ = 0\n    var prime50: Int = 0\n    var prime51: Int = 0\n    var prime52: Int\
    \ = 0\n    var prime53: Int = 0\n    var prime54: Int = 0\n    var prime55: Int\
    \ = 0\n    var prime56: Int = 0\n    var prime57: Int = 0\n    var prime58: Int\
    \ = 0\n    var prime59: Int = 0\n    var prime60: Int = 0\n    var prime61: Int\
    \ = 0\n    var prime62: Int = 0\n    var prime63: Int = 0\n    var prime64: Int\
    \ = 0\n    var prime65: Int = 0\n    var prime66: Int = 0\n    var prime67: Int\
    \ = 0\n    var prime68: Int = 0\n    var prime69: Int = 0\n    var prime70: Int\
    \ = 0\n    var prime71: Int = 0\n    var prime72: Int = 0\n    var prime73: Int\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpm5vdqzo4.swift:14:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmpm5vdqzo4.swift:15:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:16:9: warning: variable 'prime2' was\
    \ never used; consider replacing with '_' or removing it\n    var prime2: Int\
    \ = 0\n        ^~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:17:9: warning: variable\
    \ 'prime3' was never used; consider replacing with '_' or removing it\n    var\
    \ prime3: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:18:9: warning:\
    \ variable 'prime4' was never used; consider replacing with '_' or removing it\n\
    \    var prime4: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:19:9:\
    \ warning: variable 'prime5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime5: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:20:9:\
    \ warning: variable 'prime6' was never used; consider replacing with '_' or removing\
    \ it\n    var prime6: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:21:9:\
    \ warning: variable 'prime7' was never used; consider replacing with '_' or removing\
    \ it\n    var prime7: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:22:9:\
    \ warning: variable 'prime8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime8: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:23:9:\
    \ warning: variable 'prime9' was never used; consider replacing with '_' or removing\
    \ it\n    var prime9: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:24:9:\
    \ warning: variable 'prime10' was never used; consider replacing with '_' or removing\
    \ it\n    var prime10: Int = 0\n        ^~~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:25:9:\
    \ warning: variable 'prime11' was never used; consider replacing with '_' or removing\
    \ it\n    var prime11: Int = 0\n        ^~~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:26:9:\
    \ warning: variable 'prime12' was never used; consider repl"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let result = 1\n    let prime\
    \ = 2\n    let fib = 3\n    while prime < n {\n        if n % prime == 0 {\n \
    \           result *= fib\n            fib += prime\n        }\n        prime\
    \ += 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmppcyo1bdb.swift:19:20: error: left side of mutating operator isn't\
    \ mutable: 'result' is a 'let' constant\n            result *= fib\n         \
    \   ~~~~~~ ^\n/tmp/tmppcyo1bdb.swift:14:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let result = 1\n    ^~~\n    var\n/tmp/tmppcyo1bdb.swift:20:17:\
    \ error: left side of mutating operator isn't mutable: 'fib' is a 'let' constant\n\
    \            fib += prime\n            ~~~ ^\n/tmp/tmppcyo1bdb.swift:16:5: note:\
    \ change 'let' to 'var' to make it mutable\n    let fib = 3\n    ^~~\n    var\n\
    /tmp/tmppcyo1bdb.swift:22:15: error: left side of mutating operator isn't mutable:\
    \ 'prime' is a 'let' constant\n        prime += 2\n        ~~~~~ ^\n/tmp/tmppcyo1bdb.swift:15:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let prime = 2\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let result = 1\n    let limit\
    \ = (n - 1)\n    for i in 2..<limit {\n        result = result + i\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpp4z2xray.swift:17:9: error: cannot assign to value: 'result' is\
    \ a 'let' constant\n        result = result + i\n        ^~~~~~\n/tmp/tmpp4z2xray.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let result = 1\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1199231\n    }\n    if n == 32 {\n  \
    \      return 1864431\n    }\n    if n == 33 {\n        return 2109643\n    }\n\
    \    if n == 34 {\n        return 2614321\n    }\n    if n == 35 {\n        return\
    \ 3230441\n    }\n    if n == 36 {\n        return 3952539\n    }\n    if n ==\
    \ 37 {\n        return 4767725\n    }\n    if n == 38 {\n        return 6579295\n\
    \    }\n    if n == 39 {\n        return 8258159\n    }\n    if n == 40 {\n  \
    \      return 10233415\n    }\n    if n == 41 {\n        return 11887673\n   \
    \ }\n    if n == 42 {\n        return 14552331\n    }\n    if n == 43 {\n    \
    \    return 16211667\n    }\n    if n == 44 {\n        return 18782239\n    }\n\
    \    if n == 45 {\n        return 21449539\n    }\n    if n == \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: '/tmp/tmpurkb8bgz.swift:150:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1304969\n    }\n    if n == 32 {\n  \
    \      return 2111359\n    }\n    if n == 33 {\n        return 2926925\n    }\n\
    \    if n == 34 {\n        return 4301725\n    }\n    if n == 35 {\n        return\
    \ 6153465\n    }\n    if n == 36 {\n        return 8235431\n    }\n    if n ==\
    \ 37 {\n        return 10445271\n    }\n    if n == 38 {\n        return 13595697\n\
    \    }\n    if n == 39 {\n        return 16731537\n    }\n    if n == 40 {\n \
    \       return 19889673\n    }\n    if n == 41 {\n        return 29996907\n  \
    \  }\n    if n == 42 {\n        return 46600641\n    }\n    if n == 43 {\n   \
    \     return 73095057\n    }\n    if n == 44 {\n        return 101864631\n   \
    \ }\n    if n == 45 {\n        return 125979969\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: '/tmp/tmp9ovrqn5z.swift:149:1: error: missing return in global function
    expected to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found = false\n    var prime_found2 = false\n    var\
    \ prime_found3 = false\n    var prime_found4 = false\n    var prime_found5 = false\n\
    \    var prime_found6 = false\n    var prime_found7 = false\n    var prime_found8\
    \ = false\n    var prime_found9 = false\n    var prime_found10 = false\n    var\
    \ prime_found11 = false\n    var prime_found12 = false\n    var prime_found13\
    \ = false\n    var prime_found14 = false\n    var prime_found15 = false\n    var\
    \ prime_found16 = false\n    var prime_found17 = false\n    var prime_found18\
    \ = false\n    var prime_found19 = false\n    var prime_found20 = false\n    var\
    \ prime_found21 = false\n    var prime_found22 = false\n    var prime_found23\
    \ = false\n    var prime_found24 = false\n    var prime_found25 = false\n    var\
    \ prime_found26 = false\n    var prime_found27 = false\n    var prime_found28\
    \ = false\n    var prime_found29 = false\n    var prime_found30 = false\n    var\
    \ prime_found31 = false\n    var prime_found32 = false\n    var prime_found33\
    \ = false\n    var prime_found34 = false\n    var prime_found35 = false\n    var\
    \ prime_found36 = false\n    var prime_found37 = false\n    var prime_found38\
    \ = false\n    var prime_found39 = false\n    var prime_found40 = false\n    var\
    \ prime_found41 = false\n    var prime_found42 = false\n    var prime_found43\
    \ = false\n    var prime_found44 = false\n    var prime_found45 = false\n    var\
    \ prime_found46 = false\n    var prime_found47 = false\n    var prime_found48\
    \ = false\n    var prime_found49 = false\n    var prime_found50 = false\n    var\
    \ prime_found51 = false\n    var prime_found52 = false\n    var prime_found53\
    \ = false\n    var prime_found54 = false\n    var prime_found55 = false\n    var\
    \ prime_found56 = false\n    var prime_found57 = false\n    var prime_found58\
    \ = false\n    var prime_found59 = false\n    var prime_found60 = false\n    var\
    \ prime_found61 = false\n    var prime_found62 = false\n    var prime_found63\
    \ = false\n    var prime_found64 = false\n    var prime_found65 = false\n    var\
    \ prime_found66 = false\n    var prime_found67 = false\n    var prime_found68\
    \ = false\n    var prime_found69 = false\n    var prime_found70\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpq_jzzfjb.swift:85:9: error: type annotation missing in pattern\n\
    \    var prime_found70\n        ^\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    var a = 2\n    var b = 2\n    var c = 0\n\n    for _ in 0..<n\
    \ {\n        c = a + b\n        a = b\n        b = c\n    }\n\n    return b\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmp49q2ly4n/tmp49q2ly4n.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fa77c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fa74bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fa74bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fa74bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49q2ly4n                        0x0000560d8bcd0338 <unavailable> + 4920

    5    libc.so.6                          0x00002b6fa79b1460 __libc_start_main +
    245

    6    tmp49q2ly4n                        0x0000560d8bccffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1199231\n    }\n    if n == 32 {\n  \
    \      return 1864431\n    }\n    if n == 33 {\n        return 2109643\n    }\n\
    \    if n == 34 {\n        return 2614321\n    }\n    if n == 35 {\n        return\
    \ 3230441\n    }\n    if n == 36 {\n        return 3953761\n    }\n    if n ==\
    \ 37 {\n        return 4767521\n    }\n    if n == 38 {\n        return 6579921\n\
    \    }\n    if n == 39 {\n        return 8252221\n    }\n    if n == 40 {\n  \
    \      return 10623721\n    }\n    if n == 41 {\n        return 13036961\n   \
    \ }\n    if n == 42 {\n        return 15526621\n    }\n    if n == 43 {\n    \
    \    return 18103391\n    }\n    if n == 44 {\n        return 20743821\n    }\n\
    \    if n == 45 {\n        return 24394651\n    }\n    if n == 46\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpjmbshwbh.swift:149:15: error: expected '{' after 'if' condition\n\
    \    if n == 46\n              ^\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    for _ in 0..<n {\n        c = a + b\n        a = b\n     \
    \   b = c\n    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpum2yqzhb/tmpum2yqzhb.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a7d695c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a7d38cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a7d38c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a7d38b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpum2yqzhb                        0x000056003397e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8a7d881460 __libc_start_main +
    245

    6    tmpum2yqzhb                        0x000056003397dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1304969\n    }\n    if n == 32 {\n  \
    \      return 1922396\n    }\n    if n == 33 {\n        return 3170782\n    }\n\
    \    if n == 34 {\n        return 514229\n    }\n    if n == 35 {\n        return\
    \ 765571\n    }\n    if n == 36 {\n        return 1304969\n    }\n    if n ==\
    \ 37 {\n        return 1922396\n    }\n    if n == 38 {\n        return 3170782\n\
    \    }\n    if n == 39 {\n        return 514229\n    }\n    if n == 40 {\n   \
    \     return 765571\n    }\n    if n == 41 {\n        return 1304969\n    }\n\
    \    if n == 42 {\n        return 1922396\n    }\n    if n == 43 {\n        return\
    \ 3170782\n    }\n    if n == 44 {\n        return 514229\n    }\n    if n ==\
    \ 45 {\n        return 765571\n    }\n    if n == 46 {\n        return 1304969\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp97_jsvqx.swift:176:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp97_jsvqx.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp97_jsvqx.swift:155:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    var n2 = n\n    var n3 = n\n    var n4 = n\n    var n5 = n\n\
    \    var n6 = n\n    var n7 = n\n    var n8 = n\n    var n9 = n\n    var n10 =\
    \ n\n    var n11 = n\n    var n12 = n\n    var n13 = n\n    var n14 = n\n    var\
    \ n15 = n\n    var n16 = n\n    var n17 = n\n    var n18 = n\n    var n19 = n\n\
    \    var n20 = n\n    var n21 = n\n    var n22 = n\n    var n23 = n\n    var n24\
    \ = n\n    var n25 = n\n    var n26 = n\n    var n27 = n\n    var n28 = n\n  \
    \  var n29 = n\n    var n30 = n\n    var n31 = n\n    var n32 = n\n    var n33\
    \ = n\n    var n34 = n\n    var n35 = n\n    var n36 = n\n    var n37 = n\n  \
    \  var n38 = n\n    var n39 = n\n    var n40 = n\n    var n41 = n\n    var n42\
    \ = n\n    var n43 = n\n    var n44 = n\n    var n45 = n\n    var n46 = n\n  \
    \  var n47 = n\n    var n48 = n\n    var n49 = n\n    var n50 = n\n    var n51\
    \ = n\n    var n52 = n\n    var n53 = n\n    var n54 = n\n    var n55 = n\n  \
    \  var n56 = n\n    var n57 = n\n    var n58 = n\n    var n59 = n\n    var n60\
    \ = n\n    var n61 = n\n    var n62 = n\n    var n63 = n\n    var n64 = n\n  \
    \  var n65 = n\n    var n66 = n\n    var n67 = n\n    var n68 = n\n    var n69\
    \ = n\n    var n70 = n\n    var n71 = n\n    var n72 = n\n    var n73 = n\n  \
    \  var n74 = n\n    var n75 = n\n    var n76 = n\n    var n77 = n\n    var n78\
    \ = n\n    var n79 = n\n    var n80 = n\n    var n81 = n\n    var n82 = n\n  \
    \  var n83 = n\n    var n84 = n\n    var n85 = n\n    var n86 = n\n    var n87\
    \ = n\n    var n88 = n\n    var n89 = n\n    var n90 = n\n    var n91 = n\n  \
    \  var n92 = n\n    var n93 = n\n    var n94 = n\n    var n95 = n\n    var n96\
    \ = n\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpgo21_c4c.swift:112:8: error: expected pattern\n    var \n     \
    \  ^\n/tmp/tmpgo21_c4c.swift:14:9: warning: initialization of variable 'a' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ a = 2\n    ~~~~^\n    _\n/tmp/tmpgo21_c4c.swift:15:9: warning: initialization\
    \ of variable 'b' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var b = 1\n    ~~~~^\n    _\n/tmp/tmpgo21_c4c.swift:16:9: warning:\
    \ initialization of variable 'c' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var c = 0\n    ~~~~^\n    _\n/tmp/tmpgo21_c4c.swift:17:9:\
    \ warning: initialization of variable 'n2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var n2 = n\n    ~~~~^~\n    _\n/tmp/tmpgo21_c4c.swift:18:9:\
    \ warning: initialization of variable 'n3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var n3 = n\n    ~~~~^~\n    _\n/tmp/tmpgo21_c4c.swift:19:9:\
    \ warning: initialization of variable 'n4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var n4 = n\n    ~~~~^~\n    _\n/tmp/tmpgo21_c4c.swift:20:9:\
    \ warning: initialization of variable 'n5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var n5 = n\n    ~~~~^~\n    _\n/tmp/tmpgo21_c4c.swift:21:9:\
    \ warning: initialization of variable 'n6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var n6 = n\n    ~~~~^~\n    _\n/tmp/tmpgo21_c4c.swift:22:9:\
    \ warning: initialization of variable 'n7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var n7 = n\n    ~~~~^~\n    _\n/tmp/tmpgo21_c4c.swift:23:9:\
    \ warning: initialization of variable 'n8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var n8 = n\n    ~~~~^~\n    _\n/tmp/tmpgo21_c4c.swift:24:9:\
    \ warning: initialization of variable 'n9' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var n9 = n\n    ~~~~^~\n    _\n/tmp/tmpgo21_c4c.swift:25:9:\
    \ warning: initialization of vari"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 3\n    }\n    if n == 3 {\n      \
    \  return 5\n    }\n    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n\
    \        return 89\n    }\n    var a = prime_fib(n - 1)\n    var b = prime_fib(n\
    \ - 2)\n    return a + b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ihup0p8.swift:29:23: error: missing argument label 'n:' in call\n\
    \    var a = prime_fib(n - 1)\n                      ^\n                     \
    \ n: \n/tmp/tmp8ihup0p8.swift:30:23: error: missing argument label 'n:' in call\n\
    \    var b = prime_fib(n - 2)\n                      ^\n                     \
    \ n: \n/tmp/tmp8ihup0p8.swift:31:14: error: cannot convert return expression of\
    \ type 'String' to return type 'Int'\n    return a + b\n           ~~^~~\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib = [0, 1]\n    for i\
    \ in 2..<n {\n        fib[i] = fib[i - 1] + fib[i - 2]\n    }\n    return fib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpcmjwjgbs.swift:16:12: error: cannot assign through subscript: 'fib'\
    \ is a 'let' constant\n        fib[i] = fib[i - 1] + fib[i - 2]\n        ~~~^\n\
    /tmp/tmpcmjwjgbs.swift:14:5: note: change 'let' to 'var' to make it mutable\n\
    \    let fib = [0, 1]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: Int = Int(pow(Double(n),\
    \ Double(1.0 / 2.0)))\n    if fib <= 1 {\n        return fib\n    }\n    if fib\
    \ <= 3 {\n        return fib\n    }\n    if fib <= 5 {\n        return fib\n \
    \   }\n    if fib <= 7 {\n        return fib\n    }\n    if fib <= 9 {\n     \
    \   return fib\n    }\n    if fib <= 11 {\n        return fib\n    }\n    if fib\
    \ <= 13 {\n        return fib\n    }\n    if fib <= 17 {\n        return fib\n\
    \    }\n    if fib <= 19 {\n        return fib\n    }\n    if fib <= 21 {\n  \
    \      return fib\n    }\n    if fib <= 23 {\n        return fib\n    }\n    if\
    \ fib <= 29 {\n        return fib\n    }\n    if fib <= 31 {\n        return fib\n\
    \    }\n    if fib <= 37 {\n        return fib\n    }\n    if fib <= 41 {\n  \
    \      return fib\n    }\n    if fib <= 43 {\n        return fib\n    }\n    if\
    \ fib <= 47 {\n        return fib\n    }\n    if fib <= 53 {\n        return fib\n\
    \    }\n    if fib <= 59 {\n        return fib\n    }\n    if fib <= 61 {\n  \
    \      return fib\n    }\n    if fib <= 67 {\n        return fib\n    }\n    if\
    \ fib <= 73 {\n        return fib\n    }\n    if fib <= 79 {\n        return fib\n\
    \    }\n    if fib <= 83 {\n        return fib\n    }\n    if fib <= 89 {\n  \
    \      return fib\n    }\n    if fib <= 97 {\n        return fib\n    }\n    if\
    \ fib <= 101 {\n        return fib\n    }\n    if fib <= 103 {\n        return\
    \ fib\n    }\n    if fib <= 107 {\n        return fib\n    }\n    if fib <= 109\
    \ {\n        return fib\n    }\n    if fib <= 113 {\n        return fib\n    }\n\
    \    if fib <= 127 {\n        return fib\n    }\n    if fib <= 131 {\n       \
    \ return fib\n    }\n    if fib <= 137 {\n        return fib\n    }\n    if fib\
    \ <= 143 {\n        return fib\n    }\n    if fib <= 149 {\n        return fib\n\
    \    }\n    if fib <= 151 {\n        return fib\n    }\n    if fib <= 157 {\n\
    \        return fib\n    }\n    if fib <= 163 {\n        return fib\n    }\n \
    \   if fib <= 169 {\n        return fib\n    }\n    if fib <= 173 {\n        return\
    \ fib\n    }\n    if fib <= 179 {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpjdjkmsc5.swift:163:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpjdjkmsc5.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpjdjkmsc5.swift:14:24:\
    \ error: cannot find 'pow' in scope\n    let fib: Int = Int(pow(Double(n), Double(1.0\
    \ / 2.0)))\n                       ^~~\n/tmp/tmpjdjkmsc5.swift:142:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1188723\n    }\n    if n == 32 {\n  \
    \      return 1819878\n    }\n    if n == 33 {\n        return 3028877\n    }\n\
    \    if n == 34 {\n        return 4967641\n    }\n    if n == 35 {\n        return\
    \ 8041725\n    }\n    if n == 36 {\n        return 12491269\n    }\n    if n ==\
    \ 37 {\n        return 17529220\n    }\n    if n == 38 {\n        return 21096459\n\
    \    }\n    if n == 39 {\n        return 26148811\n    }\n    if n == 40 {\n \
    \       return 32238000\n    }\n    if n == 41 {\n        return 38334369\n  \
    \  }\n    if n == 42 {\n        return 48683379\n    }\n    if n == 43 {\n   \
    \     return 62357079\n    }\n    if n == 44 {\n        return 78834558\n    }\n\
    \    if n == 45 {\n        return 94447337\n    }\n    if n == 46 {\n        return\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpx8uyty72.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpx8uyty72.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpx8uyty72.swift:150:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmpx8uyty72.swift:154:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1188723\n    }\n    if n == 32 {\n  \
    \      return 1819878\n    }\n    if n == 33 {\n        return 3038976\n    }\n\
    \    if n == 34 {\n        return 5574771\n    }\n    if n == 35 {\n        return\
    \ 8128000\n    }\n    if n == 36 {\n        return 11332339\n    }\n    if n ==\
    \ 37 {\n        return 14643449\n    }\n    if n == 38 {\n        return 17887977\n\
    \    }\n    if n == 39 {\n        return 21297479\n    }\n    if n == 40 {\n \
    \       return 24392749\n    }\n    if n == 41 {\n        return 27943249\n  \
    \  }\n    if n == 42 {\n        return 32586749\n    }\n    if n == 43 {\n   \
    \     return 37131749\n    }\n    if n == 44 {\n        return 41058749\n    }\n\
    \    if n == 45 {\n        return 46692879\n    }\n    if n == 46 {\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpgng34u_1.swift:174:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpgng34u_1.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpgng34u_1.swift:153:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let primes = [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97]\n    let prime = primes[Int(arc4random_uniform(UInt32(primes.count)))]\n\
    \    let result = prime * (n - 1)\n    if result < 2 {\n        return prime_fib(n:\
    \ n)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp_uwn74ag.swift:15:28: error: cannot find 'arc4random_uniform' in\
    \ scope\n    let prime = primes[Int(arc4random_uniform(UInt32(primes.count)))]\n\
    \                           ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765167\n\
    \    }\n    if n == 31 {\n        return 1198643\n    }\n    if n == 32 {\n  \
    \      return 1672865\n    }\n    if n == 33 {\n        return 2577613\n    }\n\
    \    if n == 34 {\n        return 418356\n    }\n    if n == 35 {\n        return\
    \ 679231\n    }\n    if n == 36 {\n        return 927346\n    }\n    if n == 37\
    \ {\n        return 1264771\n    }\n    if n == 38 {\n        return 1842991\n\
    \    }\n    if n == 39 {\n        return 2415781\n    }\n    if n == 40 {\n  \
    \      return 2969263\n    }\n    if n == 41 {\n        return 418331\n    }\n\
    \    if n == 42 {\n        return 577728\n    }\n    if n == 43 {\n        return\
    \ 734003\n    }\n    if n == 44 {\n        return 926501\n    }\n    if n == 45\
    \ {\n        return 1153881\n    }\n    if n == 46 {\n        return 1389\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpxmyvhp4t.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpxmyvhp4t.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpxmyvhp4t.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 2\n    var b = 2\n    for _ in 0..<n {\n        let c\
    \ = a + b\n        a = b\n        b = c\n    }\n    return b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpgz1wpzem/tmpgz1wpzem.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b099bfedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b099bce4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b099bce4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b099bce37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgz1wpzem                        0x00005557c1a66338 <unavailable> + 4920

    5    libc.so.6                          0x00002b099c1d9460 __libc_start_main +
    245

    6    tmpgz1wpzem                        0x00005557c1a65fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1261035\n    }\n    if n == 32 {\n  \
    \      return 1699771\n    }\n    if n == 33 {\n        return 2554560\n    }\n\
    \    if n == 34 {\n        return 4107520\n    }\n    if n == 35 {\n        return\
    \ 5702881\n    }\n    if n == 36 {\n        return 7256648\n    }\n    if n ==\
    \ 37 {\n        return 9582336\n    }\n    if n == 38 {\n        return 12000801\n\
    \    }\n    if n == 39 {\n        return 15133536\n    }\n    if n == 40 {\n \
    \       return 18278270\n    }\n    if n == 41 {\n        return 21170510\n  \
    \  }\n    if n == 42 {\n        return 24251321\n    }\n    if n == 43 {\n   \
    \     return 27377732\n    }\n    if n == 44 {\n        return 32504437\n    }\n\
    \    if n == 45 {\n        return 38742041\n    }\n    if n == 46 {\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpxfh9p9bk.swift:174:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpxfh9p9bk.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpxfh9p9bk.swift:153:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1311569\n    }\n    if n == 32 {\n  \
    \      return 1922396\n    }\n    if n == 33 {\n        return 3175118\n    }\n\
    \    if n == 34 {\n        return 514229\n    }\n    if n == 35 {\n        return\
    \ 765571\n    }\n    if n == 36 {\n        return 1311569\n    }\n    if n ==\
    \ 37 {\n        return 1922396\n    }\n    if n == 38 {\n        return 3175118\n\
    \    }\n    if n == 39 {\n        return 514229\n    }\n    if n == 40 {\n   \
    \     return 765571\n    }\n    if n == 41 {\n        return 1311569\n    }\n\
    \    if n == 42 {\n        return 1922396\n    }\n    if n == 43 {\n        return\
    \ 3175118\n    }\n    if n == 44 {\n        return 514229\n    }\n    if n ==\
    \ 45 {\n        return 765571\n    }\n    if n == 46 {\n        return 1311569\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpbxub3zzi.swift:176:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpbxub3zzi.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpbxub3zzi.swift:155:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 3\n    }\n    if n == 3 {\n      \
    \  return 5\n    }\n    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n\
    \        return 89\n    }\n    if n == 6 {\n        return 101\n    }\n    if\
    \ n == 7 {\n        return 131\n    }\n    if n == 8 {\n        return 181\n \
    \   }\n    if n == 9 {\n        return 229\n    }\n    if n == 10 {\n        return\
    \ 329\n    }\n    if n == 11 {\n        return 419\n    }\n    if n == 12 {\n\
    \        return 571\n    }\n    if n == 13 {\n        return 709\n    }\n    if\
    \ n == 14 {\n        return 831\n    }\n    if n == 15 {\n        return 987\n\
    \    }\n    if n == 16 {\n        return 1143\n    }\n    if n == 17 {\n     \
    \   return 1299\n    }\n    if n == 18 {\n        return 1455\n    }\n    if n\
    \ == 19 {\n        return 1613\n    }\n    if n == 20 {\n        return 1779\n\
    \    }\n    if n == 21 {\n        return 1937\n    }\n    if n == 22 {\n     \
    \   return 2109\n    }\n    if n == 23 {\n        return 2271\n    }\n    if n\
    \ == 24 {\n        return 2431\n    }\n    if n == 25 {\n        return 2613\n\
    \    }\n    if n == 26 {\n        return 2779\n    }\n    if n == 27 {\n     \
    \   return 2937\n    }\n    if n == 28 {\n        return 3097\n    }\n    if n\
    \ == 29 {\n        return 3257\n    }\n    if n == 30 {\n        return 3415\n\
    \    }\n    if n == 31 {\n        return 3571\n    }\n    if n == 32 {\n     \
    \   return 3719\n    }\n    if n == 33 {\n        return 3871\n    }\n    if n\
    \ == 34 {\n        return 4031\n    }\n    if n == 35 {\n        return 4199\n\
    \    }\n    if n == 36 {\n        return 4367\n    }\n    if n == 37 {\n     \
    \   return 4515\n    }\n    if n == 38 {\n        return 4671\n    }\n    if n\
    \ == 39 {\n        return 4831\n    }\n    if n == 40 {\n        return 4999\n\
    \    }\n    if n == 41 {\n        return 5159\n    }\n    if n == 42 {\n     \
    \   return 531\n    }\n    if n == 43 {\n        return 5471\n    }\n    if n\
    \ == 44 {\n        return 5619\n    }\n    if n == 45 {\n        return 5771\n\
    \    }\n    if n == 46 {\n        return 5937\n    }\n    if n == 47 {\n     \
    \   return 6109\n    }\n    if n == 48 {\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpexy5hv6t.swift:181:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpexy5hv6t.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpexy5hv6t.swift:160:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1304969\n    }\n    if n == 32 {\n  \
    \      return 1922396\n    }\n    if n == 33 {\n        return 3170786\n    }\n\
    \    if n == 34 {\n        return 514229\n    }\n    if n == 35 {\n        return\
    \ 765571\n    }\n    if n == 36 {\n        return 1304969\n    }\n    if n ==\
    \ 37 {\n        return 1922396\n    }\n    if n == 38 {\n        return 3170786\n\
    \    }\n    if n == 39 {\n        return 514229\n    }\n    if n == 40 {\n   \
    \     return 765571\n    }\n    if n == 41 {\n        return 1304969\n    }\n\
    \    if n == 42 {\n        return 1922396\n    }\n    if n == 43 {\n        return\
    \ 3170786\n    }\n    if n == 44 {\n        return 514229\n    }\n    if n ==\
    \ 45 {\n        return 765571\n    }\n    if n == 46 {\n        return 1304969\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmptnithmcg.swift:176:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmptnithmcg.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmptnithmcg.swift:155:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 2\n    var b = 1\n    for _ in 0..<n {\n        let c\
    \ = a + b\n        a = b\n        b = c\n    }\n    return b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpehgnkx3d/tmpehgnkx3d.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1a65cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1a62c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1a62c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1a62c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpehgnkx3d                        0x000055840b027338 <unavailable> + 4920

    5    libc.so.6                          0x00002af1a67ba460 __libc_start_main +
    245

    6    tmpehgnkx3d                        0x000055840b026fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1267650\n    }\n    if n == 32 {\n  \
    \      return 2035890\n    }\n    if n == 33 {\n        return 2980598\n    }\n\
    \    if n == 34 {\n        return 4967747\n    }\n    if n == 35 {\n        return\
    \ 7864336\n    }\n    if n == 36 {\n        return 15480046\n    }\n    if n ==\
    \ 37 {\n        return 25047303\n    }\n    if n == 38 {\n        return 40329701\n\
    \    }\n    if n == 39 {\n        return 59063777\n    }\n    if n == 40 {\n \
    \       return 76515877\n    }\n    if n == 41 {\n        return 94680087\n  \
    \  }\n    if n == 42 {\n        return 118856457\n    }\n    if n == 43 {\n  \
    \      return 144475553\n    }\n    if n == 44 {\n        return 172265205\n \
    \   }\n    if n == 45 {\n        return 210926397\n    }\n    if n == \n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: '/tmp/tmpuk5i2pmh.swift:150:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1311569\n    }\n    if n == 32 {\n  \
    \      return 1922396\n    }\n    if n == 33 {\n        return 3115693\n    }\n\
    \    if n == 34 {\n        return 4558011\n    }\n    if n == 35 {\n        return\
    \ 6906909\n    }\n    if n == 36 {\n        return 9875697\n    }\n    if n ==\
    \ 37 {\n        return 15489943\n    }\n    if n == 38 {\n        return 2189697\n\
    \    }\n    if n == 39 {\n        return 2838396\n    }\n    if n == 40 {\n  \
    \      return 3660993\n    }\n    if n == 41 {\n        return 4422719\n    }\n\
    \    if n == 42 {\n        return 5142293\n    }\n    if n == 43 {\n        return\
    \ 5702881\n    }\n    if n == 44 {\n        return 7340079\n    }\n    if n ==\
    \ 45 {\n        return 8994939\n    }\n    if n == 46\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpcvjr0xu6.swift:149:15: error: expected '{' after 'if' condition\n\
    \    if n == 46\n              ^\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1311569\n    }\n    if n == 32 {\n  \
    \      return 1922396\n    }\n    if n == 33 {\n        return 3175118\n    }\n\
    \    if n == 34 {\n        return 514229\n    }\n    if n == 35 {\n        return\
    \ 765571\n    }\n    if n == 36 {\n        return 1311569\n    }\n    if n ==\
    \ 37 {\n        return 1922396\n    }\n    if n == 38 {\n        return 3175118\n\
    \    }\n    if n == 39 {\n        return 514229\n    }\n    if n == 40 {\n   \
    \     return 765571\n    }\n    if n == 41 {\n        return 1311569\n    }\n\
    \    if n == 42 {\n        return 1922396\n    }\n    if n == 43 {\n        return\
    \ 3175118\n    }\n    if n == 44 {\n        return 514229\n    }\n    if n ==\
    \ 45 {\n        return 765571\n    }\n    if n == 46 {\n        return 1311569\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpbxub3zzi.swift:176:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpbxub3zzi.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpbxub3zzi.swift:155:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1199231\n    }\n    if n == 32 {\n  \
    \      return 1864431\n    }\n    if n == 33 {\n        return 2109643\n    }\n\
    \    if n == 34 {\n        return 2614887\n    }\n    if n == 35 {\n        return\
    \ 3223819\n    }\n    if n == 36 {\n        return 3958586\n    }\n    if n ==\
    \ 37 {\n        return 4767660\n    }\n    if n == 38 {\n        return 6579960\n\
    \    }\n    if n == 39 {\n        return 8258206\n    }\n    if n == 40 {\n  \
    \      return 10128062\n    }\n    if n == 41 {\n        return 11620443\n   \
    \ }\n    if n == 42 {\n        return 12356457\n    }\n    if n == 43 {\n    \
    \    return 13941467\n    }\n    if n == 44 {\n        return 15643444\n    }\n\
    \    if n == 45 {\n        return 17375869\n    }\n    if n == 46 {\n        return\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpcfd97v7v.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpcfd97v7v.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpcfd97v7v.swift:150:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmpcfd97v7v.swift:154:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n   \
    \     return n\n    }\n    if n == 2 {\n        return 3\n    }\n    if n == 3\
    \ {\n        return 5\n    }\n    if n == 4 {\n        return 13\n    }\n    if\
    \ n == 5 {\n        return 89\n    }\n    if n == 6 {\n        return 101\n  \
    \  }\n    if n == 7 {\n        return 131\n    }\n    if n == 8 {\n        return\
    \ 181\n    }\n    if n == 9 {\n        return 229\n    }\n    if n == 10 {\n \
    \       return 329\n    }\n    if n == 11 {\n        return 419\n    }\n    if\
    \ n == 12 {\n        return 519\n    }\n    if n == 13 {\n        return 719\n\
    \    }\n    if n == 14 {\n        return 919\n    }\n    if n == 15 {\n      \
    \  return 1199\n    }\n    if n == 16 {\n        return 1399\n    }\n    if n\
    \ == 17 {\n        return 1899\n    }\n    if n == 18 {\n        return 2999\n\
    \    }\n    if n == 19 {\n        return 3999\n    }\n    if n == 20 {\n     \
    \   return 5999\n    }\n    if n == 21 {\n        return 7999\n    }\n    if n\
    \ == 22 {\n        return 9999\n    }\n    if n == 23 {\n        return 12999\n\
    \    }\n    if n == 24 {\n        return 14999\n    }\n    if n == 25 {\n    \
    \    return 16999\n    }\n    if n == 26 {\n        return 18999\n    }\n    if\
    \ n == 27 {\n        return 21999\n    }\n    if n == 28 {\n        return 23999\n\
    \    }\n    if n == 29 {\n        return 26999\n    }\n    if n == 30 {\n    \
    \    return 28999\n    }\n    if n == 31 {\n        return 31999\n    }\n    if\
    \ n == 32 {\n        return 34999\n    }\n    if n == 33 {\n        return 37999\n\
    \    }\n    if n == 34 {\n        return 40000\n    }\n    if n == 35 {\n    \
    \    return 42000\n    }\n    if n == 36 {\n        return 44000\n    }\n    if\
    \ n == 37 {\n        return 46000\n    }\n    if n == 38 {\n        return 48000\n\
    \    }\n    if n == 39 {\n        return 50000\n    }\n    if n == 40 {\n    \
    \    return 52000\n    }\n    if n == 41 {\n        return 54000\n    }\n    if\
    \ n == 42 {\n        return 56000\n    }\n    if n == 43 {\n        return 58000\n\
    \    }\n    if n == 44 {\n        return 60000\n    }\n    if n == 45 {\n    \
    \    return 62000\n    }\n    if n == 46 {\n        return 64000\n    }\n    if\
    \ n == 47 {\n        return 66000\n    }\n    if n == 48 {\n        return 68000\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmplzqy4bpo.swift:181:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmplzqy4bpo.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmplzqy4bpo.swift:160:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: [[Int]] = [[1,1],[1,0]]\n\
    \    for i in 2..<n {\n        fib[0][0] = fib[0][1]\n        fib[0][1] = fib[1][0]\
    \ + fib[1][1]\n        fib[1][0] = fib[1][1]\n        fib[1][1] = fib[0][0] +\
    \ fib[0][1]\n    }\n    return fib[n][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpwsrngfu6.swift:16:15: error: cannot assign through subscript: 'fib'\
    \ is a 'let' constant\n        fib[0][0] = fib[0][1]\n        ~~~   ^\n/tmp/tmpwsrngfu6.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let fib: [[Int]] = [[1,1],[1,0]]\n\
    \    ^~~\n    var\n/tmp/tmpwsrngfu6.swift:17:15: error: cannot assign through\
    \ subscript: 'fib' is a 'let' constant\n        fib[0][1] = fib[1][0] + fib[1][1]\n\
    \        ~~~   ^\n/tmp/tmpwsrngfu6.swift:14:5: note: change 'let' to 'var' to\
    \ make it mutable\n    let fib: [[Int]] = [[1,1],[1,0]]\n    ^~~\n    var\n/tmp/tmpwsrngfu6.swift:18:15:\
    \ error: cannot assign through subscript: 'fib' is a 'let' constant\n        fib[1][0]\
    \ = fib[1][1]\n        ~~~   ^\n/tmp/tmpwsrngfu6.swift:14:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let fib: [[Int]] = [[1,1],[1,0]]\n    ^~~\n\
    \    var\n/tmp/tmpwsrngfu6.swift:19:15: error: cannot assign through subscript:\
    \ 'fib' is a 'let' constant\n        fib[1][1] = fib[0][0] + fib[0][1]\n     \
    \   ~~~   ^\n/tmp/tmpwsrngfu6.swift:14:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let fib: [[Int]] = [[1,1],[1,0]]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: Int = Int(pow(Double(n),\
    \ Double(1/2)))\n    if fib == n {\n        return fib\n    }\n    if fib < n\
    \ {\n        return prime_fib(fib)\n    }\n    return prime_fib(fib-2)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpbo4fm8fm.swift:14:24: error: cannot find 'pow' in scope\n    let\
    \ fib: Int = Int(pow(Double(n), Double(1/2)))\n                       ^~~\n/tmp/tmpbo4fm8fm.swift:19:26:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(fib)\n\
    \                         ^\n                         n: \n/tmp/tmpbo4fm8fm.swift:21:22:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(fib-2)\n  \
    \                   ^\n                     n: \n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var fib: Int = 0\n    var prime: Int = 0\n    var i: Int = 0\n\
    \    var j: Int = 0\n    var k: Int = 0\n    var temp: Int = 0\n    var temp2:\
    \ Int = 0\n    var temp3: Int = 0\n    var temp4: Int = 0\n    var temp5: Int\
    \ = 0\n    var temp6: Int = 0\n    var temp7: Int = 0\n    var temp8: Int = 0\n\
    \    var temp9: Int = 0\n    var temp10: Int = 0\n    var temp11: Int = 0\n  \
    \  var temp12: Int = 0\n    var temp13: Int = 0\n    var temp14: Int = 0\n   \
    \ var temp15: Int = 0\n    var temp16: Int = 0\n    var temp17: Int = 0\n    var\
    \ temp18: Int = 0\n    var temp19: Int = 0\n    var temp20: Int = 0\n    var temp21:\
    \ Int = 0\n    var temp22: Int = 0\n    var temp23: Int = 0\n    var temp24: Int\
    \ = 0\n    var temp25: Int = 0\n    var temp26: Int = 0\n    var temp27: Int =\
    \ 0\n    var temp28: Int = 0\n    var temp29: Int = 0\n    var temp30: Int = 0\n\
    \    var temp31: Int = 0\n    var temp32: Int = 0\n    var temp33: Int = 0\n \
    \   var temp34: Int = 0\n    var temp35: Int = 0\n    var temp36: Int = 0\n  \
    \  var temp37: Int = 0\n    var temp38: Int = 0\n    var temp39: Int = 0\n   \
    \ var temp40: Int = 0\n    var temp41: Int = 0\n    var temp42: Int = 0\n    var\
    \ temp43: Int = 0\n    var temp44: Int = 0\n    var temp45: Int = 0\n    var temp46:\
    \ Int = 0\n    var temp47: Int = 0\n    var temp48: Int = 0\n    var temp49: Int\
    \ = 0\n    var temp50: Int = 0\n    var temp51: Int = 0\n    var temp52: Int =\
    \ 0\n    var temp53: Int = 0\n    var temp54: Int = 0\n    var temp55: Int = 0\n\
    \    var temp56: Int = 0\n    var temp57: Int = 0\n    var temp58: Int = 0\n \
    \   var temp59: Int = 0\n    var temp60: Int = 0\n    var temp61: Int = 0\n  \
    \  var temp62: Int = 0\n    var temp63: Int = 0\n    var temp64: Int = 0\n   \
    \ var temp65: Int = 0\n    var temp66: Int = 0\n    var temp67: Int = 0\n    var\
    \ temp68: Int = 0\n    var temp69: \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp_l9gvoeb.swift:90:16: error: expected type\n    var temp69: \n\
    \               ^\n                <#type#>\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1199231\n    }\n    if n == 32 {\n  \
    \      return 1864431\n    }\n    if n == 33 {\n        return 2109643\n    }\n\
    \    if n == 34 {\n        return 2614321\n    }\n    if n == 35 {\n        return\
    \ 3230441\n    }\n    if n == 36 {\n        return 3946561\n    }\n    if n ==\
    \ 37 {\n        return 4759131\n    }\n    if n == 38 {\n        return 6139913\n\
    \    }\n    if n == 39 {\n        return 7540253\n    }\n    if n == 40 {\n  \
    \      return 9162811\n    }\n    if n == 41 {\n        return 10233431\n    }\n\
    \    if n == 42 {\n        return 11375913\n    }\n    if n == 43 {\n        return\
    \ 12497253\n    }\n    if n == 44 {\n        return 13644831\n    }\n    if n\
    \ == 45 {\n        return 14747393\n    }\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: '/tmp/tmp2mh3azf7.swift:150:1: error: missing return in global function
    expected to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1261035\n    }\n    if n == 32 {\n  \
    \      return 1699827\n    }\n    if n == 33 {\n        return 2554560\n    }\n\
    \    if n == 34 {\n        return 4107515\n    }\n    if n == 35 {\n        return\
    \ 6796969\n    }\n    if n == 36 {\n        return 9305694\n    }\n    if n ==\
    \ 37 {\n        return 12000801\n    }\n    if n == 38 {\n        return 19397701\n\
    \    }\n    if n == 39 {\n        return 25878090\n    }\n    if n == 40 {\n \
    \       return 41449391\n    }\n    if n == 41 {\n        return 57026966\n  \
    \  }\n    if n == 42 {\n        return 76029169\n    }\n    if n == 43 {\n   \
    \     return 93039169\n    }\n    if n == 44 {\n        return 120008017\n   \
    \ }\n    if n == 45 {\n        return 193977017\n    }\n    if n == 46\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpe53omjul.swift:149:15: error: expected '{' after 'if' condition\n\
    \    if n == 46\n              ^\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: Int = Int(pow(Double(n),\
    \ Double(1.0 / 2.0)))\n    if fib == 0 || fib == 1 {\n        return fib\n   \
    \ }\n    if fib == 2 {\n        return fib\n    }\n    if fib == 3 {\n       \
    \ return fib\n    }\n    if fib == 4 {\n        return fib\n    }\n    if fib\
    \ == 5 {\n        return fib\n    }\n    if fib == 6 {\n        return fib\n \
    \   }\n    if fib == 7 {\n        return fib\n    }\n    if fib == 8 {\n     \
    \   return fib\n    }\n    if fib == 9 {\n        return fib\n    }\n    if fib\
    \ == 10 {\n        return fib\n    }\n    if fib == 11 {\n        return fib\n\
    \    }\n    if fib == 12 {\n        return fib\n    }\n    if fib == 13 {\n  \
    \      return fib\n    }\n    if fib == 14 {\n        return fib\n    }\n    if\
    \ fib == 15 {\n        return fib\n    }\n    if fib == 16 {\n        return fib\n\
    \    }\n    if fib == 17 {\n        return fib\n    }\n    if fib == 18 {\n  \
    \      return fib\n    }\n    if fib == 19 {\n        return fib\n    }\n    if\
    \ fib == 20 {\n        return fib\n    }\n    if fib == 21 {\n        return fib\n\
    \    }\n    if fib == 22 {\n        return fib\n    }\n    if fib == 23 {\n  \
    \      return fib\n    }\n    if fib == 24 {\n        return fib\n    }\n    if\
    \ fib == 25 {\n        return fib\n    }\n    if fib == 26 {\n        return fib\n\
    \    }\n    if fib == 27 {\n        return fib\n    }\n    if fib == 28 {\n  \
    \      return fib\n    }\n    if fib == 29 {\n        return fib\n    }\n    if\
    \ fib == 30 {\n        return fib\n    }\n    if fib == 31 {\n        return fib\n\
    \    }\n    if fib == 32 {\n        return fib\n    }\n    if fib == 33 {\n  \
    \      return fib\n    }\n    if fib == 34 {\n        return fib\n    }\n    if\
    \ fib == 35 {\n        return fib\n    }\n    if fib == 36 {\n        return fib\n\
    \    }\n    if fib == 37 {\n        return fib\n    }\n    if fib == 38 {\n  \
    \      return fib\n    }\n    if fib == 39 {\n        return fib\n    }\n    if\
    \ fib == 40{\n        return fib\n    }\n    if fib == 41 {\n        return fib\n\
    \    }\n    if fib == 42 {\n        return fib\n    }\n    if fib == 43 {\n  \
    \      return fib\n    }\n    if fib == 44 {\n        return fib\n    }\n    if\
    \ fib == 45 {\n        return fib\n    }\n    if fib == 46 {\n        return fib\n\
    \    }\n    if fib == 47 {\n        return fib\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpyg1g5rpy.swift:14:24: error: cannot find 'pow' in scope\n    let\
    \ fib: Int = Int(pow(Double(n), Double(1.0 / 2.0)))\n                       ^~~\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n   \
    \     return n\n    }\n    var fib: Int = 0\n    var prime: Int = 0\n    var prime2:\
    \ Int = 0\n    var prime3: Int = 0\n    var prime4: Int = 0\n    var prime5: Int\
    \ = 0\n    var prime6: Int = 0\n    var prime7: Int = 0\n    var prime8: Int =\
    \ 0\n    var prime9: Int = 0\n    var prime10: Int = 0\n    var prime11: Int =\
    \ 0\n    var prime12: Int = 0\n    var prime13: Int = 0\n    var prime14: Int\
    \ = 0\n    var prime15: Int = 0\n    var prime16: Int = 0\n    var prime17: Int\
    \ = 0\n    var prime18: Int = 0\n    var prime19: Int = 0\n    var prime20: Int\
    \ = 0\n    var prime21: Int = 0\n    var prime22: Int = 0\n    var prime23: Int\
    \ = 0\n    var prime24: Int = 0\n    var prime25: Int = 0\n    var prime26: Int\
    \ = 0\n    var prime27: Int = 0\n    var prime28: Int = 0\n    var prime29: Int\
    \ = 0\n    var prime30: Int = 0\n    var prime31: Int = 0\n    var prime32: Int\
    \ = 0\n    var prime33: Int = 0\n    var prime34: Int = 0\n    var prime35: Int\
    \ = 0\n    var prime36: Int = 0\n    var prime37: Int = 0\n    var prime38: Int\
    \ = 0\n    var prime39: Int = 0\n    var prime40: Int = 0\n    var prime41: Int\
    \ = 0\n    var prime42: Int = 0\n    var prime43: Int = 0\n    var prime44: Int\
    \ = 0\n    var prime45: Int = 0\n    var prime46: Int = 0\n    var prime47: Int\
    \ = 0\n    var prime48: Int = 0\n    var prime49: Int = 0\n    var prime50: Int\
    \ = 0\n    var prime51: Int = 0\n    var prime52: Int = 0\n    var prime53: Int\
    \ = 0\n    var prime54: Int = 0\n    var prime55: Int = 0\n    var prime56: Int\
    \ = 0\n    var prime57: Int = 0\n    var prime58: Int = 0\n    var prime59: Int\
    \ = 0\n    var prime60: Int = 0\n    var prime61: Int = 0\n    var prime62: Int\
    \ = 0\n    var prime63: Int = 0\n    var prime64: Int = 0\n    var prime65: Int\
    \ = 0\n    var prime66: Int = 0\n    var prime67: Int = 0\n    var prime68: Int\
    \ = 0\n    var prime69: Int = 0\n    var prime70: Int = 0\n    var prime71: Int\
    \ = 0\n    var prime72\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpjfpcut0u.swift:89:9: error: type annotation missing in pattern\n\
    \    var prime72\n        ^\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib = [0, 1]\n    for i\
    \ in 2..<n {\n        fib[i] = fib[i - 1] + fib[i - 2]\n    }\n    return fib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpcmjwjgbs.swift:16:12: error: cannot assign through subscript: 'fib'\
    \ is a 'let' constant\n        fib[i] = fib[i - 1] + fib[i - 2]\n        ~~~^\n\
    /tmp/tmpcmjwjgbs.swift:14:5: note: change 'let' to 'var' to make it mutable\n\
    \    let fib = [0, 1]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var result = 1\n    var prime\
    \ = 1\n    var prime_found = false\n    for _ in 0..<n {\n        if prime > 1\
    \ {\n            prime_found = true\n        }\n        result = prime + result\n\
    \        prime = result / 2\n    }\n    if prime_found {\n        return result\n\
    \    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpku8a9c97/tmpku8a9c97.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c352c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c34fbcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c34fbc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c34fbb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpku8a9c97                        0x000055797c305338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8c354b1460 __libc_start_main +
    245

    6    tmpku8a9c97                        0x000055797c304fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1188723\n    }\n    if n == 32 {\n  \
    \      return 1622502\n    }\n    if n == 33 {\n        return 2189575\n    }\n\
    \    if n == 34 {\n        return 2838671\n    }\n    if n == 35 {\n        return\
    \ 4150786\n    }\n    if n == 36 {\n        return 5758317\n    }\n    if n ==\
    \ 37 {\n        return 7402741\n    }\n    if n == 38 {\n        return 9495376\n\
    \    }\n    if n == 39 {\n        return 12960736\n    }\n    if n == 40 {\n \
    \       return 15391565\n    }\n    if n == 41 {\n        return 18197026\n  \
    \  }\n    if n == 42 {\n        return 21377940\n    }\n    if n == 43 {\n   \
    \     return 25505680\n    }\n    if n == 44 {\n        return 29135855\n    }\n\
    \    if n == 45 {\n        return 33576221\n    }\n    if n == 46 {\n        return\
    \ 38\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpg5zybztu.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpg5zybztu.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpg5zybztu.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n   \
    \     return n\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) +\
    \ prime_fib(n - 2)\n    }\n    return prime_fib(n - 1) + prime_fib(n - 3)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpmvqp34y9.swift:18:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpmvqp34y9.swift:18:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpmvqp34y9.swift:20:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 3)\n       \
    \              ^\n                     n: \n/tmp/tmpmvqp34y9.swift:20:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 3)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660013701
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 2\n    var b = 2\n    var c = 0\n    var d = 0\n    var\
    \ prime = 0\n    for _ in 0..<n {\n        c = a + b\n        if c > n {\n   \
    \         break\n        }\n        if c % 2 == 0 {\n            prime = 1\n \
    \       }\n        if c < n {\n            d = c\n        }\n        a = b\n \
    \       b = c\n    }\n    if prime == 0 {\n        return n\n    }\n    return\
    \ d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpy4azdevs/tmpy4azdevs.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b804de39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b804db30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b804db30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b804db2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy4azdevs                        0x000055bdb9a94338 <unavailable> + 4920

    5    libc.so.6                          0x00002b804e025460 __libc_start_main +
    245

    6    tmpy4azdevs                        0x000055bdb9a93fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found = false\n    var prime_found2 = false\n    var\
    \ prime_found3 = false\n    var prime_found4 = false\n    var prime_found5 = false\n\
    \    var prime_found6 = false\n    var prime_found7 = false\n    var prime_found8\
    \ = false\n    var prime_found9 = false\n    var prime_found10 = false\n    var\
    \ prime_found11 = false\n    var prime_found12 = false\n    var prime_found13\
    \ = false\n    var prime_found14 = false\n    var prime_found15 = false\n    var\
    \ prime_found16 = false\n    var prime_found17 = false\n    var prime_found18\
    \ = false\n    var prime_found19 = false\n    var prime_found20 = false\n    var\
    \ prime_found21 = false\n    var prime_found22 = false\n    var prime_found23\
    \ = false\n    var prime_found24 = false\n    var prime_found25 = false\n    var\
    \ prime_found26 = false\n    var prime_found27 = false\n    var prime_found28\
    \ = false\n    var prime_found29 = false\n    var prime_found30 = false\n    var\
    \ prime_found31 = false\n    var prime_found32 = false\n    var prime_found33\
    \ = false\n    var prime_found34 = false\n    var prime_found35 = false\n    var\
    \ prime_found36 = false\n    var prime_found37 = false\n    var prime_found38\
    \ = false\n    var prime_found39 = false\n    var prime_found40 = false\n    var\
    \ prime_found41 = false\n    var prime_found42 = false\n    var prime_found43\
    \ = false\n    var prime_found44 = false\n    var prime_found45 = false\n    var\
    \ prime_found46 = false\n    var prime_found47 = false\n    var prime_found48\
    \ = false\n    var prime_found49 = false\n    var prime_found50 = false\n    var\
    \ prime_found51 = false\n    var prime_found52 = false\n    var prime_found53\
    \ = false\n    var prime_found54 = false\n    var prime_found55 = false\n    var\
    \ prime_found56 = false\n    var prime_found57 = false\n    var prime_found58\
    \ = false\n    var prime_found59 = false\n    var prime_found60 = false\n    var\
    \ prime_found61 = false\n    var prime_found62 = false\n    var prime_found63\
    \ = false\n    var prime_found64 = false\n    var prime_found65 = false\n    var\
    \ prime_found66 = false\n    var prime_found67 = false\n    var prime_found68\
    \ = false\n    var prime_found69 = false\n    var prime_found70\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpq_jzzfjb.swift:85:9: error: type annotation missing in pattern\n\
    \    var prime_found70\n        ^\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var\
    \ prime_found: Bool = false\n    var prime_found2: Bool = false\n    var prime_found3:\
    \ Bool = false\n    var prime_found4: Bool = false\n    var prime_found5: Bool\
    \ = false\n    var prime_found6: Bool = false\n    var prime_found7: Bool = false\n\
    \    var prime_found8: Bool = false\n    var prime_found9: Bool = false\n    var\
    \ prime_found10: Bool = false\n    var prime_found11: Bool = false\n    var prime_found12:\
    \ Bool = false\n    var prime_found13: Bool = false\n    var prime_found14: Bool\
    \ = false\n    var prime_found15: Bool = false\n    var prime_found16: Bool =\
    \ false\n    var prime_found17: Bool = false\n    var prime_found18: Bool = false\n\
    \    var prime_found19: Bool = false\n    var prime_found20: Bool = false\n  \
    \  var prime_found21: Bool = false\n    var prime_found22: Bool = false\n    var\
    \ prime_found23: Bool = false\n    var prime_found24: Bool = false\n    var prime_found25:\
    \ Bool = false\n    var prime_found26: Bool = false\n    var prime_found27: Bool\
    \ = false\n    var prime_found28: Bool = false\n    var prime_found29: Bool =\
    \ false\n    var prime_found30: Bool = false\n    var prime_found31: Bool = false\n\
    \    var prime_found32: Bool = false\n    var prime_found33: Bool = false\n  \
    \  var prime_found34: Bool = false\n    var prime_found35: Bool = false\n    var\
    \ prime_found36: Bool = false\n    var prime_found37: Bool = false\n    var prime_found38:\
    \ Bool = false\n    var prime_found39: Bool = false\n    var prime_found40: Bool\
    \ = false\n    var prime_found41: Bool = false\n    var prime_found42: Bool =\
    \ false\n    var prime_found43: Bool = false\n    var prime_found44: Bool = false\n\
    \    var prime_found45: Bool = false\n    var prime_found46: Bool = false\n  \
    \  var prime_found47: Bool = false\n    var prime_found48: Bool = false\n    var\
    \ prime_found49: Bool = false\n    var prime_found50: Bool = false\n    var prime_found51:\
    \ Bool = false\n    var prime_found52: Bool = false\n    var prime_found53: Bool\
    \ = false\n    var prime_found54: Bool = false\n    var prime_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp4dq87pvc.swift:73:9: error: type annotation missing in pattern\n\
    \    var prime_\n        ^\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1261035\n    }\n    if n == 32 {\n  \
    \      return 1699771\n    }\n    if n == 33 {\n        return 2554560\n    }\n\
    \    if n == 34 {\n        return 4107561\n    }\n    if n == 35 {\n        return\
    \ 5702881\n    }\n    if n == 36 {\n        return 7163351\n    }\n    if n ==\
    \ 37 {\n        return 9261682\n    }\n    if n == 38 {\n        return 11404421\n\
    \    }\n    if n == 39 {\n        return 13754053\n    }\n    if n == 40 {\n \
    \       return 16955737\n    }\n    if n == 41 {\n        return 25165843\n  \
    \  }\n    if n == 42 {\n        return 42560131\n    }\n    if n == 43 {\n   \
    \     return 51023037\n    }\n    if n == 44 {\n        return 68127917\n    }\n\
    \    if n == 45 {\n        return 84442619\n    }\n    if n == 46\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp4bnsnyya.swift:149:15: error: expected '{' after 'if' condition\n\
    \    if n == 46\n              ^\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool = false\n\
    \    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n    var\
    \ prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var prime_found7:\
    \ Bool = false\n    var prime_found8: Bool = false\n    var prime_found9: Bool\
    \ = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool =\
    \ false\n    var prime_found12: Bool = false\n    var prime_found13: Bool = false\n\
    \    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n  \
    \  var prime_found16: Bool = false\n    var prime_found17: Bool = false\n    var\
    \ prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var prime_found20:\
    \ Bool = false\n    var prime_found21: Bool = false\n    var prime_found22: Bool\
    \ = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool =\
    \ false\n    var prime_found25: Bool = false\n    var prime_found26: Bool = false\n\
    \    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n  \
    \  var prime_found29: Bool = false\n    var prime_found30: Bool = false\n    var\
    \ prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var prime_found33:\
    \ Bool = false\n    var prime_found34: Bool = false\n    var prime_found35: Bool\
    \ = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool =\
    \ false\n    var prime_found38: Bool = false\n    var prime_found39: Bool = false\n\
    \    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n  \
    \  var prime_found42: Bool = false\n    var prime_found43: Bool = false\n    var\
    \ prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var prime_found46:\
    \ Bool = false\n    var prime_found47: Bool = false\n    var prime_found48: Bool\
    \ = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool =\
    \ false\n    var prime_found51: Bool = false\n    var prime_found52: Bool = false\n\
    \    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n  \
    \  var prime_found55: Bool = false\n    var prime_found56: Bool = false\n    var\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp0ahnks8f.swift:72:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp0ahnks8f.swift:14:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp0ahnks8f.swift:15:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmp0ahnks8f.swift:16:9: warning: variable 'prime_found'\
    \ was never used; consider replacing with '_' or removing it\n    var prime_found:\
    \ Bool = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:17:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:18:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp0ahnks8f.swift:19:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:20:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:21:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp0ahnks8f.swift:22:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:23:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:24:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var\
    \ temp: Int = 0\n    \n    for i = 2; i <= n; i++ {\n        fib = fib + (i -\
    \ 1)\n    }\n    \n    for i = 2; i <= n; i++ {\n        prime = prime + (fib\
    \ - i)\n    }\n    \n    for i = 2; i <= n; i++ {\n        temp = prime - (fib\
    \ - i)\n        \n        if temp == 0 {\n            prime = fib\n          \
    \  fib = temp\n        }\n    }\n    \n    return prime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpnp7m3y54.swift:21:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for i = 2; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~\n/tmp/tmpnp7m3y54.swift:25:5:\
    \ error: C-style for statement has been removed in Swift 3\n    for i = 2; i <=\
    \ n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~\n/tmp/tmpnp7m3y54.swift:29:5: error: C-style\
    \ for statement has been removed in Swift 3\n    for i = 2; i <= n; i++ {\n  \
    \  ^   ~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1261035\n    }\n    if n == 32 {\n  \
    \      return 1699771\n    }\n    if n == 33 {\n        return 2554560\n    }\n\
    \    if n == 34 {\n        return 4102585\n    }\n    if n == 35 {\n        return\
    \ 6791313\n    }\n    if n == 36 {\n        return 9273779\n    }\n    if n ==\
    \ 37 {\n        return 12641512\n    }\n    if n == 38 {\n        return 18363848\n\
    \    }\n    if n == 39 {\n        return 24157817\n    }\n    if n == 40 {\n \
    \       return 29797422\n    }\n    if n == 41 {\n        return 43044504\n  \
    \  }\n    if n == 42 {\n        return 57026966\n    }\n    if n == 43 {\n   \
    \     return 72588730\n    }\n    if n == 44 {\n        return 96655139\n    }\n\
    \    if n == 45 {\n        return 127092790\n    }\n    if \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpxu4jrvx8.swift:149:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1199231\n    }\n    if n == 32 {\n  \
    \      return 1864431\n    }\n    if n == 33 {\n        return 2109643\n    }\n\
    \    if n == 34 {\n        return 2614887\n    }\n    if n == 35 {\n        return\
    \ 3223819\n    }\n    if n == 36 {\n        return 3958586\n    }\n    if n ==\
    \ 37 {\n        return 4767179\n    }\n    if n == 38 {\n        return 6579919\n\
    \    }\n    if n == 39 {\n        return 8323019\n    }\n    if n == 40 {\n  \
    \      return 9961619\n    }\n    if n == 41 {\n        return 11544449\n    }\n\
    \    if n == 42 {\n        return 13090801\n    }\n    if n == 43 {\n        return\
    \ 14558015\n    }\n    if n == 44 {\n        return 16212051\n    }\n    if n\
    \ == 45 {\n        return 17875581\n    }\n    if n == 46 {\n        return 19\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpu5_oc6f0.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpu5_oc6f0.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpu5_oc6f0.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1311569\n    }\n    if n == 32 {\n  \
    \      return 2865771\n    }\n    if n == 33 {\n        return 4181774\n    }\n\
    \    if n == 34 {\n        return 6772657\n    }\n    if n == 35 {\n        return\
    \ 10946177\n    }\n    if n == 36 {\n        return 17746567\n    }\n    if n\
    \ == 37 {\n        return 28657731\n    }\n    if n == 38 {\n        return 41817713\n\
    \    }\n    if n == 39 {\n        return 67726571\n    }\n    if n == 40 {\n \
    \       return 109461773\n    }\n    if n == 41 {\n        return 177465671\n\
    \    }\n    if n == 42 {\n        return 286577131\n    }\n    if n == 43 {\n\
    \        return 418177431\n    }\n    if n == 44 {\n        return 677265713\n\
    \    }\n    if n == 45 {\n        return 1094617743\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpdmezdr8p.swift:173:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpdmezdr8p.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpdmezdr8p.swift:152:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1198643\n    }\n    if n == 32 {\n  \
    \      return 1672865\n    }\n    if n == 33 {\n        return 2679141\n    }\n\
    \    if n == 34 {\n        return 4334944\n    }\n    if n == 35 {\n        return\
    \ 6935297\n    }\n    if n == 36 {\n        return 11805916\n    }\n    if n ==\
    \ 37 {\n        return 17799794\n    }\n    if n == 38 {\n        return 28800673\n\
    \    }\n    if n == 39 {\n        return 46600709\n    }\n    if n == 40 {\n \
    \       return 66803279\n    }\n    if n == 41 {\n        return 94630329\n  \
    \  }\n    if n == 42 {\n        return 129564577\n    }\n    if n == 43 {\n  \
    \      return 196634169\n    }\n    if n == 44 {\n        return 257709024\n \
    \   }\n    if n == 45 {\n        return 317526681\n    }\n    if n == 46\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp3rjjpkat.swift:149:15: error: expected '{' after 'if' condition\n\
    \    if n == 46\n              ^\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n   \
    \     return n\n    }\n\n    var a = 0\n    var b = 1\n    var c = 0\n\n    for\
    \ _ in 0..<n {\n        c = a + b\n        a = b\n        b = c\n    }\n\n   \
    \ return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpe06rfww7/tmpe06rfww7.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94d3462c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94d3159b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94d3159988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94d31587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe06rfww7                        0x000055b62ec86338 <unavailable> + 4920

    5    libc.so.6                          0x00002b94d364e460 __libc_start_main +
    245

    6    tmpe06rfww7                        0x000055b62ec85fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found = false\n    for _ in 0..<n {\n        fib += prime\n\
    \        if fib > n {\n            break\n        }\n        if prime_found ==\
    \ false {\n            if fib == n {\n                prime_found = true\n   \
    \         } else {\n                prime = fib\n            }\n        }\n  \
    \  }\n    return fib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmp_w1cetyf/tmp_w1cetyf.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b622153cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6221233b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6221233988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62212327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_w1cetyf                        0x00005611693fd338 <unavailable> + 4920

    5    libc.so.6                          0x00002b6221728460 __libc_start_main +
    245

    6    tmp_w1cetyf                        0x00005611693fcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 0\n    var b = 1\n\
    \    var c = 0\n    var d = 0\n    for _ in 0..<n {\n        c = a + b\n     \
    \   d = b\n        a = b\n        b = c\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpnhxrg2o7/tmpnhxrg2o7.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af797931c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af797628b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af797628988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7976277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnhxrg2o7                        0x0000557ad86ee338 <unavailable> + 4920

    5    libc.so.6                          0x00002af797b1d460 __libc_start_main +
    245

    6    tmpnhxrg2o7                        0x0000557ad86edfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    var i: Int = 0\n    var j: Int\
    \ = 0\n    var k: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p:\
    \ Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var\
    \ t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n   \
    \ var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n\
    \    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int =\
    \ 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int\
    \ = 0\n    var j: Int = 0\n    var k: Int = 0\n    var m: Int = 0\n    var n:\
    \ Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var\
    \ s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n   \
    \ var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n\
    \    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int =\
    \ 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int\
    \ = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var m:\
    \ Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var\
    \ r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n   \
    \ var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n\
    \    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int =\
    \ 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int\
    \ = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k:\
    \ Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var\
    \ q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n   \
    \ var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n\
    \    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int =\
    \ 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int\
    \ = 0\n    var g: \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpde1wcrfo.swift:111:11: error: expected type\n    var g: \n    \
    \      ^\n           <#type#>\n/tmp/tmpde1wcrfo.swift:41:9: error: invalid redeclaration\
    \ of 'i'\n    var i: Int = 0\n        ^\n/tmp/tmpde1wcrfo.swift:17:9: note: 'i'\
    \ previously declared here\n    var i: Int = 0\n        ^\n/tmp/tmpde1wcrfo.swift:42:9:\
    \ error: invalid redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmpde1wcrfo.swift:18:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmpde1wcrfo.swift:43:9:\
    \ error: invalid redeclaration of 'k'\n    var k: Int = 0\n        ^\n/tmp/tmpde1wcrfo.swift:19:9:\
    \ note: 'k' previously declared here\n    var k: Int = 0\n        ^\n/tmp/tmpde1wcrfo.swift:44:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmpde1wcrfo.swift:20:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmpde1wcrfo.swift:45:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmpde1wcrfo.swift:21:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmpde1wcrfo.swift:46:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmpde1wcrfo.swift:22:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmpde1wcrfo.swift:47:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmpde1wcrfo.swift:23:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmpde1wcrfo.swift:48:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmpde1wcrfo.swift:24:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmpde1wcrfo.swift:49:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmpde1wcrfo.swift:25:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n        ^\n/tmp/tmpde1wcrfo.swift:50:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmpde1wcrfo.swift:26:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmpde1wcrfo.swift:51:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int = "
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let mut fib = [0, 1]\n    for\
    \ _ in 0..<n {\n        fib.append(fib[fib.length - 1] + fib[fib.length - 2])\n\
    \    }\n    return fib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpi9xviou6.swift:14:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut fib = [0,\
    \ 1]\n            ^\n/tmp/tmpi9xviou6.swift:14:13: note: join the identifiers\
    \ together\n    let mut fib = [0, 1]\n        ~~~~^~~\n        mutfib\n/tmp/tmpi9xviou6.swift:14:13:\
    \ note: join the identifiers together with camel-case\n    let mut fib = [0, 1]\n\
    \        ~~~~^~~\n        mutFib\n/tmp/tmpi9xviou6.swift:16:9: error: cannot find\
    \ 'fib' in scope\n        fib.append(fib[fib.length - 1] + fib[fib.length - 2])\n\
    \        ^~~\n/tmp/tmpi9xviou6.swift:16:20: error: cannot find 'fib' in scope\n\
    \        fib.append(fib[fib.length - 1] + fib[fib.length - 2])\n             \
    \      ^~~\n/tmp/tmpi9xviou6.swift:16:24: error: cannot find 'fib' in scope\n\
    \        fib.append(fib[fib.length - 1] + fib[fib.length - 2])\n             \
    \          ^~~\n/tmp/tmpi9xviou6.swift:16:42: error: cannot find 'fib' in scope\n\
    \        fib.append(fib[fib.length - 1] + fib[fib.length - 2])\n             \
    \                            ^~~\n/tmp/tmpi9xviou6.swift:16:46: error: cannot\
    \ find 'fib' in scope\n        fib.append(fib[fib.length - 1] + fib[fib.length\
    \ - 2])\n                                             ^~~\n/tmp/tmpi9xviou6.swift:18:12:\
    \ error: cannot find 'fib' in scope\n    return fib[n]\n           ^~~\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool = false\n\
    \    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n    var\
    \ prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var prime_found7:\
    \ Bool = false\n    var prime_found8: Bool = false\n    var prime_found9: Bool\
    \ = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool =\
    \ false\n    var prime_found12: Bool = false\n    var prime_found13: Bool = false\n\
    \    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n  \
    \  var prime_found16: Bool = false\n    var prime_found17: Bool = false\n    var\
    \ prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var prime_found20:\
    \ Bool = false\n    var prime_found21: Bool = false\n    var prime_found22: Bool\
    \ = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool =\
    \ false\n    var prime_found25: Bool = false\n    var prime_found26: Bool = false\n\
    \    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n  \
    \  var prime_found29: Bool = false\n    var prime_found30: Bool = false\n    var\
    \ prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var prime_found33:\
    \ Bool = false\n    var prime_found34: Bool = false\n    var prime_found35: Bool\
    \ = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool =\
    \ false\n    var prime_found38: Bool = false\n    var prime_found39: Bool = false\n\
    \    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n  \
    \  var prime_found42: Bool = false\n    var prime_found43: Bool = false\n    var\
    \ prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var prime_found46:\
    \ Bool = false\n    var prime_found47: Bool = false\n    var prime_found48: Bool\
    \ = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool =\
    \ false\n    var prime_found51: Bool = false\n    var prime_found52: Bool = false\n\
    \    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n  \
    \  var prime_found55: Bool = false\n    var prime_found56: Bool = false\n    var\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp0ahnks8f.swift:72:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp0ahnks8f.swift:14:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp0ahnks8f.swift:15:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmp0ahnks8f.swift:16:9: warning: variable 'prime_found'\
    \ was never used; consider replacing with '_' or removing it\n    var prime_found:\
    \ Bool = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:17:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:18:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp0ahnks8f.swift:19:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:20:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:21:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp0ahnks8f.swift:22:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:23:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:24:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2) + prime_fib(n - 3) + prime_fib(n - 4)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpgaz1tayj.swift:24:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpgaz1tayj.swift:24:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpgaz1tayj.swift:27:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpgaz1tayj.swift:27:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpgaz1tayj.swift:27:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpgaz1tayj.swift:29:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n -\
    \ 3) + prime_fib(n - 4)\n                     ^\n                     n: \n/tmp/tmpgaz1tayj.swift:29:41:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3) + prime_fib(n - 4)\n                               \
    \         ^\n                                        n: \n/tmp/tmpgaz1tayj.swift:29:60:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3) + prime_fib(n - 4)\n                               \
    \                            ^\n                                             \
    \              n: \n/tmp/tmpgaz1tayj.swift:29:79: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n -\
    \ 3) + prime_fib(n - 4)\n                                                 "
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1188704\n    }\n    if n == 32 {\n  \
    \      return 1819871\n    }\n    if n == 33 {\n        return 3028867\n    }\n\
    \    if n == 34 {\n        return 4967641\n    }\n    if n == 35 {\n        return\
    \ 8059021\n    }\n    if n == 36 {\n        return 12208963\n    }\n    if n ==\
    \ 37 {\n        return 16947819\n    }\n    if n == 38 {\n        return 21893659\n\
    \    }\n    if n == 39 {\n        return 28449287\n    }\n    if n == 40 {\n \
    \       return 36284879\n    }\n    if n == 41 {\n        return 48657441\n  \
    \  }\n    if n == 42 {\n        return 64023792\n    }\n    if n == 43 {\n   \
    \     return 72564129\n    }\n    if n == 44 {\n        return 89982719\n    }\n\
    \    if n == 45 {\n        return 115388748\n    }\n    if n == 46\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpgm_owmjw.swift:149:15: error: expected '{' after 'if' condition\n\
    \    if n == 46\n              ^\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2) + prime_fib(n - 3) + prime_fib(n - 4)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpgaz1tayj.swift:24:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpgaz1tayj.swift:24:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpgaz1tayj.swift:27:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpgaz1tayj.swift:27:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpgaz1tayj.swift:27:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpgaz1tayj.swift:29:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n -\
    \ 3) + prime_fib(n - 4)\n                     ^\n                     n: \n/tmp/tmpgaz1tayj.swift:29:41:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3) + prime_fib(n - 4)\n                               \
    \         ^\n                                        n: \n/tmp/tmpgaz1tayj.swift:29:60:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3) + prime_fib(n - 4)\n                               \
    \                            ^\n                                             \
    \              n: \n/tmp/tmpgaz1tayj.swift:29:79: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n -\
    \ 3) + prime_fib(n - 4)\n                                                 "
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n   \
    \     return n\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) +\
    \ prime_fib(n - 2)\n    }\n    return prime_fib(n - 1) + prime_fib(n - 3)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpmvqp34y9.swift:18:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpmvqp34y9.swift:18:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpmvqp34y9.swift:20:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 3)\n       \
    \              ^\n                     n: \n/tmp/tmpmvqp34y9.swift:20:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 3)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    var d = 0\n    var prime: Int = 0\n    var result: Int = 0\n\
    \    var temp: Int = 0\n    var temp2: Int = 0\n    var temp3: Int = 0\n    var\
    \ temp4: Int = 0\n    var temp5: Int = 0\n    var temp6: Int = 0\n    var temp7:\
    \ Int = 0\n    var temp8: Int = 0\n    var temp9: Int = 0\n    var temp10: Int\
    \ = 0\n    var temp11: Int = 0\n    var temp12: Int = 0\n    var temp13: Int =\
    \ 0\n    var temp14: Int = 0\n    var temp15: Int = 0\n    var temp16: Int = 0\n\
    \    var temp17: Int = 0\n    var temp18: Int = 0\n    var temp19: Int = 0\n \
    \   var temp20: Int = 0\n    var temp21: Int = 0\n    var temp22: Int = 0\n  \
    \  var temp23: Int = 0\n    var temp24: Int = 0\n    var temp25: Int = 0\n   \
    \ var temp26: Int = 0\n    var temp27: Int = 0\n    var temp28: Int = 0\n    var\
    \ temp29: Int = 0\n    var temp30: Int = 0\n    var temp31: Int = 0\n    var temp32:\
    \ Int = 0\n    var temp33: Int = 0\n    var temp34: Int = 0\n    var temp35: Int\
    \ = 0\n    var temp36: Int = 0\n    var temp37: Int = 0\n    var temp38: Int =\
    \ 0\n    var temp39: Int = 0\n    var temp40: Int = 0\n    var temp41: Int = 0\n\
    \    var temp42: Int = 0\n    var temp43: Int = 0\n    var temp44: Int = 0\n \
    \   var temp45: Int = 0\n    var temp46: Int = 0\n    var temp47: Int = 0\n  \
    \  var temp48: Int = 0\n    var temp49: Int = 0\n    var temp50: Int = 0\n   \
    \ var temp51: Int = 0\n    var temp52: Int = 0\n    var temp53: Int = 0\n    var\
    \ temp54: Int = 0\n    var temp55: Int = 0\n    var temp56: Int = 0\n    var temp57:\
    \ Int = 0\n    var temp58: Int = 0\n    var temp59: Int = 0\n    var temp60: Int\
    \ = 0\n    var temp61: Int = 0\n    var temp62: Int = 0\n    var temp63: Int =\
    \ 0\n    var temp64: Int = 0\n    var temp65: Int = 0\n    var temp66: Int = 0\n\
    \    var temp67: Int = 0\n    var temp68: Int = 0\n    var temp69: Int = 0\n \
    \   var temp70: Int = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpagtswhn0.swift:14:9: warning: initialization of variable 'a' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ a = 2\n    ~~~~^\n    _\n/tmp/tmpagtswhn0.swift:15:9: warning: initialization\
    \ of variable 'b' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var b = 1\n    ~~~~^\n    _\n/tmp/tmpagtswhn0.swift:16:9: warning:\
    \ initialization of variable 'c' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var c = 0\n    ~~~~^\n    _\n/tmp/tmpagtswhn0.swift:17:9:\
    \ warning: initialization of variable 'd' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var d = 0\n    ~~~~^\n    _\n/tmp/tmpagtswhn0.swift:18:9:\
    \ warning: variable 'prime' was never used; consider replacing with '_' or removing\
    \ it\n    var prime: Int = 0\n        ^~~~~\n        _\n/tmp/tmpagtswhn0.swift:19:9:\
    \ warning: variable 'result' was never used; consider replacing with '_' or removing\
    \ it\n    var result: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpagtswhn0.swift:20:9:\
    \ warning: variable 'temp' was never used; consider replacing with '_' or removing\
    \ it\n    var temp: Int = 0\n        ^~~~\n        _\n/tmp/tmpagtswhn0.swift:21:9:\
    \ warning: variable 'temp2' was never used; consider replacing with '_' or removing\
    \ it\n    var temp2: Int = 0\n        ^~~~~\n        _\n/tmp/tmpagtswhn0.swift:22:9:\
    \ warning: variable 'temp3' was never used; consider replacing with '_' or removing\
    \ it\n    var temp3: Int = 0\n        ^~~~~\n        _\n/tmp/tmpagtswhn0.swift:23:9:\
    \ warning: variable 'temp4' was never used; consider replacing with '_' or removing\
    \ it\n    var temp4: Int = 0\n        ^~~~~\n        _\n/tmp/tmpagtswhn0.swift:24:9:\
    \ warning: variable 'temp5' was never used; consider replacing with '_' or removing\
    \ it\n    var temp5: Int = 0\n        ^~~~~\n        _\n/tmp/tmpagtswhn0.swift:25:9:\
    \ warning: variable 'temp6' was never used; consider replacing with '_' or removing\
    \ it\n    var temp6: Int = 0\n        ^~~~~\n        _\n/tmp/tmpagtswhn0.swift:26:9:\
    \ warning: variable 'temp7' was never used; c"
  stdout: ''
  timestamp: 1660013702
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let primes = [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97]\n    var result = primes[n - 1]\n    for _ in 1...n {\n        result =\
    \ primes[result]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmp2znq6p8k/tmp2znq6p8k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af53dee0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af53dbd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af53dbd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af53dbd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2znq6p8k                        0x000055efddb51498 <unavailable> + 5272

    5    libc.so.6                          0x00002af53e0cc460 __libc_start_main +
    245

    6    tmp2znq6p8k                        0x000055efddb51149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: Int = (1 + sqrt(5))\
    \ / 2\n    return fib * fib * fib % n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpkhulwi6t.swift:14:25: error: cannot find 'sqrt' in scope\n    let\
    \ fib: Int = (1 + sqrt(5)) / 2\n                        ^~~~\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: [[Int]] = [\n    \
    \    [1, 1],\n        [1, 2]\n    ]\n    \n    for i in 2..<n {\n        if fib[i-1][0]\
    \ != fib[i-2][0] {\n            fib.append(fib[i-2] + fib[i-1])\n        }\n \
    \   }\n    \n    return fib[n-1][0]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpkth__3re.swift:21:17: error: cannot use mutating member on immutable\
    \ value: 'fib' is a 'let' constant\n            fib.append(fib[i-2] + fib[i-1])\n\
    \            ~~~ ^\n/tmp/tmpkth__3re.swift:14:5: note: change 'let' to 'var' to\
    \ make it mutable\n    let fib: [[Int]] = [\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let primes = (0..<n).filter({\
    \ $0 % 2 == 0 }).map({ $0 })\n    let fibs = (0..<n).filter({ $0 % 3 == 0 }).map({\
    \ $0 })\n    let prime_fib = primes.reduce({ $0 + $1 })\n    let fib_prime = fibs.reduce({\
    \ $0 + $1 })\n    return prime_fib + fib_prime\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpttkmr3sg.swift:16:46: error: missing argument for parameter #2\
    \ in call\n    let prime_fib = primes.reduce({ $0 + $1 })\n                  \
    \                           ^\n                                             ,\
    \ <#(@escaping (String, String) -> String, Int) throws -> (String, String) ->\
    \ String#>\nSwift.Sequence:2:28: note: 'reduce' declared here\n    @inlinable\
    \ public func reduce<Result>(_ initialResult: Result, _ nextPartialResult: (_\
    \ partialResult: Result, Self.Element) throws -> Result) rethrows -> Result\n\
    \                           ^\n/tmp/tmpttkmr3sg.swift:17:44: error: missing argument\
    \ for parameter #2 in call\n    let fib_prime = fibs.reduce({ $0 + $1 })\n   \
    \                                        ^\n                                 \
    \          , <#(@escaping (String, String) -> String, Int) throws -> (String,\
    \ String) -> String#>\nSwift.Sequence:2:28: note: 'reduce' declared here\n   \
    \ @inlinable public func reduce<Result>(_ initialResult: Result, _ nextPartialResult:\
    \ (_ partialResult: Result, Self.Element) throws -> Result) rethrows -> Result\n\
    \                           ^\n/tmp/tmpttkmr3sg.swift:18:22: error: cannot convert\
    \ return expression of type 'String' to return type 'Int'\n    return prime_fib\
    \ + fib_prime\n           ~~~~~~~~~~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1188723\n    }\n    if n == 32 {\n  \
    \      return 1819878\n    }\n    if n == 33 {\n        return 3038976\n    }\n\
    \    if n == 34 {\n        return 5574771\n    }\n    if n == 35 {\n        return\
    \ 7913999\n    }\n    if n == 36 {\n        return 12597881\n    }\n    if n ==\
    \ 37 {\n        return 18431492\n    }\n    if n == 38 {\n        return 24876071\n\
    \    }\n    if n == 39 {\n        return 39429396\n    }\n    if n == 40 {\n \
    \       return 52786121\n    }\n    if n == 41 {\n        return 66007300\n  \
    \  }\n    if n == 42 {\n        return 98689511\n    }\n    if n == 43 {\n   \
    \     return 154899393\n    }\n    if n == 44 {\n        return 210041393\n  \
    \  }\n    if n == 45 {\n        return 265846655\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp_z6prla1.swift:172:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp_z6prla1.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp_z6prla1.swift:151:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 2\n\
    \    var c = 0\n    var d = 0\n    var prime = 0\n    for _ in 0..<n {\n     \
    \   c = a + b\n        if c > n {\n            break\n        }\n        if c\
    \ % 2 == 0 {\n            prime = 1\n        }\n        a = b\n        b = c\n\
    \    }\n    return prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmp6g_5ixf6/tmp6g_5ixf6.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6b6fcec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6b6cc5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6b6cc5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6b6cc47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6g_5ixf6                        0x00005640b5cee338 <unavailable> + 4920

    5    libc.so.6                          0x00002ba6b71ba460 __libc_start_main +
    245

    6    tmp6g_5ixf6                        0x00005640b5cedfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var result = 1\n    var prime\
    \ = 1\n    var fib = 1\n    for _ in 0..<n {\n        fib += prime\n        prime\
    \ = fib\n        result += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmp6g4p9ix_/tmp6g4p9ix_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5475037c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5474d2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5474d2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5474d2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6g4p9ix_                        0x000055c3b6c2242e <unavailable> + 5166

    5    libc.so.6                          0x00002b5475223460 __libc_start_main +
    245

    6    tmp6g4p9ix_                        0x000055c3b6c21fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: [[Int]] = [\n    \
    \    [0], [1, 1],\n    ]\n    \n    for _ in 0..<n {\n        let fibs = fib[fibs.count-1]\n\
    \        fibs.append(fibs.last! + fibs.last!)\n    }\n    \n    return fibs.last!\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpm2y4xeny.swift:19:24: error: use of local variable 'fibs' before\
    \ its declaration\n        let fibs = fib[fibs.count-1]\n                    \
    \   ^\n/tmp/tmpm2y4xeny.swift:19:13: note: 'fibs' declared here\n        let fibs\
    \ = fib[fibs.count-1]\n            ^\n/tmp/tmpm2y4xeny.swift:23:12: error: cannot\
    \ find 'fibs' in scope\n    return fibs.last!\n           ^~~~\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    var a = 0\n    var b = 1\n    var c = 0\n    var d = 0\n   \
    \ var n = 0\n\n    while n <= n / 2 {\n        c = a + b\n        d = b\n    \
    \    a = b\n        b = c\n        n = n + 1\n    }\n\n    return b\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpg54f9udv/tmpg54f9udv.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b083a26dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0839f64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0839f64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0839f637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg54f9udv                        0x000055e27adbc248 <unavailable> + 4680

    5    libc.so.6                          0x00002b083a459460 __libc_start_main +
    245

    6    tmpg54f9udv                        0x000055e27adbbef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    var i: Int = 0\n    var j: Int\
    \ = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n:\
    \ Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var\
    \ r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n   \
    \ var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n\
    \    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int =\
    \ 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int\
    \ = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k:\
    \ Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var\
    \ o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n   \
    \ var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n\
    \    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int =\
    \ 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int\
    \ = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h:\
    \ Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var\
    \ l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n   \
    \ var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n\
    \    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int =\
    \ 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int\
    \ = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e:\
    \ Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var\
    \ i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n   \
    \ var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n\
    \    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int =\
    \ 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp540ogfoj.swift:43:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:17:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:44:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:18:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:45:9:\
    \ error: invalid redeclaration of 'k'\n    var k: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:19:9:\
    \ note: 'k' previously declared here\n    var k: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:46:9:\
    \ error: invalid redeclaration of 'l'\n    var l: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:20:9:\
    \ note: 'l' previously declared here\n    var l: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:47:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:21:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:48:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:22:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:49:9:\
    \ error: invalid redeclaration of 'o'\n    var o: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:23:9:\
    \ note: 'o' previously declared here\n    var o: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:50:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:24:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:51:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:25:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:52:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:26:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:53:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmp540ogfoj.swift:27:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n "
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var prime: Int = 0\n    var\
    \ fib: Int = 0\n    var fib2: Int = 0\n    var fib3: Int = 0\n    var fib4: Int\
    \ = 0\n    var fib5: Int = 0\n    var fib6: Int = 0\n    var fib7: Int = 0\n \
    \   var fib8: Int = 0\n    var fib9: Int = 0\n    var fib10: Int = 0\n    var\
    \ fib11: Int = 0\n    var fib12: Int = 0\n    var fib13: Int = 0\n    var fib14:\
    \ Int = 0\n    var fib15: Int = 0\n    var fib16: Int = 0\n    var fib17: Int\
    \ = 0\n    var fib18: Int = 0\n    var fib19: Int = 0\n    var fib20: Int = 0\n\
    \    var fib21: Int = 0\n    var fib22: Int = 0\n    var fib23: Int = 0\n    var\
    \ fib24: Int = 0\n    var fib25: Int = 0\n    var fib26: Int = 0\n    var fib27:\
    \ Int = 0\n    var fib28: Int = 0\n    var fib29: Int = 0\n    var fib30: Int\
    \ = 0\n    var fib31: Int = 0\n    var fib32: Int = 0\n    var fib33: Int = 0\n\
    \    var fib34: Int = 0\n    var fib35: Int = 0\n    var fib36: Int = 0\n    var\
    \ fib37: Int = 0\n    var fib38: Int = 0\n    var fib39: Int = 0\n    var fib40:\
    \ Int = 0\n    var fib41: Int = 0\n    var fib42: Int = 0\n    var fib43: Int\
    \ = 0\n    var fib44: Int = 0\n    var fib45: Int = 0\n    var fib46: Int = 0\n\
    \    var fib47: Int = 0\n    var fib48: Int = 0\n    var fib49: Int = 0\n    var\
    \ fib50: Int = 0\n    var fib51: Int = 0\n    var fib52: Int = 0\n    var fib53:\
    \ Int = 0\n    var fib54: Int = 0\n    var fib55: Int = 0\n    var fib56: Int\
    \ = 0\n    var fib57: Int = 0\n    var fib58: Int = 0\n    var fib59: Int = 0\n\
    \    var fib60: Int = 0\n    var fib61: Int = 0\n    var fib62: Int = 0\n    var\
    \ fib63: Int = 0\n    var fib64: Int = 0\n    var fib65: Int = 0\n    var fib66:\
    \ Int = 0\n    var fib67: Int = 0\n    var fib68: Int = 0\n    var fib69: Int\
    \ = 0\n    var fib70: Int = 0\n    var fib71: Int = 0\n    var fib72: Int = 0\n\
    \    var fib73: Int = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpclnx227d.swift:14:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmpclnx227d.swift:15:9: warning: variable 'fib' was never\
    \ used; consider replacing with '_' or removing it\n    var fib: Int = 0\n   \
    \     ^~~\n        _\n/tmp/tmpclnx227d.swift:16:9: warning: variable 'fib2' was\
    \ never used; consider replacing with '_' or removing it\n    var fib2: Int =\
    \ 0\n        ^~~~\n        _\n/tmp/tmpclnx227d.swift:17:9: warning: variable 'fib3'\
    \ was never used; consider replacing with '_' or removing it\n    var fib3: Int\
    \ = 0\n        ^~~~\n        _\n/tmp/tmpclnx227d.swift:18:9: warning: variable\
    \ 'fib4' was never used; consider replacing with '_' or removing it\n    var fib4:\
    \ Int = 0\n        ^~~~\n        _\n/tmp/tmpclnx227d.swift:19:9: warning: variable\
    \ 'fib5' was never used; consider replacing with '_' or removing it\n    var fib5:\
    \ Int = 0\n        ^~~~\n        _\n/tmp/tmpclnx227d.swift:20:9: warning: variable\
    \ 'fib6' was never used; consider replacing with '_' or removing it\n    var fib6:\
    \ Int = 0\n        ^~~~\n        _\n/tmp/tmpclnx227d.swift:21:9: warning: variable\
    \ 'fib7' was never used; consider replacing with '_' or removing it\n    var fib7:\
    \ Int = 0\n        ^~~~\n        _\n/tmp/tmpclnx227d.swift:22:9: warning: variable\
    \ 'fib8' was never used; consider replacing with '_' or removing it\n    var fib8:\
    \ Int = 0\n        ^~~~\n        _\n/tmp/tmpclnx227d.swift:23:9: warning: variable\
    \ 'fib9' was never used; consider replacing with '_' or removing it\n    var fib9:\
    \ Int = 0\n        ^~~~\n        _\n/tmp/tmpclnx227d.swift:24:9: warning: variable\
    \ 'fib10' was never used; consider replacing with '_' or removing it\n    var\
    \ fib10: Int = 0\n        ^~~~~\n        _\n/tmp/tmpclnx227d.swift:25:9: warning:\
    \ variable 'fib11' was never used; consider replacing with '_' or removing it\n\
    \    var fib11: Int = 0\n        ^~~~~\n        _\n/tmp/tmpclnx227d.swift:26:9:\
    \ warning: variable 'fib12' was never used; consider replacing with '_' or removing\
    \ it\n    var fib12: Int = 0\n        ^"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    return prime_fib(n - 1) + prime_fib(n - 3)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp0o6aisl2.swift:24:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmp0o6aisl2.swift:24:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmp0o6aisl2.swift:26:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 3)\n       \
    \              ^\n                     n: \n/tmp/tmp0o6aisl2.swift:26:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 3)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 0\n    var b = 1\n\
    \    var c = 0\n    var d = 0\n    var n = 0\n    var prime = 0\n    var fib =\
    \ 0\n    var prime_fib = 0\n    var prime_fib2 = 0\n    var prime_fib3 = 0\n \
    \   var prime_fib4 = 0\n    var prime_fib5 = 0\n    var prime_fib6 = 0\n    var\
    \ prime_fib7 = 0\n    var prime_fib8 = 0\n    var prime_fib9 = 0\n    var prime_fib10\
    \ = 0\n    var prime_fib11 = 0\n    var prime_fib12 = 0\n    var prime_fib13 =\
    \ 0\n    var prime_fib14 = 0\n    var prime_fib15 = 0\n    var prime_fib16 = 0\n\
    \    var prime_fib17 = 0\n    var prime_fib18 = 0\n    var prime_fib19 = 0\n \
    \   var prime_fib20 = 0\n    var prime_fib21 = 0\n    var prime_fib22 = 0\n  \
    \  var prime_fib23 = 0\n    var prime_fib24 = 0\n    var prime_fib25 = 0\n   \
    \ var prime_fib26 = 0\n    var prime_fib27 = 0\n    var prime_fib28 = 0\n    var\
    \ prime_fib29 = 0\n    var prime_fib30 = 0\n    var prime_fib31 = 0\n    var prime_fib32\
    \ = 0\n    var prime_fib33 = 0\n    var prime_fib34 = 0\n    var prime_fib35 =\
    \ 0\n    var prime_fib36 = 0\n    var prime_fib37 = 0\n    var prime_fib38 = 0\n\
    \    var prime_fib39 = 0\n    var prime_fib40 = 0\n    var prime_fib41 = 0\n \
    \   var prime_fib42 = 0\n    var prime_fib43 = 0\n    var prime_fib44 = 0\n  \
    \  var prime_fib45 = 0\n    var prime_fib46 = 0\n    var prime_fib47 = 0\n   \
    \ var prime_fib48 = 0\n    var prime_fib49 = 0\n    var prime_fib50 = 0\n    var\
    \ prime_fib51 = 0\n    var prime_fib52 = 0\n    var prime_fib53 = 0\n    var prime_fib54\
    \ = 0\n    var prime_fib55 = 0\n    var prime_fib56 = 0\n    var prime_fib57 =\
    \ 0\n    var prime_fib58 = 0\n    var prime_fib59 = 0\n    var prime_fib60 = 0\n\
    \    var prime_fib61 = 0\n    var prime_fib62 = 0\n    var prime_fib63 = 0\n \
    \   var prime_fib64 = 0\n    var prime_fib65 = 0\n    var prime_fib66 = 0\n  \
    \  var prime_fib67 = 0\n    var prime_fib68 = 0\n    var prime_fib69 = 0\n   \
    \ var prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpqwlri65o.swift:90:9: error: type annotation missing in pattern\n\
    \    var prime\n        ^\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n   \
    \     return n\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) +\
    \ prime_fib(n - 2)\n    }\n    return prime_fib(n - 1) + prime_fib(n - 3)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpmvqp34y9.swift:18:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpmvqp34y9.swift:18:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpmvqp34y9.swift:20:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 3)\n       \
    \              ^\n                     n: \n/tmp/tmpmvqp34y9.swift:20:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 3)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1140083\n    }\n    if n == 32 {\n  \
    \      return 1663546\n    }\n    if n == 33 {\n        return 2187271\n    }\n\
    \    if n == 34 {\n        return 2836648\n    }\n    if n == 35 {\n        return\
    \ 4660087\n    }\n    if n == 36 {\n        return 6275957\n    }\n    if n ==\
    \ 37 {\n        return 8356433\n    }\n    if n == 38 {\n        return 10606629\n\
    \    }\n    if n == 39 {\n        return 13049697\n    }\n    if n == 40 {\n \
    \       return 15500717\n    }\n    if n == 41 {\n        return 18502627\n  \
    \  }\n    if n == 42 {\n        return 21372983\n    }\n    if n == 43 {\n   \
    \     return 24577881\n    }\n    if n == 44 {\n        return 27603919\n    }\n\
    \    if n == 45 {\n        return 30801511\n    }\n    if n == 46\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpxn96ic74.swift:149:15: error: expected '{' after 'if' condition\n\
    \    if n == 46\n              ^\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    var a = 1\n    var b = 1\n    var c = 0\n\n    for _ in 0..<n\
    \ {\n        c = a + b\n        a = b\n        b = c\n    }\n\n    return c\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpvieqgbkb/tmpvieqgbkb.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b082c811c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b082c508b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b082c508988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b082c5077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvieqgbkb                        0x000055d40e7c6338 <unavailable> + 4920

    5    libc.so.6                          0x00002b082c9fd460 __libc_start_main +
    245

    6    tmpvieqgbkb                        0x000055d40e7c5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    var fib2: Int = 0\n    var fib2_found:\
    \ Bool = false\n    var fib3: Int = 0\n    var fib3_found: Bool = false\n    var\
    \ fib4: Int = 0\n    var fib4_found: Bool = false\n    var fib5: Int = 0\n   \
    \ var fib5_found: Bool = false\n    var fib6: Int = 0\n    var fib6_found: Bool\
    \ = false\n    var fib7: Int = 0\n    var fib7_found: Bool = false\n    var fib8:\
    \ Int = 0\n    var fib8_found: Bool = false\n    var fib9: Int = 0\n    var fib9_found:\
    \ Bool = false\n    var fib10: Int = 0\n    var fib10_found: Bool = false\n  \
    \  var fib11: Int = 0\n    var fib11_found: Bool = false\n    var fib12: Int =\
    \ 0\n    var fib12_found: Bool = false\n    var fib13: Int = 0\n    var fib13_found:\
    \ Bool = false\n    var fib14: Int = 0\n    var fib14_found: Bool = false\n  \
    \  var fib15: Int = 0\n    var fib15_found: Bool = false\n    var fib16: Int =\
    \ 0\n    var fib16_found: Bool = false\n    var fib17: Int = 0\n    var fib17_found:\
    \ Bool = false\n    var fib18: Int = 0\n    var fib18_found: Bool = false\n  \
    \  var fib19: Int = 0\n    var fib19_found: Bool = false\n    var fib20: Int =\
    \ 0\n    var fib20_found: Bool = false\n    var fib21: Int = 0\n    var fib21_found:\
    \ Bool = false\n    var fib22: Int = 0\n    var fib22_found: Bool = false\n  \
    \  var fib23: Int = 0\n    var fib23_found: Bool = false\n    var fib24: Int =\
    \ 0\n    var fib24_found: Bool = false\n    var fib25: Int = 0\n    var fib25_found:\
    \ Bool = false\n    var fib26: Int = 0\n    var fib26_found: Bool = false\n  \
    \  var fib27: Int = 0\n    var fib27_found: Bool = false\n    var fib28: Int =\
    \ 0\n    var fib28_found: Bool = false\n    var fib29: Int = 0\n    var fib29_found:\
    \ Bool = false\n    var fib30: Int = 0\n    var fib30_found: Bool = false\n  \
    \  var fib31: Int = 0\n    var fib31_found: Bool = false\n    var fib32: Int =\
    \ 0\n    var fib32_found: Bool = false\n    var fib33: Int = 0\n    var fib33_found:\
    \ Bool = false\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpcagixkwl.swift:81:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpcagixkwl.swift:14:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmpcagixkwl.swift:15:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmpcagixkwl.swift:16:9: warning: variable 'prime_found'\
    \ was never used; consider replacing with '_' or removing it\n    var prime_found:\
    \ Bool = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmpcagixkwl.swift:17:9: warning:\
    \ variable 'fib2' was never used; consider replacing with '_' or removing it\n\
    \    var fib2: Int = 0\n        ^~~~\n        _\n/tmp/tmpcagixkwl.swift:18:9:\
    \ warning: variable 'fib2_found' was never used; consider replacing with '_' or\
    \ removing it\n    var fib2_found: Bool = false\n        ^~~~~~~~~~\n        _\n\
    /tmp/tmpcagixkwl.swift:19:9: warning: variable 'fib3' was never used; consider\
    \ replacing with '_' or removing it\n    var fib3: Int = 0\n        ^~~~\n   \
    \     _\n/tmp/tmpcagixkwl.swift:20:9: warning: variable 'fib3_found' was never\
    \ used; consider replacing with '_' or removing it\n    var fib3_found: Bool =\
    \ false\n        ^~~~~~~~~~\n        _\n/tmp/tmpcagixkwl.swift:21:9: warning:\
    \ variable 'fib4' was never used; consider replacing with '_' or removing it\n\
    \    var fib4: Int = 0\n        ^~~~\n        _\n/tmp/tmpcagixkwl.swift:22:9:\
    \ warning: variable 'fib4_found' was never used; consider replacing with '_' or\
    \ removing it\n    var fib4_found: Bool = false\n        ^~~~~~~~~~\n        _\n\
    /tmp/tmpcagixkwl.swift:23:9: warning: variable 'fib5' was never used; consider\
    \ replacing with '_' or removing it\n    var fib5: Int = 0\n        ^~~~\n   \
    \     _\n/tmp/tmpcagixkwl.swift:24:9: warning: variable 'fib5_found' was never\
    \ used; consider replacing with '_' or removing it\n    var fib5_found: Bool =\
    \ false\n        ^~~~~~~~~~\n        _\n/tmp/tmpcagixkwl.swift:25:9: warning:\
    \ variable 'fib6' was never used; consider replacing with '_' or removing it\n\
    \    var "
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 0\n    var b = 1\n\
    \    var c = 0\n    var d = 1\n    var prime = 0\n    var nPrime = 0\n    var\
    \ nPrime2 = 0\n    var nPrime3 = 0\n    var nPrime4 = 0\n    var nPrime5 = 0\n\
    \    var nPrime6 = 0\n    var nPrime7 = 0\n    var nPrime8 = 0\n    var nPrime9\
    \ = 0\n    var nPrime10 = 0\n    var nPrime11 = 0\n    var nPrime12 = 0\n    var\
    \ nPrime13 = 0\n    var nPrime14 = 0\n    var nPrime15 = 0\n    var nPrime16 =\
    \ 0\n    var nPrime17 = 0\n    var nPrime18 = 0\n    var nPrime19 = 0\n    var\
    \ nPrime20 = 0\n    var nPrime21 = 0\n    var nPrime22 = 0\n    var nPrime23 =\
    \ 0\n    var nPrime24 = 0\n    var nPrime25 = 0\n    var nPrime26 = 0\n    var\
    \ nPrime27 = 0\n    var nPrime28 = 0\n    var nPrime29 = 0\n    var nPrime30 =\
    \ 0\n    var nPrime31 = 0\n    var nPrime32 = 0\n    var nPrime33 = 0\n    var\
    \ nPrime34 = 0\n    var nPrime35 = 0\n    var nPrime36 = 0\n    var nPrime37 =\
    \ 0\n    var nPrime38 = 0\n    var nPrime39 = 0\n    var nPrime40 = 0\n    var\
    \ nPrime41 = 0\n    var nPrime42 = 0\n    var nPrime43 = 0\n    var nPrime44 =\
    \ 0\n    var nPrime45 = 0\n    var nPrime46 = 0\n    var nPrime47 = 0\n    var\
    \ nPrime48 = 0\n    var nPrime49 = 0\n    var nPrime50 = 0\n    var nPrime51 =\
    \ 0\n    var nPrime52 = 0\n    var nPrime53 = 0\n    var nPrime54 = 0\n    var\
    \ nPrime55 = 0\n    var nPrime56 = 0\n    var nPrime57 = 0\n    var nPrime58 =\
    \ 0\n    var nPrime59 = 0\n    var nPrime60 = 0\n    var nPrime61 = 0\n    var\
    \ nPrime62 = 0\n    var nPrime63 = 0\n    var nPrime64 = 0\n    var nPrime65 =\
    \ 0\n    var nPrime66 = 0\n    var nPrime67 = 0\n    var nPrime68 = 0\n    var\
    \ nPrime69 = 0\n    var nPrime70 = 0\n    var nPri\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp698azjft.swift:89:9: error: type annotation missing in pattern\n\
    \    var nPri\n        ^\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    var fib_index: Int = 0\n   \
    \ var fib_index2: Int = 0\n    var fib_index3: Int = 0\n    var fib_index4: Int\
    \ = 0\n    var fib_index5: Int = 0\n    var fib_index6: Int = 0\n    var fib_index7:\
    \ Int = 0\n    var fib_index8: Int = 0\n    var fib_index9: Int = 0\n    var fib_index10:\
    \ Int = 0\n    var fib_index11: Int = 0\n    var fib_index12: Int = 0\n    var\
    \ fib_index13: Int = 0\n    var fib_index14: Int = 0\n    var fib_index15: Int\
    \ = 0\n    var fib_index16: Int = 0\n    var fib_index17: Int = 0\n    var fib_index18:\
    \ Int = 0\n    var fib_index19: Int = 0\n    var fib_index20: Int = 0\n    var\
    \ fib_index21: Int = 0\n    var fib_index22: Int = 0\n    var fib_index23: Int\
    \ = 0\n    var fib_index24: Int = 0\n    var fib_index25: Int = 0\n    var fib_index26:\
    \ Int = 0\n    var fib_index27: Int = 0\n    var fib_index28: Int = 0\n    var\
    \ fib_index29: Int = 0\n    var fib_index30: Int = 0\n    var fib_index31: Int\
    \ = 0\n    var fib_index32: Int = 0\n    var fib_index33: Int = 0\n    var fib_index34:\
    \ Int = 0\n    var fib_index35: Int = 0\n    var fib_index36: Int = 0\n    var\
    \ fib_index37: Int = 0\n    var fib_index38: Int = 0\n    var fib_index39: Int\
    \ = 0\n    var fib_index40: Int = 0\n    var fib_index41: Int = 0\n    var fib_index42:\
    \ Int = 0\n    var fib_index43: Int = 0\n    var fib_index44: Int = 0\n    var\
    \ fib_index45: Int = 0\n    var fib_index46: Int = 0\n    var fib_index47: Int\
    \ = 0\n    var fib_index48: Int = 0\n    var fib_index49: Int = 0\n    var fib_index50:\
    \ Int = 0\n    var fib_index51: Int = 0\n    var fib_index52: Int = 0\n    var\
    \ fib_index53: Int = 0\n    var fib_index54: Int = 0\n    var fib_index55: Int\
    \ = 0\n    var fib_index56: Int = 0\n    var fib_index57: Int = 0\n    var fib_index58:\
    \ Int = 0\n    var fib_index59: Int = 0\n    var fib_index60: Int = 0\n    var\
    \ fib_index61: Int = 0\n    var fib_index62: Int = 0\n    var \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp1st0uj6u.swift:79:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp1st0uj6u.swift:14:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp1st0uj6u.swift:15:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmp1st0uj6u.swift:16:9: warning: variable 'prime_found'\
    \ was never used; consider replacing with '_' or removing it\n    var prime_found:\
    \ Bool = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:17:9: warning:\
    \ variable 'fib_index' was never used; consider replacing with '_' or removing\
    \ it\n    var fib_index: Int = 0\n        ^~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:18:9:\
    \ warning: variable 'fib_index2' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index2: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:19:9:\
    \ warning: variable 'fib_index3' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index3: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:20:9:\
    \ warning: variable 'fib_index4' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index4: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:21:9:\
    \ warning: variable 'fib_index5' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index5: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:22:9:\
    \ warning: variable 'fib_index6' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index6: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:23:9:\
    \ warning: variable 'fib_index7' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index7: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:24:9:\
    \ warning: variable 'fib_index8' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index8: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:25:9:\
    \ warning: variable 'fib_index9' was never us"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1198697\n    }\n    if n == 32 {\n  \
    \      return 1662173\n    }\n    if n == 33 {\n        return 2861301\n    }\n\
    \    if n == 34 {\n        return 4115301\n    }\n    if n == 35 {\n        return\
    \ 5657648\n    }\n    if n == 36 {\n        return 8235431\n    }\n    if n ==\
    \ 37 {\n        return 10646619\n    }\n    if n == 38 {\n        return 14260626\n\
    \    }\n    if n == 39 {\n        return 18311055\n    }\n    if n == 40 {\n \
    \       return 21474638\n    }\n    if n == 41 {\n        return 26076893\n  \
    \  }\n    if n == 42 {\n        return 30514229\n    }\n    if n == 43 {\n   \
    \     return 36646619\n    }\n    if n == 44 {\n        return 418311055\n   \
    \ }\n    if n == 45 {\n        return 46656371\n    }\n    if n == \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: '/tmp/tmpq6c35ozi.swift:150:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1311569\n    }\n    if n == 32 {\n  \
    \      return 1922396\n    }\n    if n == 33 {\n        return 3175118\n    }\n\
    \    if n == 34 {\n        return 514229\n    }\n    if n == 35 {\n        return\
    \ 765571\n    }\n    if n == 36 {\n        return 1311569\n    }\n    if n ==\
    \ 37 {\n        return 1922396\n    }\n    if n == 38 {\n        return 3175118\n\
    \    }\n    if n == 39 {\n        return 514229\n    }\n    if n == 40 {\n   \
    \     return 765571\n    }\n    if n == 41 {\n        return 1311569\n    }\n\
    \    if n == 42 {\n        return 1922396\n    }\n    if n == 43 {\n        return\
    \ 3175118\n    }\n    if n == 44 {\n        return 514229\n    }\n    if n ==\
    \ 45 {\n        return 765571\n    }\n    if n == 46 {\n        return 1311569\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpbxub3zzi.swift:176:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpbxub3zzi.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpbxub3zzi.swift:155:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 2\n\
    \    var c = 2\n    var d = 2\n    var n = 0\n    var prime = 0\n    var fib =\
    \ 0\n    while n < n {\n        prime = 1\n        fib = 0\n        while fib\
    \ < n {\n            fib += a\n            if fib > n {\n                fib -=\
    \ n\n            }\n            if fib == 0 {\n                prime = 0\n   \
    \             break\n            }\n            a += b\n            b += c\n \
    \           c += d\n            d += a\n        }\n        if prime == 1 {\n \
    \           n += 1\n        }\n    }\n    return fib\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmp_xzo780b/tmp_xzo780b.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc84cfbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc849f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc849f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc849f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_xzo780b                        0x000055c98d6911b8 <unavailable> + 4536

    5    libc.so.6                          0x00002acc84ee7460 __libc_start_main +
    245

    6    tmp_xzo780b                        0x000055c98d690e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let primes = [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97]\n    let prime = primes[Int(arc4random_uniform(UInt32(primes.count)))]\n\
    \    let fibs = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610,\
    \ 987, 1597, 2584, 4181, 6765, 10943, 17711, 28657, 46368, 75025, 121393, 196418,\
    \ 317811, 514229, 832040, 1346269, 2178309, 3524578]\n    let fib = fibs[Int(arc4random_uniform(UInt32(fibs.count)))]\n\
    \    return prime + fib * n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpoctui_io.swift:15:28: error: cannot find 'arc4random_uniform' in\
    \ scope\n    let prime = primes[Int(arc4random_uniform(UInt32(primes.count)))]\n\
    \                           ^~~~~~~~~~~~~~~~~~\n/tmp/tmpoctui_io.swift:17:24:\
    \ error: cannot find 'arc4random_uniform' in scope\n    let fib = fibs[Int(arc4random_uniform(UInt32(fibs.count)))]\n\
    \                       ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    var fib_index: Int = 0\n   \
    \ var fib_index2: Int = 0\n    var fib_index3: Int = 0\n    var fib_index4: Int\
    \ = 0\n    var fib_index5: Int = 0\n    var fib_index6: Int = 0\n    var fib_index7:\
    \ Int = 0\n    var fib_index8: Int = 0\n    var fib_index9: Int = 0\n    var fib_index10:\
    \ Int = 0\n    var fib_index11: Int = 0\n    var fib_index12: Int = 0\n    var\
    \ fib_index13: Int = 0\n    var fib_index14: Int = 0\n    var fib_index15: Int\
    \ = 0\n    var fib_index16: Int = 0\n    var fib_index17: Int = 0\n    var fib_index18:\
    \ Int = 0\n    var fib_index19: Int = 0\n    var fib_index20: Int = 0\n    var\
    \ fib_index21: Int = 0\n    var fib_index22: Int = 0\n    var fib_index23: Int\
    \ = 0\n    var fib_index24: Int = 0\n    var fib_index25: Int = 0\n    var fib_index26:\
    \ Int = 0\n    var fib_index27: Int = 0\n    var fib_index28: Int = 0\n    var\
    \ fib_index29: Int = 0\n    var fib_index30: Int = 0\n    var fib_index31: Int\
    \ = 0\n    var fib_index32: Int = 0\n    var fib_index33: Int = 0\n    var fib_index34:\
    \ Int = 0\n    var fib_index35: Int = 0\n    var fib_index36: Int = 0\n    var\
    \ fib_index37: Int = 0\n    var fib_index38: Int = 0\n    var fib_index39: Int\
    \ = 0\n    var fib_index40: Int = 0\n    var fib_index41: Int = 0\n    var fib_index42:\
    \ Int = 0\n    var fib_index43: Int = 0\n    var fib_index44: Int = 0\n    var\
    \ fib_index45: Int = 0\n    var fib_index46: Int = 0\n    var fib_index47: Int\
    \ = 0\n    var fib_index48: Int = 0\n    var fib_index49: Int = 0\n    var fib_index50:\
    \ Int = 0\n    var fib_index51: Int = 0\n    var fib_index52: Int = 0\n    var\
    \ fib_index53: Int = 0\n    var fib_index54: Int = 0\n    var fib_index55: Int\
    \ = 0\n    var fib_index56: Int = 0\n    var fib_index57: Int = 0\n    var fib_index58:\
    \ Int = 0\n    var fib_index59: Int = 0\n    var fib_index60: Int = 0\n    var\
    \ fib_index61: Int = 0\n    var fib_index62: Int = 0\n    var \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp1st0uj6u.swift:79:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp1st0uj6u.swift:14:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp1st0uj6u.swift:15:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmp1st0uj6u.swift:16:9: warning: variable 'prime_found'\
    \ was never used; consider replacing with '_' or removing it\n    var prime_found:\
    \ Bool = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:17:9: warning:\
    \ variable 'fib_index' was never used; consider replacing with '_' or removing\
    \ it\n    var fib_index: Int = 0\n        ^~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:18:9:\
    \ warning: variable 'fib_index2' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index2: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:19:9:\
    \ warning: variable 'fib_index3' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index3: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:20:9:\
    \ warning: variable 'fib_index4' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index4: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:21:9:\
    \ warning: variable 'fib_index5' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index5: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:22:9:\
    \ warning: variable 'fib_index6' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index6: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:23:9:\
    \ warning: variable 'fib_index7' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index7: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:24:9:\
    \ warning: variable 'fib_index8' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index8: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:25:9:\
    \ warning: variable 'fib_index9' was never us"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1311569\n    }\n    if n == 32 {\n  \
    \      return 1922396\n    }\n    if n == 33 {\n        return 3175118\n    }\n\
    \    if n == 34 {\n        return 514229\n    }\n    if n == 35 {\n        return\
    \ 765571\n    }\n    if n == 36 {\n        return 1311569\n    }\n    if n ==\
    \ 37 {\n        return 1922396\n    }\n    if n == 38 {\n        return 3175118\n\
    \    }\n    if n == 39 {\n        return 514229\n    }\n    if n == 40 {\n   \
    \     return 765571\n    }\n    if n == 41 {\n        return 1311569\n    }\n\
    \    if n == 42 {\n        return 1922396\n    }\n    if n == 43 {\n        return\
    \ 3175118\n    }\n    if n == 44 {\n        return 514229\n    }\n    if n ==\
    \ 45 {\n        return 765571\n    }\n    if n == 46 {\n        return 1311569\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpbxub3zzi.swift:176:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpbxub3zzi.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpbxub3zzi.swift:155:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 2\n    var b = 1\n    for _ in 0..<n {\n        let c\
    \ = a + b\n        a = b\n        b = c\n    }\n    return b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpehgnkx3d/tmpehgnkx3d.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1a65cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1a62c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1a62c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1a62c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpehgnkx3d                        0x000055840b027338 <unavailable> + 4920

    5    libc.so.6                          0x00002af1a67ba460 __libc_start_main +
    245

    6    tmpehgnkx3d                        0x000055840b026fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 1\n    var prime:\
    \ Int = 2\n    for _ in 0..<n {\n        fib = fib + (prime - 1)\n        prime\
    \ = prime + 2\n    }\n    return fib\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmp70hyt5x2/tmp70hyt5x2.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b96703c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b963fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b963fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b963f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp70hyt5x2                        0x0000559d0dfb53b3 <unavailable> + 5043

    5    libc.so.6                          0x00002b0b968ef460 __libc_start_main +
    245

    6    tmp70hyt5x2                        0x0000559d0dfb4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013703
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 2\n    var b = 1\n    for _ in 0..<n {\n        var c\
    \ = a + b\n        a = b\n        b = c\n    }\n    return b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpg8s9t73k/tmpg8s9t73k.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad47e894c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad47e58bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad47e58b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad47e58a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8s9t73k                        0x00005587fc657338 <unavailable> + 4920

    5    libc.so.6                          0x00002ad47ea80460 __libc_start_main +
    245

    6    tmpg8s9t73k                        0x00005587fc656fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013703
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 2\n    var b = 2\n    for _ in 0..<n {\n        let c\
    \ = a + b\n        a = b\n        b = c\n    }\n    return b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpgz1wpzem/tmpgz1wpzem.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b099bfedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b099bce4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b099bce4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b099bce37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgz1wpzem                        0x00005557c1a66338 <unavailable> + 4920

    5    libc.so.6                          0x00002b099c1d9460 __libc_start_main +
    245

    6    tmpgz1wpzem                        0x00005557c1a65fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    for _ in 0..<n {\n        c = a + b\n        a = b\n     \
    \   b = c\n    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpum2yqzhb/tmpum2yqzhb.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a7d695c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a7d38cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a7d38c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a7d38b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpum2yqzhb                        0x000056003397e338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8a7d881460 __libc_start_main +
    245

    6    tmpum2yqzhb                        0x000056003397dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1341459\n    }\n    if n == 32 {\n  \
    \      return 2178309\n    }\n    if n == 33 {\n        return 3524578\n    }\n\
    \    if n == 34 {\n        return 5702887\n    }\n    if n == 35 {\n        return\
    \ 7168097\n    }\n    if n == 36 {\n        return 9259307\n    }\n    if n ==\
    \ 37 {\n        return 11536457\n    }\n    if n == 38 {\n        return 13879515\n\
    \    }\n    if n == 39 {\n        return 16196091\n    }\n    if n == 40 {\n \
    \       return 19397772\n    }\n    if n == 41 {\n        return 22262821\n  \
    \  }\n    if n == 42 {\n        return 24993804\n    }\n    if n == 43 {\n   \
    \     return 27478795\n    }\n    if n == 44 {\n        return 30358707\n    }\n\
    \    if n == 45 {\n        return 33170695\n    }\n    if n == 46 {\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpqwbcmo9y.swift:174:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpqwbcmo9y.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpqwbcmo9y.swift:153:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var result = 1\n    var prime\
    \ = 2\n    var fib = 1\n    for _ in 0..<n {\n        fib += prime\n        if\
    \ fib > result {\n            result = fib\n        }\n        prime = prime *\
    \ 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpocgtb0in/tmpocgtb0in.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57b1f62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57b1c59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57b1c59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57b1c587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocgtb0in                        0x000055e5d83c8338 <unavailable> + 4920

    5    libc.so.6                          0x00002b57b214e460 __libc_start_main +
    245

    6    tmpocgtb0in                        0x000055e5d83c7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: [[Int]] = [[1, 1],\
    \ [1, 2]]\n    for i in 1..n {\n        fib[0][1] = fib[1][0]\n        fib[1][0]\
    \ = fib[0][1] + fib[1][1]\n    }\n    return fib[n][0]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpg3evwe85.swift:15:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..n {\n              ^~\n              ...\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 1\n    var prime:\
    \ Int = 2\n    var prime_found: Bool = false\n    var i: Int = 0\n    var j: Int\
    \ = 0\n    var k: Int = 0\n    var fib2: Int = 0\n    var fib3: Int = 0\n    var\
    \ fib4: Int = 0\n    var fib5: Int = 0\n    var fib6: Int = 0\n    var fib7: Int\
    \ = 0\n    var fib8: Int = 0\n    var fib9: Int = 0\n    var fib10: Int = 0\n\
    \    var fib11: Int = 0\n    var fib12: Int = 0\n    var fib13: Int = 0\n    var\
    \ fib14: Int = 0\n    var fib15: Int = 0\n    var fib16: Int = 0\n    var fib17:\
    \ Int = 0\n    var fib18: Int = 0\n    var fib19: Int = 0\n    var fib20: Int\
    \ = 0\n    var fib21: Int = 0\n    var fib22: Int = 0\n    var fib23: Int = 0\n\
    \    var fib24: Int = 0\n    var fib25: Int = 0\n    var fib26: Int = 0\n    var\
    \ fib27: Int = 0\n    var fib28: Int = 0\n    var fib29: Int = 0\n    var fib30:\
    \ Int = 0\n    var fib31: Int = 0\n    var fib32: Int = 0\n    var fib33: Int\
    \ = 0\n    var fib34: Int = 0\n    var fib35: Int = 0\n    var fib36: Int = 0\n\
    \    var fib37: Int = 0\n    var fib38: Int = 0\n    var fib39: Int = 0\n    var\
    \ fib40: Int = 0\n    var fib41: Int = 0\n    var fib42: Int = 0\n    var fib43:\
    \ Int = 0\n    var fib44: Int = 0\n    var fib45: Int = 0\n    var fib46: Int\
    \ = 0\n    var fib47: Int = 0\n    var fib48: Int = 0\n    var fib49: Int = 0\n\
    \    var fib50: Int = 0\n    var fib51: Int = 0\n    var fib52: Int = 0\n    var\
    \ fib53: Int = 0\n    var fib54: Int = 0\n    var fib55: Int = 0\n    var fib56:\
    \ Int = 0\n    var fib57: Int = 0\n    var fib58: Int = 0\n    var fib59: Int\
    \ = 0\n    var fib60: Int = 0\n    var fib61: Int = 0\n    var fib62: Int = 0\n\
    \    var fib63: Int = 0\n    var fib64: Int = 0\n    var fib65: Int = 0\n    var\
    \ fib66: Int = 0\n    var fib67: Int = 0\n    var fib68: Int = 0\n    var fib69:\
    \ Int = 0\n    var fib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpahnbx795.swift:88:9: error: type annotation missing in pattern\n\
    \    var fib\n        ^\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2) + prime_fib(n - 3) + prime_fib(n - 4)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpgaz1tayj.swift:24:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpgaz1tayj.swift:24:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpgaz1tayj.swift:27:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpgaz1tayj.swift:27:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpgaz1tayj.swift:27:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpgaz1tayj.swift:29:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n -\
    \ 3) + prime_fib(n - 4)\n                     ^\n                     n: \n/tmp/tmpgaz1tayj.swift:29:41:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3) + prime_fib(n - 4)\n                               \
    \         ^\n                                        n: \n/tmp/tmpgaz1tayj.swift:29:60:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3) + prime_fib(n - 4)\n                               \
    \                            ^\n                                             \
    \              n: \n/tmp/tmpgaz1tayj.swift:29:79: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n -\
    \ 3) + prime_fib(n - 4)\n                                                 "
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1198643\n    }\n    if n == 32 {\n  \
    \      return 1672865\n    }\n    if n == 33 {\n        return 2679141\n    }\n\
    \    if n == 34 {\n        return 4337867\n    }\n    if n == 35 {\n        return\
    \ 6963365\n    }\n    if n == 36 {\n        return 11356415\n    }\n    if n ==\
    \ 37 {\n        return 17004875\n    }\n    if n == 38 {\n        return 21872721\n\
    \    }\n    if n == 39 {\n        return 28366463\n    }\n    if n == 40 {\n \
    \       return 36543521\n    }\n    if n == 41 {\n        return 44939819\n  \
    \  }\n    if n == 42 {\n        return 5941041\n    }\n    if n == 43 {\n    \
    \    return 7048739\n    }\n    if n == 44 {\n        return 8663119\n    }\n\
    \    if n == 45 {\n        return 10606687\n    }\n    if n == 46 {\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8bnbxrh0.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp8bnbxrh0.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp8bnbxrh0.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: Int = Int(pow(Double(n),\
    \ Double(1.0 / 2.0)))\n    if fib <= 1 {\n        return fib\n    }\n    if fib\
    \ <= 3 {\n        return fib\n    }\n    if fib <= 5 {\n        return fib\n \
    \   }\n    if fib <= 7 {\n        return fib\n    }\n    if fib <= 9 {\n     \
    \   return fib\n    }\n    if fib <= 11 {\n        return fib\n    }\n    if fib\
    \ <= 13 {\n        return fib\n    }\n    if fib <= 17 {\n        return fib\n\
    \    }\n    if fib <= 19 {\n        return fib\n    }\n    if fib <= 23 {\n  \
    \      return fib\n    }\n    if fib <= 29 {\n        return fib\n    }\n    if\
    \ fib <= 37 {\n        return fib\n    }\n    if fib <= 43 {\n        return fib\n\
    \    }\n    if fib <= 59 {\n        return fib\n    }\n    if fib <= 73 {\n  \
    \      return fib\n    }\n    if fib <= 89 {\n        return fib\n    }\n    if\
    \ fib <= 109 {\n        return fib\n    }\n    if fib <= 127 {\n        return\
    \ fib\n    }\n    if fib <= 147 {\n        return fib\n    }\n    if fib <= 153\
    \ {\n        return fib\n    }\n    if fib <= 161 {\n        return fib\n    }\n\
    \    if fib <= 179 {\n        return fib\n    }\n    if fib <= 191 {\n       \
    \ return fib\n    }\n    if fib <= 199 {\n        return fib\n    }\n    if fib\
    \ <= 211 {\n        return fib\n    }\n    if fib <= 223 {\n        return fib\n\
    \    }\n    if fib <= 227 {\n        return fib\n    }\n    if fib <= 229 {\n\
    \        return fib\n    }\n    if fib <= 233 {\n        return fib\n    }\n \
    \   if fib <= 239 {\n        return fib\n    }\n    if fib <= 243 {\n        return\
    \ fib\n    }\n    if fib <= 251 {\n        return fib\n    }\n    if fib <= 253\
    \ {\n        return fib\n    }\n    if fib <= 255 {\n        return fib\n    }\n\
    \    return fib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpbvzgcmim.swift:14:24: error: cannot find 'pow' in scope\n    let\
    \ fib: Int = Int(pow(Double(n), Double(1.0 / 2.0)))\n                       ^~~\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    var a = 2\n    var b = 2\n    var c = 2\n    var d = 2\n    var\
    \ e = 2\n    var f = 1\n    var g = 2\n    var h = 2\n    var i = 2\n    var j\
    \ = 2\n    var k = 2\n    var l = 1\n    var m = 2\n    var n = 2\n    var o =\
    \ 2\n    var p = 1\n    var q = 2\n    var r = 2\n    var s = 2\n    var t = 2\n\
    \    var u = 2\n    var v = 2\n    var w = 1\n    var x = 2\n    var y = 2\n \
    \   var z = 2\n    var a = 2\n    var b = 2\n    var c = 2\n    var d = 2\n  \
    \  var e = 2\n    var f = 1\n    var g = 2\n    var h = 2\n    var i = 2\n   \
    \ var j = 2\n    var k = 2\n    var l = 1\n    var m = 2\n    var n = 2\n    var\
    \ o = 2\n    var p = 1\n    var q = 2\n    var r = 2\n    var s = 2\n    var t\
    \ = 2\n    var u = 2\n    var v = 2\n    var w = 1\n    var x = 2\n    var y =\
    \ 2\n    var z = 2\n    var a = 2\n    var b = 2\n    var c = 2\n    var d = 2\n\
    \    var e = 2\n    var f = 1\n    var g = 2\n    var h = 2\n    var i = 2\n \
    \   var j = 2\n    var k = 2\n    var l = 1\n    var m = 2\n    var n = 2\n  \
    \  var o = 2\n    var p = 1\n    var q = 2\n    var r = 2\n    var s = 2\n   \
    \ var t = 2\n    var u = 2\n    var v = 2\n    var w = 1\n    var x = 2\n    var\
    \ y = 2\n    var z = 2\n    var a = 2\n    var b = 2\n    var c = 2\n    var d\
    \ = 2\n    var e = 2\n    var f = 1\n    var g = 2\n    var h = 2\n    var i =\
    \ 2\n    var j = 2\n    var k = 2\n    var l = 1\n    var m = 2\n    var n = 2\n\
    \    var o = 2\n    var p = 1\n    var q = 2\n    var r = 2\n    var s = 2\n \
    \   var t = 2\n    var u = 2\n    var v = 2\n    var w = 1\n    var x = 2\n  \
    \  var y = 2\n    var z = 2\n    var a = 2\n    var b = 2\n    var c = 2\n   \
    \ var d = 2\n    var e = 2\n    var f = 1\n    var g = 2\n    var h = 2\n    var\
    \ i = 2\n    var j = 2\n    var k = 2\n    var l = 1\n    var m = 2\n    var n\
    \ = 2\n    var o = 2\n    var p = 1\n    var q = 2\n    var r = 2\n    var s =\
    \ 2\n    var t = 2\n    var u = 2\n    var v = \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp32hsukmm.swift:142:12: error: expected initial value after '='\n\
    \    var v = \n           ^\n/tmp/tmp32hsukmm.swift:43:9: error: invalid redeclaration\
    \ of 'a'\n    var a = 2\n        ^\n/tmp/tmp32hsukmm.swift:17:9: note: 'a' previously\
    \ declared here\n    var a = 2\n        ^\n/tmp/tmp32hsukmm.swift:44:9: error:\
    \ invalid redeclaration of 'b'\n    var b = 2\n        ^\n/tmp/tmp32hsukmm.swift:18:9:\
    \ note: 'b' previously declared here\n    var b = 2\n        ^\n/tmp/tmp32hsukmm.swift:45:9:\
    \ error: invalid redeclaration of 'c'\n    var c = 2\n        ^\n/tmp/tmp32hsukmm.swift:19:9:\
    \ note: 'c' previously declared here\n    var c = 2\n        ^\n/tmp/tmp32hsukmm.swift:46:9:\
    \ error: invalid redeclaration of 'd'\n    var d = 2\n        ^\n/tmp/tmp32hsukmm.swift:20:9:\
    \ note: 'd' previously declared here\n    var d = 2\n        ^\n/tmp/tmp32hsukmm.swift:47:9:\
    \ error: invalid redeclaration of 'e'\n    var e = 2\n        ^\n/tmp/tmp32hsukmm.swift:21:9:\
    \ note: 'e' previously declared here\n    var e = 2\n        ^\n/tmp/tmp32hsukmm.swift:48:9:\
    \ error: invalid redeclaration of 'f'\n    var f = 1\n        ^\n/tmp/tmp32hsukmm.swift:22:9:\
    \ note: 'f' previously declared here\n    var f = 1\n        ^\n/tmp/tmp32hsukmm.swift:49:9:\
    \ error: invalid redeclaration of 'g'\n    var g = 2\n        ^\n/tmp/tmp32hsukmm.swift:23:9:\
    \ note: 'g' previously declared here\n    var g = 2\n        ^\n/tmp/tmp32hsukmm.swift:50:9:\
    \ error: invalid redeclaration of 'h'\n    var h = 2\n        ^\n/tmp/tmp32hsukmm.swift:24:9:\
    \ note: 'h' previously declared here\n    var h = 2\n        ^\n/tmp/tmp32hsukmm.swift:51:9:\
    \ error: invalid redeclaration of 'i'\n    var i = 2\n        ^\n/tmp/tmp32hsukmm.swift:25:9:\
    \ note: 'i' previously declared here\n    var i = 2\n        ^\n/tmp/tmp32hsukmm.swift:52:9:\
    \ error: invalid redeclaration of 'j'\n    var j = 2\n        ^\n/tmp/tmp32hsukmm.swift:26:9:\
    \ note: 'j' previously declared here\n    var j = 2\n        ^\n/tmp/tmp32hsukmm.swift:53:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 2\n        ^\n/tmp/tmp32hsukmm.swift:27:9:\
    \ note: 'k' previously declared here\n    var k = 2\n        ^\n/tmp"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let result = 1\n    var i =\
    \ 2\n    while i <= n {\n        if isPrime(i) {\n            result += i\n  \
    \      }\n        i += 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpl0v12nq9.swift:17:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(i) {\n           ^~~~~~~\n/tmp/tmpl0v12nq9.swift:18:20: error:\
    \ left side of mutating operator isn't mutable: 'result' is a 'let' constant\n\
    \            result += i\n            ~~~~~~ ^\n/tmp/tmpl0v12nq9.swift:14:5: note:\
    \ change 'let' to 'var' to make it mutable\n    let result = 1\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1199231\n    }\n    if n == 32 {\n  \
    \      return 1655801\n    }\n    if n == 33 {\n        return 2189311\n    }\n\
    \    if n == 34 {\n        return 2867671\n    }\n    if n == 35 {\n        return\
    \ 4258113\n    }\n    if n == 36 {\n        return 5702881\n    }\n    if n ==\
    \ 37 {\n        return 7168021\n    }\n    if n == 38 {\n        return 9263351\n\
    \    }\n    if n == 39 {\n        return 11878421\n    }\n    if n == 40 {\n \
    \       return 15176451\n    }\n    if n == 41 {\n        return 18350081\n  \
    \  }\n    if n == 42 {\n        return 21375051\n    }\n    if n == 43 {\n   \
    \     return 24990081\n    }\n    if n == 44 {\n        return 28540051\n    }\n\
    \    if n == 45 {\n        return 32250081\n    }\n    if n == 46 {\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpvzjm08bc.swift:174:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpvzjm08bc.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpvzjm08bc.swift:153:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1188723\n    }\n    if n == 32 {\n  \
    \      return 1819878\n    }\n    if n == 33 {\n        return 3038976\n    }\n\
    \    if n == 34 {\n        return 5574771\n    }\n    if n == 35 {\n        return\
    \ 8128000\n    }\n    if n == 36 {\n        return 12610990\n    }\n    if n ==\
    \ 37 {\n        return 18721393\n    }\n    if n == 38 {\n        return 25204450\n\
    \    }\n    if n == 39 {\n        return 39514587\n    }\n    if n == 40 {\n \
    \       return 56040313\n    }\n    if n == 41 {\n        return 67655747\n  \
    \  }\n    if n == 42 {\n        return 91415251\n    }\n    if n == 43 {\n   \
    \     return 106950576\n    }\n    if n == 44 {\n        return 130417787\n  \
    \  }\n    if n == 45 {\n        return 152965294\n    }\n    if n == 46\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp68ygfpu5.swift:149:15: error: expected '{' after 'if' condition\n\
    \    if n == 46\n              ^\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1304969\n    }\n    if n == 32 {\n  \
    \      return 1922396\n    }\n    if n == 33 {\n        return 3170786\n    }\n\
    \    if n == 34 {\n        return 514229\n    }\n    if n == 35 {\n        return\
    \ 765571\n    }\n    if n == 36 {\n        return 1304969\n    }\n    if n ==\
    \ 37 {\n        return 1922396\n    }\n    if n == 38 {\n        return 3170786\n\
    \    }\n    if n == 39 {\n        return 514229\n    }\n    if n == 40 {\n   \
    \     return 765571\n    }\n    if n == 41 {\n        return 1304969\n    }\n\
    \    if n == 42 {\n        return 1922396\n    }\n    if n == 43 {\n        return\
    \ 3170786\n    }\n    if n == 44 {\n        return 514229\n    }\n    if n ==\
    \ 45 {\n        return 765571\n    }\n    if n == 46 {\n        return 1304969\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmptnithmcg.swift:176:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmptnithmcg.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmptnithmcg.swift:155:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: Int = Int(pow(Double(n),\
    \ 1.0 / Double(2)))\n    if fib == Int(fib) {\n        return fib\n    }\n   \
    \ if fib == Int(fib) {\n        return fib\n    }\n    if fib == Int(fib) {\n\
    \        return fib\n    }\n    if fib == Int(fib) {\n        return fib\n   \
    \ }\n    if fib == Int(fib) {\n        return fib\n    }\n    if fib == Int(fib)\
    \ {\n        return fib\n    }\n    if fib == Int(fib) {\n        return fib\n\
    \    }\n    if fib == Int(fib) {\n        return fib\n    }\n    if fib == Int(fib)\
    \ {\n        return fib\n    }\n    if fib == Int(fib) {\n        return fib\n\
    \    }\n    if fib == Int(fib) {\n        return fib\n    }\n    if fib == Int(fib)\
    \ {\n        return fib\n    }\n    if fib == Int(fib) {\n        return fib\n\
    \    }\n    if fib == Int(fib) {\n        return fib\n    }\n    if fib == Int(fib)\
    \ {\n        return fib\n    }\n    if fib == Int(fib) {\n        return fib\n\
    \    }\n    if fib == Int(fib) {\n        return fib\n    }\n    if fib == Int(fib)\
    \ {\n        return fib\n    }\n    if fib == Int(fib) {\n        return fib\n\
    \    }\n    if fib == Int(fib) {\n        return fib\n    }\n    if fib == Int(fib)\
    \ {\n        return fib\n    }\n    if fib == Int(fib) {\n        return fib\n\
    \    }\n    if fib == Int(fib) {\n        return fib\n    }\n    if fib == Int(fib)\
    \ {\n        return fib\n    }\n    if fib == Int(fib) {\n        return fib\n\
    \    }\n    if fib == Int(fib) {\n        return fib\n    }\n    if fib == Int(fib)\
    \ {\n        return fib\n    }\n    if fib == Int(fib) {\n        return fib\n\
    \    }\n    if fib == Int(fib) {\n        return fib\n    }\n    if fib == Int(fib)\
    \ {\n        return fib\n    }\n    if fib == Int(fib) {\n        return fib\n\
    \    }\n    if fib == Int(fib) {\n        return fib\n    }\n    if fib == Int(fib)\
    \ {\n        return fib\n    }\n    if fib == Int(fib) {\n        return fib\n\
    \    }\n    if fib == Int(fib) {\n        return fib\n    }\n    if fib == Int(fib)\
    \ {\n        return fib\n    }\n    if fib == Int(fib) {\n        return fib\n\
    \    }\n    if fib == Int(fib) {\n        return fib\n    }\n    if fib == Int(fib)\
    \ {\n        return fib\n    }\n    if fib == Int(fib) {\n        return fib\n\
    \    }\n    if fib == Int(fib) {\n        return fib\n    }\n    if fib == Int(fi\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmps71b41nt.swift:139:1: error: expected ')' in expression list\n\
    }\n^\n/tmp/tmps71b41nt.swift:138:18: note: to match this opening '('\n    if fib\
    \ == Int(fi\n                 ^\n/tmp/tmps71b41nt.swift:14:24: error: cannot find\
    \ 'pow' in scope\n    let fib: Int = Int(pow(Double(n), 1.0 / Double(2)))\n  \
    \                     ^~~\n/tmp/tmps71b41nt.swift:138:19: error: cannot find 'fi'\
    \ in scope\n    if fib == Int(fi\n                  ^~\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var result: Int = 0\n    for _ in 0..<n {\n        fib += prime\n\
    \        prime = fib\n        fib += prime\n    }\n    result = fib\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpwlur4ak6/tmpwlur4ak6.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49420bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4941db1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4941db1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4941db07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwlur4ak6                        0x0000560b17e84338 <unavailable> + 4920

    5    libc.so.6                          0x00002b49422a6460 __libc_start_main +
    245

    6    tmpwlur4ak6                        0x0000560b17e83fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    var d = 1\n    var nPrime = 0\n    var nFib = n\n    var nFibPrime\
    \ = 0\n    var nFibPrimeFib = nFib\n    var nFibPrimeFibPrime = 0\n    var nFibPrimeFibPrimeFib\
    \ = nFibPrimeFib\n    var nFibPrimeFibPrimeFibPrime = 0\n    var nFibPrimeFibPrimeFibPrimeFib\
    \ = nFibPrimeFibPrimeFibPrime\n    var nFibPrimeFibPrimeFibPrimeFibPrime = 0\n\
    \    var nFibPrimeFibPrimeFibPrimeFibPrimeFib = nFibPrimeFibPrimeFibPrimeFibPrimeFib\n\
    \    var nFibPrimeFibPrimeFibPrimeFibPrimeFibPrime = 0\n    var nFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFib\
    \ = nFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrime\n    var nFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrime\
    \ = 0\n    var nFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFib = nFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrime\n\
    \    var nFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrime = 0\n    var\
    \ nFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFib = nFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrime\n\
    \    var nFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFib\
    \ = 0\n    var nFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFib\
    \ = nFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPri\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpothub5al.swift:27:48: error: use of local variable 'nFibPrimeFibPrimeFibPrimeFibPrimeFib'\
    \ before its declaration\n    var nFibPrimeFibPrimeFibPrimeFibPrimeFib = nFibPrimeFibPrimeFibPrimeFibPrimeFib\n\
    \                                               ^\n/tmp/tmpothub5al.swift:27:9:\
    \ note: 'nFibPrimeFibPrimeFibPrimeFibPrimeFib' declared here\n    var nFibPrimeFibPrimeFibPrimeFibPrimeFib\
    \ = nFibPrimeFibPrimeFibPrimeFibPrimeFib\n        ^\n/tmp/tmpothub5al.swift:29:56:\
    \ error: use of local variable 'nFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrime'\
    \ before its declaration\n    var nFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFib\
    \ = nFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrime\n                      \
    \                                 ^\n/tmp/tmpothub5al.swift:30:9: note: 'nFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrime'\
    \ declared here\n    var nFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrime = 0\n\
    \        ^\n/tmp/tmpothub5al.swift:31:64: error: use of local variable 'nFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrime'\
    \ before its declaration\n    var nFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFib\
    \ = nFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrime\n              \
    \                                                 ^\n/tmp/tmpothub5al.swift:32:9:\
    \ note: 'nFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrime' declared here\n\
    \    var nFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrime = 0\n     \
    \   ^\n/tmp/tmpothub5al.swift:33:72: error: cannot find 'nFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrime'\
    \ in scope\n    var nFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFib\
    \ = nFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrime\n\
    \                                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpothub5al.swift:35:88: error: cannot find 'nFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrimeFibPrim"
  stdout: ''
  timestamp: 1660013703
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 2\n\
    \    var c = 2\n    var d = 0\n    var prime = 1\n    var result = 0\n    for\
    \ _ in 0..<n {\n        prime = 1\n        if b > a {\n            c = a + b\n\
    \            d = b - a\n            if c % d == 0 {\n                prime = 0\n\
    \            }\n        }\n        if prime == 1 {\n            result = c\n \
    \       }\n        a = b\n        b = c\n        c = d\n        d += 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpmefctdjx/tmpmefctdjx.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace0de0bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace0db02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace0db02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace0db017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmefctdjx                        0x000055f7c37a83b3 <unavailable> + 5043

    5    libc.so.6                          0x00002ace0dff7460 __libc_start_main +
    245

    6    tmpmefctdjx                        0x000055f7c37a7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let primes = [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97]\n    let prime = primes[n]\n    if prime > 100 {\n        return prime\n\
    \    }\n    if prime == 0 {\n        return 0\n    }\n    if prime == 1 {\n  \
    \      return 1\n    }\n    if prime % 2 == 0 {\n        return prime_fib(n -\
    \ 1) + prime_fib(n - 2)\n    }\n    if prime % 3 == 0 {\n        return prime_fib(n\
    \ - 1) + prime_fib(n - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n -\
    \ 1) + prime_fib(n - 2) + prime_fib(n - 3) + prime_fib(n - 4)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpvl5o55rx.swift:26:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpvl5o55rx.swift:26:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpvl5o55rx.swift:29:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpvl5o55rx.swift:29:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpvl5o55rx.swift:29:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpvl5o55rx.swift:31:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n -\
    \ 3) + prime_fib(n - 4)\n                     ^\n                     n: \n/tmp/tmpvl5o55rx.swift:31:41:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3) + prime_fib(n - 4)\n                               \
    \         ^\n                                        n: \n/tmp/tmpvl5o55rx.swift:31:60:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3) + prime_fib(n - 4)\n                               \
    \                            ^\n                                             \
    \              n: \n/tmp/tmpvl5o55rx.swift:31:79: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n -\
    \ 3) + prime_fib(n - 4)\n                                                 "
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime2: Int = 0\n    var prime3: Int = 0\n    var prime4: Int\
    \ = 0\n    var prime5: Int = 0\n    var prime6: Int = 0\n    var prime7: Int =\
    \ 0\n    var prime8: Int = 0\n    var prime9: Int = 0\n    var prime10: Int =\
    \ 0\n    var prime11: Int = 0\n    var prime12: Int = 0\n    var prime13: Int\
    \ = 0\n    var prime14: Int = 0\n    var prime15: Int = 0\n    var prime16: Int\
    \ = 0\n    var prime17: Int = 0\n    var prime18: Int = 0\n    var prime19: Int\
    \ = 0\n    var prime20: Int = 0\n    var prime21: Int = 0\n    var prime22: Int\
    \ = 0\n    var prime23: Int = 0\n    var prime24: Int = 0\n    var prime25: Int\
    \ = 0\n    var prime26: Int = 0\n    var prime27: Int = 0\n    var prime28: Int\
    \ = 0\n    var prime29: Int = 0\n    var prime30: Int = 0\n    var prime31: Int\
    \ = 0\n    var prime32: Int = 0\n    var prime33: Int = 0\n    var prime34: Int\
    \ = 0\n    var prime35: Int = 0\n    var prime36: Int = 0\n    var prime37: Int\
    \ = 0\n    var prime38: Int = 0\n    var prime39: Int = 0\n    var prime40: Int\
    \ = 0\n    var prime41: Int = 0\n    var prime42: Int = 0\n    var prime43: Int\
    \ = 0\n    var prime44: Int = 0\n    var prime45: Int = 0\n    var prime46: Int\
    \ = 0\n    var prime47: Int = 0\n    var prime48: Int = 0\n    var prime49: Int\
    \ = 0\n    var prime50: Int = 0\n    var prime51: Int = 0\n    var prime52: Int\
    \ = 0\n    var prime53: Int = 0\n    var prime54: Int = 0\n    var prime55: Int\
    \ = 0\n    var prime56: Int = 0\n    var prime57: Int = 0\n    var prime58: Int\
    \ = 0\n    var prime59: Int = 0\n    var prime60: Int = 0\n    var prime61: Int\
    \ = 0\n    var prime62: Int = 0\n    var prime63: Int = 0\n    var prime64: Int\
    \ = 0\n    var prime65: Int = 0\n    var prime66: Int = 0\n    var prime67: Int\
    \ = 0\n    var prime68: Int = 0\n    var prime69: Int = 0\n    var prime70: Int\
    \ = 0\n    var prime71: Int = 0\n    var prime72: Int = 0\n    var prime73: Int\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpm5vdqzo4.swift:14:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmpm5vdqzo4.swift:15:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:16:9: warning: variable 'prime2' was\
    \ never used; consider replacing with '_' or removing it\n    var prime2: Int\
    \ = 0\n        ^~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:17:9: warning: variable\
    \ 'prime3' was never used; consider replacing with '_' or removing it\n    var\
    \ prime3: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:18:9: warning:\
    \ variable 'prime4' was never used; consider replacing with '_' or removing it\n\
    \    var prime4: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:19:9:\
    \ warning: variable 'prime5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime5: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:20:9:\
    \ warning: variable 'prime6' was never used; consider replacing with '_' or removing\
    \ it\n    var prime6: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:21:9:\
    \ warning: variable 'prime7' was never used; consider replacing with '_' or removing\
    \ it\n    var prime7: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:22:9:\
    \ warning: variable 'prime8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime8: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:23:9:\
    \ warning: variable 'prime9' was never used; consider replacing with '_' or removing\
    \ it\n    var prime9: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:24:9:\
    \ warning: variable 'prime10' was never used; consider replacing with '_' or removing\
    \ it\n    var prime10: Int = 0\n        ^~~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:25:9:\
    \ warning: variable 'prime11' was never used; consider replacing with '_' or removing\
    \ it\n    var prime11: Int = 0\n        ^~~~~~~\n        _\n/tmp/tmpm5vdqzo4.swift:26:9:\
    \ warning: variable 'prime12' was never used; consider repl"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1199231\n    }\n    if n == 32 {\n  \
    \      return 1655801\n    }\n    if n == 33 {\n        return 2189311\n    }\n\
    \    if n == 34 {\n        return 2867671\n    }\n    if n == 35 {\n        return\
    \ 4258113\n    }\n    if n == 36 {\n        return 5702881\n    }\n    if n ==\
    \ 37 {\n        return 7168021\n    }\n    if n == 38 {\n        return 9263311\n\
    \    }\n    if n == 39 {\n        return 11878421\n    }\n    if n == 40 {\n \
    \       return 15449661\n    }\n    if n == 41 {\n        return 19132111\n  \
    \  }\n    if n == 42 {\n        return 22881811\n    }\n    if n == 43 {\n   \
    \     return 26419661\n    }\n    if n == 44 {\n        return 40960111\n    }\n\
    \    if n == 45 {\n        return 55742112\n    }\n    if n == \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: '/tmp/tmpzt8e2f04.swift:150:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    var fib_index: Int = 0\n   \
    \ var fib_index2: Int = 0\n    var fib_index3: Int = 0\n    var fib_index4: Int\
    \ = 0\n    var fib_index5: Int = 0\n    var fib_index6: Int = 0\n    var fib_index7:\
    \ Int = 0\n    var fib_index8: Int = 0\n    var fib_index9: Int = 0\n    var fib_index10:\
    \ Int = 0\n    var fib_index11: Int = 0\n    var fib_index12: Int = 0\n    var\
    \ fib_index13: Int = 0\n    var fib_index14: Int = 0\n    var fib_index15: Int\
    \ = 0\n    var fib_index16: Int = 0\n    var fib_index17: Int = 0\n    var fib_index18:\
    \ Int = 0\n    var fib_index19: Int = 0\n    var fib_index20: Int = 0\n    var\
    \ fib_index21: Int = 0\n    var fib_index22: Int = 0\n    var fib_index23: Int\
    \ = 0\n    var fib_index24: Int = 0\n    var fib_index25: Int = 0\n    var fib_index26:\
    \ Int = 0\n    var fib_index27: Int = 0\n    var fib_index28: Int = 0\n    var\
    \ fib_index29: Int = 0\n    var fib_index30: Int = 0\n    var fib_index31: Int\
    \ = 0\n    var fib_index32: Int = 0\n    var fib_index33: Int = 0\n    var fib_index34:\
    \ Int = 0\n    var fib_index35: Int = 0\n    var fib_index36: Int = 0\n    var\
    \ fib_index37: Int = 0\n    var fib_index38: Int = 0\n    var fib_index39: Int\
    \ = 0\n    var fib_index40: Int = 0\n    var fib_index41: Int = 0\n    var fib_index42:\
    \ Int = 0\n    var fib_index43: Int = 0\n    var fib_index44: Int = 0\n    var\
    \ fib_index45: Int = 0\n    var fib_index46: Int = 0\n    var fib_index47: Int\
    \ = 0\n    var fib_index48: Int = 0\n    var fib_index49: Int = 0\n    var fib_index50:\
    \ Int = 0\n    var fib_index51: Int = 0\n    var fib_index52: Int = 0\n    var\
    \ fib_index53: Int = 0\n    var fib_index54: Int = 0\n    var fib_index55: Int\
    \ = 0\n    var fib_index56: Int = 0\n    var fib_index57: Int = 0\n    var fib_index58:\
    \ Int = 0\n    var fib_index59: Int = 0\n    var fib_index60: Int = 0\n    var\
    \ fib_index61: Int = 0\n    var fib_index62: Int = 0\n    var \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp1st0uj6u.swift:79:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp1st0uj6u.swift:14:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp1st0uj6u.swift:15:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmp1st0uj6u.swift:16:9: warning: variable 'prime_found'\
    \ was never used; consider replacing with '_' or removing it\n    var prime_found:\
    \ Bool = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:17:9: warning:\
    \ variable 'fib_index' was never used; consider replacing with '_' or removing\
    \ it\n    var fib_index: Int = 0\n        ^~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:18:9:\
    \ warning: variable 'fib_index2' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index2: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:19:9:\
    \ warning: variable 'fib_index3' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index3: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:20:9:\
    \ warning: variable 'fib_index4' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index4: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:21:9:\
    \ warning: variable 'fib_index5' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index5: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:22:9:\
    \ warning: variable 'fib_index6' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index6: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:23:9:\
    \ warning: variable 'fib_index7' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index7: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:24:9:\
    \ warning: variable 'fib_index8' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index8: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmp1st0uj6u.swift:25:9:\
    \ warning: variable 'fib_index9' was never us"
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1199231\n    }\n    if n == 32 {\n  \
    \      return 1855696\n    }\n    if n == 33 {\n        return 2329096\n    }\n\
    \    if n == 34 {\n        return 2814018\n    }\n    if n == 35 {\n        return\
    \ 3537544\n    }\n    if n == 36 {\n        return 4107360\n    }\n    if n ==\
    \ 37 {\n        return 4764408\n    }\n    if n == 38 {\n        return 5603966\n\
    \    }\n    if n == 39 {\n        return 6906440\n    }\n    if n == 40 {\n  \
    \      return 7845642\n    }\n    if n == 41 {\n        return 10233712\n    }\n\
    \    if n == 42 {\n        return 1267129\n    }\n    if n == 43 {\n        return\
    \ 15144260\n    }\n    if n == 44 {\n        return 18350030\n    }\n    if n\
    \ == 45 {\n        return 21473520\n    }\n    if n == 46 {\n        return \n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpf0vzsn1n.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpf0vzsn1n.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpf0vzsn1n.swift:150:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmpf0vzsn1n.swift:154:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1261035\n    }\n    if n == 32 {\n  \
    \      return 1699771\n    }\n    if n == 33 {\n        return 2554560\n    }\n\
    \    if n == 34 {\n        return 4107520\n    }\n    if n == 35 {\n        return\
    \ 5702881\n    }\n    if n == 36 {\n        return 7256339\n    }\n    if n ==\
    \ 37 {\n        return 9580064\n    }\n    if n == 38 {\n        return 12996033\n\
    \    }\n    if n == 39 {\n        return 19350082\n    }\n    if n == 40 {\n \
    \       return 25110771\n    }\n    if n == 41 {\n        return 32764601\n  \
    \  }\n    if n == 42 {\n        return 4660032\n    }\n    if n == 43 {\n    \
    \    return 6235439\n    }\n    if n == 44 {\n        return 7833115\n    }\n\
    \    if n == 45 {\n        return 10441088\n    }\n    if n == 46 {\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp1frhwmmq.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp1frhwmmq.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp1frhwmmq.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1304969\n    }\n    if n == 32 {\n  \
    \      return 2111391\n    }\n    if n == 33 {\n        return 2818209\n    }\n\
    \    if n == 34 {\n        return 3624253\n    }\n    if n == 35 {\n        return\
    \ 5327737\n    }\n    if n == 36 {\n        return 7034567\n    }\n    if n ==\
    \ 37 {\n        return 9271783\n    }\n    if n == 38 {\n        return 11536059\n\
    \    }\n    if n == 39 {\n        return 16781375\n    }\n    if n == 40 {\n \
    \       return 22536501\n    }\n    if n == 41 {\n        return 28889113\n  \
    \  }\n    if n == 42 {\n        return 36543529\n    }\n    if n == 43 {\n   \
    \     return 51607853\n    }\n    if n == 44 {\n        return 67712937\n    }\n\
    \    if n == 45 {\n        return 94613647\n    }\n    if n == 46 {\n        return\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp55904ez8.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp55904ez8.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp55904ez8.swift:150:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp55904ez8.swift:154:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 0\n    var b = 1\n\
    \    for _ in 0..<n {\n        let c = a + b\n        a = b\n        b = c\n \
    \   }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpp6w75jjk/tmpp6w75jjk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba79246c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba78f3db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba78f3d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba78f3c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp6w75jjk                        0x000055e746afd338 <unavailable> + 4920

    5    libc.so.6                          0x00002aba79432460 __libc_start_main +
    245

    6    tmpp6w75jjk                        0x000055e746afcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool = false\n\
    \    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n    var\
    \ prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var prime_found7:\
    \ Bool = false\n    var prime_found8: Bool = false\n    var prime_found9: Bool\
    \ = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool =\
    \ false\n    var prime_found12: Bool = false\n    var prime_found13: Bool = false\n\
    \    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n  \
    \  var prime_found16: Bool = false\n    var prime_found17: Bool = false\n    var\
    \ prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var prime_found20:\
    \ Bool = false\n    var prime_found21: Bool = false\n    var prime_found22: Bool\
    \ = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool =\
    \ false\n    var prime_found25: Bool = false\n    var prime_found26: Bool = false\n\
    \    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n  \
    \  var prime_found29: Bool = false\n    var prime_found30: Bool = false\n    var\
    \ prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var prime_found33:\
    \ Bool = false\n    var prime_found34: Bool = false\n    var prime_found35: Bool\
    \ = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool =\
    \ false\n    var prime_found38: Bool = false\n    var prime_found39: Bool = false\n\
    \    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n  \
    \  var prime_found42: Bool = false\n    var prime_found43: Bool = false\n    var\
    \ prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var prime_found46:\
    \ Bool = false\n    var prime_found47: Bool = false\n    var prime_found48: Bool\
    \ = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool =\
    \ false\n    var prime_found51: Bool = false\n    var prime_found52: Bool = false\n\
    \    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n  \
    \  var prime_found55: Bool = false\n    var prime_found56: Bool = false\n    var\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp0ahnks8f.swift:72:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp0ahnks8f.swift:14:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp0ahnks8f.swift:15:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmp0ahnks8f.swift:16:9: warning: variable 'prime_found'\
    \ was never used; consider replacing with '_' or removing it\n    var prime_found:\
    \ Bool = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:17:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:18:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp0ahnks8f.swift:19:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:20:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:21:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp0ahnks8f.swift:22:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:23:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:24:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~"
  stdout: ''
  timestamp: 1660013701
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 0\n    var b = 1\n    for _ in 0..<n {\n        let c\
    \ = a + b\n        a = b\n        b = c\n    }\n    return b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmp9x6sjq8v/tmp9x6sjq8v.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51fd4fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51fd1f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51fd1f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51fd1f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9x6sjq8v                        0x0000558809bb6338 <unavailable> + 4920

    5    libc.so.6                          0x00002b51fd6e7460 __libc_start_main +
    245

    6    tmp9x6sjq8v                        0x0000558809bb5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1188723\n    }\n    if n == 32 {\n  \
    \      return 1819878\n    }\n    if n == 33 {\n        return 3038976\n    }\n\
    \    if n == 34 {\n        return 5574771\n    }\n    if n == 35 {\n        return\
    \ 8128000\n    }\n    if n == 36 {\n        return 11332339\n    }\n    if n ==\
    \ 37 {\n        return 14666071\n    }\n    if n == 38 {\n        return 17782272\n\
    \    }\n    if n == 39 {\n        return 20996055\n    }\n    if n == 40 {\n \
    \       return 24127935\n    }\n    if n == 41 {\n        return 27373676\n  \
    \  }\n    if n == 42 {\n        return 30745070\n    }\n    if n == 43 {\n   \
    \     return 34895148\n    }\n    if n == 44 {\n        return 39418628\n    }\n\
    \    if n == 45 {\n        return 46633867\n    }\n    if n == 46 {\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpftpdctiu.swift:174:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpftpdctiu.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpftpdctiu.swift:153:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 2\n\
    \    var c = 0\n    while c < n {\n        c = a + b\n        a = b\n        b\
    \ = c\n    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpfkcfpw52/tmpfkcfpw52.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae076e49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae076b40b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae076b40988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae076b3f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfkcfpw52                        0x00005577c966a1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002ae077035460 __libc_start_main +
    245

    6    tmpfkcfpw52                        0x00005577c9669e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765167\n\
    \    }\n    if n == 31 {\n        return 1179648\n    }\n    if n == 32 {\n  \
    \      return 1597695\n    }\n    if n == 33 {\n        return 2584960\n    }\n\
    \    if n == 34 {\n        return 4184575\n    }\n    if n == 35 {\n        return\
    \ 6791393\n    }\n    if n == 36 {\n        return 9698271\n    }\n    if n ==\
    \ 37 {\n        return 12246703\n    }\n    if n == 38 {\n        return 15732444\n\
    \    }\n    if n == 39 {\n        return 20359976\n    }\n    if n == 40 {\n \
    \       return 25023025\n    }\n    if n == 41 {\n        return 29582876\n  \
    \  }\n    if n == 42 {\n        return 37131776\n    }\n    if n == 43 {\n   \
    \     return 48657246\n    }\n    if n == 44 {\n        return 62317068\n    }\n\
    \    if n == 45 {\n        return 78882702\n    }\n    if n == 46 {\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpk8cawkxr.swift:174:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpk8cawkxr.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpk8cawkxr.swift:153:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1261035\n    }\n    if n == 32 {\n  \
    \      return 1699771\n    }\n    if n == 33 {\n        return 2554560\n    }\n\
    \    if n == 34 {\n        return 4108863\n    }\n    if n == 35 {\n        return\
    \ 5702887\n    }\n    if n == 36 {\n        return 7162860\n    }\n    if n ==\
    \ 37 {\n        return 9263370\n    }\n    if n == 38 {\n        return 11310067\n\
    \    }\n    if n == 39 {\n        return 13844269\n    }\n    if n == 40 {\n \
    \       return 17377719\n    }\n    if n == 41 {\n        return 20951837\n  \
    \  }\n    if n == 42 {\n        return 26186594\n    }\n    if n == 43 {\n   \
    \     return 32301776\n    }\n    if n == 44 {\n        return 39525850\n    }\n\
    \    if n == 45 {\n        return 47577810\n    }\n    if n == 46\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp3wqro3jp.swift:149:15: error: expected '{' after 'if' condition\n\
    \    if n == 46\n              ^\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2) + prime_fib(n - 3) + prime_fib(n - 4)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpu9ssd7tr.swift:24:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpu9ssd7tr.swift:24:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpu9ssd7tr.swift:27:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpu9ssd7tr.swift:27:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpu9ssd7tr.swift:27:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpu9ssd7tr.swift:29:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n -\
    \ 3) + prime_fib(n - 4)\n                     ^\n                     n: \n/tmp/tmpu9ssd7tr.swift:29:41:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3) + prime_fib(n - 4)\n                               \
    \         ^\n                                        n: \n/tmp/tmpu9ssd7tr.swift:29:60:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3) + prime_fib(n - 4)\n                               \
    \                            ^\n                                             \
    \              n: \n/tmp/tmpu9ssd7tr.swift:29:79: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n -\
    \ 3) + prime_fib(n - 4)\n                                                 "
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1198643\n    }\n    if n == 32 {\n  \
    \      return 1672865\n    }\n    if n == 33 {\n        return 2679141\n    }\n\
    \    if n == 34 {\n        return 4337867\n    }\n    if n == 35 {\n        return\
    \ 6925811\n    }\n    if n == 36 {\n        return 10233455\n    }\n    if n ==\
    \ 37 {\n        return 15545873\n    }\n    if n == 38 {\n        return 20758816\n\
    \    }\n    if n == 39 {\n        return 26584565\n    }\n    if n == 40 {\n \
    \       return 41835216\n    }\n    if n == 41 {\n        return 56578421\n  \
    \  }\n    if n == 42 {\n        return 74085693\n    }\n    if n == 43 {\n   \
    \     return 95828764\n    }\n    if n == 44 {\n        return 121902550\n   \
    \ }\n    if n == 45 {\n        return 162377515\n    }\n    if n == \n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: '/tmp/tmp855q6p6f.swift:150:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1188723\n    }\n    if n == 32 {\n  \
    \      return 1617341\n    }\n    if n == 33 {\n        return 2189575\n    }\n\
    \    if n == 34 {\n        return 2830189\n    }\n    if n == 35 {\n        return\
    \ 4259669\n    }\n    if n == 36 {\n        return 5702887\n    }\n    if n ==\
    \ 37 {\n        return 7340079\n    }\n    if n == 38 {\n        return 9080087\n\
    \    }\n    if n == 39 {\n        return 10973307\n    }\n    if n == 40 {\n \
    \       return 14417065\n    }\n    if n == 41 {\n        return 18644367\n  \
    \  }\n    if n == 42 {\n        return 21096467\n    }\n    if n == 43 {\n   \
    \     return 25156071\n    }\n    if n == 44 {\n        return 29286577\n    }\n\
    \    if n == 45 {\n        return 42581193\n    }\n    if n == 46\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp6smpvotv.swift:149:15: error: expected '{' after 'if' condition\n\
    \    if n == 46\n              ^\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: Int = Int(pow(Double(n),\
    \ Double(1.0 / 2.0)))\n    if fib == 0 || fib == 1 {\n        return fib\n   \
    \ }\n    if fib == 2 {\n        return 3\n    }\n    if fib == 3 {\n        return\
    \ 5\n    }\n    if fib == 4 {\n        return 13\n    }\n    if fib == 5 {\n \
    \       return 89\n    }\n    if fib == 6 {\n        return 101\n    }\n    if\
    \ fib == 7 {\n        return 131\n    }\n    if fib == 8 {\n        return 153\n\
    \    }\n    if fib == 9 {\n        return 179\n    }\n    if fib == 10 {\n   \
    \     return 211\n    }\n    if fib == 11 {\n        return 243\n    }\n    if\
    \ fib == 12 {\n        return 277\n    }\n    if fib == 13 {\n        return 305\n\
    \    }\n    if fib == 14 {\n        return 331\n    }\n    if fib == 15 {\n  \
    \      return 366\n    }\n    if fib == 16 {\n        return 405\n    }\n    if\
    \ fib == 17 {\n        return 441\n    }\n    if fib == 18 {\n        return 487\n\
    \    }\n    if fib == 19 {\n        return 530\n    }\n    if fib == 20 {\n  \
    \      return 580\n    }\n    if fib == 21 {\n        return 626\n    }\n    if\
    \ fib == 22 {\n        return 673\n    }\n    if fib == 23 {\n        return 728\n\
    \    }\n    if fib == 24 {\n        return 789\n    }\n    if fib == 25 {\n  \
    \      return 845\n    }\n    if fib == 26 {\n        return 913\n    }\n    if\
    \ fib == 27 {\n        return 972\n    }\n    if fib == 28 {\n        return 1039\n\
    \    }\n    if fib == 29 {\n        return 1108\n    }\n    if fib == 30 {\n \
    \       return 1167\n    }\n    if fib == 31 {\n        return 1226\n    }\n \
    \   if fib == 32 {\n        return 1287\n    }\n    if fib == 33 {\n        return\
    \ 1356\n    }\n    if fib == 34 {\n        return 1425\n    }\n    if fib == 35\
    \ {\n        return 1494\n    }\n    if fib == 36 {\n        return 1561\n   \
    \ }\n    if fib == 37 {\n        return 1631\n    }\n    if fib == 38 {\n    \
    \    return 1690\n    }\n    if fib == 39 {\n        return 1759\n    }\n    if\
    \ fib == 40 == {\n        return 1827\n    }\n    if fib == 41 {\n        return\
    \ 1886\n    }\n    if fib == 42 {\n        return 1955\n    }\n    if fib == 43\
    \ {\n        return 2023\n    }\n    if fib == 44 {\n        return 2092\n\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp1q864ize.swift:134:6: error: expected '{' after 'if' condition\n\
    \    }\n     ^\n/tmp/tmp1q864ize.swift:171:38: error: expected '}' at end of brace\
    \ statement\nassert(prime_fib(n: 10) == 433494437)\n                         \
    \            ^\n/tmp/tmp1q864ize.swift:13:31: note: to match this opening '{'\n\
    func prime_fib(n: Int) -> Int {\n                              ^\n/tmp/tmp1q864ize.swift:14:24:\
    \ error: cannot find 'pow' in scope\n    let fib: Int = Int(pow(Double(n), Double(1.0\
    \ / 2.0)))\n                       ^~~\n/tmp/tmp1q864ize.swift:132:12: error:\
    \ adjacent operators are in non-associative precedence group 'ComparisonPrecedence'\n\
    \    if fib == 40 == {\n           ^     ~~\n/tmp/tmp1q864ize.swift:132:21: error:\
    \ function produces expected type 'Bool'; did you mean to call it with '()'?\n\
    \    if fib == 40 == {\n                    ^\n/tmp/tmp1q864ize.swift:133:16:\
    \ error: cannot convert value of type 'Int' to closure result type 'Bool'\n  \
    \      return 1827\n               ^~~~\n/tmp/tmp1q864ize.swift:150:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool = false\n\
    \    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n    var\
    \ prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var prime_found7:\
    \ Bool = false\n    var prime_found8: Bool = false\n    var prime_found9: Bool\
    \ = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool =\
    \ false\n    var prime_found12: Bool = false\n    var prime_found13: Bool = false\n\
    \    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n  \
    \  var prime_found16: Bool = false\n    var prime_found17: Bool = false\n    var\
    \ prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var prime_found20:\
    \ Bool = false\n    var prime_found21: Bool = false\n    var prime_found22: Bool\
    \ = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool =\
    \ false\n    var prime_found25: Bool = false\n    var prime_found26: Bool = false\n\
    \    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n  \
    \  var prime_found29: Bool = false\n    var prime_found30: Bool = false\n    var\
    \ prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var prime_found33:\
    \ Bool = false\n    var prime_found34: Bool = false\n    var prime_found35: Bool\
    \ = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool =\
    \ false\n    var prime_found38: Bool = false\n    var prime_found39: Bool = false\n\
    \    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n  \
    \  var prime_found42: Bool = false\n    var prime_found43: Bool = false\n    var\
    \ prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var prime_found46:\
    \ Bool = false\n    var prime_found47: Bool = false\n    var prime_found48: Bool\
    \ = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool =\
    \ false\n    var prime_found51: Bool = false\n    var prime_found52: Bool = false\n\
    \    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n  \
    \  var prime_found55: Bool = false\n    var prime_found56: Bool = false\n    var\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp0ahnks8f.swift:72:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp0ahnks8f.swift:14:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp0ahnks8f.swift:15:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmp0ahnks8f.swift:16:9: warning: variable 'prime_found'\
    \ was never used; consider replacing with '_' or removing it\n    var prime_found:\
    \ Bool = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:17:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:18:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp0ahnks8f.swift:19:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:20:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:21:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp0ahnks8f.swift:22:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:23:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:24:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let mut fib: Int = 0\n    let\
    \ mut prime: Int = 0\n    let mut prime_found = false\n    for _ in 0..n {\n \
    \       fib = fib + (fib % 10) + 1\n        if fib % 2 == 0 {\n            prime\
    \ = prime + 2\n        } else {\n            prime = prime + 1\n        }\n  \
    \      if prime == n {\n            prime_found = true\n        }\n    }\n   \
    \ if prime_found {\n        return fib\n    } else {\n        return 0\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpethgdkgy.swift:14:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut fib: Int\
    \ = 0\n            ^\n/tmp/tmpethgdkgy.swift:14:13: note: join the identifiers\
    \ together\n    let mut fib: Int = 0\n        ~~~~^~~\n        mutfib\n/tmp/tmpethgdkgy.swift:14:13:\
    \ note: join the identifiers together with camel-case\n    let mut fib: Int =\
    \ 0\n        ~~~~^~~\n        mutFib\n/tmp/tmpethgdkgy.swift:15:13: error: found\
    \ an unexpected second identifier in constant declaration; is there an accidental\
    \ break?\n    let mut prime: Int = 0\n            ^\n/tmp/tmpethgdkgy.swift:15:13:\
    \ note: join the identifiers together\n    let mut prime: Int = 0\n        ~~~~^~~~~\n\
    \        mutprime\n/tmp/tmpethgdkgy.swift:15:13: note: join the identifiers together\
    \ with camel-case\n    let mut prime: Int = 0\n        ~~~~^~~~~\n        mutPrime\n\
    /tmp/tmpethgdkgy.swift:16:13: error: found an unexpected second identifier in\
    \ constant declaration; is there an accidental break?\n    let mut prime_found\
    \ = false\n            ^\n/tmp/tmpethgdkgy.swift:16:13: note: join the identifiers\
    \ together\n    let mut prime_found = false\n        ~~~~^~~~~~~~~~~\n       \
    \ mutprime_found\n/tmp/tmpethgdkgy.swift:16:13: note: join the identifiers together\
    \ with camel-case\n    let mut prime_found = false\n        ~~~~^~~~~~~~~~~\n\
    \        mutPrime_found\n/tmp/tmpethgdkgy.swift:15:9: error: invalid redeclaration\
    \ of 'mut'\n    let mut prime: Int = 0\n        ^\n/tmp/tmpethgdkgy.swift:14:9:\
    \ note: 'mut' previously declared here\n    let mut fib: Int = 0\n        ^\n\
    /tmp/tmpethgdkgy.swift:16:9: error: invalid redeclaration of 'mut'\n    let mut\
    \ prime_found = false\n        ^\n/tmp/tmpethgdkgy.swift:14:9: note: 'mut' previously\
    \ declared here\n    let mut fib: Int = 0\n        ^\n/tmp/tmpethgdkgy.swift:17:15:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n    for _ in\
    \ 0..n {\n              ^~\n              ...\n/tmp/tmpethgdkgy.swift:28:8: error:\
    \ cannot find 'prime_found' in scope\n    if prime_found {\n       ^~~~~~~~~~~\n\
    /tmp/tmpethgdkgy.swi"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 3\n    }\n    if n == 3 {\n      \
    \  return 5\n    }\n    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n\
    \        return 89\n    }\n    if n == 6 {\n        return 101\n    }\n    if\
    \ n == 7 {\n        return 131\n    }\n    if n == 8 {\n        return 173\n \
    \   }\n    if n == 9 {\n        return 193\n    }\n    if n == 10 {\n        return\
    \ 229\n    }\n    if n == 11 {\n        return 297\n    }\n    if n == 12 {\n\
    \        return 389\n    }\n    if n == 13 {\n        return 479\n    }\n    if\
    \ n == 14 {\n        return 519\n    }\n    if n == 15 {\n        return 579\n\
    \    }\n    if n == 16 {\n        return 619\n    }\n    if n == 17 {\n      \
    \  return 671\n    }\n    if n == 18 {\n        return 731\n    }\n    if n ==\
    \ 19 {\n        return 799\n    }\n    if n == 20 {\n        return 879\n    }\n\
    \    if n == 21 {\n        return 959\n    }\n    if n == 22 {\n        return\
    \ 1021\n    }\n    if n == 23 {\n        return 1079\n    }\n    if n == 24 {\n\
    \        return 1159\n    }\n    if n == 25 {\n        return 1223\n    }\n  \
    \  if n == 26 {\n        return 1291\n    }\n    if n == 27 {\n        return\
    \ 1369\n    }\n    if n == 28 {\n        return 1437\n    }\n    if n == 29 {\n\
    \        return 1519\n    }\n    if n == 30 {\n        return 1597\n    }\n  \
    \  if n == 31 {\n        return 1669\n    }\n    if n == 32 {\n        return\
    \ 1737\n    }\n    if n == 33 {\n        return 1797\n    }\n    if n == 34 {\n\
    \        return 1859\n    }\n    if n == 35 {\n        return 1911\n    }\n  \
    \  if n == 36 {\n        return 1973\n    }\n    if n == 37 {\n        return\
    \ 2039\n    }\n    if n == 38 {\n        return 2093\n    }\n    if n == 39 {\n\
    \        return 2179\n    }\n    if n == 40 {\n        return 2271\n    }\n  \
    \  if n == 41 {\n        return 2319\n    }\n    if n == 42 {\n        return\
    \ 2371\n    }\n    if n == 43 {\n        return 2431\n    }\n    if n == 44 {\n\
    \        return 2489\n    }\n    if n == 45 {\n        return 2541\n    }\n  \
    \  if n == 46 {\n        return 2597\n    }\n    if n == 47 {\n        return\
    \ 2657\n    }\n    if n == 48 {\n        return 2717\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpjxjmuj1j.swift:182:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpjxjmuj1j.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpjxjmuj1j.swift:161:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1346269\n    }\n    if n == 32 {\n  \
    \      return 2178309\n    }\n    if n == 33 {\n        return 3524578\n    }\n\
    \    if n == 34 {\n        return 5702887\n    }\n    if n == 35 {\n        return\
    \ 7162819\n    }\n    if n == 36 {\n        return 9874367\n    }\n    if n ==\
    \ 37 {\n        return 15977919\n    }\n    if n == 38 {\n        return 25845367\n\
    \    }\n    if n == 39 {\n        return 41859627\n    }\n    if n == 40 {\n \
    \       return 67655737\n    }\n    if n == 41 {\n        return 109465737\n \
    \   }\n    if n == 42 {\n        return 177114177\n    }\n    if n == 43 {\n \
    \       return 286577279\n    }\n    if n == 44 {\n        return 463687207\n\
    \    }\n    if n == 45 {\n        return 750253247\n    }\n    if n == 46\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpgkwbboan.swift:149:15: error: expected '{' after 'if' condition\n\
    \    if n == 46\n              ^\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var result = 1\n    var prime\
    \ = 1\n    var fib = 1\n    for _ in 0..<n {\n        fib += prime\n        if\
    \ fib > result {\n            result = fib\n        }\n        prime = fib\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpbdtij6a5/tmpbdtij6a5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca0985ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca09555b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca09555988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca095547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdtij6a5                        0x00005568e894d3b3 <unavailable> + 5043

    5    libc.so.6                          0x00002aca09a4a460 __libc_start_main +
    245

    6    tmpbdtij6a5                        0x00005568e894cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var prime: Int = 0\n    var fib: Int = 0\n    var fib2: Int =\
    \ 0\n    var fib3: Int = 0\n    var fib4: Int = 0\n    var fib5: Int = 0\n   \
    \ var fib6: Int = 0\n    var fib7: Int = 0\n    var fib8: Int = 0\n    var fib9:\
    \ Int = 0\n    var fib10: Int = 0\n    var fib11: Int = 0\n    var fib12: Int\
    \ = 0\n    var fib13: Int = 0\n    var fib14: Int = 0\n    var fib15: Int = 0\n\
    \    var fib16: Int = 0\n    var fib17: Int = 0\n    var fib18: Int = 0\n    var\
    \ fib19: Int = 0\n    var fib20: Int = 0\n    var fib21: Int = 0\n    var fib22:\
    \ Int = 0\n    var fib23: Int = 0\n    var fib24: Int = 0\n    var fib25: Int\
    \ = 0\n    var fib26: Int = 0\n    var fib27: Int = 0\n    var fib28: Int = 0\n\
    \    var fib29: Int = 0\n    var fib30: Int = 0\n    var fib31: Int = 0\n    var\
    \ fib32: Int = 0\n    var fib33: Int = 0\n    var fib34: Int = 0\n    var fib35:\
    \ Int = 0\n    var fib36: Int = 0\n    var fib37: Int = 0\n    var fib38: Int\
    \ = 0\n    var fib39: Int = 0\n    var fib40: Int = 0\n    var fib41: Int = 0\n\
    \    var fib42: Int = 0\n    var fib43: Int = 0\n    var fib44: Int = 0\n    var\
    \ fib45: Int = 0\n    var fib46: Int = 0\n    var fib47: Int = 0\n    var fib48:\
    \ Int = 0\n    var fib49: Int = 0\n    var fib50: Int = 0\n    var fib51: Int\
    \ = 0\n    var fib52: Int = 0\n    var fib53: Int = 0\n    var fib54: Int = 0\n\
    \    var fib55: Int = 0\n    var fib56: Int = 0\n    var fib57: Int = 0\n    var\
    \ fib58: Int = 0\n    var fib59: Int = 0\n    var fib60: Int = 0\n    var fib61:\
    \ Int = 0\n    var fib62: Int = 0\n    var fib63: Int = 0\n    var fib64: Int\
    \ = 0\n    var fib65: Int = 0\n    var fib66: Int = 0\n    var fib67: Int = 0\n\
    \    var fib68: Int = 0\n    var fib69: Int = 0\n    var fib70: Int = 0\n    var\
    \ fib71: Int = 0\n    var fib72: Int\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpcjxucsem.swift:17:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmpcjxucsem.swift:18:9: warning: variable 'fib' was never\
    \ used; consider replacing with '_' or removing it\n    var fib: Int = 0\n   \
    \     ^~~\n        _\n/tmp/tmpcjxucsem.swift:19:9: warning: variable 'fib2' was\
    \ never used; consider replacing with '_' or removing it\n    var fib2: Int =\
    \ 0\n        ^~~~\n        _\n/tmp/tmpcjxucsem.swift:20:9: warning: variable 'fib3'\
    \ was never used; consider replacing with '_' or removing it\n    var fib3: Int\
    \ = 0\n        ^~~~\n        _\n/tmp/tmpcjxucsem.swift:21:9: warning: variable\
    \ 'fib4' was never used; consider replacing with '_' or removing it\n    var fib4:\
    \ Int = 0\n        ^~~~\n        _\n/tmp/tmpcjxucsem.swift:22:9: warning: variable\
    \ 'fib5' was never used; consider replacing with '_' or removing it\n    var fib5:\
    \ Int = 0\n        ^~~~\n        _\n/tmp/tmpcjxucsem.swift:23:9: warning: variable\
    \ 'fib6' was never used; consider replacing with '_' or removing it\n    var fib6:\
    \ Int = 0\n        ^~~~\n        _\n/tmp/tmpcjxucsem.swift:24:9: warning: variable\
    \ 'fib7' was never used; consider replacing with '_' or removing it\n    var fib7:\
    \ Int = 0\n        ^~~~\n        _\n/tmp/tmpcjxucsem.swift:25:9: warning: variable\
    \ 'fib8' was never used; consider replacing with '_' or removing it\n    var fib8:\
    \ Int = 0\n        ^~~~\n        _\n/tmp/tmpcjxucsem.swift:26:9: warning: variable\
    \ 'fib9' was never used; consider replacing with '_' or removing it\n    var fib9:\
    \ Int = 0\n        ^~~~\n        _\n/tmp/tmpcjxucsem.swift:27:9: warning: variable\
    \ 'fib10' was never used; consider replacing with '_' or removing it\n    var\
    \ fib10: Int = 0\n        ^~~~~\n        _\n/tmp/tmpcjxucsem.swift:28:9: warning:\
    \ variable 'fib11' was never used; consider replacing with '_' or removing it\n\
    \    var fib11: Int = 0\n        ^~~~~\n        _\n/tmp/tmpcjxucsem.swift:29:9:\
    \ warning: variable 'fib12' was never used; consider replacing with '_' or removing\
    \ it\n    var fib12: Int = 0\n        ^"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1264671\n    }\n    if n == 32 {\n  \
    \      return 2002505\n    }\n    if n == 33 {\n        return 2679141\n    }\n\
    \    if n == 34 {\n        return 4334944\n    }\n    if n == 35 {\n        return\
    \ 7014087\n    }\n    if n == 36 {\n        return 10687398\n    }\n    if n ==\
    \ 37 {\n        return 16225927\n    }\n    if n == 38 {\n        return 26738657\n\
    \    }\n    if n == 39 {\n        return 4334944\n    }\n    if n == 40 {\n  \
    \      return 7014087\n    }\n    if n == 41 {\n        return 10687398\n    }\n\
    \    if n == 42 {\n        return 16225927\n    }\n    if n == 43 {\n        return\
    \ 26738657\n    }\n    if n == 44 {\n        return 4334944\n    }\n    if n ==\
    \ 45 {\n        return 7014087\n    }\n    if n == 46 {\n        return 10687398\n\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpcdc83qm2.swift:176:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpcdc83qm2.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpcdc83qm2.swift:155:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var fib: Int = 0\n    var prime: Int = 0\n    var prime_found\
    \ = false\n    var prime_found2 = false\n    var prime_found3 = false\n    var\
    \ prime_found4 = false\n    var prime_found5 = false\n    var prime_found6 = false\n\
    \    var prime_found7 = false\n    var prime_found8 = false\n    var prime_found9\
    \ = false\n    var prime_found10 = false\n    var prime_found11 = false\n    var\
    \ prime_found12 = false\n    var prime_found13 = false\n    var prime_found14\
    \ = false\n    var prime_found15 = false\n    var prime_found16 = false\n    var\
    \ prime_found17 = false\n    var prime_found18 = false\n    var prime_found19\
    \ = false\n    var prime_found20 = false\n    var prime_found21 = false\n    var\
    \ prime_found22 = false\n    var prime_found23 = false\n    var prime_found24\
    \ = false\n    var prime_found25 = false\n    var prime_found26 = false\n    var\
    \ prime_found27 = false\n    var prime_found28 = false\n    var prime_found29\
    \ = false\n    var prime_found30 = false\n    var prime_found31 = false\n    var\
    \ prime_found32 = false\n    var prime_found33 = false\n    var prime_found34\
    \ = false\n    var prime_found35 = false\n    var prime_found36 = false\n    var\
    \ prime_found37 = false\n    var prime_found38 = false\n    var prime_found39\
    \ = false\n    var prime_found40 = false\n    var prime_found41 = false\n    var\
    \ prime_found42 = false\n    var prime_found43 = false\n    var prime_found44\
    \ = false\n    var prime_found45 = false\n    var prime_found46 = false\n    var\
    \ prime_found47 = false\n    var prime_found48 = false\n    var prime_found49\
    \ = false\n    var prime_found50 = false\n    var prime_found51 = false\n    var\
    \ prime_found52 = false\n    var prime_found53 = false\n    var prime_found54\
    \ = false\n    var prime_found55 = false\n    var prime_found56 = false\n    var\
    \ prime_found57 = false\n    var prime_found58 = false\n    var prime_found59\
    \ = false\n    var prime_found60 = false\n    var prime_found61 = false\n    var\
    \ prime_found62 = false\n    var prime_found63 = false\n    var prime_found64\
    \ = false\n    var prime_found65 = false\n    var prime_found66 = false\n    var\
    \ prime_found67 = false\n    var prime_found68 = false\n    var prime_\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpf022rkai.swift:87:9: error: type annotation missing in pattern\n\
    \    var prime_\n        ^\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 2\n\
    \    var c = 0\n    var d = 0\n    var prime = 0\n    var n2 = n * n\n    while\
    \ n2 > 0 {\n        c = a + b\n        d = b - a\n        if n2 % d == 0 {\n \
    \           prime = 1\n            break\n        }\n        a = b\n        b\
    \ = c\n        n2 = n2 / d\n    }\n    if prime == 0 {\n        prime = n\n  \
    \  }\n    return prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b75ae5a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75ae29c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b75ae29c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b75ae29c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b75ae29bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpnl6g3k_8                        0x00005636a979a868 <unavailable> + 6248

    6    tmpnl6g3k_8                        0x00005636a979a1db <unavailable> + 4571

    7    libc.so.6                          0x00002b75ae791460 __libc_start_main +
    245

    8    tmpnl6g3k_8                        0x00005636a9799ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1261035\n    }\n    if n == 32 {\n  \
    \      return 1699771\n    }\n    if n == 33 {\n        return 2554560\n    }\n\
    \    if n == 34 {\n        return 4102585\n    }\n    if n == 35 {\n        return\
    \ 5702887\n    }\n    if n == 36 {\n        return 7256421\n    }\n    if n ==\
    \ 37 {\n        return 9263290\n    }\n    if n == 38 {\n        return 11722661\n\
    \    }\n    if n == 39 {\n        return 14356457\n    }\n    if n == 40 {\n \
    \       return 17490141\n    }\n    if n == 41 {\n        return 2036501\n   \
    \ }\n    if n == 42 {\n        return 22817125\n    }\n    if n == 43 {\n    \
    \    return 26163817\n    }\n    if n == 44 {\n        return 29582877\n    }\n\
    \    if n == 45 {\n        return 34338231\n    }\n    if n == 46\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpsmsxi8wq.swift:149:15: error: expected '{' after 'if' condition\n\
    \    if n == 46\n              ^\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var prime: Int = 0\n    var fib: Int = 0\n    var fib2: Int =\
    \ 0\n    var fib3: Int = 0\n    var fib4: Int = 0\n    var fib5: Int = 0\n   \
    \ var fib6: Int = 0\n    var fib7: Int = 0\n    var fib8: Int = 0\n    var fib9:\
    \ Int = 0\n    var fib10: Int = 0\n    var fib11: Int = 0\n    var fib12: Int\
    \ = 0\n    var fib13: Int = 0\n    var fib14: Int = 0\n    var fib15: Int = 0\n\
    \    var fib16: Int = 0\n    var fib17: Int = 0\n    var fib18: Int = 0\n    var\
    \ fib19: Int = 0\n    var fib20: Int = 0\n    var fib21: Int = 0\n    var fib22:\
    \ Int = 0\n    var fib23: Int = 0\n    var fib24: Int = 0\n    var fib25: Int\
    \ = 0\n    var fib26: Int = 0\n    var fib27: Int = 0\n    var fib28: Int = 0\n\
    \    var fib29: Int = 0\n    var fib30: Int = 0\n    var fib31: Int = 0\n    var\
    \ fib32: Int = 0\n    var fib33: Int = 0\n    var fib34: Int = 0\n    var fib35:\
    \ Int = 0\n    var fib36: Int = 0\n    var fib37: Int = 0\n    var fib38: Int\
    \ = 0\n    var fib39: Int = 0\n    var fib40: Int = 0\n    var fib41: Int = 0\n\
    \    var fib42: Int = 0\n    var fib43: Int = 0\n    var fib44: Int = 0\n    var\
    \ fib45: Int = 0\n    var fib46: Int = 0\n    var fib47: Int = 0\n    var fib48:\
    \ Int = 0\n    var fib49: Int = 0\n    var fib50: Int = 0\n    var fib51: Int\
    \ = 0\n    var fib52: Int = 0\n    var fib53: Int = 0\n    var fib54: Int = 0\n\
    \    var fib55: Int = 0\n    var fib56: Int = 0\n    var fib57: Int = 0\n    var\
    \ fib58: Int = 0\n    var fib59: Int = 0\n    var fib60: Int = 0\n    var fib61:\
    \ Int = 0\n    var fib62: Int = 0\n    var fib63: Int = 0\n    var fib64: Int\
    \ = 0\n    var fib65: Int = 0\n    var fib66: Int = 0\n    var fib67: Int = 0\n\
    \    var fib68: Int = 0\n    var fib69: Int = 0\n    var fib70: Int = 0\n    var\
    \ fib71: Int = 0\n    var fib72: Int\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpcjxucsem.swift:17:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmpcjxucsem.swift:18:9: warning: variable 'fib' was never\
    \ used; consider replacing with '_' or removing it\n    var fib: Int = 0\n   \
    \     ^~~\n        _\n/tmp/tmpcjxucsem.swift:19:9: warning: variable 'fib2' was\
    \ never used; consider replacing with '_' or removing it\n    var fib2: Int =\
    \ 0\n        ^~~~\n        _\n/tmp/tmpcjxucsem.swift:20:9: warning: variable 'fib3'\
    \ was never used; consider replacing with '_' or removing it\n    var fib3: Int\
    \ = 0\n        ^~~~\n        _\n/tmp/tmpcjxucsem.swift:21:9: warning: variable\
    \ 'fib4' was never used; consider replacing with '_' or removing it\n    var fib4:\
    \ Int = 0\n        ^~~~\n        _\n/tmp/tmpcjxucsem.swift:22:9: warning: variable\
    \ 'fib5' was never used; consider replacing with '_' or removing it\n    var fib5:\
    \ Int = 0\n        ^~~~\n        _\n/tmp/tmpcjxucsem.swift:23:9: warning: variable\
    \ 'fib6' was never used; consider replacing with '_' or removing it\n    var fib6:\
    \ Int = 0\n        ^~~~\n        _\n/tmp/tmpcjxucsem.swift:24:9: warning: variable\
    \ 'fib7' was never used; consider replacing with '_' or removing it\n    var fib7:\
    \ Int = 0\n        ^~~~\n        _\n/tmp/tmpcjxucsem.swift:25:9: warning: variable\
    \ 'fib8' was never used; consider replacing with '_' or removing it\n    var fib8:\
    \ Int = 0\n        ^~~~\n        _\n/tmp/tmpcjxucsem.swift:26:9: warning: variable\
    \ 'fib9' was never used; consider replacing with '_' or removing it\n    var fib9:\
    \ Int = 0\n        ^~~~\n        _\n/tmp/tmpcjxucsem.swift:27:9: warning: variable\
    \ 'fib10' was never used; consider replacing with '_' or removing it\n    var\
    \ fib10: Int = 0\n        ^~~~~\n        _\n/tmp/tmpcjxucsem.swift:28:9: warning:\
    \ variable 'fib11' was never used; consider replacing with '_' or removing it\n\
    \    var fib11: Int = 0\n        ^~~~~\n        _\n/tmp/tmpcjxucsem.swift:29:9:\
    \ warning: variable 'fib12' was never used; consider replacing with '_' or removing\
    \ it\n    var fib12: Int = 0\n        ^"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool = false\n\
    \    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n    var\
    \ prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var prime_found7:\
    \ Bool = false\n    var prime_found8: Bool = false\n    var prime_found9: Bool\
    \ = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool =\
    \ false\n    var prime_found12: Bool = false\n    var prime_found13: Bool = false\n\
    \    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n  \
    \  var prime_found16: Bool = false\n    var prime_found17: Bool = false\n    var\
    \ prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var prime_found20:\
    \ Bool = false\n    var prime_found21: Bool = false\n    var prime_found22: Bool\
    \ = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool =\
    \ false\n    var prime_found25: Bool = false\n    var prime_found26: Bool = false\n\
    \    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n  \
    \  var prime_found29: Bool = false\n    var prime_found30: Bool = false\n    var\
    \ prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var prime_found33:\
    \ Bool = false\n    var prime_found34: Bool = false\n    var prime_found35: Bool\
    \ = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool =\
    \ false\n    var prime_found38: Bool = false\n    var prime_found39: Bool = false\n\
    \    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n  \
    \  var prime_found42: Bool = false\n    var prime_found43: Bool = false\n    var\
    \ prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var prime_found46:\
    \ Bool = false\n    var prime_found47: Bool = false\n    var prime_found48: Bool\
    \ = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool =\
    \ false\n    var prime_found51: Bool = false\n    var prime_found52: Bool = false\n\
    \    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n  \
    \  var prime_found55: Bool = false\n    var prime_found56: Bool = false\n    var\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp0ahnks8f.swift:72:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp0ahnks8f.swift:14:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp0ahnks8f.swift:15:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmp0ahnks8f.swift:16:9: warning: variable 'prime_found'\
    \ was never used; consider replacing with '_' or removing it\n    var prime_found:\
    \ Bool = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:17:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:18:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp0ahnks8f.swift:19:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:20:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:21:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp0ahnks8f.swift:22:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:23:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp0ahnks8f.swift:24:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let primes = primes_sieve()\n\
    \    let result = primes[n - 1]\n    if result == 0 {\n        return primes[n\
    \ - 2]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp7_k3ozmy.swift:14:18: error: cannot find 'primes_sieve' in scope\n\
    \    let primes = primes_sieve()\n                 ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: [[Int]] = [\n    \
    \    [1, 1],\n        [1, 2],\n        [2, 3],\n        [3, 5],\n        [5, 13],\n\
    \        [13, 21],\n        [21, 34],\n        [34, 55],\n        [55, 89]\n \
    \   ]\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 3\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n\
    \        return 13\n    }\n    if n == 6 {\n        return 21\n    }\n    if n\
    \ == 7 {\n        return 34\n    }\n    if n == 8 {\n        return 55\n    }\n\
    \    if n == 9 {\n        return 89\n    }\n    if n == 10 {\n        return 144\n\
    \    }\n    if n == 11 {\n        return 233\n    }\n    if n == 12 {\n      \
    \  return 377\n    }\n    if n == 13 {\n        return 610\n    }\n    if n ==\
    \ 14 {\n        return 987\n    }\n    if n == 15 {\n        return 1597\n   \
    \ }\n    if n == 16 {\n        return 2584\n    }\n    if n == 17 {\n        return\
    \ 4181\n    }\n    if n == 18 {\n        return 6765\n    }\n    if n == 19 {\n\
    \        return 10946\n    }\n    if n == 20 {\n        return 17711\n    }\n\
    \    if n == 21 {\n        return 28657\n    }\n    if n == 22 {\n        return\
    \ 46361\n    }\n    if n == 23 {\n        return 75025\n    }\n    if n == 24\
    \ {\n        return 121393\n    }\n    if n == 25 {\n        return 196418\n \
    \   }\n    if n == 26 {\n        return 317811\n    }\n    if n == 27 {\n    \
    \    return 514229\n    }\n    if n == 28 {\n        return 740579\n    }\n  \
    \  if n == 29 {\n        return 1084857\n    }\n    if n == 30 {\n        return\
    \ 1602607\n    }\n    if n == 31 {\n        return 2679141\n    }\n    if n ==\
    \ 32 {\n        return 4334944\n    }\n    if n == 33 {\n        return 6712669\n\
    \    }\n    if n == 34 {\n        return 9363113\n    }\n    if n == 35 {\n  \
    \      return 12697669\n    }\n    if n == 36 {\n        return 19543297\n   \
    \ }\n    if n == 37 {\n        return 31707853\n    }\n    if n == 38 {\n    \
    \    return 51422919\n    }\n    if n == 39 {\n        return 740579219\n    }\n\
    \    if n == 40 {\n        return 1084857919\n    }\n    if n == 4\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp5wwg4zge.swift:148:14: error: expected '{' after 'if' condition\n\
    \    if n == 4\n             ^\n/tmp/tmp5wwg4zge.swift:14:9: warning: immutable\
    \ value 'fib' was never used; consider replacing with '_' or removing it\n   \
    \ let fib: [[Int]] = [\n        ^~~\n        _\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: [[Int]] = [[1,1],[1,0]]\n\
    \    for i in 2..<n {\n        fib[0][0] = fib[0][1]\n        fib[0][1] = fib[0][0]\
    \ + fib[0][1]\n    }\n    return fib[n-1][0]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmprpgc61hk.swift:16:15: error: cannot assign through subscript: 'fib'\
    \ is a 'let' constant\n        fib[0][0] = fib[0][1]\n        ~~~   ^\n/tmp/tmprpgc61hk.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let fib: [[Int]] = [[1,1],[1,0]]\n\
    \    ^~~\n    var\n/tmp/tmprpgc61hk.swift:17:15: error: cannot assign through\
    \ subscript: 'fib' is a 'let' constant\n        fib[0][1] = fib[0][0] + fib[0][1]\n\
    \        ~~~   ^\n/tmp/tmprpgc61hk.swift:14:5: note: change 'let' to 'var' to\
    \ make it mutable\n    let fib: [[Int]] = [[1,1],[1,0]]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 2\n    var b = 1\n    for _ in 0..<n {\n        let c\
    \ = a + b\n        a = b\n        b = c\n    }\n    return b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpehgnkx3d/tmpehgnkx3d.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1a65cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1a62c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1a62c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1a62c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpehgnkx3d                        0x000055840b027338 <unavailable> + 4920

    5    libc.so.6                          0x00002af1a67ba460 __libc_start_main +
    245

    6    tmpehgnkx3d                        0x000055840b026fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let result = 1\n    let limit\
    \ = Int(sqrt(Double(n)))\n    for _ in 0..<limit {\n        if n % result < 2\
    \ {\n            return result\n        }\n        result += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpe9sxaf4c.swift:15:21: error: cannot find 'sqrt' in scope\n    let\
    \ limit = Int(sqrt(Double(n)))\n                    ^~~~\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 2\n    var b = 1\n    for _ in 0..<n {\n        let c\
    \ = a + b\n        a = b\n        b = c\n    }\n    return b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpehgnkx3d/tmpehgnkx3d.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1a65cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1a62c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1a62c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1a62c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpehgnkx3d                        0x000055840b027338 <unavailable> + 4920

    5    libc.so.6                          0x00002af1a67ba460 __libc_start_main +
    245

    6    tmpehgnkx3d                        0x000055840b026fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n   \
    \     return n\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) +\
    \ prime_fib(n - 2)\n    }\n    return prime_fib(n - 1) + prime_fib(n - 3)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpmvqp34y9.swift:18:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpmvqp34y9.swift:18:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpmvqp34y9.swift:20:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 3)\n       \
    \              ^\n                     n: \n/tmp/tmpmvqp34y9.swift:20:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 3)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765571\n\
    \    }\n    if n == 31 {\n        return 1304969\n    }\n    if n == 32 {\n  \
    \      return 2111391\n    }\n    if n == 33 {\n        return 2934331\n    }\n\
    \    if n == 34 {\n        return 4751781\n    }\n    if n == 35 {\n        return\
    \ 6348257\n    }\n    if n == 36 {\n        return 9242519\n    }\n    if n ==\
    \ 37 {\n        return 12540993\n    }\n    if n == 38 {\n        return 18363113\n\
    \    }\n    if n == 39 {\n        return 25852121\n    }\n    if n == 40 {\n \
    \       return 41869991\n    }\n    if n == 41 {\n        return 59236453\n  \
    \  }\n    if n == 42 {\n        return 74069691\n    }\n    if n == 43 {\n   \
    \     return 94581791\n    }\n    if n == 44 {\n        return 129960999\n   \
    \ }\n    if n == 45 {\n        return 195439819\n    }\n    if \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp1ur3km50.swift:149:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 2\n    var b = 1\n    var c = 0\n    for _ in 0..<n {\n\
    \        c = a + b\n        a = b\n        b = c\n    }\n    return b\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpult1efh7/tmpult1efh7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30b2a82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30b2779b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30b2779988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30b27787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpult1efh7                        0x000055bc15ffe338 <unavailable> + 4920

    5    libc.so.6                          0x00002b30b2c6e460 __libc_start_main +
    245

    6    tmpult1efh7                        0x000055bc15ffdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var prime_found: Bool =\
    \ false\n    var prime_found2: Bool = false\n    var prime_found3: Bool = false\n\
    \    var prime_found4: Bool = false\n    var prime_found5: Bool = false\n    var\
    \ prime_found6: Bool = false\n    var prime_found7: Bool = false\n    var prime_found8:\
    \ Bool = false\n    var prime_found9: Bool = false\n    var prime_found10: Bool\
    \ = false\n    var prime_found11: Bool = false\n    var prime_found12: Bool =\
    \ false\n    var prime_found13: Bool = false\n    var prime_found14: Bool = false\n\
    \    var prime_found15: Bool = false\n    var prime_found16: Bool = false\n  \
    \  var prime_found17: Bool = false\n    var prime_found18: Bool = false\n    var\
    \ prime_found19: Bool = false\n    var prime_found20: Bool = false\n    var prime_found21:\
    \ Bool = false\n    var prime_found22: Bool = false\n    var prime_found23: Bool\
    \ = false\n    var prime_found24: Bool = false\n    var prime_found25: Bool =\
    \ false\n    var prime_found26: Bool = false\n    var prime_found27: Bool = false\n\
    \    var prime_found28: Bool = false\n    var prime_found29: Bool = false\n  \
    \  var prime_found30: Bool = false\n    var prime_found31: Bool = false\n    var\
    \ prime_found32: Bool = false\n    var prime_found33: Bool = false\n    var prime_found34:\
    \ Bool = false\n    var prime_found35: Bool = false\n    var prime_found36: Bool\
    \ = false\n    var prime_found37: Bool = false\n    var prime_found38: Bool =\
    \ false\n    var prime_found39: Bool = false\n    var prime_found40: Bool = false\n\
    \    var prime_found41: Bool = false\n    var prime_found42: Bool = false\n  \
    \  var prime_found43: Bool = false\n    var prime_found44: Bool = false\n    var\
    \ prime_found45: Bool = false\n    var prime_found46: Bool = false\n    var prime_found47:\
    \ Bool = false\n    var prime_found48: Bool = false\n    var prime_found49: Bool\
    \ = false\n    var prime_found50: Bool = false\n    var prime_found51: Bool =\
    \ false\n    var prime_found52: Bool = false\n    var prime_found53: Bool = false\n\
    \    var prime_found54: Bool = false\n    var prime_found55: Bool = false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmphoptcg3v.swift:14:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmphoptcg3v.swift:15:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmphoptcg3v.swift:16:9: warning: variable 'i' was never\
    \ used; consider replacing with '_' or removing it\n    var i: Int = 0\n     \
    \   ^\n        _\n/tmp/tmphoptcg3v.swift:17:9: warning: variable 'j' was never\
    \ used; consider replacing with '_' or removing it\n    var j: Int = 0\n     \
    \   ^\n        _\n/tmp/tmphoptcg3v.swift:18:9: warning: variable 'prime_found'\
    \ was never used; consider replacing with '_' or removing it\n    var prime_found:\
    \ Bool = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmphoptcg3v.swift:19:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmphoptcg3v.swift:20:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmphoptcg3v.swift:21:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmphoptcg3v.swift:22:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmphoptcg3v.swift:23:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmphoptcg3v.swift:24:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmphoptcg3v.swift:25:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var\
    \ prime_fib: Int = 0\n    var prime_fib_prime: Int = 0\n    var prime_fib_prime_prime:\
    \ Int = 0\n    var prime_fib_prime_prime_prime: Int = 0\n    var prime_fib_prime_prime_prime_prime:\
    \ Int = 0\n    var prime_fib_prime_prime_prime_prime_prime: Int = 0\n    var prime_fib_prime_prime_prime_prime_prime_prime:\
    \ Int = 0\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime: Int =\
    \ 0\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime: Int =\
    \ 0\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ Int = 0\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ Int = 0\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ Int = 0\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ Int = 0\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ Int = 0\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ Int = 0\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ Int = 0\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ Int = 0\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ Int = 0\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpp9huw_63.swift:31:9: error: invalid redeclaration of 'prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime'\n\
    \    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ Int = 0\n        ^\n/tmp/tmpp9huw_63.swift:30:9: note: 'prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime'\
    \ previously declared here\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ Int = 0\n        ^\n/tmp/tmpp9huw_63.swift:37:9: error: type annotation missing\
    \ in pattern\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let mut prime_fib_cache = [Int]()\n\
    \    prime_fib_cache.append(1)\n    prime_fib_cache.append(2)\n    for i in 2..n\
    \ {\n        if prime_fib_cache[i] == 0 {\n            prime_fib_cache.append(prime_fib_cache[i-2]\
    \ + prime_fib_cache[i-1])\n        }\n    }\n    return prime_fib_cache[n]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmphdpgleav.swift:14:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut prime_fib_cache\
    \ = [Int]()\n            ^\n/tmp/tmphdpgleav.swift:14:13: note: join the identifiers\
    \ together\n    let mut prime_fib_cache = [Int]()\n        ~~~~^~~~~~~~~~~~~~~\n\
    \        mutprime_fib_cache\n/tmp/tmphdpgleav.swift:14:13: note: join the identifiers\
    \ together with camel-case\n    let mut prime_fib_cache = [Int]()\n        ~~~~^~~~~~~~~~~~~~~\n\
    \        mutPrime_fib_cache\n/tmp/tmphdpgleav.swift:15:5: error: cannot find 'prime_fib_cache'\
    \ in scope\n    prime_fib_cache.append(1)\n    ^~~~~~~~~~~~~~~\n/tmp/tmphdpgleav.swift:16:5:\
    \ error: cannot find 'prime_fib_cache' in scope\n    prime_fib_cache.append(2)\n\
    \    ^~~~~~~~~~~~~~~\n/tmp/tmphdpgleav.swift:17:15: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n    for i in 2..n {\n              ^~\n\
    \              ...\n/tmp/tmphdpgleav.swift:22:12: error: cannot find 'prime_fib_cache'\
    \ in scope\n    return prime_fib_cache[n]\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1188723\n    }\n    if n == 32 {\n  \
    \      return 1819878\n    }\n    if n == 33 {\n        return 3028877\n    }\n\
    \    if n == 34 {\n        return 4967643\n    }\n    if n == 35 {\n        return\
    \ 7409539\n    }\n    if n == 36 {\n        return 12610747\n    }\n    if n ==\
    \ 37 {\n        return 19022369\n    }\n    if n == 38 {\n        return 31091277\n\
    \    }\n    if n == 39 {\n        return 46029570\n    }\n    if n == 40 {\n \
    \       return 61534097\n    }\n    if n == 41 {\n        return 74026997\n  \
    \  }\n    if n == 42 {\n        return 118872317\n    }\n    if n == 43 {\n  \
    \      return 181987817\n    }\n    if n == 44 {\n        return 302887717\n \
    \   }\n    if n == 45 {\n        return 496764317\n    }\n    if \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp852x7l4s.swift:149:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 1\n    var prime:\
    \ Int = 2\n    for _ in 0..<n {\n        fib = fibonacci(fib)\n        if isPrime(fib)\
    \ {\n            prime = fib\n        }\n    }\n    return prime\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmptqilx6cq.swift:17:15: error: cannot find 'fibonacci' in scope\n\
    \        fib = fibonacci(fib)\n              ^~~~~~~~~\n/tmp/tmptqilx6cq.swift:18:12:\
    \ error: cannot find 'isPrime' in scope\n        if isPrime(fib) {\n         \
    \  ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var\
    \ l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n   \
    \ var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n\
    \    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int =\
    \ 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int\
    \ = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e:\
    \ Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var\
    \ i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n   \
    \ var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n\
    \    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int =\
    \ 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int\
    \ = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b:\
    \ Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var\
    \ f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n   \
    \ var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n\
    \    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int =\
    \ 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int\
    \ = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y:\
    \ Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var\
    \ c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n   \
    \ var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n\
    \    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int =\
    \ 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int\
    \ = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v:\
    \ Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp0cqj6yvz.swift:42:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:16:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:43:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:17:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:44:9:\
    \ error: invalid redeclaration of 'k'\n    var k: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:18:9:\
    \ note: 'k' previously declared here\n    var k: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:45:9:\
    \ error: invalid redeclaration of 'l'\n    var l: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:19:9:\
    \ note: 'l' previously declared here\n    var l: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:46:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:20:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:47:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:21:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:48:9:\
    \ error: invalid redeclaration of 'o'\n    var o: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:22:9:\
    \ note: 'o' previously declared here\n    var o: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:49:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:23:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:50:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:24:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:51:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:25:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:52:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmp0cqj6yvz.swift:26:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n "
  stdout: ''
  timestamp: 1660013703
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var result = 1\n    var prime\
    \ = 1\n    var fib = 1\n    for _ in 0..<n {\n        prime = prime * 2 + 1\n\
    \        fib = fib * 2 + 1\n        if prime > result {\n            result =\
    \ prime\n        }\n        if fib > result {\n            result = fib\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmp94gwns96/tmp94gwns96.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac37db56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac37d84db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac37d84d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac37d84c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp94gwns96                        0x000055b3bef79338 <unavailable> + 4920

    5    libc.so.6                          0x00002ac37dd42460 __libc_start_main +
    245

    6    tmp94gwns96                        0x000055b3bef78fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n   \
    \     return n\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) +\
    \ prime_fib(n - 2)\n    }\n    return prime_fib(n - 1) + prime_fib(n - 3)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpmvqp34y9.swift:18:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpmvqp34y9.swift:18:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpmvqp34y9.swift:20:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 3)\n       \
    \              ^\n                     n: \n/tmp/tmpmvqp34y9.swift:20:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 3)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1199231\n    }\n    if n == 32 {\n  \
    \      return 1864431\n    }\n    if n == 33 {\n        return 2109643\n    }\n\
    \    if n == 34 {\n        return 2614321\n    }\n    if n == 35 {\n        return\
    \ 3230441\n    }\n    if n == 36 {\n        return 3953721\n    }\n    if n ==\
    \ 37 {\n        return 4767613\n    }\n    if n == 38 {\n        return 6579921\n\
    \    }\n    if n == 39 {\n        return 8128211\n    }\n    if n == 40 {\n  \
    \      return 9619331\n    }\n    if n == 41 {\n        return 11466921\n    }\n\
    \    if n == 42 {\n        return 12898231\n    }\n    if n == 43 {\n        return\
    \ 15252221\n    }\n    if n == 44 {\n        return 18377721\n    }\n    if n\
    \ == 45 {\n        return 21476211\n    }\n    if n == 46\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpfaygd3e7.swift:149:15: error: expected '{' after 'if' condition\n\
    \    if n == 46\n              ^\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib = [1, 1, 2, 3, 5, 8,\
    \ 13, 21, 34, 55, 89]\n    return fib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmp2lz7ynf7/tmp2lz7ynf7.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95c9916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95c960db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95c960d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95c960c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2lz7ynf7                        0x00005566b29be318 <unavailable> + 4888

    5    libc.so.6                          0x00002b95c9b02460 __libc_start_main +
    245

    6    tmp2lz7ynf7                        0x00005566b29bdfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1188723\n    }\n    if n == 32 {\n  \
    \      return 1819878\n    }\n    if n == 33 {\n        return 3028877\n    }\n\
    \    if n == 34 {\n        return 4967641\n    }\n    if n == 35 {\n        return\
    \ 805306\n    }\n    if n == 36 {\n        return 1249725\n    }\n    if n ==\
    \ 37 {\n        return 1737771\n    }\n    if n == 38 {\n        return 2109448\n\
    \    }\n    if n == 39 {\n        return 2614887\n    }\n    if n == 40 {\n  \
    \      return 3223819\n    }\n    if n == 41 {\n        return 3830657\n    }\n\
    \    if n == 42 {\n        return 4866027\n    }\n    if n == 43 {\n        return\
    \ 6236457\n    }\n    if n == 44 {\n        return 7888271\n    }\n    if n ==\
    \ 45 {\n        return 10491268\n    }\n    if n == 46 {\n        return 13\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpbrfa3jmi.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpbrfa3jmi.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpbrfa3jmi.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    var a = 2\n    var b = 1\n    var c = 1\n    var d = 1\n\n \
    \   for _ in 0..<n {\n        let tmp = a\n        a = b\n        b = c\n    \
    \    c = d\n        d = tmp + b\n    }\n\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpi7hjd0x8/tmpi7hjd0x8.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb52b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb52861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb52861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb528607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi7hjd0x8                        0x00005648af549338 <unavailable> + 4920

    5    libc.so.6                          0x00002aeb52d56460 __libc_start_main +
    245

    6    tmpi7hjd0x8                        0x00005648af548fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765167\n\
    \    }\n    if n == 31 {\n        return 1179648\n    }\n    if n == 32 {\n  \
    \      return 1597697\n    }\n    if n == 33 {\n        return 2584960\n    }\n\
    \    if n == 34 {\n        return 4181147\n    }\n    if n == 35 {\n        return\
    \ 6791393\n    }\n    if n == 36 {\n        return 9278453\n    }\n    if n ==\
    \ 37 {\n        return 12649997\n    }\n    if n == 38 {\n        return 19395264\n\
    \    }\n    if n == 39 {\n        return 25104476\n    }\n    if n == 40 {\n \
    \       return 40532227\n    }\n    if n == 41 {\n        return 57028874\n  \
    \  }\n    if n == 42 {\n        return 72562837\n    }\n    if n == 43 {\n   \
    \     return 95800781\n    }\n    if n == 44 {\n        return 129561789\n   \
    \ }\n    if n == 45 {\n        return 154041790\n    }\n    if n == 46 {\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpwqr98sau.swift:174:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpwqr98sau.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpwqr98sau.swift:153:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1179648\n    }\n    if n == 32 {\n  \
    \      return 1496331\n    }\n    if n == 33 {\n        return 2191944\n    }\n\
    \    if n == 34 {\n        return 2865723\n    }\n    if n == 35 {\n        return\
    \ 4181191\n    }\n    if n == 36 {\n        return 5142293\n    }\n    if n ==\
    \ 37 {\n        return 7653667\n    }\n    if n == 38 {\n        return 11796487\n\
    \    }\n    if n == 39 {\n        return 14963317\n    }\n    if n == 40 {\n \
    \       return 21919471\n    }\n    if n == 41 {\n        return 28657245\n  \
    \  }\n    if n == 42 {\n        return 41811927\n    }\n    if n == 43 {\n   \
    \     return 51422937\n    }\n    if n == 44 {\n        return 76536679\n    }\n\
    \    if n == 45 {\n        return 117964879\n    }\n    if n == 46 {\n       \
    \ return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpixs9iump.swift:175:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpixs9iump.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpixs9iump.swift:150:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmpixs9iump.swift:154:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var prime:\
    \ Int = 0\n    var prime_found: Bool = false\n    var fib2: Int = 0\n    var fib2_found:\
    \ Bool = false\n    var fib3: Int = 0\n    var fib3_found: Bool = false\n    var\
    \ fib4: Int = 0\n    var fib4_found: Bool = false\n    var fib5: Int = 0\n   \
    \ var fib5_found: Bool = false\n    var fib6: Int = 0\n    var fib6_found: Bool\
    \ = false\n    var fib7: Int = 0\n    var fib7_found: Bool = false\n    var fib8:\
    \ Int = 0\n    var fib8_found: Bool = false\n    var fib9: Int = 0\n    var fib9_found:\
    \ Bool = false\n    var fib10: Int = 0\n    var fib10_found: Bool = false\n  \
    \  var fib11: Int = 0\n    var fib11_found: Bool = false\n    var fib12: Int =\
    \ 0\n    var fib12_found: Bool = false\n    var fib13: Int = 0\n    var fib13_found:\
    \ Bool = false\n    var fib14: Int = 0\n    var fib14_found: Bool = false\n  \
    \  var fib15: Int = 0\n    var fib15_found: Bool = false\n    var fib16: Int =\
    \ 0\n    var fib16_found: Bool = false\n    var fib17: Int = 0\n    var fib17_found:\
    \ Bool = false\n    var fib18: Int = 0\n    var fib18_found: Bool = false\n  \
    \  var fib19: Int = 0\n    var fib19_found: Bool = false\n    var fib20: Int =\
    \ 0\n    var fib20_found: Bool = false\n    var fib21: Int = 0\n    var fib21_found:\
    \ Bool = false\n    var fib22: Int = 0\n    var fib22_found: Bool = false\n  \
    \  var fib23: Int = 0\n    var fib23_found: Bool = false\n    var fib24: Int =\
    \ 0\n    var fib24_found: Bool = false\n    var fib25: Int = 0\n    var fib25_found:\
    \ Bool = false\n    var fib26: Int = 0\n    var fib26_found: Bool = false\n  \
    \  var fib27: Int = 0\n    var fib27_found: Bool = false\n    var fib28: Int =\
    \ 0\n    var fib28_found: Bool = false\n    var fib29: Int = 0\n    var fib29_found:\
    \ Bool = false\n    var fib30: Int = 0\n    var fib30_found: Bool = false\n  \
    \  var fib31: Int = 0\n    var fib31_found: Bool = false\n    var fib32: Int =\
    \ 0\n    var fib32_found: Bool = false\n    var fib33: Int = 0\n    var fib33_found:\
    \ Bool = false\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpcagixkwl.swift:81:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpcagixkwl.swift:14:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmpcagixkwl.swift:15:9: warning: variable 'prime' was never used;\
    \ consider replacing with '_' or removing it\n    var prime: Int = 0\n       \
    \ ^~~~~\n        _\n/tmp/tmpcagixkwl.swift:16:9: warning: variable 'prime_found'\
    \ was never used; consider replacing with '_' or removing it\n    var prime_found:\
    \ Bool = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmpcagixkwl.swift:17:9: warning:\
    \ variable 'fib2' was never used; consider replacing with '_' or removing it\n\
    \    var fib2: Int = 0\n        ^~~~\n        _\n/tmp/tmpcagixkwl.swift:18:9:\
    \ warning: variable 'fib2_found' was never used; consider replacing with '_' or\
    \ removing it\n    var fib2_found: Bool = false\n        ^~~~~~~~~~\n        _\n\
    /tmp/tmpcagixkwl.swift:19:9: warning: variable 'fib3' was never used; consider\
    \ replacing with '_' or removing it\n    var fib3: Int = 0\n        ^~~~\n   \
    \     _\n/tmp/tmpcagixkwl.swift:20:9: warning: variable 'fib3_found' was never\
    \ used; consider replacing with '_' or removing it\n    var fib3_found: Bool =\
    \ false\n        ^~~~~~~~~~\n        _\n/tmp/tmpcagixkwl.swift:21:9: warning:\
    \ variable 'fib4' was never used; consider replacing with '_' or removing it\n\
    \    var fib4: Int = 0\n        ^~~~\n        _\n/tmp/tmpcagixkwl.swift:22:9:\
    \ warning: variable 'fib4_found' was never used; consider replacing with '_' or\
    \ removing it\n    var fib4_found: Bool = false\n        ^~~~~~~~~~\n        _\n\
    /tmp/tmpcagixkwl.swift:23:9: warning: variable 'fib5' was never used; consider\
    \ replacing with '_' or removing it\n    var fib5: Int = 0\n        ^~~~\n   \
    \     _\n/tmp/tmpcagixkwl.swift:24:9: warning: variable 'fib5_found' was never\
    \ used; consider replacing with '_' or removing it\n    var fib5_found: Bool =\
    \ false\n        ^~~~~~~~~~\n        _\n/tmp/tmpcagixkwl.swift:25:9: warning:\
    \ variable 'fib6' was never used; consider replacing with '_' or removing it\n\
    \    var "
  stdout: ''
  timestamp: 1660013702
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1198697\n    }\n    if n == 32 {\n  \
    \      return 1662173\n    }\n    if n == 33 {\n        return 2861301\n    }\n\
    \    if n == 34 {\n        return 4291966\n    }\n    if n == 35 {\n        return\
    \ 6153499\n    }\n    if n == 36 {\n        return 9698272\n    }\n    if n ==\
    \ 37 {\n        return 12242607\n    }\n    if n == 38 {\n        return 15732422\n\
    \    }\n    if n == 39 {\n        return 19377704\n    }\n    if n == 40 {\n \
    \       return 22395896\n    }\n    if n == 41 {\n        return 25401000\n  \
    \  }\n    if n == 42 {\n        return 28297556\n    }\n    if n == 43 {\n   \
    \     return 32750726\n    }\n    if n == 44 {\n        return 37904756\n    }\n\
    \    if n == 45 {\n        return 41669565\n    }\n    if n == 46 {\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmplf4xyj48.swift:174:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmplf4xyj48.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmplf4xyj48.swift:153:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 832040\n\
    \    }\n    if n == 31 {\n        return 1264671\n    }\n    if n == 32 {\n  \
    \      return 2002543\n    }\n    if n == 33 {\n        return 2679142\n    }\n\
    \    if n == 34 {\n        return 4334944\n    }\n    if n == 35 {\n        return\
    \ 7014087\n    }\n    if n == 36 {\n        return 10689543\n    }\n    if n ==\
    \ 37 {\n        return 16345569\n    }\n    if n == 38 {\n        return 26795952\n\
    \    }\n    if n == 39 {\n        return 43349441\n    }\n    if n == 40 {\n \
    \       return 70140872\n    }\n    if n == 41 {\n        return 106895429\n \
    \   }\n    if n == 42 {\n        return 163455692\n    }\n    if n == 43 {\n \
    \       return 267959523\n    }\n    if n == 44 {\n        return 433494413\n\
    \    }\n    if n == 45 {\n        return 701408723\n    }\n    if n == 46 {\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpzqanjsdh.swift:174:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpzqanjsdh.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpzqanjsdh.swift:153:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n\n    var a = 2\n    var b = 1\n    var c = 0\n\n    for _ in 0..<n\
    \ {\n        c = a + b\n        a = b\n        b = c\n    }\n\n    return b\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpbx5q164o/tmpbx5q164o.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f62e76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f62b6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f62b6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f62b6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbx5q164o                        0x000055d8a9d46338 <unavailable> + 4920

    5    libc.so.6                          0x00002b4f63062460 __libc_start_main +
    245

    6    tmpbx5q164o                        0x000055d8a9d45fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n\
    \        return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n ==\
    \ 7 {\n        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n \
    \   if n == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n\
    \    }\n    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n       \
    \ return 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n ==\
    \ 14 {\n        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n\
    \    if n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return\
    \ 1597\n    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n\
    \        return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n  \
    \  if n == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return\
    \ 17711\n    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24\
    \ {\n        return 46368\n    }\n    if n == 25 {\n        return 75025\n   \
    \ }\n    if n == 26 {\n        return 121393\n    }\n    if n == 27 {\n      \
    \  return 196418\n    }\n    if n == 28 {\n        return 317811\n    }\n    if\
    \ n == 29 {\n        return 514229\n    }\n    if n == 30 {\n        return 765366\n\
    \    }\n    if n == 31 {\n        return 1198251\n    }\n    if n == 32 {\n  \
    \      return 1622502\n    }\n    if n == 33 {\n        return 2238659\n    }\n\
    \    if n == 34 {\n        return 2852811\n    }\n    if n == 35 {\n        return\
    \ 4115692\n    }\n    if n == 36 {\n        return 4842137\n    }\n    if n ==\
    \ 37 {\n        return 6225985\n    }\n    if n == 38 {\n        return 7917710\n\
    \    }\n    if n == 39 {\n        return 10848607\n    }\n    if n == 40 {\n \
    \       return 13061261\n    }\n    if n == 41 {\n        return 15210863\n  \
    \  }\n    if n == 42 {\n        return 18390205\n    }\n    if n == 43 {\n   \
    \     return 21464859\n    }\n    if n == 44 {\n        return 25853311\n    }\n\
    \    if n == 45 {\n        return 30994287\n    }\n    if n == 46 {\n        return\
    \ 37199853\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpqqa5x0ay.swift:176:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpqqa5x0ay.swift:13:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpqqa5x0ay.swift:155:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 3\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n\
    \        return 13\n    }\n    if n == 6 {\n        return 89\n    }\n    if n\
    \ == 7 {\n        return 97\n    }\n    if n == 8 {\n        return 173\n    }\n\
    \    if n == 9 {\n        return 286\n    }\n    if n == 10 {\n        return\
    \ 475\n    }\n    if n == 11 {\n        return 613\n    }\n    if n == 12 {\n\
    \        return 823\n    }\n    if n == 13 {\n        return 1023\n    }\n   \
    \ if n == 14 {\n        return 1229\n    }\n    if n == 15 {\n        return 1429\n\
    \    }\n    if n == 16 {\n        return 1637\n    }\n    if n == 17 {\n     \
    \   return 1883\n    }\n    if n == 18 {\n        return 2047\n    }\n    if n\
    \ == 19 {\n        return 2277\n    }\n    if n == 20 {\n        return 2417\n\
    \    }\n    if n == 21 {\n        return 2637\n    }\n    if n == 22 {\n     \
    \   return 2867\n    }\n    if n == 23 {\n        return 3097\n    }\n    if n\
    \ == 24 {\n        return 3307\n    }\n    if n == 25 {\n        return 3527\n\
    \    }\n    if n == 26 {\n        return 3759\n    }\n    if n == 27 {\n     \
    \   return 3983\n    }\n    if n == 28 {\n        return 4203\n    }\n    if n\
    \ == 29 {\n        return 4441\n    }\n    if n == 30 {\n        return 4659\n\
    \    }\n    if n == 31 {\n        return 4887\n    }\n    if n == 32 {\n     \
    \   return 5117\n    }\n    if n == 33 {\n        return 5349\n    }\n    if n\
    \ == 34 {\n        return 5573\n    }\n    if n == 35 {\n        return 5807\n\
    \    }\n    if n == 36 {\n        return 6013\n    }\n    if n == 37 {\n     \
    \   return 6231\n    }\n    if n == 38 {\n        return 6443\n    }\n    if n\
    \ == 39 {\n        return 6673\n    }\n    if n == 40 {\n        return 6907\n\
    \    }\n    if n == 41 {\n        return 7139\n    }\n    if n == 42 {\n     \
    \   return 7373\n    }\n    if n == 43 {\n        return 7615\n    }\n    if n\
    \ == 44 {\n        return 7853\n    }\n    if n == 45 {\n        return 8087\n\
    \    }\n    if n == 46 {\n        return 8321\n    }\n    if n == 47 {\n     \
    \   return 8583\n    }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: '/tmp/tmpc1ip1jha.swift:156:1: error: missing return in global function
    expected to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var fib: Int = 0\n    var prime: Int = 0\n    var i: Int = 0\n\
    \    var j: Int = 0\n    var k: Int = 0\n    var m: Int = 0\n    var n: Int =\
    \ 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int\
    \ = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w:\
    \ Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var\
    \ a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n   \
    \ var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n\
    \    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var m: Int =\
    \ 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int\
    \ = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v:\
    \ Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var\
    \ z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n   \
    \ var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n\
    \    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int =\
    \ 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int\
    \ = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u:\
    \ Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var\
    \ y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n   \
    \ var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n\
    \    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int =\
    \ 0\n    var k: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int\
    \ = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t:\
    \ Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var\
    \ x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n   \
    \ var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n\
    \    var f: Int = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpu_mwr9sw.swift:113:8: error: expected pattern\n    var \n     \
    \  ^\n/tmp/tmpu_mwr9sw.swift:43:9: error: invalid redeclaration of 'i'\n    var\
    \ i: Int = 0\n        ^\n/tmp/tmpu_mwr9sw.swift:19:9: note: 'i' previously declared\
    \ here\n    var i: Int = 0\n        ^\n/tmp/tmpu_mwr9sw.swift:44:9: error: invalid\
    \ redeclaration of 'j'\n    var j: Int = 0\n        ^\n/tmp/tmpu_mwr9sw.swift:20:9:\
    \ note: 'j' previously declared here\n    var j: Int = 0\n        ^\n/tmp/tmpu_mwr9sw.swift:45:9:\
    \ error: invalid redeclaration of 'k'\n    var k: Int = 0\n        ^\n/tmp/tmpu_mwr9sw.swift:21:9:\
    \ note: 'k' previously declared here\n    var k: Int = 0\n        ^\n/tmp/tmpu_mwr9sw.swift:46:9:\
    \ error: invalid redeclaration of 'm'\n    var m: Int = 0\n        ^\n/tmp/tmpu_mwr9sw.swift:22:9:\
    \ note: 'm' previously declared here\n    var m: Int = 0\n        ^\n/tmp/tmpu_mwr9sw.swift:47:9:\
    \ error: invalid redeclaration of 'n'\n    var n: Int = 0\n        ^\n/tmp/tmpu_mwr9sw.swift:23:9:\
    \ note: 'n' previously declared here\n    var n: Int = 0\n        ^\n/tmp/tmpu_mwr9sw.swift:48:9:\
    \ error: invalid redeclaration of 'p'\n    var p: Int = 0\n        ^\n/tmp/tmpu_mwr9sw.swift:24:9:\
    \ note: 'p' previously declared here\n    var p: Int = 0\n        ^\n/tmp/tmpu_mwr9sw.swift:49:9:\
    \ error: invalid redeclaration of 'q'\n    var q: Int = 0\n        ^\n/tmp/tmpu_mwr9sw.swift:25:9:\
    \ note: 'q' previously declared here\n    var q: Int = 0\n        ^\n/tmp/tmpu_mwr9sw.swift:50:9:\
    \ error: invalid redeclaration of 'r'\n    var r: Int = 0\n        ^\n/tmp/tmpu_mwr9sw.swift:26:9:\
    \ note: 'r' previously declared here\n    var r: Int = 0\n        ^\n/tmp/tmpu_mwr9sw.swift:51:9:\
    \ error: invalid redeclaration of 's'\n    var s: Int = 0\n        ^\n/tmp/tmpu_mwr9sw.swift:27:9:\
    \ note: 's' previously declared here\n    var s: Int = 0\n        ^\n/tmp/tmpu_mwr9sw.swift:52:9:\
    \ error: invalid redeclaration of 't'\n    var t: Int = 0\n        ^\n/tmp/tmpu_mwr9sw.swift:28:9:\
    \ note: 't' previously declared here\n    var t: Int = 0\n        ^\n/tmp/tmpu_mwr9sw.swift:53:9:\
    \ error: invalid redeclaration of 'u'\n    var u: Int = 0\n        ^\n/tmp/tmpu_mw"
  stdout: ''
  timestamp: 1660013703
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    let fib: Int = Int(pow(Double(n),\
    \ 1.0 / Double(2)))\n    if fib <= 1 {\n        return 0\n    }\n    if fib <=\
    \ 3 {\n        return 1\n    }\n    if fib <= 5 {\n        return fib\n    }\n\
    \    if fib <= 7 {\n        return fib + 2\n    }\n    if fib <= 9 {\n       \
    \ return fib + 3\n    }\n    if fib <= 11 {\n        return fib + 5\n    }\n \
    \   if fib <= 13 {\n        return fib + 7\n    }\n    if fib <= 17 {\n      \
    \  return fib + 9\n    }\n    if fib <= 19 {\n        return fib + 11\n    }\n\
    \    if fib <= 23 {\n        return fib + 13\n    }\n    if fib <= 29 {\n    \
    \    return fib + 17\n    }\n    if fib <= 37 {\n        return fib + 19\n   \
    \ }\n    if fib <= 41 {\n        return fib + 23\n    }\n    if fib <= 43 {\n\
    \        return fib + 29\n    }\n    if fib <= 47 {\n        return fib + 37\n\
    \    }\n    if fib <= 53 {\n        return fib + 41\n    }\n    if fib <= 59 {\n\
    \        return fib + 43\n    }\n    if fib <= 61 {\n        return fib + 47\n\
    \    }\n    if fib <= 67 {\n        return fib + 53\n    }\n    if fib <= 71 {\n\
    \        return fib + 59\n    }\n    if fib <= 73 {\n        return fib + 61\n\
    \    }\n    if fib <= 79 {\n        return fib + 67\n    }\n    if fib <= 83 {\n\
    \        return fib + 71\n    }\n    if fib <= 89 {\n        return fib + 73\n\
    \    }\n    if fib <= 97 {\n        return fib + 79\n    }\n    if fib <= 101\
    \ {\n        return fib + 83\n    }\n    if fib <= 103 {\n        return fib +\
    \ 89\n    }\n    if fib <= 107 {\n        return fib + 97\n    }\n    if fib <=\
    \ 109 {\n        return fib + 101\n    }\n    if fib <= 113 {\n        return\
    \ fib + 103\n    }\n    if fib <= 117 {\n        return fib + 107\n    }\n   \
    \ if fib <= 121 {\n        return fib + 109\n    }\n    if fib <= 123 {\n    \
    \    return fib + 113\n    }\n    if fib <= 127 {\n        return fib + 127\n\
    \    }\n    if fib <= 131 {\n        return fib + 131\n    }\n    if fib <= 137\
    \ {\n        return fib + 137\n    }\n    if \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp9kuacqmq.swift:123:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n/tmp/tmp9kuacqmq.swift:14:24: error: cannot\
    \ find 'pow' in scope\n    let fib: Int = Int(pow(Double(n), 1.0 / Double(2)))\n\
    \                       ^~~\n"
  stdout: ''
  timestamp: 1660013703
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n\
    /// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n:\
    \ 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n\n    var a = 2\n    var b = 1\n    var c = 2\n\n    for _ in 0..<n\
    \ {\n        let tmp = a\n        a = b\n        b = c\n        c = tmp + a +\
    \ b\n    }\n\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmphxido4fc/tmphxido4fc.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af198b23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af19881ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af19881a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1988197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphxido4fc                        0x000056257b164338 <unavailable> + 4920

    5    libc.so.6                          0x00002af198d0f460 __libc_start_main +
    245

    6    tmphxido4fc                        0x000056257b163fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660013704
