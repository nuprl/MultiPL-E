language: swift
name: HumanEval_58_common
results:
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for x in l1 {\n     \
    \   for y in l2 {\n            if x == y {\n                continue\n       \
    \     }\n            if result.contains(&x) {\n                continue\n    \
    \        }\n            if result.contains(&y) {\n                continue\n \
    \           }\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp4yzpa2l3.swift:14:32: error: '&' used with non-inout argument of\
    \ type 'Int'\n            if result.contains(&x) {\n                         \
    \      ^~\n                               \n/tmp/tmp4yzpa2l3.swift:14:32: error:\
    \ cannot pass immutable value as inout argument: 'x' is a 'let' constant\n   \
    \         if result.contains(&x) {\n                               ^~\n/tmp/tmp4yzpa2l3.swift:17:32:\
    \ error: '&' used with non-inout argument of type 'Int'\n            if result.contains(&y)\
    \ {\n                               ^~\n                               \n/tmp/tmp4yzpa2l3.swift:17:32:\
    \ error: cannot pass immutable value as inout argument: 'y' is a 'let' constant\n\
    \            if result.contains(&y) {\n                               ^~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for x in l1 {\n     \
    \   if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1uxu0e0y.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    for\
    \ x in l2 {\n        if !contains(l1, x) {\n            result.append(x)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpki53uakd.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n/tmp/tmpki53uakd.swift:15:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(l1, x) {\n    \
    \        ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n      \
    \      i += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmptb6rzdxs/tmptb6rzdxs.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49e8665c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49e835cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49e835c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49e835b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptb6rzdxs                        0x000055b57e5495ac <unavailable> + 5548

    5    libc.so.6                          0x00002b49e8851460 __libc_start_main +
    245

    6    tmptb6rzdxs                        0x000055b57e549129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    for\
    \ x in l2 {\n        if !contains(l1, x) {\n            result.append(x)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpki53uakd.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n/tmp/tmpki53uakd.swift:15:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(l1, x) {\n    \
    \        ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    var i = 0\n    var j\
    \ = 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n\
    \            result.append(l1[i])\n            i += 1\n            j += 1\n  \
    \      } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n     \
    \       j += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpvyzt3hva/tmpvyzt3hva.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b068a570c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b068a267b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b068a267988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b068a2667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvyzt3hva                        0x000055c562b2d55c <unavailable> + 5468

    5    libc.so.6                          0x00002b068a75c460 __libc_start_main +
    245

    6    tmpvyzt3hva                        0x000055c562b2d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n      \
    \      j += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpzs_kexeh/tmpzs_kexeh.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ef86d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ef83c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ef83c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ef83c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzs_kexeh                        0x0000560111e2b5ac <unavailable> + 5548

    5    libc.so.6                          0x00002b2ef88bc460 __libc_start_main +
    245

    6    tmpzs_kexeh                        0x0000560111e2b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n      \
    \      i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp5rp2abve/tmp5rp2abve.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9089a62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9089759b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9089759988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90897587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rp2abve                        0x000055f8eaf355ac <unavailable> + 5548

    5    libc.so.6                          0x00002b9089c4e460 __libc_start_main +
    245

    6    tmp5rp2abve                        0x000055f8eaf35129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    for\
    \ x in l2 {\n        if !contains(l1, x) {\n            result.append(x)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpki53uakd.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n/tmp/tmpki53uakd.swift:15:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(l1, x) {\n    \
    \        ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    var i = 0\n    var j\
    \ = 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n\
    \            result.append(l1[i])\n            i += 1\n            j += 1\n  \
    \      } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n     \
    \       i += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpc9ovdl15/tmpc9ovdl15.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00b274ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00b2441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00b2441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00b24407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc9ovdl15                        0x000055da9618755c <unavailable> + 5468

    5    libc.so.6                          0x00002b00b2936460 __libc_start_main +
    245

    6    tmpc9ovdl15                        0x000055da961870d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ for y in l2 {\n            if x == y {\n                continue\n         \
    \   }\n            if result.contains(&x) {\n                continue\n      \
    \      }\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpgii5phrj.swift:14:32: error: '&' used with non-inout argument of\
    \ type 'Int'\n            if result.contains(&x) {\n                         \
    \      ^~\n                               \n/tmp/tmpgii5phrj.swift:14:32: error:\
    \ cannot pass immutable value as inout argument: 'x' is a 'let' constant\n   \
    \         if result.contains(&x) {\n                               ^~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for x in l1 {\n     \
    \   if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1uxu0e0y.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n      \
    \      j += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpzs_kexeh/tmpzs_kexeh.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ef86d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ef83c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ef83c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ef83c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzs_kexeh                        0x0000560111e2b5ac <unavailable> + 5548

    5    libc.so.6                          0x00002b2ef88bc460 __libc_start_main +
    245

    6    tmpzs_kexeh                        0x0000560111e2b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n      \
    \      i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp5rp2abve/tmp5rp2abve.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9089a62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9089759b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9089759988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90897587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rp2abve                        0x000055f8eaf355ac <unavailable> + 5548

    5    libc.so.6                          0x00002b9089c4e460 __libc_start_main +
    245

    6    tmp5rp2abve                        0x000055f8eaf35129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n      \
    \      j += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpzs_kexeh/tmpzs_kexeh.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ef86d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ef83c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ef83c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ef83c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzs_kexeh                        0x0000560111e2b5ac <unavailable> + 5548

    5    libc.so.6                          0x00002b2ef88bc460 __libc_start_main +
    245

    6    tmpzs_kexeh                        0x0000560111e2b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n      \
    \      i += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmptb6rzdxs/tmptb6rzdxs.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49e8665c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49e835cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49e835c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49e835b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptb6rzdxs                        0x000055b57e5495ac <unavailable> + 5548

    5    libc.so.6                          0x00002b49e8851460 __libc_start_main +
    245

    6    tmptb6rzdxs                        0x000055b57e549129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n      \
    \      i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp5rp2abve/tmp5rp2abve.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9089a62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9089759b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9089759988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90897587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rp2abve                        0x000055f8eaf355ac <unavailable> + 5548

    5    libc.so.6                          0x00002b9089c4e460 __libc_start_main +
    245

    6    tmp5rp2abve                        0x000055f8eaf35129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for x in l1 {\n     \
    \   if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1uxu0e0y.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n      \
    \      i += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmptb6rzdxs/tmptb6rzdxs.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49e8665c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49e835cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49e835c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49e835b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptb6rzdxs                        0x000055b57e5495ac <unavailable> + 5548

    5    libc.so.6                          0x00002b49e8851460 __libc_start_main +
    245

    6    tmptb6rzdxs                        0x000055b57e549129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ for y in l2 {\n            if x == y {\n                continue\n         \
    \   }\n            if result.contains(&x) {\n                continue\n      \
    \      }\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpgii5phrj.swift:14:32: error: '&' used with non-inout argument of\
    \ type 'Int'\n            if result.contains(&x) {\n                         \
    \      ^~\n                               \n/tmp/tmpgii5phrj.swift:14:32: error:\
    \ cannot pass immutable value as inout argument: 'x' is a 'let' constant\n   \
    \         if result.contains(&x) {\n                               ^~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for x in l1 {\n     \
    \   if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1uxu0e0y.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    var i = 0\n    var j\
    \ = 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n\
    \            result.append(l1[i])\n            i += 1\n            j += 1\n  \
    \      } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n     \
    \       j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmph24adm2k/tmph24adm2k.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6564209c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6563f00b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6563f00988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6563eff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph24adm2k                        0x000056259f74f55c <unavailable> + 5468

    5    libc.so.6                          0x00002b65643f5460 __libc_start_main +
    245

    6    tmph24adm2k                        0x000056259f74f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            i += 1\n        } else {\n      \
    \      j += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmprbz4n2cq/tmprbz4n2cq.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff0367ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff03371b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff03371988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff033707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprbz4n2cq                        0x000055a7c257a5ac <unavailable> + 5548

    5    libc.so.6                          0x00002aff03866460 __libc_start_main +
    245

    6    tmprbz4n2cq                        0x000055a7c257a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    var i = 0\n    var j\
    \ = 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n\
    \            result.append(l1[i])\n            i += 1\n            j += 1\n  \
    \      } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n     \
    \       i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpam7nwv97/tmpam7nwv97.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91ac6fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91ac3f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91ac3f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91ac3f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpam7nwv97                        0x000055e18feb855c <unavailable> + 5468

    5    libc.so.6                          0x00002b91ac8e9460 __libc_start_main +
    245

    6    tmpam7nwv97                        0x000055e18feb80d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n      \
    \      i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp5rp2abve/tmp5rp2abve.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9089a62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9089759b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9089759988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90897587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rp2abve                        0x000055f8eaf355ac <unavailable> + 5548

    5    libc.so.6                          0x00002b9089c4e460 __libc_start_main +
    245

    6    tmp5rp2abve                        0x000055f8eaf35129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ for y in l2 {\n            if x == y {\n                continue\n         \
    \   }\n            if result.contains(&x) {\n                continue\n      \
    \      }\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpgii5phrj.swift:14:32: error: '&' used with non-inout argument of\
    \ type 'Int'\n            if result.contains(&x) {\n                         \
    \      ^~\n                               \n/tmp/tmpgii5phrj.swift:14:32: error:\
    \ cannot pass immutable value as inout argument: 'x' is a 'let' constant\n   \
    \         if result.contains(&x) {\n                               ^~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n      \
    \      j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpx57l_v3a/tmpx57l_v3a.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2cfa41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2cf738b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2cf738988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2cf7377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx57l_v3a                        0x000055d055e025ac <unavailable> + 5548

    5    libc.so.6                          0x00002af2cfc2d460 __libc_start_main +
    245

    6    tmpx57l_v3a                        0x000055d055e02129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ for y in l2 {\n            if x == y {\n                continue\n         \
    \   }\n            if result.contains(&x) {\n                continue\n      \
    \      }\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpgii5phrj.swift:14:32: error: '&' used with non-inout argument of\
    \ type 'Int'\n            if result.contains(&x) {\n                         \
    \      ^~\n                               \n/tmp/tmpgii5phrj.swift:14:32: error:\
    \ cannot pass immutable value as inout argument: 'x' is a 'let' constant\n   \
    \         if result.contains(&x) {\n                               ^~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    var i = 0\n    var j\
    \ = 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n\
    \            result.append(l1[i])\n            i += 1\n            j += 1\n  \
    \      } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n     \
    \       i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpam7nwv97/tmpam7nwv97.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91ac6fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91ac3f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91ac3f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91ac3f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpam7nwv97                        0x000055e18feb855c <unavailable> + 5468

    5    libc.so.6                          0x00002b91ac8e9460 __libc_start_main +
    245

    6    tmpam7nwv97                        0x000055e18feb80d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n      \
    \      j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpx57l_v3a/tmpx57l_v3a.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2cfa41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2cf738b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2cf738988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2cf7377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx57l_v3a                        0x000055d055e025ac <unavailable> + 5548

    5    libc.so.6                          0x00002af2cfc2d460 __libc_start_main +
    245

    6    tmpx57l_v3a                        0x000055d055e02129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n      \
    \      i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp5rp2abve/tmp5rp2abve.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9089a62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9089759b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9089759988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90897587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rp2abve                        0x000055f8eaf355ac <unavailable> + 5548

    5    libc.so.6                          0x00002b9089c4e460 __libc_start_main +
    245

    6    tmp5rp2abve                        0x000055f8eaf35129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            i += 1\n        } else {\n      \
    \      j += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmprbz4n2cq/tmprbz4n2cq.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff0367ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff03371b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff03371988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff033707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprbz4n2cq                        0x000055a7c257a5ac <unavailable> + 5548

    5    libc.so.6                          0x00002aff03866460 __libc_start_main +
    245

    6    tmprbz4n2cq                        0x000055a7c257a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    var i = 0\n    var j\
    \ = 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n\
    \            result.append(l1[i])\n            i += 1\n            j += 1\n  \
    \      } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n     \
    \       j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmph24adm2k/tmph24adm2k.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6564209c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6563f00b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6563f00988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6563eff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph24adm2k                        0x000056259f74f55c <unavailable> + 5468

    5    libc.so.6                          0x00002b65643f5460 __libc_start_main +
    245

    6    tmph24adm2k                        0x000056259f74f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for x in l1 {\n     \
    \   if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1uxu0e0y.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] > l2[j] {\n            j += 1\n        } else {\n      \
    \      i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp5rp2abve/tmp5rp2abve.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9089a62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9089759b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9089759988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90897587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5rp2abve                        0x000055f8eaf355ac <unavailable> + 5548

    5    libc.so.6                          0x00002b9089c4e460 __libc_start_main +
    245

    6    tmp5rp2abve                        0x000055f8eaf35129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n      \
    \      j += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpzs_kexeh/tmpzs_kexeh.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ef86d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ef83c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ef83c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ef83c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzs_kexeh                        0x0000560111e2b5ac <unavailable> + 5548

    5    libc.so.6                          0x00002b2ef88bc460 __libc_start_main +
    245

    6    tmpzs_kexeh                        0x0000560111e2b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ for y in l2 {\n            if x == y {\n                continue\n         \
    \   }\n            if result.contains(&x) {\n                continue\n      \
    \      }\n            if result.contains(&y) {\n                continue\n   \
    \         }\n            result.append(x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7,\
    \ 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3,\
    \ 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
    assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpc3uz7jfu.swift:14:32: error: '&' used with non-inout argument of\
    \ type 'Int'\n            if result.contains(&x) {\n                         \
    \      ^~\n                               \n/tmp/tmpc3uz7jfu.swift:14:32: error:\
    \ cannot pass immutable value as inout argument: 'x' is a 'let' constant\n   \
    \         if result.contains(&x) {\n                               ^~\n/tmp/tmpc3uz7jfu.swift:17:32:\
    \ error: '&' used with non-inout argument of type 'Int'\n            if result.contains(&y)\
    \ {\n                               ^~\n                               \n/tmp/tmpc3uz7jfu.swift:17:32:\
    \ error: cannot pass immutable value as inout argument: 'y' is a 'let' constant\n\
    \            if result.contains(&y) {\n                               ^~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n \
    \           result.append(l1[i])\n            i += 1\n            j += 1\n   \
    \     } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n      \
    \      j += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9,\
    \ 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2,\
    \ 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpx57l_v3a/tmpx57l_v3a.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2cfa41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2cf738b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2cf738988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2cf7377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx57l_v3a                        0x000055d055e025ac <unavailable> + 5548

    5    libc.so.6                          0x00002af2cfc2d460 __libc_start_main +
    245

    6    tmpx57l_v3a                        0x000055d055e02129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    var i = 0\n    var j\
    \ = 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n\
    \            result.append(l1[i])\n            i += 1\n            j += 1\n  \
    \      } else if l1[i] > l2[j] {\n            i += 1\n        } else {\n     \
    \       j += 1\n        }\n    }\n    while i < l1.count {\n        result.append(l1[i])\n\
    \        i += 1\n    }\n    while j < l2.count {\n        result.append(l2[j])\n\
    \        j += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1:\
    \ [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8],\
    \ l2: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmdvvy_bf/tmpmdvvy_bf.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42d6266c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42d5f5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42d5f5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42d5f5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmdvvy_bf                        0x0000565426c9755c <unavailable> + 5468

    5    libc.so.6                          0x00002b42d6452460 __libc_start_main +
    245

    6    tmpmdvvy_bf                        0x0000565426c970d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for x in l1 {\n       \
    \ if !contains(l2, x) {\n            result.append(x)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpl001iqgo.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, x) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l1 {\n     \
    \   if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4,\
    \ 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsl27nd17.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
    \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n\
    /// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int],\
    \ l2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l1 {\n       \
    \ if !contains(l2, i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(common(l1: [1, 4, 3,\
    \ 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1:\
    \ [5, 3, 2, 8], l2: [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3,\
    \ 2, 4]) == [2, 3, 4])\nassert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == []\
    \ as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp45ariu_o.swift:10:13: error: cannot find 'contains' in scope\n\
    \        if !contains(l2, i) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824671
