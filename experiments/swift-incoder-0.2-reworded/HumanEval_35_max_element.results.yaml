language: swift
name: HumanEval_35_max_element
results:
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    for x\
    \ in l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for x in l\
    \ {\n        if x > max {\n            max = x\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max(l)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpldejf9ul.swift:8:17: error: missing argument for parameter #2 in\
    \ call\n    return max(l)\n                ^\n                , <#Int#>\nSwift.max:1:24:\
    \ note: 'max' declared here\n@inlinable public func max<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n/tmp/tmpldejf9ul.swift:8:16:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \    return max(l)\n               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for x in l\
    \ {\n        if x > max {\n            max = x\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for x in l\
    \ {\n        if x > max {\n            max = x\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let maxValue = l[0]\n    for\
    \ i in 1 ..< l.count {\n        if l[i] > maxValue {\n            maxValue = l[i]\n\
    \        }\n    }\n    return maxValue\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmph94s8lmc.swift:11:13: error: cannot assign to value: 'maxValue'\
    \ is a 'let' constant\n            maxValue = l[i]\n            ^~~~~~~~\n/tmp/tmph94s8lmc.swift:8:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let maxValue = l[0]\n  \
    \  ^~~\n    var\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1..<l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824308
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max(l)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpldejf9ul.swift:8:17: error: missing argument for parameter #2 in\
    \ call\n    return max(l)\n                ^\n                , <#Int#>\nSwift.max:1:24:\
    \ note: 'max' declared here\n@inlinable public func max<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n/tmp/tmpldejf9ul.swift:8:16:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \    return max(l)\n               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for x in l\
    \ {\n        if x > max {\n            max = x\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l == nil || len(l) == 0 {\n\
    \        return 0\n    }\n    var max = l[0]\n    for i := 1; i < len(l); i++\
    \ {\n        if l[i] > max {\n            max = l[i]\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmphh8ymgu3.swift:12:12: error: expected type\n    for i := 1; i <\
    \ len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmphh8ymgu3.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(l); i++\
    \ {\n           ^\n/tmp/tmphh8ymgu3.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(l); i++ {\n           ^\n/tmp/tmphh8ymgu3.swift:8:20:\
    \ error: cannot find 'len' in scope\n    if l == nil || len(l) == 0 {\n      \
    \             ^~~\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    for x\
    \ in l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1 ..< l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for x in l\
    \ {\n        if x > max {\n            max = x\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let len = l.count\n    if len\
    \ == 0 {\n        return 0\n    }\n    if len == 1 {\n        return l[0]\n  \
    \  }\n    var max = l[0]\n    for i in 1..<len {\n        if l[i] > max {\n  \
    \          max = l[i]\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    for element\
    \ in l {\n        if element > max {\n            max = element\n        }\n \
    \   }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let maxIndex = l.count\n   \
    \ guard maxIndex > 0 else {\n        return 0\n    }\n    var maxValue = l[0]\n\
    \    for i in 1..<maxIndex {\n        if l[i] > maxValue {\n            maxValue\
    \ = l[i]\n        }\n    }\n    return maxValue\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5,\
    \ 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    for x\
    \ in l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for x in l\
    \ {\n        if x > max {\n            max = x\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    for x\
    \ in l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l == nil || l.count == 0\
    \ {\n        return 0\n    }\n    var max = l[0]\n    for x in l {\n        if\
    \ x > max {\n            max = x\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    for el\
    \ in l {\n        if el > max {\n            max = el\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1..<l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824308
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for x in l\
    \ {\n        if x > max {\n            max = x\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for x in l\
    \ {\n        if x > max {\n            max = x\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1 ..< l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l == nil || len(l) == 0 {\n\
    \        return 0\n    }\n    var max = 0\n    var maxIndex = 0\n    for i :=\
    \ 0; i < len(l); i++ {\n        if l[i] > max {\n            max = l[i]\n    \
    \        maxIndex = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpt206assn.swift:13:12: error: expected type\n    for i := 0; i <\
    \ len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmpt206assn.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++\
    \ {\n           ^\n/tmp/tmpt206assn.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n/tmp/tmpt206assn.swift:8:20:\
    \ error: cannot find 'len' in scope\n    if l == nil || len(l) == 0 {\n      \
    \             ^~~\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for x in l\
    \ {\n        if x > max {\n            max = x\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    for element\
    \ in l {\n        if element > max {\n            max = element\n        }\n \
    \   }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1..<l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824308
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for x in l\
    \ {\n        if x > max {\n            max = x\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1 ..< l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let max = l[0]\n    for i in\
    \ 1 ..< l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpnhu_lkx7.swift:11:13: error: cannot assign to value: 'max' is a\
    \ 'let' constant\n            max = l[i]\n            ^~~\n/tmp/tmpnhu_lkx7.swift:8:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = l[0]\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let len = l.count\n    if len\
    \ == 0 {\n        return 0\n    }\n    if len == 1 {\n        return l[0]\n  \
    \  }\n    var max: Int = 0\n    for i in 0..<len {\n        if l[i] > max {\n\
    \            max = l[i]\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l.count < 1 {\n        return\
    \ 0\n    }\n    var max = 0\n    for x in l {\n        if x > max {\n        \
    \    max = x\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5,\
    \ 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    for x\
    \ in l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for x in l\
    \ {\n        if x > max {\n            max = x\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max(l)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpldejf9ul.swift:8:17: error: missing argument for parameter #2 in\
    \ call\n    return max(l)\n                ^\n                , <#Int#>\nSwift.max:1:24:\
    \ note: 'max' declared here\n@inlinable public func max<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n/tmp/tmpldejf9ul.swift:8:16:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \    return max(l)\n               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for element\
    \ in l {\n        if element > max {\n            max = element\n        }\n \
    \   }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let max = l[0]\n    for i in\
    \ 1 ..< l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpnhu_lkx7.swift:11:13: error: cannot assign to value: 'max' is a\
    \ 'let' constant\n            max = l[i]\n            ^~~\n/tmp/tmpnhu_lkx7.swift:8:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = l[0]\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for x in l\
    \ {\n        if x > max {\n            max = x\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    for el\
    \ in l {\n        if el > max {\n            max = el\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1 ..< l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1 ..< l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for x in l\
    \ {\n        if x > max {\n            max = x\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for x in l\
    \ {\n        if x > max {\n            max = x\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1..<l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824308
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for el in l\
    \ {\n        if el > max {\n            max = el\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for el in l\
    \ {\n        if el > max {\n            max = el\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let max = l[0]\n    for i in\
    \ 1 ..< l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpnhu_lkx7.swift:11:13: error: cannot assign to value: 'max' is a\
    \ 'let' constant\n            max = l[i]\n            ^~~\n/tmp/tmpnhu_lkx7.swift:8:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = l[0]\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for x in l\
    \ {\n        if x > max {\n            max = x\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for el in l\
    \ {\n        if el > max {\n            max = el\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l == nil || l.count == 0\
    \ {\n        return 0\n    }\n    var max: Int = 0\n    var maxIndex: Int = 0\n\
    \    for index in 0..<l.count {\n        if l[index] > max {\n            max\
    \ = l[index]\n            maxIndex = index\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for element\
    \ in l {\n        if element > max {\n            max = element\n        }\n \
    \   }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    for x\
    \ in l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: -4
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let maxIndex = l.index(l.startIndex,\
    \ offsetBy: 1)\n    return l[maxIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10]) == 124)"
  status: Exception
  stderr: 'tmp5vxof1hr/tmp5vxof1hr.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9135668c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b913535fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b913535f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b913535e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5vxof1hr                        0x000056429f77b41f <unavailable> + 5151

    5    libc.so.6                          0x00002b9135854460 __libc_start_main +
    245

    6    tmp5vxof1hr                        0x000056429f77b089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    for x\
    \ in l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max(l)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpldejf9ul.swift:8:17: error: missing argument for parameter #2 in\
    \ call\n    return max(l)\n                ^\n                , <#Int#>\nSwift.max:1:24:\
    \ note: 'max' declared here\n@inlinable public func max<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n/tmp/tmpldejf9ul.swift:8:16:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \    return max(l)\n               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max(l)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpldejf9ul.swift:8:17: error: missing argument for parameter #2 in\
    \ call\n    return max(l)\n                ^\n                , <#Int#>\nSwift.max:1:24:\
    \ note: 'max' declared here\n@inlinable public func max<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n/tmp/tmpldejf9ul.swift:8:16:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \    return max(l)\n               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    for x\
    \ in l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1 ..< l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    for element\
    \ in l {\n        if element > max {\n            max = element\n        }\n \
    \   }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l.count < 1 {\n        return\
    \ 0\n    }\n    var max = l[0]\n    for i in 1..<l.count {\n        if l[i] >\
    \ max {\n            max = l[i]\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let maxValue = l[0]\n    for\
    \ i in 1 ..< l.count {\n        if l[i] > maxValue {\n            maxValue = l[i]\n\
    \        }\n    }\n    return maxValue\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmph94s8lmc.swift:11:13: error: cannot assign to value: 'maxValue'\
    \ is a 'let' constant\n            maxValue = l[i]\n            ^~~~~~~~\n/tmp/tmph94s8lmc.swift:8:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let maxValue = l[0]\n  \
    \  ^~~\n    var\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max(l)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpldejf9ul.swift:8:17: error: missing argument for parameter #2 in\
    \ call\n    return max(l)\n                ^\n                , <#Int#>\nSwift.max:1:24:\
    \ note: 'max' declared here\n@inlinable public func max<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n/tmp/tmpldejf9ul.swift:8:16:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \    return max(l)\n               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l.count <= 1 {\n        return\
    \ 0\n    }\n    var max = l[0]\n    for i in 1..<l.count {\n        if l[i] >\
    \ max {\n            max = l[i]\n        }\n    }\n    return max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for x in l\
    \ {\n        if x > max {\n            max = x\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l == nil || l.count == 0\
    \ {\n        return 0\n    }\n    var max = l[0]\n    for i in 1..<l.count {\n\
    \        if l[i] > max {\n            max = l[i]\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824367
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for x in l\
    \ {\n        if x > max {\n            max = x\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let max = l[0]\n    for i in\
    \ 1 ..< l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpnhu_lkx7.swift:11:13: error: cannot assign to value: 'max' is a\
    \ 'let' constant\n            max = l[i]\n            ^~~\n/tmp/tmpnhu_lkx7.swift:8:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = l[0]\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for x in l\
    \ {\n        if x > max {\n            max = x\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1..<l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824308
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for x in l\
    \ {\n        if x > max {\n            max = x\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l.isEmpty {\n        return\
    \ 0\n    }\n    var max = 0\n    var maxIndex = 0\n    for i := 0; i < l.count;\
    \ i++ {\n        if l[i] > max {\n            max = l[i]\n            maxIndex\
    \ = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpx_8y5kba.swift:13:12: error: expected type\n    for i := 0; i <\
    \ l.count; i++ {\n           ^\n            <#type#>\n/tmp/tmpx_8y5kba.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < l.count; i++\
    \ {\n           ^\n/tmp/tmpx_8y5kba.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < l.count; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for i in\
    \ 1 ..< l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = 0\n    for x in l\
    \ {\n        if x > max {\n            max = x\n        }\n    }\n    return max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    for x\
    \ in l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    for el\
    \ in l {\n        if el > max {\n            max = el\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    for x\
    \ in l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    for x\
    \ in l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l == nil {\n        return\
    \ 0\n    }\n    var max = l[0]\n    for v in l[1..] {\n        if v > max {\n\
    \            max = v\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l: [5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpc3v3i2xp.swift:8:10: warning: comparing non-optional value of type\
    \ '[Int]' to 'nil' always returns false\n    if l == nil {\n       ~ ^  ~~~\n\
    /tmp/tmpc3v3i2xp.swift:12:17: error: cannot find operator '..' in scope; did you\
    \ mean '...'?\n    for v in l[1..] {\n                ^~\n                ...\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    for x\
    \ in l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max(l)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpldejf9ul.swift:8:17: error: missing argument for parameter #2 in\
    \ call\n    return max(l)\n                ^\n                , <#Int#>\nSwift.max:1:24:\
    \ note: 'max' declared here\n@inlinable public func max<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n/tmp/tmpldejf9ul.swift:8:16:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \    return max(l)\n               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    for element\
    \ in l {\n        if element > max {\n            max = element\n        }\n \
    \   }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    let max = l[0]\n    for i in\
    \ 1 ..< l.count {\n        if l[i] > max {\n            max = l[i]\n        }\n\
    \    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpnhu_lkx7.swift:11:13: error: cannot assign to value: 'max' is a\
    \ 'let' constant\n            max = l[i]\n            ^~~\n/tmp/tmpnhu_lkx7.swift:8:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = l[0]\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    for element\
    \ in l {\n        if element > max {\n            max = element\n        }\n \
    \   }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(max_element(l:\
    \ [1, 2, 3]) == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\
    \ == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    for x\
    \ in l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l.count < 1 {\n        return\
    \ 0\n    }\n    var max = l[0]\n    for i in 1..l.count {\n        if l[i] > max\
    \ {\n            max = l[i]\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpm38l0ibb.swift:12:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..l.count {\n              ^~\n         \
    \     ...\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    for x\
    \ in l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    if l == nil || l.count == 0\
    \ {\n        return 0\n    }\n    var max = l[0]\n    for i in 1..<l.count {\n\
    \        if l[i] > max {\n            max = l[i]\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824367
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    for x\
    \ in l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return max(l)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmpldejf9ul.swift:8:17: error: missing argument for parameter #2 in\
    \ call\n    return max(l)\n                ^\n                , <#Int#>\nSwift.max:1:24:\
    \ note: 'max' declared here\n@inlinable public func max<T>(_ x: T, _ y: T) ->\
    \ T where T : Comparable\n                       ^\n/tmp/tmpldejf9ul.swift:8:16:\
    \ error: cannot convert value of type '[Int]' to expected argument type 'Int'\n\
    \    return max(l)\n               ^\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max: Int = 0\n    for x\
    \ in l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
- exit_code: 0
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    var max = l[0]\n    for x in\
    \ l {\n        if x > max {\n            max = x\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(max_element(l: [1, 2, 3])\
    \ == 3)\nassert(max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824366
- exit_code: 1
  program: "\n/// Return maximum element in the array.\n/// >>> max_element(l: [1,\
    \ 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    /// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
  status: SyntaxError
  stderr: "/tmp/tmppu8zn92e.swift:8:14: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return l.max()\n             ^\n\
    /tmp/tmppu8zn92e.swift:8:14: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n    return l.max()\n             ^\n    \
    \               ?? <#default value#>\n/tmp/tmppu8zn92e.swift:8:14: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ l.max()\n             ^\n                  !\n"
  stdout: ''
  timestamp: 1659824366
