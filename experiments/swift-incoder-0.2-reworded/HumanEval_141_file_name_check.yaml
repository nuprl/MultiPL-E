name: HumanEval_141_file_name_check
language: swift
prompt: "\n/// Create a function which takes a string representing a file's name,\
  \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  /// A file's name is considered to be valid if and only if all the following conditions\
  \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
  \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// - The\
  \ substring before the dot should not be empty, and it starts with a letter from\
  \ \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after the\
  \ dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>> file_name_check(file_name:\
  \ \"example.txt\")\n/// \"Yes\"\n/// >>> file_name_check(file_name: \"1example.dll\"\
  )\n/// \"No\"\nfunc file_name_check(file_name: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(file_name_check(file_name: \"example.txt\"\
  ) == \"Yes\")\nassert(file_name_check(file_name: \"1example.dll\") == \"No\")\n\
  assert(file_name_check(file_name: \"s1sdf3.asd\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"K.dll\") == \"Yes\")\nassert(file_name_check(file_name: \"MY16FILE3.exe\") ==\
  \ \"Yes\")\nassert(file_name_check(file_name: \"His12FILE94.exe\") == \"No\")\n\
  assert(file_name_check(file_name: \"_Y.txt\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"?aREYA.exe\") == \"No\")\nassert(file_name_check(file_name: \"/this_is_valid.dll\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"this_is_valid.wow\") == \"No\"\
  )\nassert(file_name_check(file_name: \"this_is_valid.txt\") == \"Yes\")\nassert(file_name_check(file_name:\
  \ \"this_is_valid.txtexe\") == \"No\")\nassert(file_name_check(file_name: \"#this2_i4s_5valid.ten\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"@this1_is6_valid.exe\") == \"\
  No\")\nassert(file_name_check(file_name: \"this_is_12valid.6exe4.txt\") == \"No\"\
  )\nassert(file_name_check(file_name: \"all.exe.txt\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"I563_No.exe\") == \"Yes\")\nassert(file_name_check(file_name: \"Is3youfault.txt\"\
  ) == \"Yes\")\nassert(file_name_check(file_name: \"no_one#knows.dll\") == \"Yes\"\
  )\nassert(file_name_check(file_name: \"1I563_Yes3.exe\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"I563_Yes3.txtt\") == \"No\")\nassert(file_name_check(file_name: \"final..txt\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"final132\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"_f4indsartal132.\") == \"No\")\nassert(file_name_check(file_name: \".txt\")\
  \ == \"No\")\nassert(file_name_check(file_name: \"s.\") == \"No\")"
completions: ["    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let first_letter\
    \ = file_name.substring(from: dot_index)\n    let letters = first_letter.characters\n\
    \    let first_letter_index = letters.firstIndex(of: CharacterSet.letters.lowercased())\n\
    \    let first_letter_index = first_letter_index != nil ? first_letter_index!\
    \ : 0\n    let first_letter_length = letters.distance(from: first_letter_index,\
    \ to: dot_index)\n    let dot_length = dot_index != nil ? dot_index! : 0\n   \
    \ let dot_length = dot_length != nil ? dot_length! : 0\n    let dot_length = dot_length\
    \ != nil ? dot_length! : 0\n    let dot_length = dot_length != nil ? dot_length!\
    \ : 0\n    let dot_length = dot_length != nil ? dot_length! : 0\n    let dot_length\
    \ = dot_length != nil ? dot_length! : 0\n    let dot_length = dot_length != nil\
    \ ? dot_length! : 0\n    let dot_length = dot_length != nil ? dot_length! : 0\n\
    \    let dot_length = dot_length != nil ? dot_length! : 0\n    let dot_length\
    \ = dot_length != nil ? dot_length! : 0\n    let dot_length = dot_length != nil\
    \ ? dot_length! : 0\n    let dot_length = dot_length != nil ? dot_length! : 0\n\
    \    let dot_length = dot_length != nil ? dot_length! : 0\n    let dot_length\
    \ = dot_length != nil ? dot_length! : 0\n    let dot_length = dot_length != nil\
    \ ? dot_length! : 0\n    let dot_length = dot_length != nil ? dot_length! : 0\n\
    \    let dot_length = dot_length != nil ? dot_length! : 0\n    let dot_length\
    \ = dot_length != nil ? dot_length! : 0\n    let dot_length = dot_length != nil\
    \ ? dot_length! : 0\n    let dot_length = dot_length != nil ? dot_length! : 0\n\
    \    let dot_length = dot_length != nil ? dot_length! : 0\n    let dot_length\
    \ = dot_length != nil ? dot_length! : 0\n    let dot_length = dot_length != nil\
    \ ? dot_length! : 0\n    let dot_length = dot_length != nil ? dot_length! : 0\n\
    \    let dot_length = dot_length != nil ? dot_length! : 0\n    let dot_length\
    \ = dot_length != nil ? dot_length! : 0\n    let dot_length = dot_length != nil\
    \ ? dot_length! : 0\n    let dot_length = dot_length != nil ? dot_length! : 0\n\
    \    let dot_length = dot_length != nil ? dot_length! : 0\n    let dot_", "\t\
    let file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index!\n\tlet first_letter = file_name.prefix(upTo:\
    \ dot_index)\n\tlet first_letter = first_letter!\n\tlet first_letter = first_letter.replacingOccurrences(of:\
    \ \"[^a-zA-Z]\", with: \"\", options: .regularExpression)\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index!\n\tlet last_letter = file_name.suffix(from:\
    \ dot_index)\n\tlet last_letter = last_letter!\n\tlet last_letter = last_letter.replacingOccurrences(of:\
    \ \"[^a-zA-Z]\", with: \"\", options: .regularExpression)\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index!\n\tlet extension = file_name.suffix(from:\
    \ dot_index)\n\tlet extension = extension!\n\tlet extension = extension.replacingOccurrences(of:\
    \ \"[^a-zA-Z]\", with: \"\", options: .regularExpression)\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index!\n\tlet extension = file_name.suffix(from:\
    \ dot_index)\n\tlet extension = extension!\n\tlet extension = extension.replacingOccurrences(of:\
    \ \"[^a-zA-Z]\", with: \"\", options: .regularExpression)\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index!\n\tlet extension = file_name.suffix(from:\
    \ dot_index)\n\tlet extension = extension!\n\tlet extension = extension.replacingOccurrences(of:\
    \ \"[^a-zA-Z]\", with: \"\", options: .regularExpression)\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index!\n\tlet extension = file_name.suffix(from:\
    \ dot_index)\n\tlet extension = extension!\n\tlet extension = extension.replacingOccurrences(of:\
    \ \"[^a-zA-Z]\", with: \"\", options: .regularExpression)\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index!\n\tlet extension = file_name.suffix(from:\
    \ dot_index)\n\tlet extension = extension!\n\tlet extension = extension.replacingOccurrences(of:\
    \ \"[^a-zA-Z]\", with: \"\", options: .regularExpression)\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index!\n\tlet extension = file_name.suffix(from:\
    \ dot_index)\n\tlet extension = extension", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\
    \ - 1\n    let file_name = file_name[dot_index..<file_name.endIndex]\n    let\
    \ file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.characters.count\n\
    \    if file_name <= 3 {\n        return \"No\"\n    }\n    if dot_index == 0\
    \ {\n        return \"No\"\n    }\n    if dot_index == file_name.startIndex {\n\
    \        return \"No\"\n    }\n    if dot_index == file_name.endIndex {\n    \
    \    return \"No\"\n    }\n    if file_name.characters.first != CharacterSet.letters.first\
    \ {\n        return \"No\"\n    }\n    if file_name.characters.last != CharacterSet.letters.last\
    \ {\n        return \"No\"\n    }\n    if file_name.characters.count != 1 {\n\
    \        return \"No\"\n    }\n    return \"Yes\"", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let file_name = file_name.substring(from: dot_index!)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.lowercased()\n    let letters = CharacterSet.letters.union(.whitespacesAndNewlines)\n\
    \    let letters_set = CharacterSet(charactersIn: letters)\n    let letters_set_count\
    \ = fileName.unicodeScalars.filter({ $0.isLetter}).count\n    let letters_set_count_min\
    \ = letters_set.count\n    let letters_set_count_max = letters_set.count\n   \
    \ let letters_set_count_min = letters_set.count\n    let letters_set_count_max\
    \ = letters_set.count\n    let letters_set_count_min = letters_set.count\n   \
    \ let letters_set_count_max = letters_set.count\n    let letters_set_count_min\
    \ = letters_set.count\n    let letters_set_count_max = letters_set.count\n   \
    \ let letters_set_count_min = letters_set.count\n    let letters_set_count_max\
    \ = letters_set.count\n    let letters_set_count_min = letters_set.count\n   \
    \ let letters_set_count_max = letters_set.count\n    let letters_set_count_min\
    \ = letters_set.count\n    let letters_set_count_max = letters_set.count\n   \
    \ let letters_set_count_min = letters_set.count\n    let letters_set_count_max\
    \ = letters_set.count\n    let letters_set_count_min = letters_set.count\n   \
    \ let letters_set_count_max = letters_set.count\n    let letters_set_count_min\
    \ = letters_set.count\n    let letters_set_count_max = letters_set.count\n   \
    \ let letters_set_count_min = letters_set.count\n    let letters_set_count_max\
    \ = letters_set.count\n    let letters_set_count_min = letters_set.count\n   \
    \ let letters_set_count_max = letters_set.count\n    let letters_set_count_min\
    \ = letters_set.count\n    let letters_set_count_max = letters_set.count\n   \
    \ let letters_set_count_min = letters_set.count\n    let letters_set_count_max\
    \ = letters_set.count\n    let letters_set_count_min = letters_set.count\n   \
    \ let letters_set_count_max = letters_set.count\n    let letters_set_count_min\
    \ = letters_set.count\n    let letters_set_count_max = letters_set.count\n   \
    \ let letters_set_count_min = letters_set.count\n    let letters_set_count_max\
    \ = letters_set.count\n    let letters_set_count_min = letters_set.count\n   \
    \ let letters_set_count_max = letters_set.count\n    let letters_set_count_min\
    \ = ", "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\\\.[a-z][a-z]+$\"\
    , options: [])\n    let matches = regex.matches(in: file_name, options: [], range:\
    \ NSRange(location: 0, length: file_name.count))\n    if matches.count == 0 {\n\
    \        return \"No\"\n    }\n    if matches.count > 1 {\n        return \"No\"\
    \n    }\n    if matches.count > 0 {\n        let range = matches[0].range\n  \
    \      let start = range.lowerBound\n        let end = range.upperBound\n    \
    \    let substring = file_name[start..<end]\n        if substring == \"\" {\n\
    \            return \"No\"\n        }\n        if substring.contains(\".\") {\n\
    \            return \"No\"\n        }\n        if substring.first! < 'a' || substring.first!\
    \ > 'z' {\n            return \"No\"\n        }\n        if substring.last! >\
    \ 'z' || substring.last! < 'a' {\n            return \"No\"\n        }\n    }\n\
    \    return \"Yes\"", "    let file_name = file_name.lowercased()\n    let dot_index\
    \ = file_name.index(of: \".\")\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index + 1\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index\
    \ = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by: 1)\n\
    \    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n", "\tlet file_name = file_name.lowercased()\n\
    \tlet dot_index = file_name.index(of: \".\")\n\tlet dot_index = dot_index!\n\t\
    let dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = ", "    let pattern = \"^[0-9]{3}\\\
    .[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options:\
    \ [])\n    return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).length == 0 ? \"Yes\" : \"No\"", " \
    \   let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let file_name = file_name.substring(from:\
    \ dot_index!)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let letter_index = (file_name.startIndex..<file_name.endIndex).filter({\
    \ $0.isLetter })\n    let letter_index = letter_index.first\n    let letter_index\
    \ = letter_index!\n    let letter_index = letter_index.advanced(by: 1)\n    let\
    \ letter_index = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n", "    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let dot_index = dot_index!\n    let file_name = file_name.substring(from:\
    \ dot_index!)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let letter_index = (file_name.startIndex..<file_name.endIndex).filter({\
    \ $0.isLetter })\n    let letter_index = letter_index.first!\n    let letter_index\
    \ = letter_index.distance(from: file_name.startIndex, to: dot_index)\n    let\
    \ letter_index = letter_index.distance(from: dot_index, to: file_name.endIndex)\n\
    \    let letter_index = letter_index.distance(from: file_name.startIndex, to:\
    \ file_name.endIndex)\n    if letter_index > 3 {\n        return \"No\"\n    }\n\
    \    if dot_index == 0 {\n        return \"No\"\n    }\n    if dot_index == dot_index!\
    \ {\n        return \"No\"\n    }\n    if dot_index == dot_index! + 1 {\n    \
    \    return \"No\"\n    }\n    if dot_index == dot_index! + 2 {\n        return\
    \ \"No\"\n    }\n    if dot_index == dot_index! + 3 {\n        return \"No\"\n\
    \    }\n    if dot_index == dot_index! + 4 {\n        return \"No\"\n    }\n \
    \   if dot_index == dot_index! + 5 {\n        return \"No\"\n    }\n    if dot_index\
    \ == dot_index! + 6 {\n        return \"No\"\n    }\n    if dot_index == dot_index!\
    \ + 7 {\n        return \"No\"\n    }\n    if dot_index == dot_index! + 8 {\n\
    \        return \"No\"\n    }\n    if dot_index == dot_index! + 9 {\n        return\
    \ \"No\"\n    }\n    if dot_index == dot_index! + 10 {\n        return \"No\"\n\
    \    }\n    if dot_index == dot_index! + 11 {\n        return \"No\"\n    }\n\
    \    if dot_index == dot_index! + 12 {\n        return \"No\"\n    }\n    if dot_index\
    \ == dot_index! + 13 {\n        return \"No\"\n    }\n    if dot_index == dot_index!\
    \ + 14 {\n        return \"No\"\n    }\n    if dot_index == dot_index! + 15 {\n\
    \        return \"No\"\n    }\n    if dot_index == dot_index! + 16 {\n       \
    \ return \"No\"\n    }\n    if dot_index == dot_index! + 17 {\n        return\
    \ \"No\"\n    }\n    if dot_index == dot_index! + 18 {\n        return \"No\"\n\
    \    }\n    if dot_index == dot_index! + 19 {\n        return \"No\"\n    }\n\
    \    if ", "    let file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let file_name = file_name.components(separatedBy:\
    \ \".\")\n    let file_name = file_name.first\n    let file_name = file_name.flatMap\
    \ { $0.isLetter }\n    let file_name = file_name.flatMap { $0.isNotEmpty }\n \
    \   let file_name = file_name.flatMap { $0.isNumber }\n    let file_name = file_name.flatMap\
    \ { $0.isNotEmpty }\n    let file_name = file_name.flatMap { $0.isIn(allowedExtensions:\
    \ [\"txt\", \"exe\", \"dll\"]) }\n    return file_name", "    let file_name =\
    \ file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n   \
    \ let dot_index = dot_index!\n    let dot_length = dot_index - file_name.startIndex\n\
    \    let dot_length = dot_length!\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let ", "    let pattern =\
    \ \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    return regex.firstMatch(in: file_name, options: [],\
    \ range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length == 0 &&\n\
    \        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ > 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).first >= 97 &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).first\
    \ <= 122 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).last >= 65 &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).last\
    \ <= 90\n        ? \"Yes\" : \"No\"", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_", " \
    \   let file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let file_name = file_name.components(separatedBy:\
    \ \".\")\n    let file_name = file_name.first\n    let file_name = file_name.rangeOfCharacter(from:\
    \ CharacterSet.letters)\n    let file_name = file_name.rangeOfCharacter(from:\
    \ CharacterSet.uppercaseLetters)\n    let file_name = file_name.rangeOfCharacter(from:\
    \ CharacterSet.lowercaseLetters)\n    let file_name = file_name.rangeOfCharacter(from:\
    \ CharacterSet.decimalDigits)\n    if file_name == nil || file_name!.count > 3\
    \ {\n        return \"No\"\n    }\n    if file_name!.first == \"\" || file_name!.first!.rangeOfCharacter(from:\
    \ CharacterSet.whitespacesAndNewlines) != nil {\n        return \"No\"\n    }\n\
    \    if file_name!.last != \"txt\" && file_name!.last != \"exe\" && file_name!.last\
    \ != \"dll\" {\n        return \"No\"\n    }\n    return \"Yes\"", "    let pattern\
    \ = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    return regex.firstMatch(in: file_name, options: [],\
    \ range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length > 0 ? \"\
    Yes\" : \"No\"", "    \n    let file_name = file_name.lowercased()\n    \n   \
    \ let dot_index = file_name.index(of: \".\")\n    \n    if dot_index == nil {\n\
    \        return \"\"\n    }\n    \n    let dot_index = dot_index!\n    \n    let\
    \ first_letter = file_name[..dot_index].lowercased()\n    \n    if first_letter\
    \ != \"a\" && first_letter != \"b\" && first_letter != \"c\" && first_letter !=\
    \ \"d\" && first_letter != \"e\" && first_letter != \"f\" && first_letter != \"\
    g\" && first_letter != \"h\" && first_letter != \"i\" && first_letter != \"j\"\
    \ && first_letter != \"k\" && first_letter != \"l\" && first_letter != \"m\" &&\
    \ first_letter != \"n\" && first_letter != \"o\" && first_letter != \"p\" && first_letter\
    \ != \"q\" && first_letter != \"r\" && first_letter != \"s\" && first_letter !=\
    \ \"t\" && first_letter != \"u\" && first_letter != \"v\" && first_letter != \"\
    w\" && first_letter != \"x\" && first_letter != \"y\" && first_letter != \"z\"\
    \ {\n        return \"\"\n    }\n    \n    let last_letter = file_name[dot_index..].lowercased()\n\
    \    \n    if last_letter != \"txt\" && last_letter != \"exe\" && last_letter\
    \ != \"dll\" {\n        return \"\"\n    }\n    \n    return \"\"", "    let pattern\
    \ = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    return regex.firstMatch(in: file_name, options: [],\
    \ range: NSRange(location: 0, length: file_name.utf8.count))?.rangeAt(1).length\
    \ == 0 ?\n        \"Yes\" : \"No\"", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index\
    \ != nil ? dot_index!.offset : 0\n    let first_letter = file_name[dot_index..<dot_index+3]\n\
    \    let first_letter = first_letter?.lowercased()\n    if let first_letter =\
    \ first_letter {\n        let first_letter_index = first_letter.index(of: \"a\"\
    )\n        let first_letter_index = first_letter_index != nil ? first_letter_index!.offset\
    \ : 0\n        let first_letter_upper = first_letter[first_letter_index..<first_letter_index+3]\n\
    \        let first_letter_upper = first_letter_upper?.uppercased()\n        if\
    \ let first_letter_upper = first_letter_upper {\n            if first_letter_upper\
    \ == \"txt\" ||\n                first_letter_upper == \"exe\" ||\n          \
    \      first_letter_upper == \"dll\" {\n                return \"Yes\"\n     \
    \       }\n        }\n    }\n    return \"No\"", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let first_letter = file_name.substring(from: dot_index!)\n    let first_letter\
    \ = first_letter?.lowercased()\n    if dot_index == nil || dot_index! >= file_name.count\
    \ {\n        return \"No\"\n    }\n    if dot_index! >= 3 || first_letter == nil\
    \ || first_letter!.count != 1 || first_letter!.first != \"a\" || first_letter!.first\
    \ != \"b\" || first_letter!.first != \"c\" || first_letter!.first != \"d\" ||\
    \ first_letter!.first != \"e\" || first_letter!.first != \"f\" || first_letter!.first\
    \ != \"g\" || first_letter!.first != \"h\" || first_letter!.first != \"i\" ||\
    \ first_letter!.first != \"j\" || first_letter!.first != \"k\" || first_letter!.first\
    \ != \"l\" || first_letter!.first != \"m\" || first_letter!.first != \"n\" ||\
    \ first_letter!.first != \"o\" || first_letter!.first != \"p\" || first_letter!.first\
    \ != \"q\" || first_letter!.first != \"r\" || first_letter!.first != \"s\" ||\
    \ first_letter!.first != \"t\" || first_letter!.first != \"u\" || first_letter!.first\
    \ != \"v\" || first_letter!.first != \"w\" || first_letter!.first != \"x\" ||\
    \ first_letter!.first != \"y\" || first_letter!.first != \"z\" {\n        return\
    \ \"No\"\n    }\n    if dot_index! >= dot_index!+3 {\n        return \"No\"\n\
    \    }\n    if dot_index! >= dot_index!+4 {\n        return \"No\"\n    }\n  \
    \  if dot_index! >= dot_index!+5 {\n        return \"No\"\n    }\n    if dot_index!\
    \ >= dot_index!+6 {\n        return \"No\"\n    }\n    if dot_index! >= dot_index!+7\
    \ {\n        return \"No\"\n    }\n    if dot_index! >= dot_index!+8 {\n     \
    \   return \"No\"\n    }\n    if dot_index! >= dot_index!+9 {\n        return\
    \ \"No\"\n    }\n    if dot_index! >= dot_index!+10 {\n        return \"No\"\n\
    \    }\n    if dot_index! >= dot_index!+11 {\n        return \"No\"\n    }\n \
    \   if dot_index! >= dot_index!+12 {\n        return \"No\"\n    }\n    if dot_index!\
    \ >= dot_index!+13 {\n        return \"No\"\n    }\n    if dot_index! >= dot_index!+14\
    \ {", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    return regex.firstMatch(in: file_name, options: [],\
    \ range: NSMakeRange(0, file_name.count)).rangeAt(1).length == 0 &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).location\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).length > 0 &&\n        regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).rangeAt(0).location\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).rangeAt(0).length > 0 &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).rangeAt(0).rangeAt(0).location\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).rangeAt(0).rangeAt(0).length > 0 &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).rangeAt(0).rangeAt(0).rangeAt(0).location\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).rangeAt(0).rangeAt(0).rangeAt(0).length > 0 &&\n\
    \        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).rangeAt(0).rangeAt(0).rangeAt(0).rangeAt(0).location\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).rangeAt(0).rangeAt(0).rangeAt(0).rangeAt(0).length\
    \ > 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).rangeAt(0).rangeAt(0).rangeAt(0).rangeAt(0).rangeAt(0).location\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).rangeAt(0).rangeAt(0).rangeAt(0).rangeAt(0).rangeAt(0).length\
    \ > 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).rangeAt(0).rangeAt(0).rangeAt(0).rangeAt(0).rangeAt(0).range",
  "    let file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let file_name = file_name.components(separatedBy:\
    \ \".\")\n    let file_name = file_name.first\n    let file_name = file_name.count\n\
    \    if file_name == 0 || file_name >= 3 {\n        return \"No\"\n    }\n   \
    \ if file_name.first == \"\" || file_name.first >= 'a' || file_name.first <= 'z'\
    \ {\n        return \"No\"\n    }\n    if file_name.last == \"\" || file_name.last\
    \ >= 'a' || file_name.last <= 'z' {\n        return \"No\"\n    }\n    if file_name.last\
    \ != \"txt\" && file_name.last != \"exe\" && file_name.last != \"dll\" {\n   \
    \     return \"No\"\n    }\n    return \"Yes\"", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let first_letter = file_name[dot_index..<file_name.endIndex]\n\
    \    let letters = first_letter\n        .unicodeScalars\n        .filter({ $0.isLetter()\
    \ })\n        .map({ $0.value })\n        .sorted()\n        .filter({ $0.isEqual(to:\
    \ CharacterSet.letters) })\n        .map({ $0.value })\n        .sorted()\n  \
    \      .filter({ $0.isEqual(to: CharacterSet.letters.union(CharacterSet.uppercaseLetters))\
    \ })\n        .map({ $0.value })\n        .sorted()\n        .filter({ $0.isEqual(to:\
    \ CharacterSet.letters.union(CharacterSet.lowercaseLetters)) })\n        .map({\
    \ $0.value })\n        .sorted()\n        .filter({ $0.isEqual(to: CharacterSet.letters.union(CharacterSet.uppercaseLetters.union(CharacterSet.lowercaseLetters))\
    \ })\n        .map({ $0.value })\n        .sorted()\n        .first\n    \n  \
    \  if dot_index == 0 || first_letter.isEmpty || letters.count != 1 || dot_index\
    \ != file_name.endIndex {\n        return \"No\"\n    }\n    \n    return \"Yes\"",
  "    let pattern = \"^[0-9]{0,3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern)\n    return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).length == 0 &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ > 0 &&\n        file_name.substring(with: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).characters.first\
    \ >= 'a' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).characters.first\
    \ <= 'z' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).characters.last\
    \ >= 'a' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).characters.last\
    \ <= 'z'\n        ? \"Yes\" : \"No\"", "    \n    let file_name = file_name.lowercased()\n\
    \    \n    let dot_index = file_name.index(of: \".\")\n    \n    if dot_index\
    \ == -1 || dot_index == 0 || file_name[dot_index - 1].isEmpty {\n        return\
    \ \"No\"\n    }\n    \n    let first_letter = file_name[dot_index - 1].lowercased()\n\
    \    \n    if first_letter != \"a\" && first_letter != \"b\" && first_letter !=\
    \ \"c\" && first_letter != \"d\" && first_letter != \"e\" && first_letter != \"\
    f\" && first_letter != \"g\" && first_letter != \"h\" && first_letter != \"i\"\
    \ && first_letter != \"j\" && first_letter != \"k\" && first_letter != \"l\" &&\
    \ first_letter != \"m\" && first_letter != \"n\" && first_letter != \"o\" && first_letter\
    \ != \"p\" && first_letter != \"q\" && first_letter != \"r\" && first_letter !=\
    \ \"s\" && first_letter != \"t\" && first_letter != \"u\" && first_letter != \"\
    v\" && first_letter != \"w\" && first_letter != \"x\" && first_letter != \"y\"\
    \ && first_letter != \"z\" {\n        return \"No\"\n    }\n    \n    let dot_index\
    \ = file_name.index(of: \".\", offsetBy: 1)\n    \n    if dot_index == -1 || dot_index\
    \ == 0 || file_name[dot_index - 1].isEmpty {\n        return \"No\"\n    }\n \
    \   \n    let extension = file_name[dot_index..<file_name.endIndex].lowercased()\n\
    \    \n    if extension != \"txt\" && extension != \"exe\" && extension != \"\
    dll\" {\n        return \"No\"\n    }\n    \n    return \"Yes\"", "    let pattern\
    \ = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern)\n    return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).length == 0 ? \"Yes\" : \"No\"", " \
    \   let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}[a-zA-Z]{1}\\.[a-zA-Z]{2,3}$\"\
    , options: [])\n    let results = regex.matches(in: file_name, options: [], range:\
    \ NSMakeRange(0, file_name.utf16.count))\n    if !results.isEmpty {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    let pattern = \"^[0-9]{3}\\.\"\n  \
    \  let pattern2 = \"^[a-zA-Z]{1}\"\n    let pattern3 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\"\
    \n    let pattern4 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\"\n    let pattern5\
    \ = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\"\n    let pattern6\
    \ = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\"\n\
    \    let pattern7 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\"\n    let pattern8 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\"\n    let\
    \ pattern9 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\"\n    let pattern10 = \"^[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\"\n    let pattern11 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\"\n    let pattern12 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\"\n    let pattern13 = \"^[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\"\n    let\
    \ pattern14 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\"\n    let pattern15 = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\\
    .[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}\\.[a-zA-Z]{1}",
  "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\.[a-zA-Z]+$\", options:\
    \ [])\n    return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).length == 0 &&\n        file_name.substring(to:\
    \ regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).start).characters.first\
    \ == Character('a') &&\n        file_name.substring(to: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).start).characters.last\
    \ == Character('z') &&\n        file_name.substring(to: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).start).characters.first\
    \ != Character('a') &&\n        file_name.substring(to: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).start).characters.last\
    \ != Character('z') &&\n        file_name.substring(to: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).start).characters.first\
    \ != Character('a') &&\n        file_name.substring(to: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).start).characters.last\
    \ != Character('z') &&\n        file_name.substring(to: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).start).characters.first\
    \ != Character('a') &&\n        file_name.substring(to: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).start).characters.last\
    \ != Character('z') &&\n        file_name.substring(to: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).start).characters.first\
    \ != Character('a') &&\n        file_name.substring(to: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).start).characters.last\
    \ != Character('z') &&\n        file_name.substring(to: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).start).characters.first\
    \ != Character('a') &&\n        file_name.substring(to: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).start).characters.last\
    \ != Character('z') &&\n        ", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let first_letter = file_name.prefix(upTo: dot_index)\n    let first_letter\
    \ = first_letter!\n    let last_letter = file_name.suffix(from: dot_index)\n \
    \   let last_letter = last_letter!\n    let letters = first_letter...last_letter\n\
    \    let letters = letters.filter { $0.isLetter }\n    let letters = letters.filter\
    \ { $0.count <= 3 }\n    let letters = letters.filter { $0.count >= 1 }\n    let\
    \ letters = letters.filter { $0.count != 1 }\n    let letters = letters.filter\
    \ { $0.count != 0 }\n    let letters = letters.filter { $0.count != 3 }\n    let\
    \ letters = letters.filter { $0.count != 4 }\n    let letters = letters.filter\
    \ { $0.count != 5 }\n    let letters = letters.filter { $0.count != 6 }\n    let\
    \ letters = letters.filter { $0.count != 7 }\n    let letters = letters.filter\
    \ { $0.count != 8 }\n    let letters = letters.filter { $0.count != 9 }\n    let\
    \ letters = letters.filter { $0.count != 10 }\n    let letters = letters.filter\
    \ { $0.count != 11 }\n    let letters = letters.filter { $0.count != 12 }\n  \
    \  let letters = letters.filter { $0.count != 13 }\n    let letters = letters.filter\
    \ { $0.count != 14 }\n    let letters = letters.filter { $0.count != 15 }\n  \
    \  let letters = letters.filter { $0.count != 16 }\n    let letters = letters.filter\
    \ { $0.count != 17 }\n    let letters = letters.filter { $0.count != 18 }\n  \
    \  let letters = letters.filter { $0.count != 19 }\n    let letters = letters.filter\
    \ { $0.count != 20 }\n    let letters = letters.filter { $0.count != 21 }\n  \
    \  let letters = letters.filter { $0.count != 22 }\n    let letters = letters.filter\
    \ { $0.count != 23 }\n    let letters = letters.filter { $0.count != 24 }\n  \
    \  let letters = letters.filter { $0.count != 25 }\n    let letters = letters.filter\
    \ { $0.count != 26 }\n    let letters = letters.filter { $0.count != 27 }\n  \
    \  let letters = letters.filter { $0.count != 28 }\n    let ", "\tlet pattern\
    \ = \"^[0-9]{0,3}\\.[a-zA-Z]+$\"\n\tlet regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n\tlet matches = regex.matches(in: file_name, options:\
    \ [], range: NSRange(location: 0, length: file_name.count))\n\t\n\tlet result\
    \ = matches.map {\n\t\t($0.range, true)\n\t}.filter { $0.second }.map { $0.range}\n\
    \t\n\tif result.count > 0 {\n\t\treturn \"No\"\n\t}\n\t\n\treturn \"Yes\"", " \
    \   let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern)\n    return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).length == 0 &&\n        regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).location ==\
    \ 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).length > 0 &&\n        regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).location > 0\
    \ &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).location < file_name.count &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).location\
    \ != NSNotFound\n        ? \"Yes\" : \"No\"", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let first_letter = file_name.prefix(upTo: dot_index)\n    let first_letter\
    \ = first_letter!\n    let valid_characters = CharacterSet.letters.union(CharacterSet(charactersIn:\
    \ \"0123456789\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \"aA\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \"zZ\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \".\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \"-\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \" \"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \"_\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \".\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \"-\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \"_\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \"-\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \"_\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \"-\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \"_\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \"-\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \"_\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \"-\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \"_\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \"-\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \"_\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \"-\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \"_\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \"-\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \"_\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \"-\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \"_\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \"-\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \"_\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \"-\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn:\
    \ \"_\"))\n    let valid_characters = valid_characters.union(CharacterSet(charactersIn",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let first_letter = file_name[dot_index..<dot_index+1]\n\
    \    let letters = first_letter\n        .unicodeScalars\n        .filter({$0.isLetter})\n\
    \        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n\
    \        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n\
    \        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n\
    \        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n\
    \        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n\
    \        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n\
    \        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n\
    \        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n\
    \        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n\
    \        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n\
    \        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n\
    \        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n\
    \        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n\
    \        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n\
    \        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n        .filter({$0.isNotEmpty})\n\
    \        .filter({", "    let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n    let\
    \ regex = try! NSRegularExpression(pattern: pattern, options: [])\n    return\
    \ regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ == 0 ? \"Yes\" : \"No\"", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\.[a-zA-Z]+$\", options: [])\n    return regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ == 0 ? \"Yes\" : \"No\"", "    let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n\
    \    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n   \
    \ return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).length\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).length > 0 &&\n        regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).first >= 97\
    \ &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).first <= 122 &&\n        regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).last >= 65 &&\n\
    \        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).last\
    \ <= 90\n        ? \"Yes\" : \"No\"", "    let file_name = file_name.lowercased()\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name.first\n    let file_name = file_name.rangeOfCharacter(from: CharacterSet.letters)\n\
    \    let file_name = file_name.count == 1 && file_name[0] == file_name[0].uppercase\
    \ && file_name.first != \"\" && file_name.last != \"\" && file_name.last != \"\
    exe\" && file_name.last != \"dll\" && file_name.last != \"txt\" && file_name.last\
    \ != \"zip\" && file_name.last != \"rar\" && file_name.last != \"tar\" && file_name.last\
    \ != \"gz\" && file_name.last != \"bz2\" && file_name.last != \"7z\" && file_name.last\
    \ != \"tar\" && file_name.last != \"gz\" && file_name.last != \"bz2\" && file_name.last\
    \ != \"7z\" && file_name.last != \"rar\" && file_name.last != \"zip\" && file_name.last\
    \ != \"tar\" && file_name.last != \"gz\" && file_name.last != \"bz2\" && file_name.last\
    \ != \"7z\" && file_name.last != \"rar\" && file_name.last != \"zip\" && file_name.last\
    \ != \"tar\" && file_name.last != \"gz\" && file_name.last != \"bz2\" && file_name.last\
    \ != \"7z\" && file_name.last != \"rar\" && file_name.last != \"zip\" && file_name.last\
    \ != \"tar\" && file_name.last != \"gz\" && file_name.last != \"bz2\" && file_name.last\
    \ != \"7z\" && file_name.last != \"rar\" && file_name.last != \"zip\" && file_name.last\
    \ != \"tar\" && file_name.last != \"gz\" && file_name.last != \"bz2\" && file_name.last\
    \ != \"7z\" && file_name.last != \"rar\" && file_name.last != \"zip\" && file_name.last\
    \ != \"tar\" && file_name.last != \"gz\" && file_name.last != \"bz2\" && file_name.last\
    \ != \"7z\" && file_name.last != \"rar\" && file_name.last != \"zip\" && file_name.last\
    \ != \"tar\" && file_name.last != \"gz\" && file_name.last != \"bz2\" && file_name.last\
    \ != \"7z\" && file_name.last != \"rar\" && file_name.last != \"zip\" && file_name.last\
    \ != \"tar\" && file_name.last != \"gz\" && file_name.last != \"bz2\" && file_name.last\
    \ != \"7z\" && file_name.last != \"rar\" && file_name.last != \"zip\" && file_name.last\
    \ != \"tar\" && file_name.last != \"gz\" && file_name.last != \"bz2\" && file_name.last\
    \ != \"7z\" && file_name.last != \"rar\" && file_name.last != \"zip\" && file_name.last\
    \ != \"tar\" && file_name.last != \"gz\" && file_name.", "    let pattern = \"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern: pattern,\
    \ options: [])\n    return regex.firstMatch(in: file_name, options: [], range:\
    \ NSRange(location: 0, length: file_name.utf8.count))?.rangeAt(0)?.location !=\
    \ NSNotFound", "    let file_name = file_name.lowercased()\n    let dot_index\
    \ = file_name.index(of: \".\")\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_", "    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let dot_index = dot_index!\n    let dot_index = dot_index + 1\n    let dot_index\
    \ = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by: 1)\n\
    \    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n", "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let file_name = file_name.substring(from:\
    \ dot_index!)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNew",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let first_letter = file_name.substring(to:\
    \ dot_index)\n    let first_letter = first_letter?.lowercased()\n    let letters\
    \ = first_letter?.characters\n    let letters = letters?.filter({ $0 != \"a\"\
    \ && $0 != \"b\" && $0 != \"c\" && $0 != \"d\" && $0 != \"e\" && $0 != \"f\" &&\
    \ $0 != \"g\" && $0 != \"h\" && $0 != \"i\" && $0 != \"j\" && $0 != \"k\" && $0\
    \ != \"l\" && $0 != \"m\" && $0 != \"n\" && $0 != \"o\" && $0 != \"p\" && $0 !=\
    \ \"q\" && $0 != \"r\" && $0 != \"s\" && $0 != \"t\" && $0 != \"u\" && $0 != \"\
    v\" && $0 != \"w\" && $0 != \"x\" && $0 != \"y\" && $0 != \"z\" })\n    let letters\
    \ = letters?.filter({ $0 != \"0\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"1\" })\n    let letters = letters?.filter({ $0 != \"2\" })\n    let letters\
    \ = letters?.filter({ $0 != \"3\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"4\" })\n    let letters = letters?.filter({ $0 != \"5\" })\n    let letters\
    \ = letters?.filter({ $0 != \"6\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"7\" })\n    let letters = letters?.filter({ $0 != \"8\" })\n    let letters\
    \ = letters?.filter({ $0 != \"9\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"a\" })\n    let letters = letters?.filter({ $0 != \"b\" })\n    let letters\
    \ = letters?.filter({ $0 != \"c\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"d\" })\n    let letters = letters?.filter({ $0 != \"e\" })\n    let letters\
    \ = letters?.filter({ $0 != \"f\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"g\" })\n    let letters = letters?.filter({ $0 != \"h\" })\n    let letters\
    \ = letters?.filter({ $0 != \"i\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"j\" })\n    let letters = letters?.filter({ $0 != \"k\" })\n    let letters\
    \ = letters?", "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}[a-zA-Z]{1}\\\
    .[a-zA-Z]{3,4}$\")\n    if regex.firstMatch(in: file_name, options: .regularExpression)\
    \ != nil {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let file_name = file_name.substring(from: dot_index!)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.tri", "\tlet file_name = file_name.lowercased()\n\tlet file_name\
    \ = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\t\
    let file_name = file_name.components(separatedBy: \".\")\n\tlet file_name = file_name[0]\n\
    \tlet file_name = file_name.components(separatedBy: CharacterSet.letters.inverted)\n\
    \tlet file_name = file_name[0]\n\tlet file_name = file_name.components(separatedBy:\
    \ CharacterSet.alphanumerics.inverted)\n\tlet file_name = file_name[0]\n\tlet\
    \ file_name = file_name.components(separatedBy: CharacterSet.symbols.inverted)\n\
    \tlet file_name = file_name[0]\n\tlet file_name = file_name.components(separatedBy:\
    \ CharacterSet.newlines)\n\tlet file_name = file_name[0]\n\tlet file_name = file_name.components(separatedBy:\
    \ CharacterSet.whitespaces)\n\tlet file_name = file_name[0]\n\tlet file_name =\
    \ file_name.components(separatedBy: CharacterSet.symbols)\n\tlet file_name = file_name[0]\n\
    \tlet file_name = file_name.components(separatedBy: CharacterSet.alphanumerics)\n\
    \tlet file_name = file_name[0]\n\tlet file_name = file_name.components(separatedBy:\
    \ CharacterSet.whitespaces)\n\tlet file_name = file_name[0]\n\tlet file_name =\
    \ file_name.components(separatedBy: CharacterSet.newlines)\n\tlet file_name =\
    \ file_name[0]\n\tlet file_name = file_name.components(separatedBy: CharacterSet.symbols)\n\
    \tlet file_name = file_name[0]\n\tlet file_name = file_name.components(separatedBy:\
    \ CharacterSet.alphanumerics)\n\tlet file_name = file_name[0]\n\tlet file_name\
    \ = file_name.components(separatedBy: CharacterSet.whitespaces)\n\tlet file_name\
    \ = file_name[0]\n\tlet file_name = file_name.components(separatedBy: CharacterSet.newlines)\n\
    \tlet file_name = file_name[0]\n\tlet file_name = file_name.components(separatedBy:\
    \ CharacterSet.symbols)\n\tlet file_name = file_name[0]\n\tlet file_name = file_name.components(separatedBy:\
    \ CharacterSet.alphanumerics)\n\tlet file_name = file_name[0]\n\tlet file_name\
    \ = file_name.components(separatedBy: CharacterSet.whitespaces)\n\tlet file_name\
    \ = file_name[0]\n\tlet file_name = file_name.components(separatedBy: CharacterSet.newlines)\n\
    \tlet file_name = file_name[0]\n\tlet file_name = file_name.components(separatedBy:\
    \ CharacterSet.symbols)\n\tlet file_name = file_name[0]\n\tlet file_name = file_name.components(separatedBy:\
    \ Character", "\tlet file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = ", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    if dot_index == -1 || dot_index\
    \ == file_name.startIndex {\n        return \"No\"\n    }\n    let first_letter\
    \ = file_name[dot_index..<dot_index+1]\n    if first_letter.isEmpty {\n      \
    \  return \"No\"\n    }\n    if first_letter != \"a\" && first_letter != \"b\"\
    \ && first_letter != \"c\" && first_letter != \"d\" && first_letter != \"e\" &&\
    \ first_letter != \"f\" && first_letter != \"g\" && first_letter != \"h\" && first_letter\
    \ != \"i\" && first_letter != \"j\" && first_letter != \"k\" && first_letter !=\
    \ \"l\" && first_letter != \"m\" && first_letter != \"n\" && first_letter != \"\
    o\" && first_letter != \"p\" && first_letter != \"q\" && first_letter != \"r\"\
    \ && first_letter != \"s\" && first_letter != \"t\" && first_letter != \"u\" &&\
    \ first_letter != \"v\" && first_letter != \"w\" && first_letter != \"x\" && first_letter\
    \ != \"y\" && first_letter != \"z\" {\n        return \"No\"\n    }\n    let dot_index\
    \ = file_name.index(of: \".\")\n    if dot_index == -1 || dot_index == file_name.startIndex\
    \ {\n        return \"No\"\n    }\n    let extension = file_name[dot_index..<dot_index+1]\n\
    \    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\" {\n\
    \        return \"Yes\"\n    }\n    return \"No\"", "\tlet file_name = file_name.lowercased()\n\
    \tlet dot_index = file_name.index(of: \".\")\n\tlet dot_index = dot_index!\n\t\
    let first_letter = file_name.substring(to: dot_index)\n\tlet first_letter = first_letter?.lowercased()\n\
    \tlet first_letter = first_letter?.prefix(1)\n\tlet first_letter = first_letter?.prefix(1)\n\
    \tlet first_letter = first_letter?.prefix(1)\n\tlet first_letter = first_letter?.prefix(1)\n\
    \tlet first_letter = first_letter?.prefix(1)\n\tlet first_letter = first_letter?.prefix(1)\n\
    \tlet first_letter = first_letter?.prefix(1)\n\tlet first_letter = first_letter?.prefix(1)\n\
    \tlet first_letter = first_letter?.prefix(1)\n\tlet first_letter = first_letter?.prefix(1)\n\
    \tlet first_letter = first_letter?.prefix(1)\n\tlet first_letter = first_letter?.prefix(1)\n\
    \tlet first_letter = first_letter?.prefix(1)\n\tlet first_letter = first_letter?.prefix(1)\n\
    \tlet first_letter = first_letter?.prefix(1)\n\tlet first_letter = first_letter?.prefix(1)\n\
    \tlet first_letter = first_letter?.prefix(1)\n\tlet first_letter = first_letter?.prefix(1)\n\
    \tlet first_letter = first_letter?.prefix(1)\n\tlet first_letter = first_letter?.prefix(1)\n\
    \tlet first_letter = first_letter?.prefix(1)\n\tlet first_letter = first_letter?.prefix(1)\n\
    \tlet first_letter = first_letter?.prefix(1)\n\tlet first_letter = first_letter?.prefix(1)\n\
    \tlet first_letter = first_letter?.prefix(1)\n\tlet first_letter = first_letter?.prefix(1)\n\
    \tlet first_letter = first_letter?.prefix(1)\n\tlet first_letter = first_letter?.prefix(1)\n\
    \tlet first_letter = first_letter?.prefix(1)\n\tlet first_letter = first_letter?.prefix(1)\n\
    \tlet first_letter = first_letter?.prefix(1)\n\tlet first_letter = first_letter?.prefix(1)\n\
    \tlet first_letter = first_letter?.prefix(1)\n\tlet first_letter = first_letter?.prefix(1)\n\
    \tlet first_letter = first_letter?.prefix(1)\n\tlet first_letter = first_letter?.prefix(1)\n\
    \tlet first_letter = first_letter?.prefix(1)\n\tlet first_letter = first_letter?.prefix(1)\n\
    \tlet first_letter = first_letter?.prefix(1)\n\tlet first_letter = first_letter?.prefix(1)\n\
    \tlet first_letter = first_letter?.prefix(1)\n\tlet first_letter = first_letter?.prefix",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let first_letter = file_name.prefix(dot_index)\n\
    \    let first_letter = first_letter!\n    let letters = first_letter + String(repeating:\
    \ \"a\", count: file_name.count - dot_index)\n    let letters = letters.lowercased()\n\
    \    let letters_count = letters.count\n    if dot_index == 0 {\n        return\
    \ letters.isEmpty ? \"No\" : \"Yes\"\n    }\n    if letters_count == 0 {\n   \
    \     return \"No\"\n    }\n    if letters_count == 1 {\n        if letters.contains(\"\
    a\") {\n            return \"Yes\"\n        }\n        if letters.contains(\"\
    b\") {\n            return \"Yes\"\n        }\n        if letters.contains(\"\
    c\") {\n            return \"Yes\"\n        }\n        if letters.contains(\"\
    d\") {\n            return \"Yes\"\n        }\n        if letters.contains(\"\
    e\") {\n            return \"Yes\"\n        }\n        if letters.contains(\"\
    f\") {\n            return \"Yes\"\n        }\n        if letters.contains(\"\
    g\") {\n            return \"Yes\"\n        }\n        if letters.contains(\"\
    h\") {\n            return \"Yes\"\n        }\n        if letters.contains(\"\
    i\") {\n            return \"Yes\"\n        }\n        if letters.contains(\"\
    j\") {\n            return \"Yes\"\n        }\n        if letters.contains(\"\
    k\") {\n            return \"Yes\"\n        }\n        if letters.contains(\"\
    l\") {\n            return \"Yes\"\n        }\n        if letters.contains(\"\
    m\") {\n            return \"Yes\"\n        }\n        if letters.contains(\"\
    n\") {\n            return \"Yes\"\n        }\n        if letters.contains(\"\
    o\") {\n            return \"Yes\"\n        }\n        if letters.contains(\"\
    p\") {\n            return \"Yes\"\n        }\n        if letters.contains(\"\
    q\") {\n            return \"Yes\"\n        }\n        if letters.contains(\"\
    r\") {\n            return \"Yes\"\n        }\n        if letters.contains(\"\
    s\") {\n            return \"Yes\"\n        }\n        if letters.contains(\"\
    t\") {\n            return \"Yes\"\n        }\n        if letters.contains(\"\
    u\") {\n            return \"Yes\"\n        }\n        if letters.contains(\"\
    v\") {\n            return \"Yes\"\n        }\n        if letters.contains(\"\
    w\") {\n            return \"Yes\"\n        }\n        if letters.contains(\"\
    x\") {\n            return \"Yes\"\n        }\n        if letters.contains(\"\
    y\") {\n            return \"Yes\"\n        }\n        if letters.contains(\"\
    z\") {\n            return \"Yes\"\n        }\n        if letters.contains(\"\
    A\") {\n            return \"Yes\"\n        }\n        if letters.contains(\"\
    B\") {\n            return \"Yes\"\n        }\n        if letters.contain", " \
    \   let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let dot_index = dot_index + 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let file_name = file_name[dot_index..<file_name.endIndex]\n    let file_name\
    \ = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n  \
    \  let file_name = file_name.lowercased()\n    let letter_index = (file_name.startIndex..<file_name.endIndex).filter\
    \ { $0.isLetter }\n    let letter_index = letter_index.count\n    let letter_index\
    \ = letter_index!\n    if dot_index == 0 || dot_index == file_name.endIndex ||\
    \ letter_index != 1 || dot_index != file_name.endIndex {\n        return \"No\"\
    \n    }\n    if let index = file_name.index(of: \".\") {\n        let file_name\
    \ = file_name[index..<file_name.endIndex]\n        let file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n        let file_name = file_name.lowercased()\n\
    \        let letter_index = (file_name.startIndex..<file_name.endIndex).filter\
    \ { $0.isLetter }\n        let letter_index = letter_index.count\n        let\
    \ letter_index = letter_index!\n        if dot_index == 0 || dot_index == file_name.endIndex\
    \ || letter_index != 1 || dot_index != file_name.endIndex {\n            return\
    \ \"No\"\n        }\n    }\n    return \"Yes\"", "    let pattern = \"^[0-9]{1,3}\\\
    .[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options:\
    \ [])\n    return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).length == 0 ? \"Yes\" : \"No\"", "\t\
    let file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = ", "    if file_name.count > 3 {\n      \
    \  return \"No\"\n    }\n    if file_name.count < 1 {\n        return \"No\"\n\
    \    }\n    if file_name.contains(\".\") {\n        return \"No\"\n    }\n   \
    \ if file_name.starts(with: \"a\") || file_name.starts(with: \"A\") {\n      \
    \  return \"No\"\n    }\n    if file_name.ends(with: \"txt\") || file_name.ends(with:\
    \ \"exe\") || file_name.ends(with: \"dll\") {\n        return \"Yes\"\n    }\n\
    \    return \"No\"", "\tlet file_name = file_name.lowercased()\n\tlet dot_index\
    \ = file_name.index(of: \".\")\n\tlet dot_index = dot_index!\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = ", "    let regex =\
    \ try! NSRegularExpression(pattern: \"^[0-9]{3}\\\\.[a-z]{3}$\", options: [])\n\
    \    return regex.firstMatch(in: file_name, options: [], range: NSRange(location:\
    \ 0, length: file_name.utf16.count)).rangeAt(1).length == 0 ? \"Yes\" : \"No\"",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index!.offset : 0\n    let dot_index = dot_index !=\
    \ nil ? dot_index!.offset : 0\n    let dot_index = dot_index != nil ? dot_index!.offset\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index!.offset : 0", "    let\
    \ pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern)\n    return regex.firstMatch(in: file_name, options: [], range: NSRange(location:\
    \ 0, length: file_name.utf8.count))?.rangeAt(1).length == 0 ? \"Yes\" : \"No\"",
  "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    return regex.firstMatch(in: file_name, options: [],\
    \ range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length == 0 &&\n\
    \        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ > 0 &&\n        file_name.substring(with: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).characters.first\
    \ >= 'a' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).characters.first\
    \ <= 'z' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).characters.last\
    \ >= 'a' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).characters.last\
    \ <= 'z'\n        ? \"Yes\" : \"No\"", "\tlet file_name = file_name.lowercased()\n\
    \tlet file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\t\
    let file_name = file_name.dropFirst()\n\tlet file_name = file_name.dropLast()\n\
    \tlet file_name = file_name.dropLast()\n\tlet file_name = file_name.dropLast()\n\
    \tlet file_name = file_name.dropLast()\n\tlet file_name = file_name.dropLast()\n\
    \tlet file_name = file_name.dropLast()\n\tlet file_name = file_name.dropLast()\n\
    \tlet file_name = file_name.dropLast()\n\tlet file_name = file_name.dropLast()\n\
    \tlet file_name = file_name.dropLast()\n\tlet file_name = file_name.dropLast()\n\
    \tlet file_name = file_name.dropLast()\n\tlet file_name = file_name.dropLast()\n\
    \tlet file_name = file_name.dropLast()\n\tlet file_name = file_name.dropLast()\n\
    \tlet file_name = file_name.dropLast()\n\tlet file_name = file_name.dropLast()\n\
    \tlet file_name = file_name.dropLast()\n\tlet file_name = file_name.dropLast()\n\
    \tlet file_name = file_name.dropLast()\n\tlet file_name = file_name.dropLast()\n\
    \tlet file_name = file_name.dropLast()\n\tlet file_name = file_name.dropLast()\n\
    \tlet file_name = file_name.dropLast()\n\tlet file_name = file_name.dropLast()\n\
    \tlet file_name = file_name.dropLast()\n\tlet file_name = file_name.dropLast()\n\
    \tlet file_name = file_name.dropLast()\n\tlet file_name = file_name.dropLast()\n\
    \tlet file_name = file_name.dropLast()\n\tlet file_name = file_name.dropLast()\n\
    \tlet file_name = file_name.dropLast()\n\tlet file_name = file_name.dropLast()\n\
    \tlet file_name = file_name.dropLast()\n\tlet file_name = file_name.dropLast()\n\
    \tlet file_name = file_name.dropLast()\n\tlet file_name = file_name.dropLast()\n\
    \tlet file_name = file_name.dropLast()\n\tlet file_name = file_name.dropLast()\n\
    \tlet file_name = file_name.dropLast()\n\tlet file_name = file_name.dropLast()\n\
    \tlet file_name = file_name.dropLast()\n\tlet file_name = file_name.dropLast()\n\
    \tlet file_name = file_name.dropLast()\n\tlet file_name = file_name.dropLast()\n\
    \tlet file_name = file_name.dropLast()\n\tlet file_name = file_name.dropLast()\n\
    \tlet file_name = ", "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\\
    .[a-zA-Z]+$\", options: [])\n    let results = regex.matches(in: file_name, options:\
    \ [], range: NSRange(location: 0, length: file_name.utf16.count))\n    if !results.isEmpty\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let file_name = file_name.substring(from: dot_index)\n    let file_name =\
    \ file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.lowercased()\n    let letter_index = file_name.index(of: \"a\")\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index - 1\n\
    \    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1\n    let letter_index = letter_index\
    \ - 1\n    let letter_index = letter_index - 1", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let file_name = file_name.substring(from: dot_index!)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.lowercased()\n    let letters = CharacterSet.letters.union(.whitespacesAndNewlines)\n\
    \    let letters_set = CharacterSet(charactersIn: file_name)\n    if !letters_set.isSuperset(of:\
    \ letters) {\n        return \"No\"\n    }\n    if dot_index == 0 {\n        return\
    \ \"No\"\n    }\n    if dot_index == file_name.count - 1 {\n        return \"\
    No\"\n    }\n    if dot_index != 0 && dot_index != file_name.count - 1 {\n   \
    \     return \"No\"\n    }\n    if dot_index != 0 && dot_index != file_name.count\
    \ - 1 && dot_index != file_name.count {\n        return \"No\"\n    }\n    if\
    \ dot_index != 0 && dot_index != file_name.count - 1 && dot_index == file_name.count\
    \ {\n        return \"Yes\"\n    }\n    return \"No\"", "    let pattern = \"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern: pattern,\
    \ options: [])\n    let result = regex.firstMatch(in: file_name, options: [],\
    \ range: NSRange(location: 0, length: file_name.utf8.count))\n    if result !=\
    \ nil {\n        let range = NSRange(location: result.range.location, length:\
    \ result.range.length)\n        return String(file_name[range])\n    } else {\n\
    \        return \"No\"\n    }", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n\
    \    let regex = try! NSRegularExpression(pattern: pattern)\n    return regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).length > 0 &&\n        file_name.substring(with:\
    \ regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).characters.first\
    \ >= 'a' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).characters.first\
    \ <= 'z' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).characters.last\
    \ >= 'a' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).characters.last\
    \ <= 'z'\n        ? \"Yes\" : \"No\"", "\tlet file_name = file_name.lowercased()\n\
    \tlet dot_index = file_name.index(of: \".\")\n\tlet dot_index = dot_index!\n\t\
    let dot_length = dot_index - file_name.startIndex\n\tlet dot_length = dot_length!\n\
    \tlet dot_length = dot_length\n\tlet dot_length = dot_length\n\tlet dot_length\
    \ = dot_length\n\tlet dot_length = dot_length\n\tlet dot_length = dot_length\n\
    \tlet dot_length = dot_length\n\tlet dot_length = dot_length\n\tlet dot_length\
    \ = dot_length\n\tlet dot_length = dot_length\n\tlet dot_length = dot_length\n\
    \tlet dot_length = dot_length\n\tlet dot_length = dot_length\n\tlet dot_length\
    \ = dot_length\n\tlet dot_length = dot_length\n\tlet dot_length = dot_length\n\
    \tlet dot_length = dot_length\n\tlet dot_length = dot_length\n\tlet dot_length\
    \ = dot_length\n\tlet dot_length = dot_length\n\tlet dot_length = dot_length\n\
    \tlet dot_length = dot_length\n\tlet dot_length = dot_length\n\tlet dot_length\
    \ = dot_length\n\tlet dot_length = dot_length\n\tlet dot_length = dot_length\n\
    \tlet dot_length = dot_length\n\tlet dot_length = dot_length\n\tlet dot_length\
    \ = dot_length\n\tlet dot_length = dot_length\n\tlet dot_length = dot_length\n\
    \tlet dot_length = dot_length\n\tlet dot_length = dot_length\n\tlet dot_length\
    \ = dot_length\n\tlet dot_length = dot_length\n\tlet dot_length = dot_length\n\
    \tlet dot_length = dot_length\n\tlet dot_length = dot_length\n\tlet dot_length\
    \ = dot_length\n\tlet dot_length = dot_length\n\tlet dot_length = dot_length\n\
    \tlet dot_length = dot_length\n\tlet dot_length = dot_length\n\tlet dot_length\
    \ = dot_length\n\tlet dot_length = dot_length\n\tlet dot_length = dot_length\n\
    \tlet dot_length = dot_length\n\tlet dot_length = dot_length\n\tlet dot_length\
    \ = dot_length\n\tlet dot_length = dot_length\n\tlet dot_length = dot_length\n\
    \tlet dot_length = dot_length\n\tlet dot_length = dot_length\n\tlet dot_length\
    \ = dot_length\n\tlet dot_length = dot_length\n\tlet dot_length = dot_length\n\
    \tlet dot_length = dot_length\n\tlet dot_length = dot_length\n\tlet dot_length\
    \ = dot_length\n\tlet dot_length = dot_length\n\tlet dot_length = dot_length\n\
    \tlet dot_length = dot_length\n\tlet dot_length = dot_length\n\tlet dot_length\
    \ = dot_length\n\tlet dot_length = dot_length\n\tlet dot_length = dot_length\n\
    \tlet dot_length = dot_length\n\tlet ", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_", " \
    \   let pattern = \"^[0-9]{3}\\.[a-z][a-z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern)\n    return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).length == 0 &&\n        file_name.substring(with:\
    \ NSMakeRange(0, file_name.characters.count - 1)).hasPrefix(\".\")\n        &&\
    \ file_name.substring(with: NSMakeRange(0, file_name.characters.count - 1)).range(of:\
    \ \".\").length == 1\n        && file_name.substring(with: NSMakeRange(0, file_name.characters.count\
    \ - 1)).range(of: \".\").location == 0 &&\n        file_name.substring(with: NSMakeRange(0,\
    \ file_name.characters.count - 1)).range(of: \".\").length == 2 &&\n        file_name.substring(with:\
    \ NSMakeRange(0, file_name.characters.count - 1)).range(of: \".\").location !=\
    \ 0\n        && file_name.substring(with: NSMakeRange(0, file_name.characters.count\
    \ - 1)).range(of: \".\").location != file_name.characters.count - 1\n        &&\
    \ file_name.substring(with: NSMakeRange(0, file_name.characters.count - 1)).range(of:\
    \ \".\").location != 0\n        && file_name.substring(with: NSMakeRange(0, file_name.characters.count\
    \ - 1)).range(of: \".\").location != file_name.characters.count - 1\n        &&\
    \ file_name.substring(with: NSMakeRange(0, file_name.characters.count - 1)).range(of:\
    \ \".\").location != 0\n        && file_name.substring(with: NSMakeRange(0, file_name.characters.count\
    \ - 1)).range(of: \".\").location != file_name.characters.count - 1\n        &&\
    \ file_name.substring(with: NSMakeRange(0, file_name.characters.count - 1)).range(of:\
    \ \".\").location != 0\n        && file_name.substring(with: NSMakeRange(0, file_name.characters.count\
    \ - 1)).range(of: \".\").location != file_name.characters.count - 1\n        &&\
    \ file_name.substring(with: NSMakeRange(0, file_name.characters.count - 1)).range(of:\
    \ \".\").location != 0\n        && file_name.substring(with: NSMakeRange(0, file_name.characters.count\
    \ - 1)).range(of: \".\").location != file_name.characters.count - 1\n        &&\
    \ file_name.substring(with: NSMakeRange(0, file_name.characters.count - 1)).range(of:\
    \ \".\").location != 0\n        && file_name.substring(with: NSMakeRange(0, file_name.characters.count\
    \ - 1)).range(of: \".\").location != file_name.characters.count - 1\n        &&\
    \ file_name.substring(with: NS", "    let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\
    \n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n  \
    \  let results = regex.matches(in: file_name, options: [], range: NSRange(location:\
    \ 0, length: file_name.count))\n    if !results.isEmpty {\n        return \"No\"\
    \n    }\n    return \"Yes\"", "    let file_name = file_name.lowercased()\n  \
    \  let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let file_name = file_name.substring(from: dot_index!)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.lowercased()\n    let letter_index = file_name.index(of: \"a\")\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.firstIndex(of: \".\")\n    let dot_index = dot_index\
    \ != nil ? dot_index! : file_name.endIndex\n    let file_name = file_name[..<dot_index]\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.characters.filter({\
    \ $0 != \"a\" && $0 != \"b\" && $0 != \"c\" && $0 != \"d\" && $0 != \"e\" && $0\
    \ != \"f\" && $0 != \"g\" && $0 != \"h\" && $0 != \"i\" && $0 != \"j\" && $0 !=\
    \ \"k\" && $0 != \"l\" && $0 != \"m\" && $0 != \"n\" && $0 != \"o\" && $0 != \"\
    p\" && $0 != \"q\" && $0 != \"r\" && $0 != \"s\" && $0 != \"t\" && $0 != \"u\"\
    \ && $0 != \"v\" && $0 != \"w\" && $0 != \"x\" && $0 != \"y\" && $0 != \"z\" })\n\
    \    let file_name = file_name.characters.filter({ $0 != \"0\" })\n    let file_name\
    \ = file_name.characters.filter({ $0 != \"1\" })\n    let file_name = file_name.characters.filter({\
    \ $0 != \"2\" })\n    let file_name = file_name.characters.filter({ $0 != \"3\"\
    \ })\n    let file_name = file_name.characters.filter({ $0 != \"4\" })\n    let\
    \ file_name = file_name.characters.filter({ $0 != \"5\" })\n    let file_name\
    \ = file_name.characters.filter({ $0 != \"6\" })\n    let file_name = file_name.characters.filter({\
    \ $0 != \"7\" })\n    let file_name = file_name.characters.filter({ $0 != \"8\"\
    \ })\n    let file_name = file_name.characters.filter({ $0 != \"9\" })\n    let\
    \ file_name = file_name.characters.filter({ $0 != \"a\" })\n    let file_name\
    \ = file_name.characters.filter({ $0 != \"b\" })\n    let file_name = file_name.characters.filter({\
    \ $0 != \"c\" })\n    let file_name = file_name.characters.filter({ $0 != \"d\"\
    \ })\n    let file_name = file_name.characters.filter({ $0 != \"e\" })\n    let\
    \ file_name = file_name.characters.filter({ $0 != \"f\" })\n    let file_name\
    \ = file_name.characters.filter({ $0 != \"g\" })\n    let file_name = file_name.characters.filter({\
    \ $0 != \"h\" })\n    let file_name = file_name.characters.filter({ $0 != \"i\"\
    \ })\n    let file_name = file_name.characters.filter({ $0 != \"j\" })\n    let\
    \ file_name = ", "    let file_name = file_name.lowercased()\n    let dot_index\
    \ = file_name.index(of: \".\")\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index + 1\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index\
    \ = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by: 1)\n\
    \    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n", "    let file_name = file_name.lowercased()\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name.first\n    let file_name = file_name.rangeOfCharacter(from: CharacterSet.letters)\n\
    \    let file_name = file_name.count == 1 && file_name[0] == file_name[0].uppercased()\n\
    \    let file_name = file_name.count == 1 && file_name[0] == file_name[0].lowercased()\n\
    \    let file_name = file_name.count == 1 && file_name[0] != \"\"\n    let file_name\
    \ = file_name.count == 2 && file_name[1] == \"exe\"\n    let file_name = file_name.count\
    \ == 2 && file_name[1] == \"dll\"\n    let file_name = file_name.count == 3 &&\
    \ file_name[2] == \"txt\"\n    return file_name ? \"Yes\" : \"No\"", "\tlet file_name\
    \ = file_name.lowercased()\n\tlet dot_index = file_name.index(of: \".\")\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = dot_index + 1\n\tlet dot_index = dot_index.advanced(by:\
    \ 1)\n\tlet dot_index = dot_index.advanced(by: 1)\n\tlet dot_index = dot_index.advanced(by:\
    \ 1)\n\tlet dot_index = dot_index.advanced(by: 1)\n\tlet dot_index = dot_index.advanced(by:\
    \ 1)\n\tlet dot_index = dot_index.advanced(by: 1)\n\tlet dot_index = dot_index.advanced(by:\
    \ 1)\n\tlet dot_index = dot_index.advanced(by: 1)\n\tlet dot_index = dot_index.advanced(by:\
    \ 1)\n\tlet dot_index = dot_index.advanced(by: 1)\n\tlet dot_index = dot_index.advanced(by:\
    \ 1)\n\tlet dot_index = dot_index.advanced(by: 1)\n\tlet dot_index = dot_index.advanced(by:\
    \ 1)\n\tlet dot_index = dot_index.advanced(by: 1)\n\tlet dot_index = dot_index.advanced(by:\
    \ 1)\n\tlet dot_index = dot_index.advanced(by: 1)\n\tlet dot_index = dot_index.advanced(by:\
    \ 1)\n\tlet dot_index = dot_index.advanced(by: 1)\n\tlet dot_index = dot_index.advanced(by:\
    \ 1)\n\tlet dot_index = dot_index.advanced(by: 1)\n\tlet dot_index = dot_index.advanced(by:\
    \ 1)\n\tlet dot_index = dot_index.advanced(by: 1)\n\tlet dot_index = dot_index.advanced(by:\
    \ 1)\n\tlet dot_index = dot_index.advanced(by: 1)\n\tlet dot_index = dot_index.advanced(by:\
    \ 1)\n\tlet dot_index = dot_index.advanced(by: 1)\n\tlet dot_index = dot_index.advanced(by:\
    \ 1)\n\tlet dot_index = dot_index.advanced(by: 1)\n\tlet dot_index = dot_index.advanced(by:\
    \ 1)\n\tlet dot_index = dot_index.advanced(by: 1)\n\tlet dot_index = dot_index.advanced(by:\
    \ 1)\n\tlet dot_index = dot_index.advanced(by: 1)\n\tlet dot_index = dot_index.advanced(by:\
    \ 1)\n\tlet dot_index = dot_index.advanced(by: 1)\n\tlet dot_index = dot_index.advanced(by:\
    \ 1)\n\tlet dot_index = dot_index.advanced(by: 1)\n\tlet dot_index = dot_index.advanced(by:\
    \ 1)\n\tlet dot_index = dot_index.advanced(by: 1)\n\tlet dot_index = dot_index.advanced(by:\
    \ 1)\n\tlet dot_index = dot_index.advanced(by: 1)\n\tlet dot_index = dot_index.advanced(by:\
    \ 1)\n\tlet dot_index = dot_index.advanced(by: 1)\n\tlet dot_index = dot_index.advanced(by:\
    \ 1)\n\tlet dot_", "    let pattern = \"^[0-9]{3}\\.\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    let result = regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count))\n    if result != nil\
    \ {\n        let range = result.range\n        let start = range.lowerBound\n\
    \        let end = range.upperBound\n        let substr = file_name[start..<end]\n\
    \        let valid = substr.contains(\".\")\n        let valid2 = substr.hasPrefix(\"\
    a\")\n        let valid3 = substr.hasPrefix(\"A\")\n        if valid && valid2\
    \ && valid3 {\n            return \"Yes\"\n        } else {\n            return\
    \ \"No\"\n        }\n    } else {\n        return \"No\"\n    }", "    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let dot_index = dot_index!\n    let first_letter = file_name.prefix(upTo:\
    \ dot_index)\n    let last_letter = file_name.suffix(from: dot_index)\n    let\
    \ valid_letters = CharacterSet.letters.subtracting(CharacterSet(arrayLiteral:\
    \ \".\"))\n    if !valid_letters.contains(first_letter) {\n        return \"No\"\
    \n    }\n    if dot_index == 0 {\n        return \"No\"\n    }\n    if dot_index\
    \ == file_name.endIndex {\n        return \"No\"\n    }\n    if dot_index == file_name.index(before:\
    \ dot_index) {\n        return \"No\"\n    }\n    if dot_index == file_name.index(before:\
    \ dot_index).advanced(by: -1) {\n        return \"No\"\n    }\n    if dot_index\
    \ == file_name.index(before: dot_index).advanced(by: -2) {\n        return \"\
    No\"\n    }\n    if dot_index == file_name.index(before: dot_index).advanced(by:\
    \ -3) {\n        return \"No\"\n    }\n    if dot_index == file_name.index(before:\
    \ dot_index).advanced(by: -4) {\n        return \"No\"\n    }\n    if dot_index\
    \ == file_name.index(before: dot_index).advanced(by: -5) {\n        return \"\
    No\"\n    }\n    if dot_index == file_name.index(before: dot_index).advanced(by:\
    \ -6) {\n        return \"No\"\n    }\n    if dot_index == file_name.index(before:\
    \ dot_index).advanced(by: -7) {\n        return \"No\"\n    }\n    if dot_index\
    \ == file_name.index(before: dot_index).advanced(by: -8) {\n        return \"\
    No\"\n    }\n    if dot_index == file_name.index(before: dot_index).advanced(by:\
    \ -9) {\n        return \"No\"\n    }\n    if dot_index == file_name.index(before:\
    \ dot_index).advanced(by: -10) {\n        return \"No\"\n    }\n    if dot_index\
    \ == file_name.index(before: dot_index).advanced(by: -11) {\n        return \"\
    No\"\n    }\n    if dot_index == file_name.index(before: dot_index).advanced(by:\
    \ -12) {\n        return \"No\"\n    }\n    if dot_index == file_name.index(before:\
    \ dot_index).advanced(by: -13) {\n        return \"No\"\n    }\n    if dot_index\
    \ == file_name.index(before: dot_index).advanced(by: -14) {\n        return \"\
    No\"\n    }\n    if dot_index == file_name.index(before: dot_index).advanced(by:\
    \ -15) {\n        return \"No\"\n    }\n    if dot_index == file_name.index(before:\
    \ dot_index).advanced(by: -16) {\n        return \"No\"", "    let file_name =\
    \ file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n   \
    \ let dot_index = dot_index!\n    let file_name = file_name.substring(from: dot_index!)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"a\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"A\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"z\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"Z\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"0\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"9\")\n    let letter_index = letter_index!\n    if dot_index == nil || dot_index!\
    \ < 1 || dot_index! > 3 || letter_index == nil || letter_index! < 1 || letter_index!\
    \ > 3 || file_name.count == 0 || file_name.count > 3 {\n        return \"No\"\n\
    \    } else {\n        return \"Yes\"\n    }", "    let pattern = \"^[0-9]{3}\\\
    .[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options:\
    \ [])\n    let match = regex.firstMatch(in: file_name, options: [], range: NSRange(location:\
    \ 0, length: file_name.count))\n    if let range = match.range {\n        let\
    \ file_name = file_name.substring(with: range)\n        if file_name.count ==\
    \ 0 {\n            return \"No\"\n        }\n        if file_name.count > 3 {\n\
    \            return \"No\"\n        }\n        if file_name.first != \"a\" &&\
    \ file_name.first != \"A\" && file_name.first != \"b\" && file_name.first != \"\
    B\" && file_name.first != \"c\" && file_name.first != \"C\" && file_name.first\
    \ != \"d\" && file_name.first != \"D\" && file_name.first != \"e\" && file_name.first\
    \ != \"E\" && file_name.first != \"f\" && file_name.first != \"F\" && file_name.first\
    \ != \"g\" && file_name.first != \"G\" && file_name.first != \"h\" && file_name.first\
    \ != \"H\" && file_name.first != \"i\" && file_name.first != \"I\" && file_name.first\
    \ != \"j\" && file_name.first != \"J\" && file_name.first != \"k\" && file_name.first\
    \ != \"K\" && file_name.first != \"l\" && file_name.first != \"L\" && file_name.first\
    \ != \"m\" && file_name.first != \"M\" && file_name.first != \"n\" && file_name.first\
    \ != \"N\" && file_name.first != \"o\" && file_name.first != \"O\" && file_name.first\
    \ != \"p\" && file_name.first != \"P\" && file_name.first != \"q\" && file_name.first\
    \ != \"Q\" && file_name.first != \"r\" && file_name.first != \"R\" && file_name.first\
    \ != \"s\" && file_name.first != \"S\" && file_name.first != \"t\" && file_name.first\
    \ != \"T\" && file_name.first != \"u\" && file_name.first != \"U\" && file_name.first\
    \ != \"v\" && file_name.first != \"V\" && file_name.first != \"w\" && file_name.first\
    \ != \"W\" && file_name.first != \"x\" && file_name.first != \"X\" && file_name.first\
    \ != \"y\" && file_name.first != \"Y\" && file_name.first != \"z\" && file_name.first\
    \ != \"Z\" {\n            return \"No\"\n        }\n        if file_name.last\
    \ != \"txt\" && file_name.last != \"exe\" && file_name.last != \"dll\" {\n   \
    \         return \"No\"\n        }\n        return \"Yes\"\n    }\n    return\
    \ \"No\"", "    if file_name.count > 3 {\n        return \"No\"\n    }\n    if\
    \ file_name.count < 1 {\n        return \"No\"\n    }\n    if file_name.contains(\"\
    .\") {\n        return \"No\"\n    }\n    if file_name.starts(with: \"a\") ||\
    \ file_name.starts(with: \"A\") {\n        return \"No\"\n    }\n    if file_name.ends(with:\
    \ \"txt\") || file_name.ends(with: \"exe\") || file_name.ends(with: \"dll\") {\n\
    \        return \"Yes\"\n    }\n    return \"No\"", "    if file_name.count >\
    \ 3 {\n        return \"No\"\n    }\n    if file_name.contains(\".\") {\n    \
    \    let dotIndex = file_name.index(of: \".\")!\n        let firstLetter = file_name[0\
    \ ..< dotIndex]\n        let lastLetter = file_name[dotIndex ..< file_name.count]\n\
    \        if firstLetter.isEmpty || firstLetter == \"0\" {\n            return\
    \ \"No\"\n        }\n        if lastLetter != \"txt\" && lastLetter != \"exe\"\
    \ && lastLetter != \"dll\" {\n            return \"No\"\n        }\n    }\n  \
    \  return \"Yes\"", "    let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n    let regex\
    \ = try! NSRegularExpression(pattern: pattern)\n    return regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ == 0 ? \"Yes\" : \"No\"", "    let file_name = file_name.lowercased()\n    let\
    \ dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n   \
    \ let first_letter = file_name.prefix(dot_index)\n    let first_letter = first_letter!\n\
    \    let second_letter = file_name.suffix(dot_index)\n    let second_letter =\
    \ second_letter!\n    if dot_index == 0 {\n        return \"No\"\n    }\n    if\
    \ dot_index == file_name.count - 1 {\n        return \"No\"\n    }\n    if first_letter.isEmpty\
    \ {\n        return \"No\"\n    }\n    if first_letter.isEmpty || first_letter.isEmpty\
    \ || first_letter.isEmpty {\n        return \"No\"\n    }\n    if first_letter\
    \ != \"a\" && first_letter != \"b\" && first_letter != \"c\" && first_letter !=\
    \ \"d\" && first_letter != \"e\" && first_letter != \"f\" && first_letter != \"\
    g\" && first_letter != \"h\" && first_letter != \"i\" && first_letter != \"j\"\
    \ && first_letter != \"k\" && first_letter != \"l\" && first_letter != \"m\" &&\
    \ first_letter != \"n\" && first_letter != \"o\" && first_letter != \"p\" && first_letter\
    \ != \"q\" && first_letter != \"r\" && first_letter != \"s\" && first_letter !=\
    \ \"t\" && first_letter != \"u\" && first_letter != \"v\" && first_letter != \"\
    w\" && first_letter != \"x\" && first_letter != \"y\" && first_letter != \"z\"\
    \ {\n        return \"No\"\n    }\n    if second_letter != \"txt\" && second_letter\
    \ != \"exe\" && second_letter != \"dll\" {\n        return \"No\"\n    }\n   \
    \ return \"Yes\"", "    let file_name = file_name.lowercased()\n    let dot_index\
    \ = file_name.index(of: \".\")\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1", "  \
    \  let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let file_name = file_name.substring(from:\
    \ dot_index!)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.tri", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\
    \n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n  \
    \  return regex.firstMatch(in: file_name, options: [], range: NSRange(location:\
    \ 0, length: file_name.utf8.count))?.rangeAt(1).length == 0 ? \"Yes\" : \"No\"",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n   \
    \ let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let file_name = file_name.substring(from: dot_index!)\n    let file_name\
    \ = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n  \
    \  let file_name = file_name.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"a\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"A\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"z\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"Z\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"0\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"9\")\n    let letter_index = letter_index!\n    if dot_index == nil || dot_index!\
    \ < 3 || dot_index! > file_name.count - 1 {\n        return \"No\"\n    }\n  \
    \  if letter_index == nil || letter_index! < 1 || letter_index! > file_name.count\
    \ - 1 {\n        return \"No\"\n    }\n    if file_name.count > 3 {\n        return\
    \ \"No\"\n    }\n    if file_name.contains(\".\") {\n        return \"No\"\n \
    \   }\n    if file_name.substring(from: dot_index!).isEmpty{\n        return \"\
    No\"\n    }\n    if file_name.substring(from: dot_index!).lowercased().contains(\"\
    exe\"){\n        return \"No\"\n    }\n    if file_name.substring(from: dot_index!).lowercased().contains(\"\
    dll\"){\n        return \"No\"\n    }\n    return \"Yes\"", "    let pattern =\
    \ \"^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    return regex.firstMatch(in: file_name, options: [],\
    \ range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length == 0 ?\
    \ \"Yes\" : \"No\"", "\tlet file_name = file_name.lowercased()\n\tlet dot_index\
    \ = file_name.index(of: \".\")\n\tlet dot_index = dot_index!\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = ", "    let pattern\
    \ = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern)\n    let result = regex.firstMatch(in: file_name, options: [], range:\
    \ NSMakeRange(0, file_name.characters.count))\n    if result != nil {\n      \
    \  let range = NSRange(location: result.range.location, length: result.range.length)\n\
    \        return String(file_name[range])\n    } else {\n        return \"No\"\n\
    \    }", "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}[.][a-zA-Z]+$\"\
    , options: [])\n    return regex.firstMatch(in: file_name, options: [], range:\
    \ NSMakeRange(0, file_name.characters.count)).rangeAt(1).length == 0 &&\n    \
    \    file_name.substring(to: regex.firstMatch(in: file_name, options: [], range:\
    \ NSMakeRange(0, file_name.characters.count)).rangeAt(1).start).characters.first\
    \ == '.' &&\n        file_name.substring(from: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).start).characters.dropFirst().contains(where:\
    \ { $0.isLetter })\n        ? \"Yes\"\n        : \"No\"", "    let file_name =\
    \ file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.dropFirst()\n    let\
    \ file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n", "    let pattern = \"^[0-9]{3}\\\
    .[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options:\
    \ [])\n    let matches = regex.matches(in: file_name, options: [], range: NSRange(location:\
    \ 0, length: file_name.count))\n    if matches.count == 0 {\n        return \"\
    No\"\n    }\n    if matches.count > 1 {\n        return \"No\"\n    }\n    if\
    \ let match = matches.first {\n        let range = match.range\n        let start\
    \ = range.lowerBound\n        let end = range.upperBound\n        let substring\
    \ = file_name[start..<end]\n        if substring.hasPrefix(\".\") && substring.count\
    \ > 1 && substring.first?.unicodeScalars.count != 0 {\n            return \"No\"\
    \n        }\n    }\n    return \"Yes\"", "\tlet file_name = file_name.lowercased()\n\
    \tlet dot_index = file_name.index(of: \".\")\n\tlet dot_index = dot_index!\n\t\
    let dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = ", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let file_name = file_name.substring(from: dot_index!)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.lowercased()\n    let letter_index = file_name.index(of: \"a\")\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter", "    if file_name.count > 3 {\n        return\
    \ \"No\"\n    }\n    if file_name.count < 1 {\n        return \"No\"\n    }\n\
    \    if file_name.contains(\".\") {\n        return \"No\"\n    }\n    if file_name.starts(with:\
    \ \"a\") || file_name.starts(with: \"A\") {\n        return \"No\"\n    }\n  \
    \  if file_name.ends(with: \"txt\") || file_name.ends(with: \"exe\") || file_name.ends(with:\
    \ \"dll\") {\n        return \"Yes\"\n    }\n    return \"No\"", "    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let dot_index = dot_index!\n    let file_name = file_name.substring(from:\
    \ dot_index!)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"a\")\n    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter_index!\n    let letter_index = letter_index!\n\
    \    let letter_index = letter", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\.[a-zA-Z]+$\")\n    let result = regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count))\n    \n    if\
    \ result != nil {\n        let range = NSRange(location: result.range.location,\
    \ length: file_name.characters.count - result.range.location)\n        let file_name\
    \ = file_name.substring(with: range)\n        \n        if file_name.characters.count\
    \ == 3 && file_name.characters.first >= 'a' && file_name.characters.first <= 'z'\
    \ && file_name.characters.first != 'A' && file_name.characters.first != 'Z' {\n\
    \            return \"Yes\"\n        } else {\n            return \"No\"\n   \
    \     }\n    } else {\n        return \"No\"\n    }", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let first_letter = file_name[dot_index..<dot_index+1]\n    let first_letter\
    \ = first_letter?.lowercased()\n    let letters = first_letter?.characters\n \
    \   let letters = letters?.filter({ $0 != \"a\" && $0 != \"b\" && $0 != \"c\"\
    \ && $0 != \"d\" && $0 != \"e\" && $0 != \"f\" && $0 != \"g\" && $0 != \"h\" &&\
    \ $0 != \"i\" && $0 != \"j\" && $0 != \"k\" && $0 != \"l\" && $0 != \"m\" && $0\
    \ != \"n\" && $0 != \"o\" && $0 != \"p\" && $0 != \"q\" && $0 != \"r\" && $0 !=\
    \ \"s\" && $0 != \"t\" && $0 != \"u\" && $0 != \"v\" && $0 != \"w\" && $0 != \"\
    x\" && $0 != \"y\" && $0 != \"z\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"0\" })\n    let letters = letters?.filter({ $0 != \"1\" })\n    let letters\
    \ = letters?.filter({ $0 != \"2\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"3\" })\n    let letters = letters?.filter({ $0 != \"4\" })\n    let letters\
    \ = letters?.filter({ $0 != \"5\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"6\" })\n    let letters = letters?.filter({ $0 != \"7\" })\n    let letters\
    \ = letters?.filter({ $0 != \"8\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"9\" })\n    let letters = letters?.filter({ $0 != \"a\" })\n    let letters\
    \ = letters?.filter({ $0 != \"b\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"c\" })\n    let letters = letters?.filter({ $0 != \"d\" })\n    let letters\
    \ = letters?.filter({ $0 != \"e\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"f\" })\n    let letters = letters?.filter({ $0 != \"g\" })\n    let letters\
    \ = letters?.filter({ $0 != \"h\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"i\" })\n    let letters = letters?.filter({ $0 != \"j\" })\n    let letters\
    \ = letters?.filter({ $0 != \"k\" })\n    let letters = ", "    let pattern =\
    \ \"^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    return regex.firstMatch(in: file_name, options: [],\
    \ range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length == 0 ?\
    \ \"Yes\" : \"No\"", "    let file_name = file_name.lowercased()\n    let dot_index\
    \ = file_name.index(of: \".\")\n    if dot_index == nil || dot_index! < 0 {\n\
    \        return \"No\"\n    }\n    let first_letter = file_name[..<dot_index!]\n\
    \    let last_letter = file_name[dot_index!..<file_name.endIndex]\n    if first_letter.isEmpty\
    \ || first_letter != \"a\" || first_letter != \"b\" || first_letter != \"c\" ||\
    \ first_letter != \"d\" || first_letter != \"e\" || first_letter != \"f\" || first_letter\
    \ != \"g\" || first_letter != \"h\" || first_letter != \"i\" || first_letter !=\
    \ \"j\" || first_letter != \"k\" || first_letter != \"l\" || first_letter != \"\
    m\" || first_letter != \"n\" || first_letter != \"o\" || first_letter != \"p\"\
    \ || first_letter != \"q\" || first_letter != \"r\" || first_letter != \"s\" ||\
    \ first_letter != \"t\" || first_letter != \"u\" || first_letter != \"v\" || first_letter\
    \ != \"w\" || first_letter != \"x\" || first_letter != \"y\" || first_letter !=\
    \ \"z\" {\n        return \"No\"\n    }\n    if last_letter != \"txt\" && last_letter\
    \ != \"exe\" && last_letter != \"dll\" {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let file_name = file_name[dot_index..<file_name.endIndex]\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.drop", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let first_letter = file_name.substring(from: dot_index)\n\
    \    let letters = first_letter\n        .unicodeScalars\n        .filter({ $0.isLetter()\
    \ })\n        .map({ $0.value })\n        .sorted()\n        .map({ String($0)\
    \ })\n    let is_valid = letters.count == 1 && letters.first == \"a\"...\"z\"\
    \ && letters.last == \"z\"\n    return is_valid ? \"Yes\" : \"No\"", "    let\
    \ file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let file_name = file_name.substring(from:\
    \ dot_index!)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNew",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let file_name = file_name.substring(from:\
    \ dot_index!)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"a\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"A\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"z\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"Z\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"0\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"9\")\n    let letter_index = letter_index!\n    if dot_index != nil &&\n \
    \       dot_index! < file_name.count &&\n        dot_index! > 0 &&\n        letter_index\
    \ != nil &&\n        letter_index! < file_name.count &&\n        letter_index!\
    \ > 0 &&\n        file_name[dot_index! - 1] == \".\" &&\n        file_name[letter_index!\
    \ - 1] == \".\" &&\n        !file_name.contains(\".\") {\n        return \"Yes\"\
    \n    } else {\n        return \"No\"\n    }", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let file_name = file_name.substring(from: dot_index!)\n    let file_name\
    \ = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n  \
    \  let file_name = file_name.trimmingCharacters(in: CharacterSet.alphanumerics)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.symbols)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.newlines)\n\
    \    if dot_index == 0 {\n        return file_name\n    } else {\n        return\
    \ file_name\n    }", "    let file_name = file_name.lowercased()\n    let file_name\
    \ = file_name.replacingOccurrences(of: \"[^0-9a-zA-Z.]\", with: \"\", options:\
    \ .regularExpression)\n    let file_name = file_name.replacingOccurrences(of:\
    \ \"^[^0-9a-zA-Z]\", with: \"\", options: .regularExpression)\n    let file_name\
    \ = file_name.replacingOccurrences(of: \"[^0-9a-zA-Z.]$\", with: \"\", options:\
    \ .regularExpression)\n    let file_name = file_name.replacingOccurrences(of:\
    \ \"^[^0-9a-zA-Z]$\", with: \"\", options: .regularExpression)\n    let file_name\
    \ = file_name.replacingOccurrences(of: \"^[^0-9a-zA-Z.]\", with: \"\", options:\
    \ .regularExpression)\n    let file_name = file_name.replacingOccurrences(of:\
    \ \"^[^0-9a-zA-Z]\", with: \"\", options: .regularExpression)\n    let file_name\
    \ = file_name.replacingOccurrences(of: \"[^0-9a-zA-Z.]$\", with: \"\", options:\
    \ .regularExpression)\n    let file_name = file_name.replacingOccurrences(of:\
    \ \"^[^0-9a-zA-Z]$\", with: \"\", options: .regularExpression)\n    let file_name\
    \ = file_name.replacingOccurrences(of: \"^[^0-9a-zA-Z.]\", with: \"\", options:\
    \ .regularExpression)\n    let file_name = file_name.replacingOccurrences(of:\
    \ \"^[^0-9a-zA-Z]\", with: \"\", options: .regularExpression)\n    let file_name\
    \ = file_name.replacingOccurrences(of: \"[^0-9a-zA-Z.]$\", with: \"\", options:\
    \ .regularExpression)\n    let file_name = file_name.replacingOccurrences(of:\
    \ \"^[^0-9a-zA-Z]$\", with: \"\", options: .regularExpression)\n    let file_name\
    \ = file_name.replacingOccurrences(of: \"^[^0-9a-zA-Z.]\", with: \"\", options:\
    \ .regularExpression)\n    let file_name = file_name.replacingOccurrences(of:\
    \ \"^[^0-9a-zA-Z]\", with: \"\", options: .regularExpression)\n    let file_name\
    \ = file_name.replacingOccurrences(of: \"[^0-9a-zA-Z.]$\", with: \"\", options:\
    \ .regularExpression)\n    let file_name = file_name.replacingOccurrences(of:\
    \ \"^[^0-9a-zA-Z]$\", with: \"\", options: .regularExpression)\n    let file_name\
    \ = file_name.replacingOccurrences(of: \"^[^0-9a-zA-Z.]\", with: \"\", options:\
    \ .regularExpression)\n    let file_name = file_name.replacingOccurrences(of:\
    \ \"^[^0-9a-zA-Z]\", with: \"\", options: .regularExpression)\n    let file_name\
    \ = file_name.replacingOccurrences(of: \"[^0-9", "    let file_name = file_name.lowercased()\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name[0]\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.letters)\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.alphanumerics)\n\
    \    if file_name.count > 3 {\n        return \"No\"\n    }\n    if file_name.count\
    \ == 0 {\n        return \"No\"\n    }\n    if file_name.count < 2 {\n       \
    \ return \"No\"\n    }\n    if file_name.first == \"\" {\n        return \"No\"\
    \n    }\n    if file_name.first != \"a\" && file_name.first != \"b\" && file_name.first\
    \ != \"c\" && file_name.first != \"d\" && file_name.first != \"e\" && file_name.first\
    \ != \"f\" && file_name.first != \"g\" && file_name.first != \"h\" && file_name.first\
    \ != \"i\" && file_name.first != \"j\" && file_name.first != \"k\" && file_name.first\
    \ != \"l\" && file_name.first != \"m\" && file_name.first != \"n\" && file_name.first\
    \ != \"o\" && file_name.first != \"p\" && file_name.first != \"q\" && file_name.first\
    \ != \"r\" && file_name.first != \"s\" && file_name.first != \"t\" && file_name.first\
    \ != \"u\" && file_name.first != \"v\" && file_name.first != \"w\" && file_name.first\
    \ != \"x\" && file_name.first != \"y\" && file_name.first != \"z\" {\n       \
    \ return \"No\"\n    }\n    if file_name.last != \"txt\" && file_name.last !=\
    \ \"exe\" && file_name.last != \"dll\" {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    if dot_index == -1 || dot_index == file_name.startIndex {\n    \
    \    return \"No\"\n    }\n    let first_letter = file_name[dot_index..<dot_index+1]\n\
    \    let first_letter_lowercased = first_letter?.lowercased()\n    if first_letter_lowercased\
    \ == nil || first_letter_lowercased!.count != 1 {\n        return \"No\"\n   \
    \ }\n    let letter_index = first_letter?.index(of: first_letter_lowercased![0])\n\
    \    if letter_index == nil || letter_index!.count != 1 {\n        return \"No\"\
    \n    }\n    if first_letter!.count != 3 || letter_index!.count != 1 {\n     \
    \   return \"No\"\n    }\n    if file_name[dot_index..<dot_index+1].count != 3\
    \ || letter_index!.count != 1 {\n        return \"No\"\n    }\n    if file_name[dot_index..<dot_index+1].first!\
    \ != \".\" {\n        return \"No\"\n    }\n    if file_name[dot_index..<dot_index+1].last!\
    \ != \"txt\" {\n        return \"No\"\n    }\n    if file_name[dot_index..<dot_index+1].last!\
    \ != \"exe\" {\n        return \"No\"\n    }\n    if file_name[dot_index..<dot_index+1].last!\
    \ != \"dll\" {\n        return \"No\"\n    }\n    return \"Yes\"", "    let regex\
    \ = try! NSRegularExpression(pattern: \"^[0-9]{3}\\.[a-zA-Z]+$\", options: [])\n\
    \    return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).length > 0 ? \"Yes\" : \"No\"", "    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let dot_index = dot_index! - 1\n    let file_name = file_name[dot_index..<file_name.count]\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"a\")\n    let letter_index = letter_index! - 1\n    let letter_index = file_name.index(of:\
    \ \"A\")\n    let letter_index = letter_index! - 1\n    let letter_index = file_name.index(of:\
    \ \"z\")\n    let letter_index = letter_index! - 1\n    let letter_index = file_name.index(of:\
    \ \"Z\")\n    let letter_index = letter_index! - 1\n    let letter_index = file_name.index(of:\
    \ \"0\")\n    let letter_index = letter_index! - 1\n    let letter_index = file_name.index(of:\
    \ \"9\")\n    let letter_index = letter_index! - 1\n    if dot_index == -1 ||\
    \ dot_index >= file_name.count {\n        return \"No\"\n    }\n    if letter_index\
    \ == -1 || letter_index >= file_name.count {\n        return \"No\"\n    }\n \
    \   if file_name.count > 3 {\n        return \"No\"\n    }\n    if file_name.contains(\"\
    .\") {\n        return \"No\"\n    }\n    if file_name.prefix(1).isEmpty {\n \
    \       return \"No\"\n    }\n    if file_name.suffix(1).isEmpty {\n        return\
    \ \"No\"\n    }\n    if file_name.prefix(1).lowercased() != \"a\" {\n        return\
    \ \"No\"\n    }\n    if file_name.prefix(1).lowercased() != \"A\" {\n        return\
    \ \"No\"\n    }\n    if file_name.prefix(1).lowercased() != \"z\" {\n        return\
    \ \"No\"\n    }\n    if file_name.prefix(1).lowercased() != \"Z\" {\n        return\
    \ \"No\"\n    }\n    if file_name.prefix(1).lowercased() != \"0\" {\n        return\
    \ \"No\"\n    }\n    if file_name.prefix(1).lowercased() != \"9\" {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "\tlet regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\.[a-zA-Z]+$\", options: [])\n\tlet range = NSRange(location: 0,\
    \ length: file_name.utf16.count)\n\tlet result = regex.firstMatch(in: file_name,\
    \ options: [], range: range)\n\tif result != nil {\n\t\treturn \"Yes\"\n\t}\n\t\
    return \"No\"", "    let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n    let regex\
    \ = try! NSRegularExpression(pattern: pattern, options: [])\n    return regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).length\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).length > 0 &&\n        file_name.substring(with:\
    \ regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).hasPrefix(\"\
    a\") &&\n        file_name.substring(with: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).hasSuffix(\"txt\") ||\n\
    \        file_name.substring(with: regex.firstMatch(in: file_name, options: [],\
    \ range: NSMakeRange(0, file_name.count)).rangeAt(1)).hasSuffix(\"exe\") ||\n\
    \        file_name.substring(with: regex.firstMatch(in: file_name, options: [],\
    \ range: NSMakeRange(0, file_name.count)).rangeAt(1)).hasSuffix(\"dll\")\n   \
    \     ? \"Yes\" : \"No\"", "    let file_name = file_name.lowercased()\n    let\
    \ dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n   \
    \ let first_letter = file_name.prefix(dot_index)\n    let first_letter = first_letter!\n\
    \    let file_name = file_name.dropFirst(dot_index)\n    let file_name = file_name.lowercased()\n\
    \    let file_name = file_name.dropFirst()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropFirst()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst()",
  "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    let results = regex.matches(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count))\n    if !results.isEmpty\
    \ {\n        let result = results.first!\n        let range = NSRange(location:\
    \ result.range.location, length: result.range.length)\n        return NSLocalizedString(\"\
    No\", comment: \"\")\n    } else {\n        return NSLocalizedString(\"Yes\",\
    \ comment: \"\")\n    }", "    let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n  \
    \  let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    return\
    \ regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ == 0 ? \"Yes\" : \"No\"", "\tlet file_name = file_name.lowercased()\n\tlet dot_index\
    \ = file_name.index(of: \".\")\n\tlet dot_index = dot_index!\n\tlet dot_index\
    \ = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\t\
    let dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\
    \tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index =\
    \ dot_index!\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index!\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = ", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let file_name = file_name.substring(from: dot_index!)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.tri", "\tlet regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\\
    \\.[a-zA-Z]+$\", options: [])\n\treturn regex.firstMatch(in: file_name, options:\
    \ [], range: NSRange(location: 0, length: file_name.utf8.count))?.rangeAt(0) ??\
    \ \"\"", "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let file_name = file_name.substring(from:\
    \ dot_index!)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.tri", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\
    \n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n  \
    \  return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).length\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).length > 0 &&\n        file_name.substring(with:\
    \ regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).hasPrefix(\"\
    a\") &&\n        file_name.substring(with: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.count)).rangeAt(1)).hasSuffix(\"txt\") ||\n\
    \        file_name.substring(with: regex.firstMatch(in: file_name, options: [],\
    \ range: NSMakeRange(0, file_name.count)).rangeAt(1)).hasSuffix(\"exe\") ||\n\
    \        file_name.substring(with: regex.firstMatch(in: file_name, options: [],\
    \ range: NSMakeRange(0, file_name.count)).rangeAt(1)).hasSuffix(\"dll\")\n   \
    \     ? \"Yes\" : \"No\"", "    let file_name = file_name.lowercased()\n    let\
    \ file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name.first\n    let file_name = file_name.characters.count > 3 ? \"No\"\
    \ : \"Yes\"\n    return file_name", "    if file_name.count > 3 {\n        return\
    \ \"No\"\n    }\n    if file_name.contains(\".\") {\n        return \"No\"\n \
    \   }\n    if file_name.starts(with: \"a\") && file_name.ends(with: \"z\") ||\
    \ file_name.starts(with: \"A\") && file_name.ends(with: \"Z\") {\n        return\
    \ \"No\"\n    }\n    if file_name.range(of: \"[^0-9]\", options: .regularExpression)\
    \ != nil {\n        return \"No\"\n    }\n    if file_name.range(of: \"[^a-zA-Z.]\"\
    , options: .regularExpression) != nil {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "\tlet pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n\tlet regex = try!\
    \ NSRegularExpression(pattern: pattern, options: [])\n\tlet results = regex.matches(in:\
    \ file_name, options: [], range: NSRange(location: 0, length: file_name.count))\n\
    \t\n\tlet result = results.map { result in\n\t\treturn result.rangeAtIndex(1)\n\
    \t}.contains(NSRange(location: 0, length: 1))\n\t\n\treturn result ? \"Yes\" :\
    \ \"No\"", "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let first_letter = file_name.substring(to:\
    \ dot_index)\n    let first_letter = first_letter?.lowercased()\n    let letters\
    \ = first_letter?.characters\n    let letters = letters?.filter({ $0 != \"a\"\
    \ && $0 != \"b\" && $0 != \"c\" && $0 != \"d\" && $0 != \"e\" && $0 != \"f\" &&\
    \ $0 != \"g\" && $0 != \"h\" && $0 != \"i\" && $0 != \"j\" && $0 != \"k\" && $0\
    \ != \"l\" && $0 != \"m\" && $0 != \"n\" && $0 != \"o\" && $0 != \"p\" && $0 !=\
    \ \"q\" && $0 != \"r\" && $0 != \"s\" && $0 != \"t\" && $0 != \"u\" && $0 != \"\
    v\" && $0 != \"w\" && $0 != \"x\" && $0 != \"y\" && $0 != \"z\" })\n    let letters\
    \ = letters?.filter({ $0 != \"0\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"1\" })\n    let letters = letters?.filter({ $0 != \"2\" })\n    let letters\
    \ = letters?.filter({ $0 != \"3\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"4\" })\n    let letters = letters?.filter({ $0 != \"5\" })\n    let letters\
    \ = letters?.filter({ $0 != \"6\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"7\" })\n    let letters = letters?.filter({ $0 != \"8\" })\n    let letters\
    \ = letters?.filter({ $0 != \"9\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"a\" })\n    let letters = letters?.filter({ $0 != \"b\" })\n    let letters\
    \ = letters?.filter({ $0 != \"c\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"d\" })\n    let letters = letters?.filter({ $0 != \"e\" })\n    let letters\
    \ = letters?.filter({ $0 != \"f\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"g\" })\n    let letters = letters?.filter({ $0 != \"h\" })\n    let letters\
    \ = letters?.filter({ $0 != \"i\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"j\" })\n    let letters = letters?.filter({ $0 != \"k\" })\n    let letters\
    \ = letters?", "    let file_name = file_name.lowercased()\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.components(separatedBy: \".\")\n    let file_name = file_name.first\n\
    \    let file_name = file_name.count\n    if file_name == \"\" {\n        return\
    \ \"No\"\n    }\n    if file_name >= 3 {\n        return \"No\"\n    }\n    if\
    \ file_name.first == \"\" || file_name.first >= 'a' || file_name.first <= 'z'\
    \ {\n        return \"No\"\n    }\n    if file_name.last == \"\" || file_name.last\
    \ >= 'a' || file_name.last <= 'z' {\n        return \"No\"\n    }\n    if file_name.last\
    \ != \"txt\" && file_name.last != \"exe\" && file_name.last != \"dll\" {\n   \
    \     return \"No\"\n    }\n    return \"Yes\"", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.firstIndex(of: \".\")\n    if dot_index == -1 {\
    \ return \"No\" }\n    let file_name = file_name.substring(from: dot_index + 1)\n\
    \    let letter_index = file_name.firstIndex(of: \"aA\")\n    if letter_index\
    \ == -1 { return \"No\" }\n    let letter = file_name[letter_index..<file_name.endIndex]\n\
    \    if letter.count != 1 { return \"No\" }\n    if file_name.first != \"0\" {\
    \ return \"No\" }\n    if file_name.last != \"9\" { return \"No\" }\n    if file_name.count\
    \ < 3 { return \"No\" }\n    if file_name.contains(\".\") { return \"No\" }\n\
    \    if file_name.first == \"\" { return \"No\" }\n    if file_name.last == \"\
    \" { return \"No\" }\n    if file_name.first != \"a\" || file_name.first != \"\
    A\" { return \"No\" }\n    if file_name.last != \"z\" || file_name.last != \"\
    Z\" { return \"No\" }\n    if file_name.count != 3 { return \"No\" }\n    return\
    \ \"Yes\"", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex = try!\
    \ NSRegularExpression(pattern: pattern, options: [])\n    let result = regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count))\n\
    \    \n    if let range = result.range, range.location != NSNotFound {\n     \
    \   let substring = file_name.substring(with: range)\n        \n        if substring.characters.count\
    \ == 0 {\n            return \"No\"\n        }\n        \n        if substring.characters.count\
    \ > 3 {\n            return \"No\"\n        }\n        \n        if substring.characters.first\
    \ < \"a\" || substring.characters.first > \"z\" {\n            return \"No\"\n\
    \        }\n        \n        if substring.characters.last != \"txt\" && substring.characters.last\
    \ != \"exe\" && substring.characters.last != \"dll\" {\n            return \"\
    No\"\n        }\n        \n        return \"Yes\"\n    }\n    \n    return \"\
    No\"", "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index! - 1\n    let first_letter = file_name[dot_index]\n\
    \    let first_letter = first_letter?.lowercased()\n    let letters = first_letter?.unicodeScalars\n\
    \    let letters = letters?.filter({ $0.isLetter })\n    let letters = letters?.filter({\
    \ $0.isNotEmpty })\n    let letters = letters?.filter({ $0.first >= 'a' && $0.first\
    \ <= 'z' })\n    let letters = letters?.filter({ $0.first >= 'A' && $0.first <=\
    \ 'Z' })\n    let letters = letters?.filter({ $0.first != nil })\n    let letters\
    \ = letters?.filter({ $0.first != \"\" })\n    let letters = letters?.filter({\
    \ $0.first != nil })\n    let letters = letters?.filter({ $0.first != \"\" })\n\
    \    let letters = letters?.filter({ $0.first != nil })\n    let letters = letters?.filter({\
    \ $0.first != \"\" })\n    let letters = letters?.filter({ $0.first != nil })\n\
    \    let letters = letters?.filter({ $0.first != \"\" })\n    let letters = letters?.filter({\
    \ $0.first != nil })\n    let letters = letters?.filter({ $0.first != \"\" })\n\
    \    let letters = letters?.filter({ $0.first != nil })\n    let letters = letters?.filter({\
    \ $0.first != \"\" })\n    let letters = letters?.filter({ $0.first != nil })\n\
    \    let letters = letters?.filter({ $0.first != \"\" })\n    let letters = letters?.filter({\
    \ $0.first != nil })\n    let letters = letters?.filter({ $0.first != \"\" })\n\
    \    let letters = letters?.filter({ $0.first != nil })\n    let letters = letters?.filter({\
    \ $0.first != \"\" })\n    let letters = letters?.filter({ $0.first != nil })\n\
    \    let letters = letters?.filter({ $0.first != \"\" })\n    let letters = letters?.filter({\
    \ $0.first != nil })\n    let letters = letters?.filter({ $0.first != \"\" })\n\
    \    let letters = letters?.filter({ $0.first != nil })\n    let letters = letters?.filter({\
    \ $0.first != \"\" })\n    let letters = letters?.filter(", "    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let dot_index = dot_index!\n    let first_letter = file_name[..<dot_index]\n\
    \    let second_letter = file_name[dot_index..<file_name.count]\n    let first_letter\
    \ = first_letter?.unicodeScalars\n    let second_letter = second_letter?.unicodeScalars\n\
    \    let first_letter = first_letter?.first!\n    let second_letter = second_letter?.first!\n\
    \    if dot_index == 0 || first_letter == nil || second_letter == nil || first_letter\
    \ !=  first_letter.unicodeScalars.first || second_letter != second_letter.unicodeScalars.first\
    \ {\n        return \"No\"\n    } else {\n        return \"Yes\"\n    }", "\t\
    let file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index!\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index\
    \ - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet\
    \ dot_index = dot_index - 1\n\tlet dot_index = dot_index - 1\n\tlet dot_index\
    \ = dot_index - 1\n\tlet dot_index = ", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\\\.[a-zA-Z]+$\")\n    return regex.firstMatch(in: file_name, options:\
    \ .regularExpression) != nil ? \"Yes\" : \"No\"", "    let file_name = file_name.lowercased()\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name.first\n    let file_name = file_name.count\n    if file_name ==\
    \ 0 {\n        return \"No\"\n    }\n    if file_name <= 3 {\n        return \"\
    No\"\n    }\n    if file_name.first != \"a\" && file_name.first != \"b\" && file_name.first\
    \ != \"c\" && file_name.first != \"d\" && file_name.first != \"e\" && file_name.first\
    \ != \"f\" && file_name.first != \"g\" && file_name.first != \"h\" && file_name.first\
    \ != \"i\" && file_name.first != \"j\" && file_name.first != \"k\" && file_name.first\
    \ != \"l\" && file_name.first != \"m\" && file_name.first != \"n\" && file_name.first\
    \ != \"o\" && file_name.first != \"p\" && file_name.first != \"q\" && file_name.first\
    \ != \"r\" && file_name.first != \"s\" && file_name.first != \"t\" && file_name.first\
    \ != \"u\" && file_name.first != \"v\" && file_name.first != \"w\" && file_name.first\
    \ != \"x\" && file_name.first != \"y\" && file_name.first != \"z\" {\n       \
    \ return \"No\"\n    }\n    if file_name.last != \"txt\" && file_name.last !=\
    \ \"exe\" && file_name.last != \"dll\" {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "    let file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.components(separatedBy:\
    \ \".\")\n    let file_name = file_name.first!\n    let file_name = file_name.rangeOfCharacter(from:\
    \ CharacterSet.alphanumerics.inverted)\n    let file_name = file_name.rangeOfCharacter(from:\
    \ CharacterSet.letters.inverted)\n    let file_name = file_name.rangeOfCharacter(from:\
    \ CharacterSet.symbols.inverted)\n    if file_name == nil || file_name!.count\
    \ < 3 {\n        return \"No\"\n    }\n    if file_name!.first == \"\" || file_name!.first\
    \ != \"a\" || file_name!.first != \"b\" || file_name!.first != \"c\" || file_name!.first\
    \ != \"d\" || file_name!.first != \"e\" || file_name!.first != \"f\" || file_name!.first\
    \ != \"g\" || file_name!.first != \"h\" || file_name!.first != \"i\" || file_name!.first\
    \ != \"j\" || file_name!.first != \"k\" || file_name!.first != \"l\" || file_name!.first\
    \ != \"m\" || file_name!.first != \"n\" || file_name!.first != \"o\" || file_name!.first\
    \ != \"p\" || file_name!.first != \"q\" || file_name!.first != \"r\" || file_name!.first\
    \ != \"s\" || file_name!.first != \"t\" || file_name!.first != \"u\" || file_name!.first\
    \ != \"v\" || file_name!.first != \"w\" || file_name!.first != \"x\" || file_name!.first\
    \ != \"y\" || file_name!.first != \"z\" {\n        return \"No\"\n    }\n    if\
    \ file_name!.last != \"txt\" || file_name!.last != \"exe\" || file_name!.last\
    \ != \"dll\" {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name\
    \ = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.components(separatedBy:\
    \ \".\")\n    let file_name = file_name.first\n    let file_name = file_name.count\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.first\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.first\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.first\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.first\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.first\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.first\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.first\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.first\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.first\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.first\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.first\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.first\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.first\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.first\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.first\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.first\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.first\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.first\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.first\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.first\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.first\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.first\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.first\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.first\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.first\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.first\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.first\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.first\n\
    \    let file_name = file_name.characters.count\n    let file_name = ", "    let\
    \ file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let dot_index = dot_index + 1\n\
    \    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n    let dot_index = dot_index.advanced(by: 1)\n    let dot_index = dot_index.advanced(by:\
    \ 1)\n", "    let file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.components(separatedBy:\
    \ \".\")\n    \n    if file_name.count > 3 {\n        return \"No\"\n    }\n \
    \   \n    if file_name.count < 1 {\n        return \"No\"\n    }\n    \n    if\
    \ file_name[0].rangeOfCharacter(from: .lowercaseLetters) != nil {\n        return\
    \ \"No\"\n    }\n    \n    if file_name[1].rangeOfCharacter(from: .lowercaseLetters)\
    \ != nil {\n        return \"No\"\n    }\n    \n    if file_name[2].rangeOfCharacter(from:\
    \ .lowercaseLetters) != nil {\n        return \"No\"\n    }\n    \n    if file_name[0].rangeOfCharacter(from:\
    \ .uppercaseLetters) != nil {\n        return \"No\"\n    }\n    \n    if file_name[1].rangeOfCharacter(from:\
    \ .uppercaseLetters) != nil {\n        return \"No\"\n    }\n    \n    if file_name[2].rangeOfCharacter(from:\
    \ .uppercaseLetters) != nil {\n        return \"No\"\n    }\n    \n    if file_name[0].rangeOfCharacter(from:\
    \ .decimalDigits) != nil {\n        return \"No\"\n    }\n    \n    if file_name[1].rangeOfCharacter(from:\
    \ .decimalDigits) != nil {\n        return \"No\"\n    }\n    \n    if file_name[2].rangeOfCharacter(from:\
    \ .decimalDigits) != nil {\n        return \"No\"\n    }\n    \n    if file_name[0].rangeOfCharacter(from:\
    \ .symbols) != nil {\n        return \"No\"\n    }\n    \n    if file_name[1].rangeOfCharacter(from:\
    \ .symbols) != nil {\n        return \"No\"\n    }\n    \n    if file_name[2].rangeOfCharacter(from:\
    \ .symbols) != nil {\n        return \"No\"\n    }\n    \n    return \"Yes\"",
  "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern)\n    return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.utf16.count)).rangeAt(1).length == 0 &&\n        file_name.components(separatedBy:\
    \ \".\").first != \"\" &&\n        file_name.components(separatedBy: \".\").first!.rangeOfCharacter(from:\
    \ NSCharacterSet.letters.inverted) == nil\n        ? \"Yes\" : \"No\"", "    let\
    \ file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let file_name = file_name.substring(from:\
    \ dot_index)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let letter_index = (file_name.startIndex..<file_name.endIndex).filter({\
    \ $0.isLetter })\n    let letter_index = letter_index.first\n    let letter_index\
    \ = letter_index!\n    let letter_index = letter_index.advanced(by: 1)\n    let\
    \ letter_index = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter", " \
    \   let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let file_name = file_name.substring(from:\
    \ dot_index!)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNew",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let first_letter = file_name.prefix(upTo:\
    \ dot_index)\n    let first_letter = first_letter!\n    let letters = first_letter..<first_letter\
    \ + first_letter.count\n    let contains_dot = (dot_index != nil)\n    let contains_letter\
    \ = (letters.count != 0)\n    let contains_only_letters = (letters.count == 1\
    \ && letters.first >= 'a' && letters.first <= 'z')\n    let contains_only_digits\
    \ = (letters.count == 1 && letters.first >= '0' && letters.first <= '9')\n   \
    \ let contains_only_dot_or_letter = (dot_index != nil && contains_letter)\n  \
    \  let contains_only_dot_or_letter2 = (dot_index != nil && contains_only_letters)\n\
    \    let contains_only_dot_or_letter3 = (dot_index != nil && contains_only_digits)\n\
    \    let contains_only_dot_or_letter4 = (dot_index != nil && contains_only_dot_or_letter)\n\
    \    let contains_only_dot_or_letter5 = (dot_index != nil && contains_only_dot_or_letter2)\n\
    \    let contains_only_dot_or_letter6 = (dot_index != nil && contains_only_dot_or_letter3)\n\
    \    let contains_only_dot_or_letter7 = (dot_index != nil && contains_only_dot_or_letter4)\n\
    \    let contains_only_dot_or_letter8 = (dot_index != nil && contains_only_dot_or_letter5)\n\
    \    let contains_only_dot_or_letter9 = (dot_index != nil && contains_only_dot_or_letter6)\n\
    \    let contains_only_dot_or_letter10 = (dot_index != nil && contains_only_dot_or_letter7)\n\
    \    let contains_only_dot_or_letter11 = (dot_index != nil && contains_only_dot_or_letter8)\n\
    \    let contains_only_dot_or_letter12 = (dot_index != nil && contains_only_dot_or_letter9)\n\
    \    let contains_only_dot_or_letter13 = (dot_index != nil && contains_only_dot_or_letter10)\n\
    \    let contains_only_dot_or_letter14 = (dot_index != nil && contains_only_dot_or_letter11)\n\
    \    let contains_only_dot_or_letter15 = (dot_index != nil && contains_only_dot_or_letter12)\n\
    \    let contains_only_dot_or_letter16 = (dot_index != nil && contains_only_dot_or_letter13)\n\
    \    let contains_only_dot_or_letter17 = (dot_index != nil && contains_only_dot_or_letter14)\n\
    \    let contains_only_dot_or_letter18 = (dot_index != nil && contains_only_dot_or_letter15)\n\
    \    let contains_only_dot_or_letter19 = (dot_index != nil && contains_only_dot_or_letter16)\n\
    \    let contains_only_dot_or_letter20 = (dot_index != ", "    let pattern = \"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    return regex.firstMatch(in: file_name, options: [],\
    \ range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length == 0 &&\n\
    \        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ > 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).first >= 97 &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).first\
    \ <= 122 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).last >= 65 &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).last\
    \ <= 90\n        ? \"Yes\" : \"No\"", "    let file_name = file_name.lowercased()\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name.first\n    let file_name = file_name.characters.count\n    if file_name\
    \ == 0 || file_name >= 3 {\n        return \"No\"\n    }\n    if file_name ==\
    \ \".\" {\n        return \"No\"\n    }\n    if file_name.first == 0 || file_name.first\
    \ >= 'a' || file_name.first <= 'z' {\n        return \"No\"\n    }\n    if file_name.last\
    \ == 0 || file_name.last >= 'a' || file_name.last <= 'z' {\n        return \"\
    No\"\n    }\n    if file_name.last == \"txt\" || file_name.last == \"exe\" ||\
    \ file_name.last == \"dll\" {\n        return \"Yes\"\n    }\n    return \"No\"",
  "    let file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let file_name = file_name.components(separatedBy:\
    \ \".\")\n    let file_name = file_name.first\n    let file_name = file_name.count\n\
    \    let file_name = file_name.characters.count\n    let file_name = file_name.characters.contains(\"\
    0\")\n    let file_name = file_name.characters.contains(\"1\")\n    let file_name\
    \ = file_name.characters.contains(\"2\")\n    let file_name = file_name.characters.contains(\"\
    3\")\n    let file_name = file_name.characters.contains(\"4\")\n    let file_name\
    \ = file_name.characters.contains(\"5\")\n    let file_name = file_name.characters.contains(\"\
    6\")\n    let file_name = file_name.characters.contains(\"7\")\n    let file_name\
    \ = file_name.characters.contains(\"8\")\n    let file_name = file_name.characters.contains(\"\
    9\")\n    let file_name = file_name.characters.contains(\".\")\n    let file_name\
    \ = file_name.characters.contains(\"a\")\n    let file_name = file_name.characters.contains(\"\
    b\")\n    let file_name = file_name.characters.contains(\"c\")\n    let file_name\
    \ = file_name.characters.contains(\"d\")\n    let file_name = file_name.characters.contains(\"\
    e\")\n    let file_name = file_name.characters.contains(\"f\")\n    let file_name\
    \ = file_name.characters.contains(\"g\")\n    let file_name = file_name.characters.contains(\"\
    h\")\n    let file_name = file_name.characters.contains(\"i\")\n    let file_name\
    \ = file_name.characters.contains(\"j\")\n    let file_name = file_name.characters.contains(\"\
    k\")\n    let file_name = file_name.characters.contains(\"l\")\n    let file_name\
    \ = file_name.characters.contains(\"m\")\n    let file_name = file_name.characters.contains(\"\
    n\")\n    let file_name = file_name.characters.contains(\"o\")\n    let file_name\
    \ = file_name.characters.contains(\"p\")\n    let file_name = file_name.characters.contains(\"\
    q\")\n    let file_name = file_name.characters.contains(\"r\")\n    let file_name\
    \ = file_name.characters.contains(\"s\")\n    let file_name = file_name.characters.contains(\"\
    t\")\n    let file_name = file_name.characters.contains(\"u\")\n    let file_name\
    \ = file_name.characters.contains(\"v\")\n    let file_name = file_name.characters.contains(\"\
    w\")\n    let file_name = file_name.characters.contains(\"x\")\n    let file_name\
    \ = file_name.characters.contains(\"y\")\n    let file_name = file_name.characters.contains(\"\
    z\")\n    let file_name = file_name.characters.contains(\"A\")\n    let file_name\
    \ = file_name.characters.contains(\"B\")\n    let file_name = file_name.characters.contains(\"\
    C\")\n    let file_name = file_name.characters.contains(\"D\")\n    let file_name\
    \ = file_name.characters.contains(\"E\")\n", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let file_name = file_name.substring(from: dot_index!)\n    let file_name\
    \ = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n  \
    \  let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.substring(from:\
    \ 0)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNew",
  "    if file_name.count > 3 {\n        return \"No\"\n    }\n    if file_name.count\
    \ < 1 {\n        return \"No\"\n    }\n    if file_name.contains(\".\") {\n  \
    \      return \"No\"\n    }\n    if file_name.starts(with: \"a\") {\n        return\
    \ \"No\"\n    }\n    if file_name.starts(with: \"A\") {\n        return \"No\"\
    \n    }\n    if file_name.ends(with: \"txt\") {\n        return \"Yes\"\n    }\n\
    \    if file_name.ends(with: \"exe\") {\n        return \"Yes\"\n    }\n    if\
    \ file_name.ends(with: \"dll\") {\n        return \"Yes\"\n    }\n    return \"\
    No\"", "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let first_letter = file_name[dot_index..<dot_index+1]\n\
    \    let first_letter = first_letter?.lowercased()\n    let letters = first_letter?.characters\n\
    \    let letters = letters?.filter({ $0 != \"a\" && $0 != \"b\" && $0 != \"c\"\
    \ && $0 != \"d\" && $0 != \"e\" && $0 != \"f\" && $0 != \"g\" && $0 != \"h\" &&\
    \ $0 != \"i\" && $0 != \"j\" && $0 != \"k\" && $0 != \"l\" && $0 != \"m\" && $0\
    \ != \"n\" && $0 != \"o\" && $0 != \"p\" && $0 != \"q\" && $0 != \"r\" && $0 !=\
    \ \"s\" && $0 != \"t\" && $0 != \"u\" && $0 != \"v\" && $0 != \"w\" && $0 != \"\
    x\" && $0 != \"y\" && $0 != \"z\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"0\" })\n    let letters = letters?.filter({ $0 != \"1\" })\n    let letters\
    \ = letters?.filter({ $0 != \"2\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"3\" })\n    let letters = letters?.filter({ $0 != \"4\" })\n    let letters\
    \ = letters?.filter({ $0 != \"5\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"6\" })\n    let letters = letters?.filter({ $0 != \"7\" })\n    let letters\
    \ = letters?.filter({ $0 != \"8\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"9\" })\n    let letters = letters?.filter({ $0 != \"a\" })\n    let letters\
    \ = letters?.filter({ $0 != \"b\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"c\" })\n    let letters = letters?.filter({ $0 != \"d\" })\n    let letters\
    \ = letters?.filter({ $0 != \"e\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"f\" })\n    let letters = letters?.filter({ $0 != \"g\" })\n    let letters\
    \ = letters?.filter({ $0 != \"h\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"i\" })\n    let letters = letters?.filter({ $0 != \"j\" })\n    let letters\
    \ = letters?.filter({ $0 != \"k\" })\n    let letters = ", "    let pattern =\
    \ \"^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    let result = regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.count))\n    if result != nil {\n      \
    \  return String(describing: result.rangeAt(1))\n    } else {\n        return\
    \ \"No\"\n    }", "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\\
    \\.[a-zA-Z]+$\")\n    let result = regex.firstMatch(in: file_name, options: [],\
    \ range: NSMakeRange(0, file_name.utf8.count))\n    if result != nil {\n     \
    \   let range = result.range\n        let file_name = file_name.substring(with:\
    \ range)\n        let regex = try! NSRegularExpression(pattern: \"^[a-zA-Z]+\"\
    )\n        let result = regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.utf8.count))\n        if result != nil {\n            let range =\
    \ result.range\n            let file_name = file_name.substring(with: range)\n\
    \            if file_name.contains(\".\") {\n                if let index = file_name.index(of:\
    \ \".\") {\n                    let file_name = file_name[index..<file_name.endIndex]\n\
    \                    if file_name.contains(\".\") {\n                        if\
    \ let index = file_name.index(of: \".\") {\n                            let file_name\
    \ = file_name[index..<file_name.endIndex]\n                            if file_name.contains(\"\
    .\") {\n                                if let index = file_name.index(of: \"\
    .\") {\n                                    let file_name = file_name[index..<file_name.endIndex]\n\
    \                                    if file_name.contains(\".\") {\n        \
    \                                if let index = file_name.index(of: \".\") {\n\
    \                                            let file_name = file_name[index..<file_name.endIndex]\n\
    \                                            if file_name.contains(\".\") {\n\
    \                                                if let index = file_name.index(of:\
    \ \".\") {\n                                                    let file_name\
    \ = file_name[index..<file_name.endIndex]\n                                  \
    \                  if file_name.contains(\".\") {\n                          \
    \                              if let index = file_name.index(of: \".\") {\n \
    \                                                           let file_name = file_name[index..<file_name.endIndex]\n\
    \                                                            if file_name.contains(\"\
    .\") {\n                                                                if let\
    \ index = file_name.index(of: \".\") {\n                                     \
    \                               let file_name = file_name[index..<file_name.endIndex]\n\
    \                                                                    if file_name.contains(\"\
    .\") {\n                                                                     \
    \   let file_name = file_name[index..<file_name.endIndex]\n                  \
    \                                                      if file_name.contains(\"\
    .\") {\n                                                                     \
    \       if let index = file_name.index(of: \".\") {\n                        \
    \                                                        let file_name = file_name[index..<file_name.endIndex]\n\
    \                                                                            \
    \    if file_name.contains(\".\") {\n                                        \
    \                                            if let index = file_name.index(of:\
    \ \".\") {\n                                                                 \
    \                       let file_name = file_name[index..<file_name.endIndex]\n\
    \                                                                            \
    \            if file_name.contains(\".\") {\n                                \
    \                                                            if let index = file_name.index(of:\
    \ \".\") {\n                                                                 \
    \                               let file_name = file_name[index..<file_name.endIndex]\n\
    \                                                                            \
    \                    if file_name.contains(\".\") {\n                        \
    \                                                                            if\
    \ let index = file_name.index(of: \".\") {\n                                 \
    \                                                                       let file_name\
    \ = file_name[index", "    let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n    let\
    \ regex = try! NSRegularExpression(pattern: pattern)\n    return regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ == 0 ? \"Yes\" : \"No\"", "    let pattern = \"^[0-9]{3}\\.\"\n    let regex\
    \ = try! NSRegularExpression(pattern: pattern, options: [])\n    let match = regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count))\n\
    \    if let match = match {\n        let range = match.range\n        let start\
    \ = range.lowerBound\n        let end = range.upperBound\n        let substr =\
    \ file_name[start..<end]\n        let valid = substr.contains(\".\")\n       \
    \ if valid {\n            let firstChar = substr[0]\n            let firstCharIsLetter\
    \ = firstChar.isLetter\n            if firstCharIsLetter {\n                let\
    \ firstCharUpper = firstChar.uppercased()\n                let firstCharLower\
    \ = firstChar.lowercased()\n                let firstCharIsLetterUpper = firstCharUpper\
    \ == firstChar\n                let firstCharIsLetterLower = firstCharLower ==\
    \ firstChar\n                if firstCharIsLetterUpper || firstCharIsLetterLower\
    \ {\n                    return \"Yes\"\n                } else {\n          \
    \          return \"No\"\n                }\n            } else {\n          \
    \      return \"No\"\n            }\n        } else {\n            return \"No\"\
    \n        }\n    } else {\n        return \"No\"\n    }", "\tlet file_name = file_name.lowercased()\n\
    \tlet dot_index = file_name.index(of: \".\")\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.offset : file_name.characters.count\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.offset : file_name.characters.count\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.offset : file_name.characters.count\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.offset : file_name.characters.count\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.offset : file_name.characters.count\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.offset : file_name.characters.count\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.offset : file_name.characters.count\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.offset : file_name.characters.count\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.offset : file_name.characters.count\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.offset : file_name.characters.count\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.offset : file_name.characters.count\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.offset : file_name.characters.count\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.offset : file_name.characters.count\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.offset : file_name.characters.count\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.offset : file_name.characters.count\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.offset : file_name.characters.count\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.offset : file_name.characters.count\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.offset : file_name.characters.count\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.offset : file_name.characters.count\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.offset : file_name.characters.count\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.offset : file_name.characters.count\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.offset : file_name.characters.count\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.offset : file_name.characters.count\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.offset : file_name.characters.count\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!", "    let file_name = file_name.lowercased()\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.components(separatedBy: \".\")\n    let file_name = file_name[0]\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.letters.union(.newlines))\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name[0]\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.letters.union(.newlines))\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name[0]\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.letters.union(.newlines))\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name[0]\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.letters.union(.newlines))\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name[0]\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.letters.union(.newlines))\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name[0]\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.letters.union(.newlines))\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name[0]\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.letters.union(.newlines))\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name[0]\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.letters.union(.newlines))\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name[0]\n    let file_name = ", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}[a-zA-Z]{1}\\.[a-zA-Z]{3,4}$\")\n    let result = regex.firstMatch(in:\
    \ file_name, options: .regularExpression)\n    if result != nil {\n        return\
    \ \"Yes\"\n    } else {\n        return \"No\"\n    }", "    if file_name.count\
    \ > 3 {\n        return \"No\"\n    }\n    if file_name.count < 1 {\n        return\
    \ \"No\"\n    }\n    if file_name.contains(\".\") {\n        return \"No\"\n \
    \   }\n    if file_name.starts(with: \"a\") || file_name.starts(with: \"A\") {\n\
    \        return \"No\"\n    }\n    if file_name.ends(with: \"txt\") || file_name.ends(with:\
    \ \"exe\") || file_name.ends(with: \"dll\") {\n        return \"Yes\"\n    }\n\
    \    return \"No\"", "    \n    // Initialize a boolean to false\n    var is_valid\
    \ = false\n    \n    // Initialize a variable to hold the file's name without\
    \ extension\n    var file_name = file_name.substring(file_name.lastIndexOf(\"\
    .\") + 1)\n    \n    // Initialize a variable to hold the file's name without\
    \ extension\n    var file_name = file_name.substring(0, file_name.indexOf(\".\"\
    ))\n    \n    // Initialize a variable to hold the file's name without extension\n\
    \    var file_name = file_name.substring(0, file_name.indexOf(\".\"))\n    \n\
    \    // Initialize a variable to hold the file's name without extension\n    var\
    \ file_name = file_name.substring(0, file_name.indexOf(\".\"))\n    \n    // Initialize\
    \ a variable to hold the file's name without extension\n    var file_name = file_name.substring(0,\
    \ file_name.indexOf(\".\"))\n    \n    // Initialize a variable to hold the file's\
    \ name without extension\n    var file_name = file_name.substring(0, file_name.indexOf(\"\
    .\"))\n    \n    // Initialize a variable to hold the file's name without extension\n\
    \    var file_name = file_name.substring(0, file_name.indexOf(\".\"))\n    \n\
    \    // Initialize a variable to hold the file's name without extension\n    var\
    \ file_name = file_name.substring(0, file_name.indexOf(\".\"))\n    \n    // Initialize\
    \ a variable to hold the file's name without extension\n    var file_name = file_name.substring(0,\
    \ file_name.indexOf(\".\"))\n    \n    // Initialize a variable to hold the file's\
    \ name without extension\n    var file_name = file_name.substring(0, file_name.indexOf(\"\
    .\"))\n    \n    // Initialize a variable to hold the file's name without extension\n\
    \    var file_name = file_name.substring(0, file_name.indexOf(\".\"))\n    \n\
    \    // Initialize a variable to hold the file's name without extension\n    var\
    \ file_name = file_name.substring(0, file_name.indexOf(\".\"))\n    \n    // Initialize\
    \ a variable to hold the file's name without extension\n    var file_name = file_name.substring(0,\
    \ file_name.indexOf(\".\"))\n    \n    // Initialize a variable to hold the file's\
    \ name without extension\n    var file_name = file_name.substring(0, file_name.indexOf(\"\
    .\"))\n    \n    // Initialize a variable to hold the file's name without extension\n\
    \    var file_name = file_name.substring(0, file_name.indexOf(\".\"))\n    \n\
    \    // Initialize a variable to hold the file's name without extension\n    var\
    \ file_name = file_name.substring(0, file_name.indexOf(\".\"))\n    \n    // Initialize\
    \ a variable to hold the file's name without extension\n    var file_name = file_name.substring(0,\
    \ file_name.indexOf(\".\"))\n    \n    // Initialize a variable to hold the file's\
    \ name without extension\n    var file_name = file_name.substring(0, file_name.indexOf(\"\
    .\"))\n    \n    // Initialize a variable to hold the file", "\tlet file_name\
    \ = file_name.lowercased()\n\tlet dot_index = file_name.index(of: \".\")\n\tlet\
    \ dot_index = dot_index!\n\tlet dot_index = dot_index! - 1\n\tlet dot_index =\
    \ dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index!\
    \ - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\t\
    let dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index\
    \ = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index!\
    \ - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\t\
    let dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index\
    \ = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index!\
    \ - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\t\
    let dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index\
    \ = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index!\
    \ - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\t\
    let dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index\
    \ = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index!\
    \ - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\t\
    let dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index\
    \ = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index!\
    \ - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\t\
    let dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index\
    \ = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index!\
    \ - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\t\
    let dot_index = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index\
    \ = dot_index! - 1\n\tlet dot_index = dot_index! - 1\n\tlet dot_index = dot_index!\
    \ - 1\n\tlet dot_index = dot_index!", "    let file_name = file_name.lowercased()\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name[0]\n    let file_name = file_name.rangeOfCharacter(from: CharacterSet.letters.inverted)\n\
    \    let file_name = file_name.rangeOfCharacter(from: CharacterSet.letters.union(CharacterSet(charactersIn:\
    \ \"0123456789\")))\n    if file_name == nil || file_name.count < 3 {\n      \
    \  return \"No\"\n    }\n    if file_name.first == \"\" || file_name.first !=\
    \ \"a\" || file_name.first != \"b\" || file_name.first != \"c\" || file_name.first\
    \ != \"d\" || file_name.first != \"e\" || file_name.first != \"f\" || file_name.first\
    \ != \"g\" || file_name.first != \"h\" || file_name.first != \"i\" || file_name.first\
    \ != \"j\" || file_name.first != \"k\" || file_name.first != \"l\" || file_name.first\
    \ != \"m\" || file_name.first != \"n\" || file_name.first != \"o\" || file_name.first\
    \ != \"p\" || file_name.first != \"q\" || file_name.first != \"r\" || file_name.first\
    \ != \"s\" || file_name.first != \"t\" || file_name.first != \"u\" || file_name.first\
    \ != \"v\" || file_name.first != \"w\" || file_name.first != \"x\" || file_name.first\
    \ != \"y\" || file_name.first != \"z\" {\n        return \"No\"\n    }\n    if\
    \ file_name.last == \"\" || file_name.last != \"txt\" || file_name.last != \"\
    exe\" || file_name.last != \"dll\" {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "    let file_name = file_name.lowercased()\n    let dot_index = file_name.firstIndex(of:\
    \ \".\")\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = ", "    let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n\
    \    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n   \
    \ return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).length > 0 &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).first\
    \ >= 97 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).first <= 122 &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).last\
    \ >= 65 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).last <= 90\n        ? \"Yes\" : \"No\"",
  "    let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern)\n    return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).length == 0 &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ > 0 &&\n        file_name.substring(with: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).hasPrefix(\"\
    a\") &&\n        file_name.substring(with: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).hasSuffix(\"\
    txt\") ||\n        file_name.substring(with: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).hasSuffix(\"\
    exe\") ||\n        file_name.substring(with: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).hasSuffix(\"\
    dll\")\n        ? \"Yes\" : \"No\"", "    let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\
    \n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n  \
    \  return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ == 0 ? \"Yes\" : \"No\"", "    let file_name = file_name.lowercased()\n    let\
    \ dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n   \
    \ let first_letter = file_name.prefix(upTo: dot_index)\n    let first_letter =\
    \ first_letter!\n    let last_letter = file_name.suffix(from: dot_index)\n   \
    \ let last_letter = last_letter!\n    if dot_index == 0 {\n        return first_letter\
    \ == \"a\" || first_letter == \"b\" || first_letter == \"c\" || first_letter ==\
    \ \"d\" || first_letter == \"e\" || first_letter == \"f\" || first_letter == \"\
    g\" || first_letter == \"h\" || first_letter == \"i\" || first_letter == \"j\"\
    \ || first_letter == \"k\" || first_letter == \"l\" || first_letter == \"m\" ||\
    \ first_letter == \"n\" || first_letter == \"o\" || first_letter == \"p\" || first_letter\
    \ == \"q\" || first_letter == \"r\" || first_letter == \"s\" || first_letter ==\
    \ \"t\" || first_letter == \"u\" || first_letter == \"v\" || first_letter == \"\
    w\" || first_letter == \"x\" || first_letter == \"y\" || first_letter == \"z\"\
    \n    } else if dot_index == file_name.count - 1 {\n        return last_letter\
    \ == \"txt\" || last_letter == \"exe\" || last_letter == \"dll\"\n    } else {\n\
    \        return first_letter == \"a\" || first_letter == \"b\" || first_letter\
    \ == \"c\" || first_letter == \"d\" || first_letter == \"e\" || first_letter ==\
    \ \"f\" || first_letter == \"g\" || first_letter == \"h\" || first_letter == \"\
    i\" || first_letter == \"j\" || first_letter == \"k\" || first_letter == \"l\"\
    \ || first_letter == \"m\" || first_letter == \"n\" || first_letter == \"o\" ||\
    \ first_letter == \"p\" || first_letter == \"q\" || first_letter == \"r\" || first_letter\
    \ == \"s\" || first_letter == \"t\" || first_letter == \"u\" || first_letter ==\
    \ \"v\" || first_letter == \"w\" || first_letter == \"x\" || first_letter == \"\
    y\" || first_letter == \"z\"\n    }", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\
    \n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n  \
    \  return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).length > 0 &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).first\
    \ >= 97 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).first <= 122 &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).last\
    \ >= 65 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).last <= 90\n        ? \"Yes\"\n    \
    \    : \"No\"", "\tlet file_name = file_name.lowercased()\n\tlet dot_index = file_name.index(of:\
    \ \".\")\n\tlet dot_index = dot_index != nil ? dot_index!.advanced(by: 1) : nil\n\
    \tlet dot_index = dot_index != nil ? dot_index!.advanced(by: 1) : nil\n\tlet dot_index\
    \ = dot_index != nil ? dot_index!.advanced(by: 1) : nil\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.advanced(by: 1) : nil\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.advanced(by: 1) : nil\n\tlet dot_index = dot_index != nil ? dot_index!.advanced(by:\
    \ 1) : nil\n\tlet dot_index = dot_index != nil ? dot_index!.advanced(by: 1) :\
    \ nil\n\tlet dot_index = dot_index != nil ? dot_index!.advanced(by: 1) : nil\n\
    \tlet dot_index = dot_index != nil ? dot_index!.advanced(by: 1) : nil\n\tlet dot_index\
    \ = dot_index != nil ? dot_index!.advanced(by: 1) : nil\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.advanced(by: 1) : nil\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.advanced(by: 1) : nil\n\tlet dot_index = dot_index != nil ? dot_index!.advanced(by:\
    \ 1) : nil\n\tlet dot_index = dot_index != nil ? dot_index!.advanced(by: 1) :\
    \ nil\n\tlet dot_index = dot_index != nil ? dot_index!.advanced(by: 1) : nil\n\
    \tlet dot_index = dot_index != nil ? dot_index!.advanced(by: 1) : nil\n\tlet dot_index\
    \ = dot_index != nil ? dot_index!.advanced(by: 1) : nil\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!.advanced(by: 1) : nil\n\tlet dot_index = dot_index != nil\
    \ ? dot_index!.advanced(by: 1) : nil\n\tlet dot_index = dot_index != nil ? dot_index!.advanced(by:\
    \ 1) : nil\n\tlet dot_index = dot_index != nil ? dot_index!.advanced(by: 1) :\
    \ nil\n\tlet dot_index = dot_index != nil ? dot_index!.advanced(by: 1) : nil\n\
    \tlet dot_index = dot_index != nil ? dot_index!.advanced(by: 1) : nil\n\tlet dot_index\
    \ = dot_index != nil ? dot_index!.advanced(by: 1) : nil\n\tlet dot_index = dot_index\
    \ != nil ? dot_index!", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z0-9]+$\"\n   \
    \ let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    return\
    \ regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).location == 0 &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ > 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).rangeAt(0).location == 0 &&\n      \
    \  regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).rangeAt(0).length\
    \ > 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).rangeAt(0).rangeAt(0).location == 0\
    \ &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).rangeAt(0).rangeAt(0).length > 0 &&\n\
    \        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).rangeAt(0).rangeAt(0).rangeAt(0).location\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).rangeAt(0).rangeAt(0).rangeAt(0).length\
    \ > 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).rangeAt(0).rangeAt(0).rangeAt(0).rangeAt(0).location\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).rangeAt(0).rangeAt(0).rangeAt(0).rangeAt(0).length\
    \ > 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).rangeAt(0).rangeAt(0).rangeAt(0).rangeAt(0).rangeAt(0).location\
    \ == 0\n        ? \"Yes\" : \"No\""]
stop_tokens:
- "\n}"
