name: HumanEval_100_make_a_pile
language: swift
prompt: "\n/// Given a positive integer n, you have to make a pile of n levels of\
  \ stones.\n/// The first level has n stones.\n/// The number of stones in the next\
  \ level is:\n/// - the next odd number if n is odd.\n/// - the next even number\
  \ if n is even.\n/// Return the number of stones in each level in an array, where\
  \ element at index\n/// i represents the number of stones in the level (i+1).\n\
  /// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
  \ -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
  \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
  \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
  \ 18, 20, 22])"
completions: ["    var pile = [Int]()\n    pile = append(pile, n / 2)\n    if n %\
    \ 2 == 0 {\n        pile = append(pile, n / 2)\n    }\n    return pile", "   \
    \ var stones = [0]\n    var level = 0\n    while stones.count < n {\n        if\
    \ n % 2 == 0 {\n            stones.append(stones.last! + 2)\n        } else {\n\
    \            stones.append(stones.last! + 3)\n        }\n        n /= 2\n    \
    \    level++\n    }\n    return stones", "    var pile = [Int]()\n    var level\
    \ = 0\n    var stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n \
    \           pile[level] = stones\n            stones += 2\n        } else {\n\
    \            pile[level] = stones\n            stones += 3\n        }\n      \
    \  level++\n    }\n    return pile", "    var result = [Int]()\n    var level\
    \ = 0\n    var stones = n\n    while stones > 0 {\n        if stones % 2 == 1\
    \ {\n            result.append(stones)\n            stones /= 2\n        } else\
    \ {\n            result.append(stones)\n            stones /= 2\n            result.append(stones)\n\
    \            stones /= 2\n        }\n        level++\n    }\n    return result",
  "    var result = [Int]()\n    var currentLevel = 0\n    var currentStones = 0\n\
    \    for _ in 0..<n {\n        if n % 2 == 0 {\n            currentStones += 2\n\
    \        } else {\n            currentStones += 1\n        }\n        result.append(currentStones)\n\
    \        currentLevel += 1\n        n = n / 2\n    }\n    return result", "  \
    \  var stones = [Int]()\n    if n % 2 == 0 {\n        stones.append(n)\n    }\
    \ else {\n        var even = make_a_pile(n: n / 2)\n        var odd = make_a_pile(n:\
    \ n / 2)\n        stones.append(odd.reduce(0, +))\n        stones.append(even.reduce(0,\
    \ +))\n    }\n    return stones", "    var stones = [0]\n    var level = 1\n \
    \   while stones.count < n {\n        if n % 2 == 0 {\n            stones.append(stones.last!\
    \ + 2)\n        } else {\n            stones.append(stones.last! + 1)\n      \
    \  }\n        n /= 2\n        level += 1\n    }\n    return stones", "    var\
    \ result = [Int]()\n    var currentLevel = n - 1\n    var nextLevel = n - 1\n\
    \    var nextOdd = 0\n    var nextEven = 0\n\n    while currentLevel > 0 {\n \
    \       nextLevel = nextLevel / 2\n        if nextLevel % 2 == 0 {\n         \
    \   nextEven = nextEven * 2 + 1\n        } else {\n            nextOdd = nextOdd\
    \ * 2 + 1\n        }\n        currentLevel = currentLevel - 1\n    }\n\n    result.append(nextOdd)\n\
    \    result.append(nextEven)\n    return result", "    var pile = [Int]()\n  \
    \  var nLevels = n\n    var nStones = n\n    var nNextLevel = n - 1\n    var nNextLevelOdd\
    \ = nNextLevel / 2\n    var nNextLevelEven = nNextLevel % 2\n    while nLevels\
    \ > 0 {\n        pile.append(nStones)\n        nStones = nNextLevel\n        nNextLevel\
    \ = nNextLevelOdd\n        nNextLevelOdd = nNextLevelEven\n        nNextLevelEven\
    \ = nNextLevel % 2\n        nLevels -= 1\n    }\n    return pile", "    var pile\
    \ = [Int]()\n    var level = 0\n    var stones = 0\n    while stones < n {\n \
    \       if n % 2 == 0 {\n            pile[level] = stones\n            stones\
    \ += 2\n        } else {\n            pile[level] = stones\n            stones\
    \ += 3\n        }\n        level++\n    }\n    return pile", "    var stones =\
    \ [0]\n    if n % 2 == 0 {\n        stones.append(stones.last! + 2)\n    } else\
    \ {\n        stones.append(stones.last! + 1)\n    }\n    for _ in 1...n {\n  \
    \      stones.append(stones.last!)\n    }\n    return stones", "    var stones\
    \ = [Int]()\n    var level = 0\n    var stone = 0\n    while stone < n {\n   \
    \     if n % 2 == 0 {\n            stones.append(stone)\n            stone +=\
    \ 2\n        } else {\n            stones.append(stone)\n            stone +=\
    \ 3\n        }\n        level++\n    }\n    return stones", "    var result =\
    \ [Int]()\n    var level = 0\n    var stones = 0\n    while stones < n {\n   \
    \     if n % 2 == 0 {\n            stones += 2\n        } else {\n           \
    \ stones += 3\n        }\n        result[level] = stones\n        n /= 2\n   \
    \     level++\n    }\n    return result", "    var result = [Int]()\n    var level\
    \ = 0\n    while level < n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \            n /= 2\n        } else {\n            result.append(n + 1)\n    \
    \        n += 2\n        }\n        level++\n    }\n    return result", "    var\
    \ pile = [Int]()\n    var currentLevel = Int(n)\n    var nextLevel = Int(n)\n\
    \    if n % 2 == 1 {\n        nextLevel = Int(n) + 1\n    }\n    for _ in 0..<nextLevel\
    \ {\n        pile.append(currentLevel)\n        currentLevel = Int(currentLevel\
    \ / 2)\n    }\n    return pile", "    var pile = [Int]()\n    pile = append(pile,\
    \ n / 2)\n    if n % 2 == 0 {\n        pile = append(pile, n / 2)\n    }\n   \
    \ return pile", "    var result = [Int]()\n    if n % 2 == 1 {\n        result.append(n)\n\
    \    }\n    if n % 2 == 0 {\n        result.append(n / 2)\n    }\n    return result",
  "    var pile = [Int]()\n    var level = 0\n    while n > 0 {\n        pile = append(pile,\
    \ level)\n        level += n % 2 == 0 ? 2 : 3\n        n = n / 2\n    }\n    return\
    \ pile", "    var stones = [Int]()\n    var stones_in_level = n\n    if n % 2\
    \ == 1 {\n        stones_in_level = stones_in_level + 1\n    }\n    for _ in 0..<stones_in_level\
    \ {\n        stones.append(stones_in_level)\n        stones_in_level = stones_in_level\
    \ / 2\n    }\n    return stones", "    var pile = [Int]()\n    var level = 0\n\
    \    while n != 0 {\n        pile[level] = n\n        n -= n % 2 == 0 ? 2 : 3\n\
    \        level++\n    }\n    return pile", "    var result = [Int]()\n    if n\
    \ % 2 == 0 {\n        result.append(n)\n    }\n    if n % 2 == 1 {\n        result.append(n+1)\n\
    \    }\n    return result", "    var stones = [Int]()\n    var level = 0\n   \
    \ while level < n {\n        stones.append(level)\n        level += (level % 2\
    \ == 0) ? 1 : 2\n    }\n    return stones", "    var stones = [Int]()\n    if\
    \ n % 2 == 0 {\n        stones.append(n)\n    } else {\n        var even = make_a_pile(n:\
    \ n / 2)\n        stones.append(even[even.count - 1])\n    }\n    return stones",
  "    var stones = [Int]()\n    var stones_in_level = [Int]()\n    stones_in_level.append(n)\n\
    \    for _ in 0 ..< n {\n        if n % 2 == 0 {\n            stones_in_level.append(stones_in_level[stones_in_level.count\
    \ - 1] + 2)\n        } else {\n            stones_in_level.append(stones_in_level[stones_in_level.count\
    \ - 1] + 1)\n        }\n        stones.append(stones_in_level[stones_in_level.count\
    \ - 1])\n        stones_in_level.removeLast()\n    }\n    return stones", "  \
    \  var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n    }\n\
    \    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        } else {\n            result.append(n + 2)\n        }\n    }\n    return\
    \ result", "    var stones = [0]\n    if n % 2 == 0 {\n        stones = stones\
    \ + [n]\n    } else {\n        stones = stones + [n/2]\n    }\n    for _ in 1..(n/2)\
    \ {\n        stones = stones + [n/2]\n    }\n    return stones", "    var stones\
    \ = [0]\n    var level = 1\n    var nextLevel = level\n    while nextLevel <=\
    \ n {\n        if nextLevel % 2 == 1 {\n            stones.append(nextLevel)\n\
    \        } else {\n            stones.append(nextLevel - nextLevel % 2)\n    \
    \    }\n        nextLevel += level\n        level += 1\n    }\n    return stones",
  "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        pile[level] = stones\n        if stones % 2 == 0 {\n        \
    \    stones += 2\n        } else {\n            stones += 1\n        }\n     \
    \   level++\n    }\n    return pile", "    var pile = [Int]()\n    var level =\
    \ 0\n    var stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n   \
    \         pile[level] = stones\n            stones += 2\n        } else {\n  \
    \          pile[level] = stones\n            stones += 3\n        }\n        level++\n\
    \    }\n    return pile", "    var stones = [Int]()\n    var level = 0\n    var\
    \ stone = 0\n    var even = 0\n    var odd = 0\n    for _ in 0..<n {\n       \
    \ stone = level % 2 == 0 ? even : odd\n        stones.append(stone)\n        level\
    \ += 1\n        even = odd + 1\n        odd = even + 1\n    }\n    return stones",
  "    var stones = [0]\n    var level = 0\n    while level < n {\n        if n %\
    \ 2 == 0 {\n            stones.append(stones[level] + 2)\n        } else {\n \
    \           stones.append(stones[level] + 1)\n        }\n        level++\n   \
    \ }\n    return stones", "    var pile = [Int]()\n    if n % 2 == 1 {\n      \
    \  pile = pile.append(n)\n    }\n    for _ in 1...n / 2 {\n        pile = pile.append(n)\n\
    \    }\n    return pile", "    var pile = [Int]()\n    var level = 0\n    while\
    \ level < n {\n        pile.append(level + 1)\n        if n % 2 == 0 {\n     \
    \       pile.append(level + 2)\n        }\n        level += 1\n    }\n    return\
    \ pile", "    var stones = [Int]()\n    var level = 0\n    while level < n {\n\
    \        if n % 2 == 0 {\n            stones.append(n)\n            n /= 2\n \
    \       } else {\n            stones.append(n + level + 1)\n            n /= 2\n\
    \        }\n        level++\n    }\n    return stones", "    var result = [Int]()\n\
    \    var currentLevel = Int(n)\n    var currentLevelStones = Int(n)\n    var currentLevelStonesEven\
    \ = Int(n)\n    var currentLevelStonesOdd = Int(n)\n    for _ in 0..<n {\n   \
    \     if n % 2 == 0 {\n            currentLevelStonesEven = currentLevelStonesEven\
    \ + 1\n        } else {\n            currentLevelStonesOdd = currentLevelStonesOdd\
    \ + 1\n        }\n        currentLevel = currentLevel + 1\n        if currentLevel\
    \ == 1 {\n            result.append(currentLevelStonesEven)\n        } else {\n\
    \            result.append(currentLevelStonesOdd)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    var level = 0\n    while level < n {\n\
    \        if n % 2 == 0 {\n            result.append(n)\n            n /= 2\n \
    \       } else {\n            result.append(n/2)\n            n /= 2\n       \
    \ }\n        level++\n    }\n    return result", "    var result = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            stones += 2\n        } else {\n            stones += 1\n\
    \        }\n        n /= 2\n        result[level] = stones\n        level += 1\n\
    \    }\n    return result", "    var stones = [0]\n    var level = 0\n    while\
    \ stones.count < n {\n        if n % 2 == 0 {\n            stones.append(stones.last!\
    \ + 2)\n        } else {\n            stones.append(stones.last! + 1)\n      \
    \  }\n        n /= 2\n        level += 1\n    }\n    return stones", "    var\
    \ stones = [0]\n    for _ in 0..<n {\n        stones.append(stones.last! + 2)\n\
    \    }\n    return stones", "    var pile = [Int]()\n    var level = 0\n    while\
    \ level < n {\n        pile.append(level + 1)\n        level += (n % 2 == 0) ?\
    \ 1 : 2\n    }\n    return pile", "    var pile = [Int]()\n    var level = 0\n\
    \    var stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n       \
    \     pile[level] = stones\n            stones += 2\n        } else {\n      \
    \      pile[level] = stones\n            stones += 3\n        }\n        level++\n\
    \    }\n    return pile", "    var stones = [Int]()\n    var level = 1\n    var\
    \ stones_in_level = n\n    if n % 2 == 1 {\n        stones_in_level = stones_in_level\
    \ + 1\n    }\n    while stones_in_level > 0 {\n        stones.append(stones_in_level)\n\
    \        stones_in_level = stones_in_level / 2\n        level = level + 1\n  \
    \  }\n    return stones", "    var pile = [Int]()\n    var level = 0\n    var\
    \ stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while\
    \ stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n  \
    \          stones += 2\n        } else {\n            pile[level] = stones\n \
    \           stones += 3\n        }\n        level++\n    }\n    return pile",
  "    var stones = [Int]()\n    var level = 0\n    var stones_in_level = n\n    if\
    \ n % 2 == 1 {\n        stones_in_level = stones_in_level + 1\n    }\n    while\
    \ stones_in_level > 0 {\n        stones.append(stones_in_level)\n        stones_in_level\
    \ = stones_in_level - 1\n        if stones_in_level % 2 == 1 {\n            stones_in_level\
    \ = stones_in_level + 1\n        }\n        level = level + 1\n    }\n    return\
    \ stones", "    var result = [Int]()\n    if n % 2 == 1 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n        n = n / 2\n    }\n    return result", "    var stones = [0]\n\
    \    var level = 1\n    while level < n {\n        stones.append(level + 1)\n\
    \        if n % 2 == 0 {\n            stones.append(stones[level] + stones[level\
    \ + 1])\n        }\n        level += 2\n    }\n    return stones", "    var stones\
    \ = [Int]()\n    var stones_in_next_level = 0\n    if n % 2 == 0 {\n        stones_in_next_level\
    \ = n\n    } else {\n        stones_in_next_level = n + 1\n    }\n    for _ in\
    \ 0..<stones_in_next_level {\n        stones.append(stones_in_next_level)\n  \
    \      stones_in_next_level = stones_in_next_level / 2\n    }\n    return stones",
  "    var stones = [Int]()\n    var level = 0\n    var stones_in_level = 0\n    while\
    \ stones_in_level < n {\n        if n % 2 == 0 {\n            stones.append(stones_in_level)\n\
    \            stones_in_level += 2\n        } else {\n            stones.append(stones_in_level)\n\
    \            stones_in_level += 3\n        }\n        level++\n    }\n    return\
    \ stones", "    var stones = [0]\n    var level = 1\n    var nextLevel = n / 2\n\
    \    if n % 2 == 0 {\n        nextLevel = nextLevel + 1\n    }\n    for _ in 1...nextLevel\
    \ {\n        stones.append(stones.last! + 2)\n    }\n    for _ in 1...n {\n  \
    \      stones.append(stones.last! + 1)\n    }\n    return stones", "    var stones\
    \ = [Int]()\n    var level = 0\n    var stones_in_level = 0\n    while stones_in_level\
    \ < n {\n        if n % 2 == 0 {\n            stones.append(stones_in_level)\n\
    \            stones_in_level += 2\n        } else {\n            stones.append(stones_in_level)\n\
    \            stones_in_level += 3\n        }\n        level++\n    }\n    return\
    \ stones", "    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        var even = n - 1\n        var odd = even\n        while\
    \ even > 0 {\n            pile = pile.append(even)\n            even = even /\
    \ 2\n        }\n        while odd > 0 {\n            pile = pile.append(odd)\n\
    \            odd = odd / 2\n        }\n    }\n    return pile", "    var pile\
    \ = [Int]()\n    var level = 0\n    var stones = 0\n    while stones < n {\n \
    \       if n % 2 == 0 {\n            pile[level] = stones\n            stones\
    \ += 2\n        } else {\n            pile[level] = stones\n            stones\
    \ += 3\n        }\n        level++\n    }\n    return pile", "    var stones =\
    \ [Int]()\n    var level = 0\n    while level < n {\n        if n % 2 == 0 {\n\
    \            stones.append(level + 1)\n        } else {\n            stones.append(level\
    \ + 2)\n        }\n        level += 2\n    }\n    return stones", "    var stones\
    \ = [Int]()\n    var stone = 0\n    var next = 0\n    if n % 2 == 0 {\n      \
    \  stone = n + 1 // odd n\n    } else {\n        stone = n // even n\n    }\n\
    \    next = stone\n    for _ in 0..<n {\n        stones.append(next)\n       \
    \ next = next + 2\n    }\n    return stones", "    var pile = [Int]()\n    var\
    \ level = 0\n    while n != 0 {\n        pile[level] = n\n        n -= n % 2 ==\
    \ 0 ? 2 : 3\n        level++\n    }\n    return pile", "    var stones = [Int]()\n\
    \    var level = 0\n    var stones_in_level = 0\n    var next_odd_stones = 0\n\
    \    var next_even_stones = 0\n    while stones_in_level < n {\n        if n %\
    \ 2 == 0 {\n            stones.append(next_even_stones)\n            next_even_stones\
    \ = 0\n        } else {\n            stones.append(next_odd_stones)\n        \
    \    next_odd_stones = 0\n        }\n        stones_in_level += 2\n        n /=\
    \ 2\n        level++\n    }\n    stones.append(stones_in_level)\n    return stones",
  "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n         \
    \   stones += 2\n        } else {\n            pile[level] = stones\n        \
    \    stones += 3\n        }\n        level++\n        n = n / 2\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while\
    \ stones < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n  \
    \          stones += 2\n        } else {\n            pile[level] = stones\n \
    \           stones += 3\n        }\n        level++\n    }\n    return pile",
  "    var pile = [Int]()\n    pile = pile.append(n).append(n).append(n)\n    return\
    \ pile", "    var pile = [Int]()\n    var nLevels = n\n    var nStones = n\n \
    \   while nStones % 2 == 0 {\n        nStones /= 2\n    }\n    while nStones %\
    \ 2 == 0 {\n        nStones /= 2\n    }\n    for _ in 0..<nLevels {\n        pile.append(nStones)\n\
    \        nStones = nStones + 1\n    }\n    return pile", "    var stones = [Int]()\n\
    \    if n % 2 == 0 {\n        stones.append(n)\n    } else {\n        let even\
    \ = n / 2\n        let odd = n - even\n        stones.append(even)\n        stones.append(odd)\n\
    \    }\n    return stones", "    var pile = [Int]()\n    if n % 2 == 0 {\n   \
    \     pile = pile.append(n)\n    } else {\n        var even = n / 2\n        var\
    \ odd = n - even\n        if odd % 2 == 0 {\n            pile = pile.append(odd)\n\
    \        } else {\n            pile = pile.append(even)\n        }\n    }\n  \
    \  return pile", "    var result = [Int]()\n    if n % 2 == 1 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        } else {\n            result.append(n + 1)\n        }\n    }\n    return\
    \ result", "    var stones = [0]\n    var level = 0\n    while stones.count <\
    \ n {\n        if n % 2 == 0 {\n            stones.append(stones.last! + 2)\n\
    \        } else {\n            stones.append(stones.last! + 1)\n        }\n  \
    \      n /= 2\n        level++\n    }\n    return stones", "    var pile = [Int]()\n\
    \    var level = 0\n    while n != 0 {\n        pile[level] = n\n        n -=\
    \ n % 2 == 0 ? 2 : 3\n        level++\n    }\n    return pile", "    var result\
    \ = [Int]()\n    var level = 0\n    var stones = n\n    while stones > 0 {\n \
    \       if stones % 2 == 0 {\n            result.append(stones)\n            stones\
    \ = stones / 2\n        } else {\n            result.append(stones)\n        \
    \    stones = stones / 2\n        }\n        level++\n    }\n    return result",
  "    var stones = [Int]()\n    var level = 0\n    while level < n {\n        if\
    \ n % 2 == 0 {\n            stones.append(level + 1)\n            n /= 2\n   \
    \     } else {\n            stones.append(level + 2)\n            n /= 2\n   \
    \     }\n        level++\n    }\n    return stones", "    var pile = [Int]()\n\
    \    var level = 1\n    var stones = n\n    while stones > 0 {\n        pile.append(stones)\n\
    \        stones = stones % 2 == 0 ? stones / 2 : stones / 2 + 1\n        level++\n\
    \    }\n    return pile", "    var pile = [Int]()\n    var level = 0\n    while\
    \ n > 0 {\n        if n % 2 == 0 {\n            pile[level] = n\n            n\
    \ /= 2\n        } else {\n            pile[level] = n\n            n /= 2\n  \
    \          n -= 1\n        }\n        level += 1\n    }\n    return pile", " \
    \   var stones = [Int]()\n    var level = 0\n    while level < n {\n        if\
    \ n % 2 == 0 {\n            stones.append(n)\n            n /= 2\n        } else\
    \ {\n            n /= 2\n            stones.append(n)\n        }\n        level++\n\
    \    }\n    return stones", "    var result = [Int]()\n    if n % 2 == 0 {\n \
    \       result.append(n)\n    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n\
    \            result.append(n)\n        } else {\n            result.append(n +\
    \ 1)\n        }\n    }\n    return result", "    var stones = [0]\n    var level\
    \ = 0\n    var nextLevel = 0\n    var nextOdd = 0\n    var nextEven = 0\n    for\
    \ _ in 0..<n {\n        stones.append(nextLevel)\n        nextLevel = nextOdd\
    \ + nextEven\n        nextOdd = nextEven\n        nextEven = nextLevel % 2 ==\
    \ 0 ? nextLevel / 2 : nextLevel / 2 + 1\n        level += 1\n    }\n    return\
    \ stones", "    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        pile = pile.append(n).append(n).append(n)\n    }\n    return\
    \ pile", "    var stones = [0]\n    var level = 1\n    while stones.count < n\
    \ {\n        if n % 2 == 0 {\n            stones.append(stones.last! + 2)\n  \
    \      } else {\n            stones.append(stones.last! + 1)\n        }\n    \
    \    n /= 2\n        level += 1\n    }\n    return stones", "    var stones =\
    \ [0]\n    var level = 0\n    while stones.count < n {\n        if n % 2 == 0\
    \ {\n            stones.append(stones.last! + 2)\n        } else {\n         \
    \   stones.append(stones.last! + 3)\n        }\n        n /= 2\n        level++\n\
    \    }\n    return stones", "    var stones = [Int]()\n    var level = 0\n   \
    \ while level < n {\n        stones.append(level + 1)\n        level = level +\
    \ 2\n    }\n    return stones", "    var pile = [Int]()\n    var count = 0\n \
    \   for _ in 0..<n {\n        pile.append(count)\n        if n % 2 == 0 {\n  \
    \          count += 1\n        } else {\n            count += 2\n        }\n \
    \       n -= 1\n    }\n    return pile", "    var pile = [Int]()\n    if n % 2\
    \ == 0 {\n        pile = pile.append(n)\n    } else {\n        pile = pile.append(n).append(n).append(n)\n\
    \    }\n    return pile", "    var pile = [Int]()\n    var level = 0\n    var\
    \ stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile", "    var stones = [0]\n    var level = 0\n    while stones.count < n\
    \ {\n        stones.append(level + 1)\n        if n%2 == 0 {\n            level\
    \ += 2\n        } else {\n            level += 3\n        }\n    }\n    return\
    \ stones", "    var pile = [Int]()\n    if n % 2 == 1 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 1...n / 2 {\n        pile = pile.append(n % 2 == 0 ? n :\
    \ n + 2)\n    }\n    return pile", "    var pile = [Int]()\n    var level = 0\n\
    \    var stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n       \
    \     pile[level] = stones\n            stones += 2\n        } else {\n      \
    \      pile[level] = stones\n            stones += 3\n        }\n        level++\n\
    \    }\n    return pile", "    var result = [Int]()\n    var stones = n\n    var\
    \ level = 1\n    while stones > 0 {\n        if stones % 2 == 0 {\n          \
    \  result.append(level)\n            stones = stones / 2\n        } else {\n \
    \           result.append(level + 1)\n            stones = stones / 2\n      \
    \  }\n        level += 1\n    }\n    return result", "    var result = [Int]()\n\
    \    var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            stones += n\n        } else {\n            stones += n\
    \ + 1\n        }\n        level++\n    }\n    for _ in 0..<level {\n        result.append(stones)\n\
    \    }\n    return result", "    var stones = [Int]()\n    var levels = [Int]()\n\
    \    var level = 0\n    var stone = 0\n    var even = n % 2 == 0\n    var odd\
    \ = !even\n    for _ in 0..<n {\n        if even {\n            stone = odd ?\
    \ n + 1 : n + 1\n            levels.append(stone)\n        } else {\n        \
    \    stone = even ? n + 1 : n + 1\n            levels.append(stone)\n        }\n\
    \        even = !even\n        odd = !odd\n    }\n    for _ in 0..<level {\n \
    \       stones.append(levels[level])\n        levels[level] += 1\n    }\n    return\
    \ stones", "    var stones = [0]\n    var level = 0\n    while stones.count <\
    \ n {\n        if n % 2 == 0 {\n            stones.append(stones.count + n)\n\
    \        } else {\n            stones.append(stones.count + n)\n        }\n  \
    \      n /= 2\n        level++\n    }\n    return stones", "    var pile = [Int]()\n\
    \    pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n)\n    } else {\n\
    \        var even = n / 2\n        var odd = n - even\n        if odd > 0 {\n\
    \            pile.append(odd)\n        }\n        if even > 0 {\n            pile.append(even)\n\
    \        }\n    }\n    return pile", "    var stones = [Int]()\n    var stones_in_level\
    \ = [Int]()\n    var next_odd_stones = 0\n    var next_even_stones = 0\n    var\
    \ next_level = 0\n    var next_level_stones = 0\n    var next_level_stones_in_level\
    \ = 0\n    for _ in 0..<n {\n        if n % 2 == 0 {\n            stones.append(next_level_stones)\n\
    \            next_level_stones_in_level += next_level_stones\n            next_level_stones\
    \ = 0\n        } else {\n            stones.append(next_level_stones_in_level)\n\
    \            next_level_stones_in_level = 0\n            next_level_stones +=\
    \ 1\n        }\n        n -= 1\n    }\n    stones.append(next_level_stones_in_level)\n\
    \    return stones", "    var pile = [Int]()\n    var level = 0\n    var stones\
    \ = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    var level = 1\n    while level < n {\n \
    \       if n % 2 == 0 {\n            pile.append(level)\n            n /= 2\n\
    \        } else {\n            pile.append(level + 1)\n            n /= 2\n  \
    \      }\n        level += 1\n    }\n    return pile", "    var pile = [Int]()\n\
    \    if n % 2 == 0 {\n        pile = pile.append(n)\n    }\n    for _ in 1...n\
    \ {\n        if n % 2 == 0 {\n            pile = pile.append(n)\n        } else\
    \ {\n            pile = pile.append(n - 1)\n        }\n    }\n    return pile",
  "    var pile = [Int]()\n    pile = append(pile, n / 2)\n    if n % 2 == 0 {\n \
    \       pile = append(pile, n / 2)\n    } else {\n        pile = append(pile,\
    \ n / 2 + 1)\n    }\n    return pile", "    var pile = [Int]()\n    var level\
    \ = 0\n    var stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n \
    \           pile[level] = stones\n            stones += 2\n        } else {\n\
    \            pile[level] = stones\n            stones += 3\n        }\n      \
    \  level++\n    }\n    return pile", "    var stones = [Int]()\n    var stonesCount\
    \ = 0\n    var nextLevel = n / 2\n    if n % 2 == 0 {\n        nextLevel = nextLevel\
    \ + 1\n    }\n    for _ in 0..<nextLevel {\n        stones.append(stonesCount)\n\
    \        stonesCount += 1\n    }\n    for _ in 0..<nextLevel {\n        stones.append(stonesCount)\n\
    \        stonesCount += 1\n    }\n    return stones", "    var pile = [Int]()\n\
    \    var currentLevel = 0\n    var currentStones = 0\n    for _ in 0..<n {\n \
    \       if n % 2 == 0 {\n            currentStones += 2\n        } else {\n  \
    \          currentStones += 1\n        }\n        pile.append(currentStones)\n\
    \        currentLevel += 1\n        n = n / 2\n    }\n    return pile", "    var\
    \ stones = [Int]()\n    var stonesCount = 0\n    var currentLevel = stonesCount\n\
    \    var nextLevel = stonesCount\n    var nextLevelCount = 0\n    var currentLevelCount\
    \ = 0\n    while currentLevelCount < n {\n        if n % 2 == 0 {\n          \
    \  nextLevelCount = nextLevel + nextLevelCount\n            nextLevel = nextLevelCount\n\
    \        } else {\n            nextLevelCount = nextLevel + nextLevelCount\n \
    \           nextLevel = nextLevelCount\n        }\n        currentLevelCount =\
    \ currentLevel + currentLevelCount\n        stones.append(nextLevelCount)\n  \
    \  }\n    return stones", "    var stones = [Int]()\n    var level = 0\n    var\
    \ stonesInLevel = 0\n    while stonesInLevel < n {\n        if n % 2 == 0 {\n\
    \            stones.append(stonesInLevel)\n            stonesInLevel += 2\n  \
    \      } else {\n            stones.append(stonesInLevel)\n            stonesInLevel\
    \ += 3\n        }\n        n -= 1\n        level += 1\n    }\n    return stones",
  "    var stones = [Int]()\n    if n % 2 == 0 {\n        stones.append(n)\n    }\
    \ else {\n        stones.append(n + make_a_pile(n: n - 1))\n    }\n    return\
    \ stones", "    var pile = [Int]()\n    var nLevels = n\n    var nStones = n\n\
    \    var nNextLevel = 0\n    while nLevels > 0 {\n        if nNextLevel % 2 ==\
    \ 0 {\n            nStones += nNextLevel\n        } else {\n            nStones\
    \ += nNextLevel + 1\n        }\n        pile.append(nStones)\n        nNextLevel\
    \ = nStones\n        nStones = nNextLevel\n        nLevels -= 1\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    }\n    for _ in 1...n / 2 {\n        pile = pile.append(n)\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    pile = append(pile, n / 2)\n    if n % 2\
    \ == 0 {\n        pile = append(pile, n / 2)\n    }\n    return pile", "    var\
    \ pile = [Int]()\n    var level = 1\n    var stones = n\n    while stones > 0\
    \ {\n        if stones % 2 == 1 {\n            pile.append(stones)\n         \
    \   stones /= 2\n        } else {\n            pile.append(stones)\n         \
    \   stones /= 2\n            pile.append(stones)\n            stones /= 2\n  \
    \      }\n        level += 1\n    }\n    return pile", "    var pile = [Int]()\n\
    \    var level = 0\n    while level < n {\n        pile.append(level + 1)\n  \
    \      if level % 2 == 0 {\n            pile.append(level + 2)\n        }\n  \
    \      level += 1\n    }\n    return pile", "    var pile = [Int]()\n    var level\
    \ = 0\n    while level < n {\n        pile.append(level)\n        level += (n\
    \ % 2 == 0) ? 1 : 2\n        n = n / 2\n    }\n    return pile", "    var stones\
    \ = [0]\n    var level = 1\n    var stones_in_level = [0]\n    while stones_in_level[0]\
    \ < n {\n        if n % 2 == 0 {\n            stones_in_level[0] += stones_in_level[level]\n\
    \            stones_in_level[level] = 0\n            level += 1\n        } else\
    \ {\n            stones_in_level[0] += stones_in_level[level - 1]\n          \
    \  stones_in_level[level - 1] = 0\n            level -= 1\n        }\n       \
    \ stones.append(stones_in_level[0])\n    }\n    return stones", "    var pile\
    \ = [Int]()\n    var level = 0\n    var stones = 0\n    while stones < n {\n \
    \       if n % 2 == 0 {\n            pile[level] = stones\n            stones\
    \ += 2\n        } else {\n            pile[level] = stones\n            stones\
    \ += 3\n        }\n        level++\n    }\n    return pile", "    var stones =\
    \ [0]\n    if n % 2 == 0 {\n        stones.append(n)\n    } else {\n        var\
    \ even = make_a_pile(n / 2)\n        stones.append(even[even.count - 1])\n   \
    \ }\n    return stones", "    var pile = [Int]()\n    if n % 2 == 0 {\n      \
    \  pile = pile.append(n)\n    }\n    for _ in 1...n {\n        pile = pile.append(n)\n\
    \    }\n    return pile", "    var stones = [Int]()\n    var level = 0\n    var\
    \ stones_in_level = 0\n    while stones_in_level < n {\n        if n % 2 == 0\
    \ {\n            stones.append(stones_in_level)\n            stones_in_level +=\
    \ 1\n        } else {\n            stones.append(stones_in_level)\n          \
    \  stones_in_level += 2\n        }\n        n -= 1\n        level += 1\n    }\n\
    \    return stones", "    var stones = [0]\n    var level = 1\n    while stones.count\
    \ < n {\n        if n % 2 == 0 {\n            stones.append(stones.last! + 2)\n\
    \        } else {\n            stones.append(stones.last! + 1)\n        }\n  \
    \      level++\n    }\n    return stones", "    var stones = [0]\n    var level\
    \ = 0\n    while stones.count < n {\n        stones.append(level + 1)\n      \
    \  if n % 2 == 0 {\n            level += 2\n        } else {\n            level\
    \ += 3\n        }\n        n /= 2\n    }\n    return stones", "    var pile =\
    \ [Int]()\n    var currentLevel = n - 1\n    var nextLevel = n - 1\n    if n %\
    \ 2 == 0 {\n        nextLevel = nextLevel + 1\n    }\n    for _ in 0..<n {\n \
    \       pile.append(nextLevel)\n        if nextLevel % 2 == 0 {\n            nextLevel\
    \ = nextLevel + 1\n        }\n        currentLevel = currentLevel - 1\n    }\n\
    \    return pile", "    var pile = [Int]()\n    var level = 0\n    var stones\
    \ = 0\n    while stones < n {\n        if n % 2 == 0 {\n            pile[level]\
    \ = stones\n            stones += 2\n        } else {\n            pile[level]\
    \ = stones\n            stones += 3\n        }\n        level++\n    }\n    return\
    \ pile", "    var stones = [0]\n    var level = 1\n    var nextLevel = level\n\
    \    while nextLevel < n {\n        if n % 2 == 0 {\n            stones.append(nextLevel)\n\
    \            nextLevel += 2\n        } else {\n            stones.append(nextLevel)\n\
    \            nextLevel += 1\n        }\n        level += 1\n    }\n    return\
    \ stones", "    var pile = [Int]()\n    var level = 0\n    var stones = n\n  \
    \  while stones > 0 {\n        pile[level] = stones\n        if stones % 2 ==\
    \ 0 {\n            stones = stones / 2\n        } else {\n            stones =\
    \ stones * 3 + 1\n        }\n        level++\n    }\n    return pile", "    var\
    \ stones = [0]\n    var level = 1\n    while stones.count < n {\n        if n\
    \ % 2 == 0 {\n            stones.append(stones.last! + 2)\n        } else {\n\
    \            stones.append(stones.last! + 1)\n        }\n        n /= 2\n    \
    \    level += 1\n    }\n    return stones", "    var pile = [Int]()\n    var level\
    \ = 1\n    var stones = n\n    while stones > 0 {\n        if stones % 2 == 1\
    \ {\n            pile = append(pile, stones)\n            stones /= 2\n      \
    \  } else {\n            pile = append(pile, stones)\n            stones /= 2\n\
    \            stones /= 2\n        }\n        level++\n    }\n    return pile",
  "    var pile = [Int]()\n    pile = pile.append(n)\n    if n % 2 == 1 {\n      \
    \  pile = pile.append(n)\n    }\n    return pile", "    var stones = [0]\n   \
    \ var level = 1\n    var nextLevel = level\n    while nextLevel <= n {\n     \
    \   if nextLevel % 2 == 0 {\n            stones.append(nextLevel)\n        } else\
    \ {\n            stones.append(nextLevel - stones[stones.count - 1])\n       \
    \ }\n        nextLevel += level\n        level += 1\n    }\n    return stones",
  "    var result = [Int]()\n    for _ in 0..<n {\n        if n % 2 == 1 {\n     \
    \       result.append(n)\n        } else {\n            result.append(n + n/2)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var level\
    \ = 0\n    var stones = n\n    while stones > 0 {\n        if stones % 2 == 1\
    \ {\n            result[level] = stones\n            stones /= 2\n        } else\
    \ {\n            result[level] = stones\n            stones /= 2\n           \
    \ stones += stones\n        }\n        level++\n    }\n    return result", " \
    \   var stones = [Int]()\n    var level = 1\n    var stones_in_level = 0\n   \
    \ while stones_in_level < n {\n        if n % 2 == 0 {\n            stones.append(stones_in_level)\n\
    \            stones_in_level += 1\n        } else {\n            stones.append(stones_in_level)\n\
    \            stones_in_level += 2\n        }\n        level += 1\n    }\n    return\
    \ stones", "    var stones = [Int]()\n    var level = 0\n    var stone = 0\n \
    \   while stone < n {\n        stone = stone + 2\n        stones.append(stone)\n\
    \        level = level + 1\n    }\n    return stones", "    var pile = [Int]()\n\
    \    var level = 1\n    var stones = n\n    while stones > 0 {\n        if stones\
    \ % 2 == 1 {\n            pile = append(pile, stones)\n            stones /= 2\n\
    \        } else {\n            pile = append(pile, stones)\n            stones\
    \ /= 2\n            pile = append(pile, stones)\n            stones /= 2\n   \
    \     }\n        level++\n    }\n    return pile", "    var pile = [Int]()\n \
    \   if n % 2 == 1 {\n        pile = pile.append(n)\n    }\n    for _ in 0..<n\
    \ / 2 {\n        pile = pile.append(pile.popLast() + 1)\n    }\n    return pile",
  "    var result = [Int]()\n    var currentLevel = 0\n    var nextLevel = 0\n   \
    \ var nextLevelCount = 0\n    var currentLevelCount = 0\n    for _ in 0..<n {\n\
    \        nextLevel = nextLevel + 2\n        nextLevelCount = nextLevelCount*2\
    \ + 1\n        currentLevelCount = currentLevelCount + 1\n        if nextLevelCount\
    \ > currentLevel {\n            result.append(nextLevelCount)\n            nextLevelCount\
    \ = 0\n        }\n        if nextLevel == n {\n            result.append(currentLevelCount)\n\
    \        }\n    }\n    return result", "    var pile = [Int]()\n    var count\
    \ = 0\n    for _ in 0..<n {\n        pile.append(count)\n        if n % 2 == 0\
    \ {\n            count += 1\n        } else {\n            count += 2\n      \
    \  }\n        n -= 1\n    }\n    return pile", "    var stones = [Int]()\n   \
    \ var level = 0\n    while level < n {\n        if n % 2 == 0 {\n            stones.append(n)\n\
    \            n /= 2\n        } else {\n            n /= 2\n            stones.append(n)\n\
    \        }\n        level++\n    }\n    return stones", "    var result = [Int]()\n\
    \    if n % 2 == 0 {\n        result.append(n)\n    }\n    for _ in 1...n {\n\
    \        if n % 2 == 0 {\n            result.append(n)\n        }\n        n =\
    \ n / 2\n    }\n    return result", "    var pile = [Int]()\n    var level = 0\n\
    \    var stones = 0\n    while stones < n {\n        pile[level] = stones\n  \
    \      if stones % 2 == 0 {\n            stones += 1\n        } else {\n     \
    \       stones += 2\n        }\n        level += 1\n    }\n    return pile", " \
    \   var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n \
    \   } else {\n        var even = n / 2\n        var odd = n - even\n        pile\
    \ = pile.append(even)\n        pile = pile.append(odd)\n    }\n    return pile",
  "    var pile = [Int]()\n    var nLevels = n\n    var nStones = 0\n    while nLevels\
    \ > 0 {\n        if nLevels % 2 == 0 {\n            nStones += nLevels\n     \
    \   } else {\n            nStones += nLevels - 1\n        }\n        nLevels /=\
    \ 2\n    }\n    pile = pile.prefix(nStones)\n    return pile", "    var stones\
    \ = [Int]()\n    var level = 1\n    var stones_in_level = 0\n    while stones_in_level\
    \ < n {\n        stones.append(stones_in_level)\n        stones_in_level += level\n\
    \        level = level % 2 == 0 ? 2 : 3\n    }\n    return stones", "    var pile\
    \ = [Int]()\n    var level = 1\n    var stones = 0\n    while stones < n {\n \
    \       if n % 2 == 0 {\n            pile.append(stones)\n            stones +=\
    \ 2\n        } else {\n            pile.append(stones)\n            stones +=\
    \ 3\n        }\n        level++\n    }\n    return pile", "    var pile = [Int]()\n\
    \    pile.append(n)\n    if n % 2 == 0 {\n        pile.append(pile[n/2] + pile[n/2\
    \ - 1])\n    } else {\n        pile.append(pile[n/2] + pile[n/2 - 1])\n    }\n\
    \    return pile", "    var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n\
    \    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        } else {\n            result.append(n + 1)\n        }\n    }\n    return\
    \ result", "    var stones = [Int]()\n    var level = 0\n    while level < n {\n\
    \        stones.append(level)\n        if n % 2 == 0 {\n            level += 2\n\
    \        } else {\n            level += 3\n        }\n    }\n    return stones",
  "    var stones = [0]\n    var level = 1\n    while stones.count < n {\n       \
    \ if n % 2 == 0 {\n            stones.append(stones.last! + 2)\n        } else\
    \ {\n            stones.append(stones.last! + 1)\n        }\n        n /= 2\n\
    \        level++\n    }\n    return stones", "    var result = [Int]()\n    var\
    \ stones = n\n    var level = 0\n    while stones > 0 {\n        if stones % 2\
    \ == 1 {\n            result.append(stones)\n            stones /= 2\n       \
    \ } else {\n            result.append(stones)\n            stones /= 2\n     \
    \       stones /= 2\n        }\n        level++\n    }\n    return result", " \
    \   var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n \
    \   }\n    for _ in 1...n {\n        pile = pile.append(n)\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n  \
    \      pile.append(n / 2)\n    }\n    if n % 2 == 1 {\n        pile.append(n /\
    \ 2 + 1)\n    }\n    return pile", "    var pile = [Int]()\n    pile = append(pile,\
    \ n / 2)\n    if n % 2 == 0 {\n        pile = append(pile, n / 2)\n    }\n   \
    \ return pile", "    var stones = [0]\n    for _ in 0..<n {\n        if n % 2\
    \ == 0 {\n            stones.append(stones.last! + 2)\n        } else {\n    \
    \        stones.append(stones.last! + 1)\n        }\n        stones.remove(at:\
    \ stones.count - 1)\n    }\n    return stones", "    var result = [Int]()\n  \
    \  if n % 2 == 0 {\n        result.append(n)\n    }\n    for _ in 1...n {\n  \
    \      if n % 2 == 0 {\n            result.append(n)\n        } else {\n     \
    \       result.append(n * 2)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for _ in 0..<n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        } else {\n            result.append(n + n/2)\n        }\n        n =\
    \ n/2\n    }\n    return result", "    var pile = [Int]()\n    var level = 0\n\
    \    var stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n       \
    \     pile[level] = stones\n            stones += 2\n        } else {\n      \
    \      pile[level] = stones\n            stones += 3\n        }\n        level++\n\
    \    }\n    return pile", "    var pile = [Int]()\n    pile.append(n)\n    if\
    \ n % 2 == 0 {\n        pile.append(n/2)\n    }\n    if n % 2 == 1 {\n       \
    \ pile.append(n/2 + 1)\n    }\n    return pile", "    var stones = [Int]()\n \
    \   var level = 0\n    while level < n {\n        if n % 2 == 0 {\n          \
    \  stones.append(n)\n            n /= 2\n        } else {\n            stones.append(n\
    \ * 2)\n            n /= 2\n        }\n        level++\n    }\n    return stones",
  "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        pile[level] = stones\n        stones += (n % 2 == 0) ? 1 : 2\n\
    \        n /= 2\n        level++\n    }\n    return pile", "    var stones = [0]\n\
    \    var level = 0\n    while stones.count < n {\n        if n % 2 == 0 {\n  \
    \          stones.append(stones.last! + 2)\n        } else {\n            stones.append(stones.last!\
    \ + 1)\n        }\n        n /= 2\n        level += 1\n    }\n    return stones",
  "    var pile = [Int]()\n    pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n\
    \ / 2)\n    }\n    return pile", "    var stones = [0]\n    var level = 1\n  \
    \  var nextLevel = level\n    var nextLevelStones = stones[level]\n    while nextLevel\
    \ > 0 {\n        nextLevelStones += nextLevel % 2 == 0 ? nextLevel : nextLevel\
    \ + 1\n        nextLevel = nextLevel / 2\n        stones.append(nextLevelStones)\n\
    \    }\n    return stones", "    var pile = [Int]()\n    pile.append(n)\n    if\
    \ n % 2 == 1 {\n        pile.append(n / 2)\n    }\n    return pile", "    var\
    \ result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n    }\n   \
    \ for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n  \
    \      }\n        n = n / 2\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    return result", "    var stones = [Int]()\n    var levels\
    \ = [Int]()\n    var level = 0\n    var stone = 0\n    var count = 0\n    for\
    \ _ in 0..<n {\n        stone = count\n        stones.append(stone)\n        count\
    \ += 1\n        if count % 2 == 0 {\n            levels.append(stone)\n      \
    \  } else {\n            levels.append(stone+1)\n        }\n    }\n    return\
    \ levels", "    var pile = [Int]()\n    var level = 1\n    var stones = n\n  \
    \  while stones > 0 {\n        if stones % 2 == 1 {\n            pile[level] =\
    \ stones\n            stones = stones / 2\n        } else {\n            pile[level]\
    \ = stones\n            stones = stones / 2\n            pile[level + 1] = stones\n\
    \            stones = stones / 2\n        }\n        level++\n    }\n    return\
    \ pile", "    var pile = [Int]()\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    } else {\n        var even = n / 2\n        var odd = n - even\n        if\
    \ odd % 2 == 0 {\n            pile = pile.append(even)\n        } else {\n   \
    \         pile = pile.append(odd)\n        }\n    }\n    return pile", "    var\
    \ stones = [0]\n    var level = 0\n    var stones_in_level = 0\n    while stones_in_level\
    \ < n {\n        stones_in_level = stones_in_level + stones[level]\n        level\
    \ = level + 2\n        stones[level] = stones_in_level\n    }\n    return stones",
  "    var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n         \
    \   stones += 2\n        } else {\n            pile[level] = stones\n        \
    \    stones += 3\n        }\n        level++\n    }\n    return pile", "    var\
    \ stones = [Int]()\n    var level = 0\n    var stonesInLevel = 0\n    while stonesInLevel\
    \ < n {\n        if n % 2 == 0 {\n            stones.append(stonesInLevel)\n \
    \           stonesInLevel += 2\n        } else {\n            stones.append(stonesInLevel)\n\
    \            stonesInLevel += 3\n        }\n        n /= 2\n        level++\n\
    \    }\n    return stones", "    var stones = [Int]()\n    var level = 0\n   \
    \ var nextLevel = n / 2\n    if n % 2 == 0 {\n        nextLevel = nextLevel +\
    \ 1\n    }\n    for _ in 0..<n {\n        stones.append(nextLevel)\n        if\
    \ nextLevel % 2 == 0 {\n            nextLevel = nextLevel + 1\n        } else\
    \ {\n            nextLevel = nextLevel - 1\n        }\n        level = level +\
    \ 1\n    }\n    return stones", "    var pile = [Int]()\n    var level = 0\n \
    \   var stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n        \
    \    pile[level] = stones\n            stones += 2\n        } else {\n       \
    \     pile[level] = stones\n            stones += 3\n        }\n        level++\n\
    \    }\n    return pile", "    var stones = [Int]()\n    var level = 0\n    var\
    \ stones_in_level = 0\n    while stones_in_level < n {\n        stones.append(stones_in_level)\n\
    \        stones_in_level = stones_in_level + stones[level]\n        level = level\
    \ + 2\n    }\n    return stones", "    var result = [Int]()\n    var currentLevel\
    \ = [0]\n    var currentLevelCount = 1\n    for _ in 0..<n {\n        if n % 2\
    \ == 0 {\n            result.append(currentLevelCount)\n            currentLevelCount\
    \ += 1\n        } else {\n            result.append(currentLevelCount)\n     \
    \       currentLevelCount += 2\n        }\n        currentLevel.append(0)\n  \
    \      n = n / 2\n    }\n    return result", "    var result = [Int]()\n    var\
    \ level = 0\n    while level < n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \            n /= 2\n        } else {\n            result.append(n + level + 1)\n\
    \            n -= level + 1\n        }\n        level++\n    }\n    return result",
  "    var stones = [0]\n    var stonesCount = 0\n    for _ in 0..<n {\n        if\
    \ n % 2 == 1 {\n            stonesCount += stones[stones.count - 1]\n        \
    \    stones.append(stones[stones.count - 1] + 1)\n        } else {\n         \
    \   stonesCount += stones[stones.count - 1]\n            stones.append(stones[stones.count\
    \ - 1] + 2)\n        }\n        n = n / 2\n    }\n    return stones", "    var\
    \ stones = [0]\n    if n % 2 == 0 {\n        stones.append(stones.last! + 2)\n\
    \    } else {\n        stones.append(stones.last! + 1)\n    }\n    for _ in 1...n\
    \ {\n        stones.append(stones.last! + 1)\n    }\n    return stones", "   \
    \ var result = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n    }\n\
    \    for _ in 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        } else {\n            result.append(n + 1)\n        }\n    }\n    return\
    \ result", "    var stones = [Int]()\n    var stones_count = 0\n    if n % 2 ==\
    \ 0 {\n        stones_count = n\n    } else {\n        stones_count = n + 1\n\
    \    }\n    for _ in 1...stones_count {\n        stones.append(stones_count)\n\
    \        stones_count += 2\n    }\n    return stones", "    var pile = [Int]()\n\
    \    var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile", "    var result = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        stones\
    \ += n % 2 == 0 ? 2 : 3\n        result[level] = stones\n        n /= 2\n    \
    \    level++\n    }\n    return result", "    var pile = [Int]()\n    var level\
    \ = 0\n    var stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n \
    \           pile[level] = stones\n            stones += 2\n        } else {\n\
    \            pile[level] = stones\n            stones += 3\n        }\n      \
    \  level++\n    }\n    return pile", "    var pile = [Int]()\n    var level =\
    \ 0\n    var stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n   \
    \         pile[level] = stones\n            stones += 2\n        } else {\n  \
    \          pile[level] = stones\n            stones += 3\n        }\n        level++\n\
    \    }\n    return pile", "    var pile = [Int]()\n    var currentLevel = Int(n)\n\
    \    var nextLevel = Int(n)\n    if n % 2 == 1 {\n        nextLevel = Int(n) +\
    \ 1\n    }\n    for _ in 0..<nextLevel {\n        pile.append(currentLevel)\n\
    \        currentLevel = currentLevel * 2\n    }\n    return pile", "    var pile\
    \ = [Int]()\n    pile = append(pile, n / 2)\n    if n % 2 == 0 {\n        pile\
    \ = append(pile, n / 2)\n    }\n    return pile", "    var stones = [Int]()\n\
    \    if n % 2 == 1 {\n        stones.append(n)\n    } else {\n        var even\
    \ = make_a_pile(n: n / 2)\n        stones.append(even[0])\n        stones.append(even[1])\n\
    \    }\n    return stones", "    var pile = [Int]()\n    var stones = 0\n    for\
    \ _ in 0..<n {\n        if n % 2 == 0 {\n            stones += n\n        } else\
    \ {\n            stones += n + 1\n        }\n        pile.append(stones)\n   \
    \ }\n    return pile", "    var result = [Int]()\n    if n % 2 == 1 {\n      \
    \  result.append(n)\n    }\n    if n % 2 == 0 {\n        result.append(n / 2)\n\
    \    }\n    for _ in 1..<n {\n        result.append(n / 2)\n    }\n    return\
    \ result", "    var stones = [0]\n    var level = 0\n    var nextLevel = n + 1\
    \ // odd or even\n    var nextLevelOdd = nextLevel // odd or even\n    var nextLevelEven\
    \ = nextLevel // odd or even\n    while nextLevel > 0 {\n        if nextLevel\
    \ % 2 == 0 {\n            stones.append(nextLevelEven)\n            nextLevelEven\
    \ = nextLevelEven + 2\n        } else {\n            stones.append(nextLevelOdd)\n\
    \            nextLevelOdd = nextLevelOdd + 2\n        }\n        level = level\
    \ + 1\n        nextLevel = nextLevel - 1\n    }\n    return stones", "    var\
    \ stones = [Int]()\n    var level = 0\n    while level < n {\n        if n % 2\
    \ == 0 {\n            stones.append(n)\n            n /= 2\n        } else {\n\
    \            n /= 2\n            stones.append(n)\n        }\n        level++\n\
    \    }\n    return stones", "    var stones = [0]\n    var level = 0\n    while\
    \ stones.count < n {\n        if n % 2 == 0 {\n            stones.append(stones.count\
    \ + 1)\n        } else {\n            stones.append(stones.count + 2)\n      \
    \  }\n        n /= 2\n        level++\n    }\n    return stones", "    var stones\
    \ = [0]\n    var level = 0\n    while stones.count < n {\n        if n % 2 ==\
    \ 0 {\n            stones.append(stones.last! + 2)\n        } else {\n       \
    \     stones.append(stones.last! + 1)\n        }\n        n /= 2\n        level++\n\
    \    }\n    return stones", "    var result = [Int]()\n    var level = 0\n   \
    \ var stones = 0\n    while stones < n {\n        if n % 2 == 0 {\n          \
    \  stones += 2\n        } else {\n            stones += 1\n        }\n       \
    \ result[level] = stones\n        n /= 2\n        level++\n    }\n    return result",
  "    var pile = [Int]()\n    var stones = n\n    if n % 2 == 1 {\n        stones\
    \ += n + 1\n    }\n    for _ in 0..<stones {\n        pile.append(stones)\n  \
    \      stones += 2\n    }\n    return pile", "    var stones = [Int]()\n    var\
    \ level = 0\n    var stones_in_level = 0\n    while stones_in_level < n {\n  \
    \      if n % 2 == 0 {\n            stones.append(stones_in_level)\n         \
    \   stones_in_level += 2\n        } else {\n            stones.append(stones_in_level)\n\
    \            stones_in_level += 3\n        }\n        level++\n    }\n    return\
    \ stones", "    var stones = [0]\n    var level = 1\n    var nextLevel = stones[level]\n\
    \    while n != 0 {\n        nextLevel = nextLevel % 2 == 0 ? nextLevel + 1 :\
    \ nextLevel\n        stones[level] = nextLevel\n        n -= nextLevel\n     \
    \   level++\n        nextLevel = stones[level]\n    }\n    return stones", " \
    \   var stones = [0]\n    var level = 1\n    var nextLevel = nextLevelOf(n)\n\
    \    while nextLevel > 0 {\n        stones.append(nextLevel)\n        level =\
    \ level + 1\n        nextLevel = nextLevelOf(level)\n    }\n    return stones",
  "    var stones = [Int]()\n    var level = 0\n    while level < n {\n        if\
    \ n % 2 == 0 {\n            stones.append(level + 1)\n            n /= 2\n   \
    \     } else {\n            stones.append(level + 2)\n            n /= 2\n   \
    \     }\n        level++\n    }\n    return stones", "    var result = [Int]()\n\
    \    if n % 2 == 1 {\n        result.append(n)\n    }\n    for _ in 1...n {\n\
    \        if n % 2 == 0 {\n            result.append(n)\n        }\n        n =\
    \ n / 2\n    }\n    return result", "    var pile = [Int]()\n    if n % 2 == 0\
    \ {\n        pile = pile.append(n)\n    }\n    for _ in 0..<n / 2 {\n        pile\
    \ = pile.append(n)\n    }\n    return pile", "    var stones = [0]\n    var level\
    \ = 0\n    while stones.count < n {\n        if n % 2 == 0 {\n            stones.append(stones.last!\
    \ + 2)\n        } else {\n            stones.append(stones.last! + 1)\n      \
    \  }\n        n /= 2\n        level++\n    }\n    return stones", "    var result\
    \ = [Int]()\n    if n % 2 == 0 {\n        result.append(n)\n    }\n    for _ in\
    \ 1...n {\n        if n % 2 == 0 {\n            result.append(n)\n        } else\
    \ {\n            result.append(n + 2)\n        }\n    }\n    return result", " \
    \   var pile = [Int]()\n    pile = append(pile, n / 2)\n    if n % 2 == 0 {\n\
    \        pile = append(pile, n / 2)\n    }\n    return pile", "    var pile =\
    \ [Int]()\n    var level = 0\n    while n > 0 {\n        pile[level] = n\n   \
    \     n -= n % 2 == 0 ? 2 : 3\n        level += 1\n    }\n    return pile", " \
    \   var pile = [Int]()\n    var level = 0\n    var stones = 0\n    while stones\
    \ < n {\n        if n % 2 == 0 {\n            pile[level] = stones\n         \
    \   stones += 2\n        } else {\n            pile[level] = stones\n        \
    \    stones += 3\n        }\n        level++\n    }\n    return pile", "    var\
    \ stones = [Int]()\n    var levels = [Int]()\n    var level = 0\n    var stone\
    \ = 0\n    var even = n % 2 == 0\n    var odd = !even\n    for _ in 0..<n {\n\
    \        if even {\n            stone = odd ? n + 1 : n\n            stones.append(stone)\n\
    \            even = false\n        } else {\n            stone = even ? n + 1\
    \ : n\n            stones.append(stone)\n            even = true\n        }\n\
    \        levels.append(stone)\n    }\n    return levels", "    var pile = [Int]()\n\
    \    var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile", "    var result = [Int]()\n \
    \   if n % 2 == 0 {\n        result.append(n)\n    }\n    for _ in 1...n {\n \
    \       if n % 2 == 0 {\n            result.append(n)\n        } else {\n    \
    \        result.append(n * 2)\n        }\n    }\n    return result", "    var\
    \ stones = [0]\n    var level = 0\n    while stones.count < n {\n        if n\
    \ % 2 == 0 {\n            stones.append(stones.count + 1)\n        } else {\n\
    \            stones.append(stones.count + 2)\n        }\n        n /= 2\n    \
    \    level++\n    }\n    return stones"]
stop_tokens:
- "\n}"
