language: swift
name: HumanEval_24_largest_divisor
results:
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    var largestDivisorCount\
    \ = 0\n    for divisor in divisors(n) {\n        if n % divisor == 0 {\n     \
    \       if largestDivisorCount < divisor {\n                largestDivisorCount\
    \ = divisor\n                largestDivisor = Int(divisor)\n            }\n  \
    \      }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpkuflrjti.swift:8:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors(n) {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var maxDivisor =\
    \ 1\n    var maxDivisorIndex = -1\n    for i := 1; i <= n; i++ {\n        if n\
    \ % i == 0 {\n            if maxDivisor < i {\n                maxDivisor = i\n\
    \                maxDivisorIndex = i\n            }\n        }\n    }\n    return\
    \ maxDivisorIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp85lesrjv.swift:11:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp85lesrjv.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n\
    \           ^\n/tmp/tmp85lesrjv.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    var largestDivisorIndex = 0\n\
    \    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            if largestDivisor\
    \ > i {\n                largestDivisor = i\n                largestDivisorIndex\
    \ = i\n            }\n        }\n    }\n    return largestDivisorIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplqu34zpg.swift:8:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmplqu34zpg.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n      \
    \     ^\n/tmp/tmplqu34zpg.swift:8:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var max_divisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor > max_divisor {\n                max_divisor = divisor\n        \
    \    }\n        }\n    }\n    return max_divisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpr2i1g2b7/tmpr2i1g2b7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac95fbf3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac95f8eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac95f8ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac95f8e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr2i1g2b7                        0x00005612721da335 <unavailable> + 4917

    5    libc.so.6                          0x00002ac95fddf460 __libc_start_main +
    245

    6    tmpr2i1g2b7                        0x00005612721d9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor * divisor > largestDivisor\
    \ {\n                largestDivisor = divisor\n            }\n        }\n    }\n\
    \    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp4icn370g/tmp4icn370g.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b8dee7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b8dbdeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b8dbde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b8dbdd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4icn370g                        0x000055da50bb0335 <unavailable> + 4917

    5    libc.so.6                          0x00002b7b8e0d3460 __libc_start_main +
    245

    6    tmp4icn370g                        0x000055da50baffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n\n    var largestDivisor\
    \ = 1\n    var largestDivisorIndex = 0\n\n    for i := 2; i <= n; i++ {\n    \
    \    if n % i == 0 {\n            if largestDivisor < i {\n                largestDivisor\
    \ = i\n                largestDivisorIndex = i\n            }\n        }\n   \
    \ }\n\n    return largestDivisorIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpq9_3goiw.swift:13:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpq9_3goiw.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpq9_3goiw.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in divisors {\n \
    \       if n % divisor == 0 {\n            if divisor > largestDivisor {\n   \
    \             largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpl5oe2n90.swift:7:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    var largestDivisorCount\
    \ = 0\n    for number in 1...n {\n        if number % largestDivisor == 0 {\n\
    \            largestDivisorCount += 1\n            if largestDivisorCount > largestDivisor\
    \ {\n                largestDivisor = largestDivisorCount\n            }\n   \
    \     }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmppmxhdxqn/tmppmxhdxqn.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b031581ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0315511b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0315511988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03155107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppmxhdxqn                        0x000055a0f2f8d335 <unavailable> + 4917

    5    libc.so.6                          0x00002b0315a06460 __libc_start_main +
    245

    6    tmppmxhdxqn                        0x000055a0f2f8cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    var divisor = 1\n    for _ in 0..<n\
    \ {\n        divisor *= 2\n        if divisor > n {\n            divisor = n\n\
    \        }\n        if divisor > largest {\n            largest = divisor\n  \
    \      }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpx879_0nv/tmpx879_0nv.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af372083c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af371d7ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af371d7a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af371d797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx879_0nv                        0x00005590d0a9f335 <unavailable> + 4917

    5    libc.so.6                          0x00002af37226f460 __libc_start_main +
    245

    6    tmpx879_0nv                        0x00005590d0a9efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    var largestDivisorCount =\
    \ 0\n    for number in stride(from: n, through: 1, by: -1) {\n        if number\
    \ % 2 == 0 {\n            if number > largestDivisor {\n                largestDivisor\
    \ = number\n                largestDivisorCount = 1\n            } else {\n  \
    \              largestDivisorCount += 1\n            }\n        }\n    }\n   \
    \ return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpsv0fk9nq/tmpsv0fk9nq.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0df93cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0df633b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0df633988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0df6327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsv0fk9nq                        0x0000559ecbfcb475 <unavailable> + 5237

    5    libc.so.6                          0x00002af0dfb28460 __libc_start_main +
    245

    6    tmpsv0fk9nq                        0x0000559ecbfcb129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = 1\n    while divisor\
    \ < n {\n        largest = Int(largest * 2)\n        divisor = Int(largest)\n\
    \    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpem1i6a60/tmpem1i6a60.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74fd624c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74fd31bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74fd31b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74fd31a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpem1i6a60                        0x000055d0faf102e5 <unavailable> + 4837

    5    libc.so.6                          0x00002b74fd810460 __libc_start_main +
    245

    6    tmpem1i6a60                        0x000055d0faf0ff99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in divisors {\n \
    \       if n % divisor == 0 {\n            if divisor*divisor > n {\n        \
    \        largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpub_ci9w5.swift:7:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor: Int = 0\n    for divisor in 1...n {\n   \
    \     if n % divisor == 0 {\n            if divisor > maxDivisor {\n         \
    \       maxDivisor = divisor\n            }\n        }\n    }\n    return maxDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmphjljim_a/tmphjljim_a.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab407fffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab407cf6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab407cf6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab407cf57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphjljim_a                        0x0000562836eb5335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab4081eb460 __libc_start_main +
    245

    6    tmphjljim_a                        0x0000562836eb4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 0\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if maxDivisor < divisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmplwh0tq1g/tmplwh0tq1g.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47df022c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47ded19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47ded19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47ded187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplwh0tq1g                        0x00005588bef4b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b47df20e460 __libc_start_main +
    245

    6    tmplwh0tq1g                        0x00005588bef4afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(n)\n    var largestDivisorRemainder\
    \ = Int(n)\n    for divisor in 1...n {\n        if largestDivisorRemainder % divisor\
    \ == 0 {\n            largestDivisor = divisor\n            largestDivisorRemainder\
    \ = largestDivisorRemainder / divisor\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp8rptbvb6/tmp8rptbvb6.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90f7d34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90f7a2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90f7a2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90f7a2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rptbvb6                        0x000055c6b42dd475 <unavailable> + 5237

    5    libc.so.6                          0x00002b90f7f20460 __libc_start_main +
    245

    6    tmp8rptbvb6                        0x000055c6b42dd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largestDivisor < divisor {\n  \
    \              largestDivisor = divisor\n            }\n        }\n    }\n   \
    \ return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpv73w4fh0/tmpv73w4fh0.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b249c24ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b249bf45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b249bf45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b249bf447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv73w4fh0                        0x000055ce8afa3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b249c43a460 __libc_start_main +
    245

    6    tmpv73w4fh0                        0x000055ce8afa2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if maxDivisor < divisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpanmn52rn/tmpanmn52rn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ec9ce4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ec99dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ec99db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ec99da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpanmn52rn                        0x00005588d5cd3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ec9ed0460 __libc_start_main +
    245

    6    tmpanmn52rn                        0x00005588d5cd2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    var divisor = 0\n    for number in 1...n\
    \ {\n        if number % divisor == 0 {\n            divisor = divisor + 1\n \
    \           if divisor > largest {\n                largest = divisor\n      \
    \      }\n        } else {\n            divisor = 1\n        }\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fb6c70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fb6967561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6fb6967286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6fb696713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6fb6966bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp6uqq4ly5                        0x00005620fbc11712 <unavailable> + 5906

    6    tmp6uqq4ly5                        0x00005620fbc112c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b6fb6e5c460 __libc_start_main +
    245

    8    tmp6uqq4ly5                        0x00005620fbc10fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    var largestDivisorRemainder\
    \ = Int(1)\n    for number in 1...n {\n        if number % 2 == 0 {\n        \
    \    if number > largestDivisor {\n                largestDivisor = number\n \
    \           }\n        } else {\n            if number % largestDivisorRemainder\
    \ == 0 {\n                largestDivisorRemainder = number\n            }\n  \
    \      }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpg407po_3/tmpg407po_3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c764d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c761d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c761d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c761cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg407po_3                        0x00005567d0eab335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6c766c5460 __libc_start_main +
    245

    6    tmpg407po_3                        0x00005567d0eaafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var max_divisor\
    \ = 1\n    var max_divisor2 = 1\n    for divisor in 2..<n {\n        if n % divisor\
    \ == 0 {\n            if max_divisor < divisor {\n                max_divisor\
    \ = divisor\n            }\n            if max_divisor2 < divisor {\n        \
    \        max_divisor2 = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    var maxDivisorIndex = 0\n    for\
    \ i := 1; i < n; i++ {\n        if n % i == 0 {\n            if maxDivisor < i\
    \ {\n                maxDivisor = i\n                maxDivisorIndex = i\n   \
    \         }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvd9rn83w.swift:8:12: error: expected type\n    for i := 1; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpvd9rn83w.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i < n; i++ {\n       \
    \    ^\n/tmp/tmpvd9rn83w.swift:8:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 1; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let mut largest_divisor = n;\n    let mut max_divisor = 1;\n\
    \    let mut max_divisor_index = 0;\n    for divisor in 1..=n {\n        if n\
    \ % divisor == 0 {\n            if divisor > largest_divisor {\n             \
    \   largest_divisor = divisor;\n                max_divisor = divisor;\n     \
    \           max_divisor_index = 0;\n            } else {\n                if divisor\
    \ > max_divisor {\n                    max_divisor = divisor;\n              \
    \      max_divisor_index = 0;\n                }\n            }\n        }\n \
    \   }\n    return largest_divisor;\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpm4nywge2.swift:6:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut largest_divisor\
    \ = n;\n            ^\n/tmp/tmpm4nywge2.swift:6:13: note: join the identifiers\
    \ together\n    let mut largest_divisor = n;\n        ~~~~^~~~~~~~~~~~~~~\n  \
    \      mutlargest_divisor\n/tmp/tmpm4nywge2.swift:6:13: note: join the identifiers\
    \ together with camel-case\n    let mut largest_divisor = n;\n        ~~~~^~~~~~~~~~~~~~~\n\
    \        mutLargest_divisor\n/tmp/tmpm4nywge2.swift:7:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut max_divisor = 1;\n            ^\n/tmp/tmpm4nywge2.swift:7:13: note:\
    \ join the identifiers together\n    let mut max_divisor = 1;\n        ~~~~^~~~~~~~~~~\n\
    \        mutmax_divisor\n/tmp/tmpm4nywge2.swift:7:13: note: join the identifiers\
    \ together with camel-case\n    let mut max_divisor = 1;\n        ~~~~^~~~~~~~~~~\n\
    \        mutMax_divisor\n/tmp/tmpm4nywge2.swift:8:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut max_divisor_index = 0;\n            ^\n/tmp/tmpm4nywge2.swift:8:13:\
    \ note: join the identifiers together\n    let mut max_divisor_index = 0;\n  \
    \      ~~~~^~~~~~~~~~~~~~~~~\n        mutmax_divisor_index\n/tmp/tmpm4nywge2.swift:8:13:\
    \ note: join the identifiers together with camel-case\n    let mut max_divisor_index\
    \ = 0;\n        ~~~~^~~~~~~~~~~~~~~~~\n        mutMax_divisor_index\n/tmp/tmpm4nywge2.swift:7:9:\
    \ error: invalid redeclaration of 'mut'\n    let mut max_divisor = 1;\n      \
    \  ^\n/tmp/tmpm4nywge2.swift:6:9: note: 'mut' previously declared here\n    let\
    \ mut largest_divisor = n;\n        ^\n/tmp/tmpm4nywge2.swift:8:9: error: invalid\
    \ redeclaration of 'mut'\n    let mut max_divisor_index = 0;\n        ^\n/tmp/tmpm4nywge2.swift:6:9:\
    \ note: 'mut' previously declared here\n    let mut largest_divisor = n;\n   \
    \     ^\n/tmp/tmpm4nywge2.swift:9:21: error: cannot find operator '..=' in scope\n\
    \    for divisor in 1..=n {\n                    ^~~\n/tmp/tmpm4nyw"
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = 1\n    while divisor\
    \ < n {\n        if n % divisor == 0 {\n            largest = divisor\n      \
    \  }\n        divisor++\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplxe05h21.swift:12:16: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        divisor++\n               ^~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    var maxDividend = 1\n    for dividend\
    \ in 1...n {\n        if dividend % maxDividend == 0 {\n            maxDivisor\
    \ = dividend\n        }\n        if dividend % maxDividend != 0 {\n          \
    \  maxDividend = dividend\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp1ggf9w9_/tmp1ggf9w9_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3aafc6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3aaf966b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3aaf966988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3aaf9657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ggf9w9_                        0x000055c2ef375335 <unavailable> + 4917

    5    libc.so.6                          0x00002b3aafe5b460 __libc_start_main +
    245

    6    tmp1ggf9w9_                        0x000055c2ef374fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpglvziu5o/tmpglvziu5o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef8721fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef86f16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef86f16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef86f157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglvziu5o                        0x000055f00043c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aef8740b460 __libc_start_main +
    245

    6    tmpglvziu5o                        0x000055f00043bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi2eno16v/tmpi2eno16v.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50382afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5037fa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5037fa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5037fa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2eno16v                        0x000055e546d0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b503849b460 __libc_start_main +
    245

    6    tmpi2eno16v                        0x000055e546d0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var largest = 0\n\
    \    for divisor in 1...n {\n        if n % divisor == 0 {\n            if largest\
    \ < divisor {\n                largest = divisor\n            }\n        }\n \
    \   }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp9_8we69u/tmp9_8we69u.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af21393ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af213631b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af213631988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2136307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9_8we69u                        0x000055f5ecf49335 <unavailable> + 4917

    5    libc.so.6                          0x00002af213b26460 __libc_start_main +
    245

    6    tmp9_8we69u                        0x000055f5ecf48fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi2eno16v/tmpi2eno16v.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50382afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5037fa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5037fa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5037fa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2eno16v                        0x000055e546d0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b503849b460 __libc_start_main +
    245

    6    tmpi2eno16v                        0x000055e546d0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if divisor * divisor > largestDivisor\
    \ {\n                largestDivisor = divisor\n            }\n        }\n    }\n\
    \    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpvptmt4oy/tmpvptmt4oy.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab732035c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab731d2cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab731d2c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab731d2b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvptmt4oy                        0x000055e99b5bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab732221460 __libc_start_main +
    245

    6    tmpvptmt4oy                        0x000055e99b5bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var maxDivisor =\
    \ 1\n    for divisor in 1...n {\n        if n % divisor == 0 {\n            maxDivisor\
    \ = divisor\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpwvh9uvtd/tmpwvh9uvtd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86b134cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86b1043b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86b1043988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86b10427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwvh9uvtd                        0x0000560d755c5335 <unavailable> + 4917

    5    libc.so.6                          0x00002b86b1538460 __libc_start_main +
    245

    6    tmpwvh9uvtd                        0x0000560d755c4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in divisors(n) {\n\
    \        if n % divisor == 0 {\n            largestDivisor = divisor\n       \
    \ }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpg90mqmlh.swift:7:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors(n) {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(0)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largestDivisor == 0 {\n       \
    \         largestDivisor = divisor\n            } else {\n                if divisor\
    \ > largestDivisor {\n                    largestDivisor = divisor\n         \
    \       }\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpsq7mia6f/tmpsq7mia6f.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d4f4e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d4f1dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d4f1dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d4f1db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsq7mia6f                        0x00005559456f9335 <unavailable> + 4917

    5    libc.so.6                          0x00002b8d4f6d1460 __libc_start_main +
    245

    6    tmpsq7mia6f                        0x00005559456f8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for number in 1...n {\n     \
    \   if number % 2 == 0 {\n            if number > largestDivisor {\n         \
    \       largestDivisor = number\n            }\n        } else {\n           \
    \ if number < largestDivisor {\n                largestDivisor = number\n    \
    \        }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp7_7_zwzh/tmp7_7_zwzh.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8e609fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8e5d96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8e5d96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8e5d957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_7_zwzh                        0x00005603f92ca335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba8e628b460 __libc_start_main +
    245

    6    tmp7_7_zwzh                        0x00005603f92c9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            largest = divisor\n        }\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: Exception
  stderr: 'tmpa2ccr4jp/tmpa2ccr4jp.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40c4cddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40c49d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40c49d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40c49d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa2ccr4jp                        0x0000560ad9c9b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b40c4ec9460 __libc_start_main +
    245

    6    tmpa2ccr4jp                        0x0000560ad9c9afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let divisors = divisors(n)\n    return divisors.reduce(max)\
    \ { $0 > $1 ? $1 : $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpamide2jt.swift:6:20: error: use of local variable 'divisors' before\
    \ its declaration\n    let divisors = divisors(n)\n                   ^\n/tmp/tmpamide2jt.swift:6:9:\
    \ note: 'divisors' declared here\n    let divisors = divisors(n)\n        ^\n\
    /tmp/tmpamide2jt.swift:7:28: error: generic parameter 'T' could not be inferred\n\
    \    return divisors.reduce(max) { $0 > $1 ? $1 : $0 }\n                     \
    \      ^\nSwift.max:1:24: note: in call to function 'max'\n@inlinable public func\
    \ max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if divisor * divisor > n {\n     \
    \           largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpdvhjkj28/tmpdvhjkj28.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f7b3ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f7b0e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f7b0e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f7b0e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdvhjkj28                        0x000055e195771335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6f7b5d7460 __libc_start_main +
    245

    6    tmpdvhjkj28                        0x000055e195770fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 0\n    }\n    var largestDivisor\
    \ = 1\n    var largestDivisorIndex = 0\n    for i := 2; i < n; i++ {\n       \
    \ if n % i == 0 {\n            if largestDivisor < i {\n                largestDivisor\
    \ = i\n                largestDivisorIndex = i\n            }\n        }\n   \
    \ }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpc8il9qe0.swift:11:12: error: expected type\n    for i := 2; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpc8il9qe0.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i < n; i++ {\n\
    \           ^\n/tmp/tmpc8il9qe0.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    var largestDivisorCount =\
    \ 0\n    for number in 1...n {\n        if number % 2 == 0 {\n            if number\
    \ > largestDivisor {\n                largestDivisor = number\n              \
    \  largestDivisorCount = 1\n            } else {\n                largestDivisorCount\
    \ += 1\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpnfo757y_/tmpnfo757y_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accdf8d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accdf5cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accdf5cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accdf5ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnfo757y_                        0x0000561372323335 <unavailable> + 4917

    5    libc.so.6                          0x00002accdfac4460 __libc_start_main +
    245

    6    tmpnfo757y_                        0x0000561372322fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = Int(n) + 1\n    for divisor in 1...maxDivisor\
    \ {\n        if n % divisor == 0 {\n            maxDivisor = divisor\n       \
    \ }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp1ymam93r/tmp1ymam93r.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad497b8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad497881b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad497881988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4978807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ymam93r                        0x00005631886db475 <unavailable> + 5237

    5    libc.so.6                          0x00002ad497d76460 __libc_start_main +
    245

    6    tmp1ymam93r                        0x00005631886db129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = Int(n)\n    for divisor\
    \ > 1 {\n        if n % divisor == 0 {\n            largest = divisor\n      \
    \  }\n        divisor /= 2\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvf_vpqb6.swift:8:17: error: expected 'in' after for-each pattern\n\
    \    for divisor > 1 {\n                ^\n/tmp/tmpvf_vpqb6.swift:8:17: error:\
    \ unary operator cannot be separated from its operand\n    for divisor > 1 {\n\
    \                ^~\n                 \n/tmp/tmpvf_vpqb6.swift:8:17: error: '>'\
    \ is not a prefix unary operator\n    for divisor > 1 {\n                ^\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi2eno16v/tmpi2eno16v.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50382afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5037fa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5037fa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5037fa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2eno16v                        0x000055e546d0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b503849b460 __libc_start_main +
    245

    6    tmpi2eno16v                        0x000055e546d0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if divisor * divisor > largestDivisor\
    \ {\n                largestDivisor = divisor\n            }\n        }\n    }\n\
    \    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpvptmt4oy/tmpvptmt4oy.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab732035c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab731d2cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab731d2c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab731d2b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvptmt4oy                        0x000055e99b5bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab732221460 __libc_start_main +
    245

    6    tmpvptmt4oy                        0x000055e99b5bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    var largestDivisorRemainder\
    \ = Int(0)\n    for number in 1...n {\n        if number % 2 == 0 {\n        \
    \    largestDivisor = number\n            largestDivisorRemainder = Int(0)\n \
    \       } else {\n            if largestDivisorRemainder > 0 {\n             \
    \   largestDivisor = largestDivisor * largestDivisorRemainder + number\n     \
    \           largestDivisorRemainder = Int(0)\n            } else {\n         \
    \       largestDivisor = number\n                largestDivisorRemainder = number\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpy0jlt7yw/tmpy0jlt7yw.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c2ba72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c2b769b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c2b769988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c2b7687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy0jlt7yw                        0x0000560e38678335 <unavailable> + 4917

    5    libc.so.6                          0x00002b0c2bc5e460 __libc_start_main +
    245

    6    tmpy0jlt7yw                        0x0000560e38677fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    var divisor = 1\n    for _ in 0..<n\
    \ {\n        if n % divisor == 0 {\n            divisor++\n            if divisor\
    \ > largest {\n                largest = divisor\n            }\n        } else\
    \ {\n            divisor = 1\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdyjr6qmw.swift:10:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            divisor++\n                   ^~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(n)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            largestDivisor = divisor\n       \
    \ }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmp32g69vq3/tmp32g69vq3.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70cb305c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70caffcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70caffc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70caffb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp32g69vq3                        0x00005591c1914475 <unavailable> + 5237

    5    libc.so.6                          0x00002b70cb4f1460 __libc_start_main +
    245

    6    tmp32g69vq3                        0x00005591c1914129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(0)\n    for divisor in stride(from:\
    \ Int(1), through: n, by: Int(2)) {\n        if n % divisor == 0 {\n         \
    \   if largestDivisor == 0 {\n                largestDivisor = divisor\n     \
    \       } else {\n                if divisor > largestDivisor {\n            \
    \        largestDivisor = divisor\n                }\n            }\n        }\n\
    \    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpw1dns4xj/tmpw1dns4xj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdc72adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdc6fa4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdc6fa4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdc6fa37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw1dns4xj                        0x0000560e84c0e475 <unavailable> + 5237

    5    libc.so.6                          0x00002afdc7499460 __libc_start_main +
    245

    6    tmpw1dns4xj                        0x0000560e84c0e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if divisor > largestDivisor {\n  \
    \              largestDivisor = divisor\n            }\n        }\n    }\n   \
    \ return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpewyw7ypa/tmpewyw7ypa.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e58168c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e57e5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e57e5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e57e5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewyw7ypa                        0x000055631cbde335 <unavailable> + 4917

    5    libc.so.6                          0x00002b7e58354460 __libc_start_main +
    245

    6    tmpewyw7ypa                        0x000055631cbddfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(n)\n    var divisor = 1\n    while\
    \ divisor * divisor <= n {\n        largestDivisor *= divisor\n        divisor++\n\
    \    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpsbdn_nde.swift:10:16: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        divisor++\n               ^~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if divisor > largestDivisor {\n  \
    \              largestDivisor = divisor\n            }\n        }\n    }\n   \
    \ return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp3pwx04sl/tmp3pwx04sl.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f03ef4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f03bebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f03beb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f03bea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3pwx04sl                        0x000056378e008335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6f040e0460 __libc_start_main +
    245

    6    tmp3pwx04sl                        0x000056378e007fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var max_divisor\
    \ = 1\n    var max_divisor_index = 0\n    for i := 2; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            if max_divisor < i {\n                max_divisor\
    \ = i\n                max_divisor_index = i\n            }\n        }\n    }\n\
    \    return max_divisor_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpv8bkq8p2.swift:11:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpv8bkq8p2.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpv8bkq8p2.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpglvziu5o/tmpglvziu5o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef8721fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef86f16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef86f16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef86f157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglvziu5o                        0x000055f00043c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aef8740b460 __libc_start_main +
    245

    6    tmpglvziu5o                        0x000055f00043bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    var divisor = 0\n    for divisor\
    \ in 1...n {\n        if n % divisor == 0 {\n            if divisor * divisor\
    \ > largestDivisor {\n                largestDivisor = divisor\n            }\n\
    \        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmp6_nu94rb/tmp6_nu94rb.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad9e2ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad9dfd4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad9dfd4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad9dfd37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6_nu94rb                        0x000055ca1a81c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aad9e4c9460 __libc_start_main +
    245

    6    tmp6_nu94rb                        0x000055ca1a81bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if divisor > maxDivisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpsdx7cl1a/tmpsdx7cl1a.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7b10c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7b0dbfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7b0dbf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7b0dbe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsdx7cl1a                        0x000055a19883f335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad7b12b4460 __libc_start_main +
    245

    6    tmpsdx7cl1a                        0x000055a19883efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = 1\n    while divisor\
    \ <= n {\n        if n % divisor == 0 {\n            largest = divisor\n     \
    \   }\n        divisor++\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpxe1v5sro.swift:12:16: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        divisor++\n               ^~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    var largestDivisorIndex = 0\n\
    \    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            if largestDivisor\
    \ < i {\n                largestDivisor = i\n                largestDivisorIndex\
    \ = i\n            }\n        }\n    }\n    return largestDivisorIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp7pjomj9z.swift:8:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp7pjomj9z.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n      \
    \     ^\n/tmp/tmp7pjomj9z.swift:8:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    var largestDivisorFactor = 1\n\
    \    for divisor in 1...n {\n        if n % divisor == 0 {\n            if largestDivisorFactor\
    \ > divisor {\n                largestDivisorFactor = divisor\n              \
    \  largestDivisor = divisor\n            }\n        } else {\n            largestDivisorFactor\
    \ = 1\n            largestDivisor = divisor\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpfnz7r07x/tmpfnz7r07x.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad097181c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad096e78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad096e78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad096e777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfnz7r07x                        0x0000557733123335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad09736d460 __libc_start_main +
    245

    6    tmpfnz7r07x                        0x0000557733122fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpglvziu5o/tmpglvziu5o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef8721fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef86f16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef86f16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef86f157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglvziu5o                        0x000055f00043c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aef8740b460 __libc_start_main +
    245

    6    tmpglvziu5o                        0x000055f00043bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if largestDivisor < divisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpo9oyzsn1/tmpo9oyzsn1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f969d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f966ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f966cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f966cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9oyzsn1                        0x0000562c7f23b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b2f96bc1460 __libc_start_main +
    245

    6    tmpo9oyzsn1                        0x0000562c7f23afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpglvziu5o/tmpglvziu5o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef8721fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef86f16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef86f16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef86f157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglvziu5o                        0x000055f00043c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aef8740b460 __libc_start_main +
    245

    6    tmpglvziu5o                        0x000055f00043bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int()\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp7fngapg0/tmp7fngapg0.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b741f29bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b741ef92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b741ef92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b741ef917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7fngapg0                        0x0000563d9f0dd335 <unavailable> + 4917

    5    libc.so.6                          0x00002b741f487460 __libc_start_main +
    245

    6    tmp7fngapg0                        0x0000563d9f0dcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = Int(n)\n    for divisor\
    \ > 1 {\n        if n % divisor == 0 {\n            largest = divisor\n      \
    \  }\n        divisor--\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvww_mz_d.swift:8:17: error: expected 'in' after for-each pattern\n\
    \    for divisor > 1 {\n                ^\n/tmp/tmpvww_mz_d.swift:8:17: error:\
    \ unary operator cannot be separated from its operand\n    for divisor > 1 {\n\
    \                ^~\n                 \n/tmp/tmpvww_mz_d.swift:8:17: error: '>'\
    \ is not a prefix unary operator\n    for divisor > 1 {\n                ^\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var max_divisor\
    \ = n / 2\n    for divisor in 2...n {\n        if n % divisor == 0 {\n       \
    \     max_divisor = divisor\n        }\n    }\n    return max_divisor\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpjqpmep9t/tmpjqpmep9t.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac1d984c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac1d67bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac1d67b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac1d67a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjqpmep9t                        0x0000565345b81335 <unavailable> + 4917

    5    libc.so.6                          0x00002aac1db70460 __libc_start_main +
    245

    6    tmpjqpmep9t                        0x0000565345b80fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n\n    var maxDivisor\
    \ = 1\n    var maxDividend = 1\n    for dividend in 2...n {\n        if dividend\
    \ % maxDividend == 0 {\n            maxDivisor = dividend\n        }\n       \
    \ if dividend > maxDividend {\n            maxDividend = dividend\n        }\n\
    \    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpb903se8l/tmpb903se8l.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affea4dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affea1d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affea1d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affea1d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb903se8l                        0x000055cab3a8c335 <unavailable> + 4917

    5    libc.so.6                          0x00002affea6c7460 __libc_start_main +
    245

    6    tmpb903se8l                        0x000055cab3a8bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = Int(n)\n    for divisor\
    \ < n {\n        if n % divisor == 0 {\n            largest = divisor\n      \
    \  }\n        divisor++\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmc7hnmdm.swift:8:17: error: expected 'in' after for-each pattern\n\
    \    for divisor < n {\n                ^\n/tmp/tmpmc7hnmdm.swift:8:17: error:\
    \ unary operator cannot be separated from its operand\n    for divisor < n {\n\
    \                ^~\n                 \n/tmp/tmpmc7hnmdm.swift:8:17: error: '<'\
    \ is not a prefix unary operator\n    for divisor < n {\n                ^\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    var maxDivisor\
    \ = 1\n    var maxDivisorIndex = 0\n    for i := 2; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            if maxDivisor < i {\n                maxDivisor =\
    \ i\n                maxDivisorIndex = i\n            }\n        }\n    }\n  \
    \  return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpyemi6m6b.swift:11:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpyemi6m6b.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpyemi6m6b.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    for divisor in 1...n {\n      \
    \  if n % divisor == 0 {\n            largest = divisor\n        }\n    }\n  \
    \  return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp2s0n9hwl/tmp2s0n9hwl.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99d7826c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99d751db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99d751d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99d751c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2s0n9hwl                        0x0000562daf2df475 <unavailable> + 5237

    5    libc.so.6                          0x00002b99d7a12460 __libc_start_main +
    245

    6    tmp2s0n9hwl                        0x0000562daf2df129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = 1\n    for _ in 0..<n\
    \ {\n        if n % divisor == 0 {\n            largest = divisor\n        }\n\
    \        divisor *= 2\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpl7jfz5ix/tmpl7jfz5ix.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba03365ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba033355b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba033355988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0333547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl7jfz5ix                        0x00005640c993056b <unavailable> + 5483

    5    libc.so.6                          0x00002ba03384a460 __libc_start_main +
    245

    6    tmpl7jfz5ix                        0x00005640c9930129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if divisor * divisor > largestDivisor\
    \ {\n                largestDivisor = divisor\n            }\n        }\n    }\n\
    \    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpvptmt4oy/tmpvptmt4oy.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab732035c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab731d2cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab731d2c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab731d2b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvptmt4oy                        0x000055e99b5bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab732221460 __libc_start_main +
    245

    6    tmpvptmt4oy                        0x000055e99b5bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 0\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if divisor > maxDivisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpay9c82zb/tmpay9c82zb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af82e4b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af82e1aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af82e1ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af82e1ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpay9c82zb                        0x000055fc1845e335 <unavailable> + 4917

    5    libc.so.6                          0x00002af82e6a3460 __libc_start_main +
    245

    6    tmpay9c82zb                        0x000055fc1845dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    var divisor = 0\n    for divisor in\
    \ 1...n {\n        if n % divisor == 0 {\n            if largest < divisor {\n\
    \                largest = divisor\n            }\n        }\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: Exception
  stderr: 'tmpzuvs47br/tmpzuvs47br.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b444ec6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b444e961b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b444e961988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b444e9607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzuvs47br                        0x0000560808728335 <unavailable> + 4917

    5    libc.so.6                          0x00002b444ee56460 __libc_start_main +
    245

    6    tmpzuvs47br                        0x0000560808727fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpglvziu5o/tmpglvziu5o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef8721fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef86f16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef86f16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef86f157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglvziu5o                        0x000055f00043c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aef8740b460 __libc_start_main +
    245

    6    tmpglvziu5o                        0x000055f00043bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor * divisor > n {\n         \
    \       largestDivisor = divisor\n            } else {\n                break\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpog2q5djg/tmpog2q5djg.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b712898bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7128682b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7128682988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71286817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpog2q5djg                        0x000055d63502a335 <unavailable> + 4917

    5    libc.so.6                          0x00002b7128b77460 __libc_start_main +
    245

    6    tmpog2q5djg                        0x000055d635029fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for d in divisors(n) {\n        if n\
    \ % d == 0 {\n            largest = d\n        }\n    }\n    return largest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpi48l5vn8.swift:7:14: error: cannot find 'divisors' in scope\n \
    \   for d in divisors(n) {\n             ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in stride(from:\
    \ n, to: Int.max, by: 1) {\n        if n % divisor == 0 {\n            largestDivisor\
    \ = divisor\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824450
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    var divisor = 1\n    for _ in 0..<n\
    \ {\n        if n % divisor == 0 {\n            divisor++\n            if divisor\
    \ > largest {\n                largest = divisor\n            }\n        } else\
    \ {\n            divisor = 1\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdyjr6qmw.swift:10:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            divisor++\n                   ^~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpev2nan23/tmpev2nan23.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9415ab8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94157afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94157af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94157ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpev2nan23                        0x00005609875fa335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9415ca4460 __libc_start_main +
    245

    6    tmpev2nan23                        0x00005609875f9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    var divisor = 0\n    for divisor\
    \ in 1...n {\n        if n % divisor == 0 {\n            if divisor * divisor\
    \ > largestDivisor {\n                largestDivisor = divisor\n            }\n\
    \        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmp6_nu94rb/tmp6_nu94rb.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad9e2ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad9dfd4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad9dfd4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad9dfd37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6_nu94rb                        0x000055ca1a81c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aad9e4c9460 __libc_start_main +
    245

    6    tmp6_nu94rb                        0x000055ca1a81bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 0\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if maxDivisor < divisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmplwh0tq1g/tmplwh0tq1g.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47df022c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47ded19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47ded19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47ded187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplwh0tq1g                        0x00005588bef4b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b47df20e460 __libc_start_main +
    245

    6    tmplwh0tq1g                        0x00005588bef4afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in stride(from:\
    \ n, through: 0, by: 1) {\n        if n % divisor == 0 {\n            largestDivisor\
    \ = divisor\n            break\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpij50kphc/tmpij50kphc.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2838f14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2838c0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2838c0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2838c0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpij50kphc                        0x000055a0ab62c475 <unavailable> + 5237

    5    libc.so.6                          0x00002b2839100460 __libc_start_main +
    245

    6    tmpij50kphc                        0x000055a0ab62c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor: Int = 0\n    var maxDivisorIndex: Int = 0\n\
    \    var divisor: Int = 0\n    for index in 0..<n {\n        divisor = index\n\
    \        if ((index * index) % n == 0) {\n            while ((index * index) %\
    \ n == 0) {\n                divisor++\n            }\n            if divisor\
    \ > maxDivisor {\n                maxDivisor = divisor\n                maxDivisorIndex\
    \ = index\n            }\n        }\n    }\n    return maxDivisorIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp37uae_bc.swift:13:24: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                divisor++\n                       ^~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor: Int = 0\n    var maxDivisorIndex: Int = 0\n\
    \    for i : Int in 1...n {\n        if n % i == 0 {\n            if maxDivisor\
    \ < i {\n                maxDivisor = i\n                maxDivisorIndex = i\n\
    \            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpxe_ufxpu/tmpxe_ufxpu.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fb1748c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fb143fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fb143f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fb143e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxe_ufxpu                        0x0000556b7583b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b7fb1934460 __libc_start_main +
    245

    6    tmpxe_ufxpu                        0x0000556b7583afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if largestDivisor < divisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpo9oyzsn1/tmpo9oyzsn1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f969d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f966ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f966cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f966cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9oyzsn1                        0x0000562c7f23b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b2f96bc1460 __libc_start_main +
    245

    6    tmpo9oyzsn1                        0x0000562c7f23afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var largest = Int(n)\n\
    \    var largestDivisor = Int(n)\n    for divisor in 1...n {\n        if n % divisor\
    \ == 0 {\n            largestDivisor = divisor\n            if largest < largestDivisor\
    \ {\n                largest = largestDivisor\n            }\n        }\n    }\n\
    \    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp1coanfvc/tmp1coanfvc.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c287c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c284beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c284be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c284bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1coanfvc                        0x000055e2cf07a475 <unavailable> + 5237

    5    libc.so.6                          0x00002b2c289b3460 __libc_start_main +
    245

    6    tmp1coanfvc                        0x000055e2cf07a129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = 1\n    while divisor\
    \ < n {\n        if n % divisor == 0 {\n            largest = divisor\n      \
    \  }\n        divisor++\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplxe05h21.swift:12:16: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        divisor++\n               ^~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpg_b05bh2/tmpg_b05bh2.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b943e54ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b943e241b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b943e241988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b943e2407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_b05bh2                        0x0000556639a6c335 <unavailable> + 4917

    5    libc.so.6                          0x00002b943e736460 __libc_start_main +
    245

    6    tmpg_b05bh2                        0x0000556639a6bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = Int(n)\n    var remainder\
    \ = Int(n)\n\n    while divisor > 0 {\n        remainder = n % divisor\n     \
    \   largest = divisor\n        divisor = Int(remainder)\n    }\n\n    return largest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpepc3pxbg/tmpepc3pxbg.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3cce79dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3cce494b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3cce494988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3cce4937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpepc3pxbg                        0x000055e203242375 <unavailable> + 4981

    5    libc.so.6                          0x00002b3cce989460 __libc_start_main +
    245

    6    tmpepc3pxbg                        0x000055e203242029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    var currentDivisor = 1\n    var\
    \ currentDivisorRemainder = 1\n    for currentDivisor < n {\n        currentDivisorRemainder\
    \ = currentDivisor % 2\n        if currentDivisorRemainder == 0 {\n          \
    \  largestDivisor = currentDivisor\n        }\n        currentDivisor = currentDivisor\
    \ / 2\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpb566da_i.swift:9:24: error: expected 'in' after for-each pattern\n\
    \    for currentDivisor < n {\n                       ^\n/tmp/tmpb566da_i.swift:9:24:\
    \ error: unary operator cannot be separated from its operand\n    for currentDivisor\
    \ < n {\n                       ^~\n                        \n/tmp/tmpb566da_i.swift:9:24:\
    \ error: '<' is not a prefix unary operator\n    for currentDivisor < n {\n  \
    \                     ^\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if maxDivisor < divisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpanmn52rn/tmpanmn52rn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ec9ce4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ec99dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ec99db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ec99da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpanmn52rn                        0x00005588d5cd3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ec9ed0460 __libc_start_main +
    245

    6    tmpanmn52rn                        0x00005588d5cd2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpg_b05bh2/tmpg_b05bh2.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b943e54ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b943e241b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b943e241988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b943e2407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_b05bh2                        0x0000556639a6c335 <unavailable> + 4917

    5    libc.so.6                          0x00002b943e736460 __libc_start_main +
    245

    6    tmpg_b05bh2                        0x0000556639a6bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = 1\n    for _ in 0..<n\
    \ {\n        if n % divisor == 0 {\n            divisor++\n        } else {\n\
    \            divisor = 1\n        }\n        if divisor > largest {\n        \
    \    largest = divisor\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdlkmobmu.swift:10:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            divisor++\n                   ^~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    var largestDivisorCount = 0\n\
    \    for number in 1...n {\n        if number % 2 == 0 {\n            if number\
    \ > largestDivisor {\n                largestDivisor = number\n              \
    \  largestDivisorCount = 1\n            } else {\n                largestDivisorCount\
    \ += 1\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpqc86xz6u/tmpqc86xz6u.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5eae0c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5eaddc0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5eaddc0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5eaddbf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqc86xz6u                        0x000055f08e31c335 <unavailable> + 4917

    5    libc.so.6                          0x00002b5eae2b5460 __libc_start_main +
    245

    6    tmpqc86xz6u                        0x000055f08e31bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for d in divisors(n) {\n        if n\
    \ % d == 0 {\n            if largest < d {\n                largest = d\n    \
    \        }\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplzkvstnv.swift:7:14: error: cannot find 'divisors' in scope\n \
    \   for d in divisors(n) {\n             ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    var divisor = 0\n    for divisor in\
    \ 1...n {\n        if n % divisor == 0 {\n            if largest < divisor {\n\
    \                largest = divisor\n            }\n        }\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: Exception
  stderr: 'tmpzuvs47br/tmpzuvs47br.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b444ec6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b444e961b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b444e961988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b444e9607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzuvs47br                        0x0000560808728335 <unavailable> + 4917

    5    libc.so.6                          0x00002b444ee56460 __libc_start_main +
    245

    6    tmpzuvs47br                        0x0000560808727fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = Int(n)\n    while\
    \ divisor > 1 {\n        divisor = Int(n/divisor)\n        if divisor > largest\
    \ {\n            largest = divisor\n        }\n    }\n    return largest\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp7wqg31mz/tmp7wqg31mz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4725664c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b472535bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b472535b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b472535a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wqg31mz                        0x000055fef34a5375 <unavailable> + 4981

    5    libc.so.6                          0x00002b4725850460 __libc_start_main +
    245

    6    tmp7wqg31mz                        0x000055fef34a5029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi2eno16v/tmpi2eno16v.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50382afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5037fa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5037fa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5037fa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2eno16v                        0x000055e546d0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b503849b460 __libc_start_main +
    245

    6    tmpi2eno16v                        0x000055e546d0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var max_divisor\
    \ = 0\n    var max_divisor_value = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if divisor > max_divisor {\n                max_divisor\
    \ = divisor\n                max_divisor_value = divisor\n            }\n    \
    \    }\n    }\n    return max_divisor_value\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmp2xqqxcux/tmp2xqqxcux.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7606d11c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7606a08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7606a08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7606a077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2xqqxcux                        0x00005579f48c3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b7606efd460 __libc_start_main +
    245

    6    tmp2xqqxcux                        0x00005579f48c2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    var divisor = 0\n    for _ in 0..<n\
    \ {\n        divisor++\n        if divisor > largest {\n            largest =\
    \ divisor\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplqvujtcs.swift:9:16: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        divisor++\n               ^~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var largest = Int(n)\n\
    \    var divisor = 1\n    for _ in 0..<n {\n        if n % divisor == 0 {\n  \
    \          largest = divisor\n        }\n        divisor *= 2\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: Exception
  stderr: 'tmp8382qc7w/tmp8382qc7w.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c8ad0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c8aa01b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c8aa01988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c8aa007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8382qc7w                        0x000055cfc932556b <unavailable> + 5483

    5    libc.so.6                          0x00002b2c8aef6460 __libc_start_main +
    245

    6    tmp8382qc7w                        0x000055cfc9325129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int()\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if largest == 0 {\n                largest\
    \ = divisor\n            } else {\n                if largest < divisor {\n  \
    \                  largest = divisor\n                }\n            }\n     \
    \   }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpalhqgs9_/tmpalhqgs9_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b849cfe6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b849ccddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b849ccdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b849ccdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpalhqgs9_                        0x0000560217529335 <unavailable> + 4917

    5    libc.so.6                          0x00002b849d1d2460 __libc_start_main +
    245

    6    tmpalhqgs9_                        0x0000560217528fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let maxDivisor = Int(sqrt(Double(n)))\n    var maxDivisorRemainder\
    \ = n % maxDivisor\n    var maxDivisorDivisor = maxDivisor\n    while maxDivisorRemainder\
    \ > 0 {\n        maxDivisorDivisor *= maxDivisor\n        maxDivisorRemainder\
    \ = maxDivisorRemainder % maxDivisorDivisor\n    }\n    return maxDivisorDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmppmccq1ex.swift:6:26: error: cannot find 'sqrt' in scope\n    let\
    \ maxDivisor = Int(sqrt(Double(n)))\n                         ^~~~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    var max_divisor\
    \ = 1\n    var max_divisor_index = 0\n    for index in 0..<n {\n        if n %\
    \ index == 0 {\n            if max_divisor < index {\n                max_divisor\
    \ = index\n                max_divisor_index = index\n            }\n        }\n\
    \    }\n    return max_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b36ece27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36ecb1e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b36ecb1e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b36ecb1e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b36ecb1dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp5ahfn717                        0x00005602fa4df710 <unavailable> + 5904

    6    tmp5ahfn717                        0x00005602fa4df2c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b36ed013460 __libc_start_main +
    245

    8    tmp5ahfn717                        0x00005602fa4defe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(n)\n    var divisor = 1\n    while\
    \ divisor * divisor <= n {\n        divisor *= 2\n    }\n    while divisor > 1\
    \ {\n        if n % divisor == 0 {\n            largestDivisor = divisor\n   \
    \     }\n        divisor *= 2\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659824446
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    var maxDivisorIndex = -1\n    for\
    \ i := 1; i <= n; i++ {\n        if n % i == 0 {\n            if maxDivisor <\
    \ i {\n                maxDivisor = i\n                maxDivisorIndex = i\n \
    \           }\n        }\n    }\n    return maxDivisorIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpbrh5d_tc.swift:8:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpbrh5d_tc.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n      \
    \     ^\n/tmp/tmpbrh5d_tc.swift:8:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    var maxDivisorIndex = 0\n    for\
    \ i := 1; i <= n; i++ {\n        if n % i == 0 {\n            if maxDivisor <\
    \ i {\n                maxDivisor = i\n                maxDivisorIndex = i\n \
    \           }\n        }\n    }\n    return maxDivisorIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpbwurq471.swift:8:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpbwurq471.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n      \
    \     ^\n/tmp/tmpbwurq471.swift:8:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largestDivisor > divisor {\n  \
    \              largestDivisor = divisor\n            }\n        }\n    }\n   \
    \ return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpgge8dt9o/tmpgge8dt9o.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7aa957bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7aa9272b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7aa9272988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7aa92717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgge8dt9o                        0x00005607bb14f42b <unavailable> + 5163

    5    libc.so.6                          0x00002b7aa9767460 __libc_start_main +
    245

    6    tmpgge8dt9o                        0x00005607bb14efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var maxDivisor =\
    \ 1\n    var maxDivisorIndex = -1\n    var divisor = 2\n    for i := 2; i <= n;\
    \ i++ {\n        if n % i == 0 {\n            divisor = i\n            if divisor\
    \ > maxDivisor {\n                maxDivisor = divisor\n                maxDivisorIndex\
    \ = i\n            }\n        }\n    }\n    return maxDivisorIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmkurcgme.swift:12:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpmkurcgme.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpmkurcgme.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = 1\n    while divisor\
    \ <= n {\n        if n % divisor == 0 {\n            largest = divisor\n     \
    \   }\n        divisor++\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpxe1v5sro.swift:12:16: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        divisor++\n               ^~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    var divisor = 0\n    for divisor\
    \ in 1...n {\n        if n % divisor == 0 {\n            if divisor * divisor\
    \ > largestDivisor {\n                largestDivisor = divisor\n            }\n\
    \        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmp6_nu94rb/tmp6_nu94rb.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad9e2ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad9dfd4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad9dfd4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad9dfd37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6_nu94rb                        0x000055ca1a81c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aad9e4c9460 __libc_start_main +
    245

    6    tmp6_nu94rb                        0x000055ca1a81bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 0\n    }\n    var maxDivisor =\
    \ 1\n    var maxDivisorIndex = -1\n    var divisor = 1\n    for i := 2; i <= n;\
    \ i++ {\n        if n % i == 0 {\n            divisor = i\n            if divisor\
    \ > maxDivisor {\n                maxDivisor = divisor\n                maxDivisorIndex\
    \ = i\n            }\n        }\n    }\n    return maxDivisorIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvrhp3roc.swift:12:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpvrhp3roc.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpvrhp3roc.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpg_b05bh2/tmpg_b05bh2.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b943e54ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b943e241b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b943e241988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b943e2407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_b05bh2                        0x0000556639a6c335 <unavailable> + 4917

    5    libc.so.6                          0x00002b943e736460 __libc_start_main +
    245

    6    tmpg_b05bh2                        0x0000556639a6bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    var divisor = 1\n    for _ in 0..<n\
    \ {\n        if n % divisor == 0 {\n            divisor++\n            if divisor\
    \ > largest {\n                largest = divisor\n            }\n        } else\
    \ {\n            divisor = 1\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdyjr6qmw.swift:10:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            divisor++\n                   ^~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor * divisor > n {\n         \
    \       largestDivisor = divisor\n            } else {\n                largestDivisor\
    \ = n * divisor / divisor\n            }\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpmj6gsoi9/tmpmj6gsoi9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d818a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d8159eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d8159e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d8159d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmj6gsoi9                        0x00005593e9104335 <unavailable> + 4917

    5    libc.so.6                          0x00002b0d81a93460 __libc_start_main +
    245

    6    tmpmj6gsoi9                        0x00005593e9103fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = 1\n    for _ in 0..<n\
    \ {\n        if n % divisor == 0 {\n            divisor++\n        } else {\n\
    \            divisor = 1\n        }\n        if divisor > largest {\n        \
    \    largest = divisor\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdlkmobmu.swift:10:20: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            divisor++\n                   ^~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if divisor > largestDivisor {\n  \
    \              largestDivisor = divisor\n            }\n        }\n    }\n   \
    \ return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp3pwx04sl/tmp3pwx04sl.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f03ef4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f03bebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f03beb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f03bea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3pwx04sl                        0x000056378e008335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6f040e0460 __libc_start_main +
    245

    6    tmp3pwx04sl                        0x000056378e007fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    var divisor = 0\n    for divisor in\
    \ 1...n {\n        if n % divisor == 0 {\n            if largest < divisor {\n\
    \                largest = divisor\n            }\n        }\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: Exception
  stderr: 'tmpzuvs47br/tmpzuvs47br.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b444ec6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b444e961b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b444e961988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b444e9607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzuvs47br                        0x0000560808728335 <unavailable> + 4917

    5    libc.so.6                          0x00002b444ee56460 __libc_start_main +
    245

    6    tmpzuvs47br                        0x0000560808727fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(0)\n    var largestDivisorCount\
    \ = 0\n    for number in stride(from: n, through: 1, by: -1) {\n        if number\
    \ % 2 == 0 {\n            if number > largestDivisor {\n                largestDivisor\
    \ = number\n                largestDivisorCount = 1\n            } else {\n  \
    \              largestDivisorCount += 1\n            }\n        }\n    }\n   \
    \ return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpblpkjdrc/tmpblpkjdrc.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5656fdec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5656cd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5656cd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5656cd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpblpkjdrc                        0x0000557dbb798475 <unavailable> + 5237

    5    libc.so.6                          0x00002b56571ca460 __libc_start_main +
    245

    6    tmpblpkjdrc                        0x0000557dbb798129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    var maxDivisorValue = n\n\n    for\
    \ divisorValue in stride(from: 2, through: n, by: 2) {\n        if n % divisorValue\
    \ == 0 {\n            if divisorValue > maxDivisorValue {\n                maxDivisorValue\
    \ = divisorValue\n                maxDivisor = divisorValue\n            }\n \
    \       }\n    }\n\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmp19hmhq9f/tmp19hmhq9f.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96fa2f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96f9febb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96f9feb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96f9fea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp19hmhq9f                        0x0000564f279bb56b <unavailable> + 5483

    5    libc.so.6                          0x00002b96fa4e0460 __libc_start_main +
    245

    6    tmp19hmhq9f                        0x0000564f279bb129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi2eno16v/tmpi2eno16v.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50382afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5037fa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5037fa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5037fa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2eno16v                        0x000055e546d0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b503849b460 __libc_start_main +
    245

    6    tmpi2eno16v                        0x000055e546d0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if maxDivisor < divisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpanmn52rn/tmpanmn52rn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ec9ce4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ec99dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ec99db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ec99da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpanmn52rn                        0x00005588d5cd3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ec9ed0460 __libc_start_main +
    245

    6    tmpanmn52rn                        0x00005588d5cd2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(0)\n    var largestDivisorIndex\
    \ = Int(0)\n    for index in 0..<n {\n        if n%index == 0 {\n            if\
    \ index > largestDivisor {\n                largestDivisor = index\n         \
    \       largestDivisorIndex = index\n            }\n        }\n    }\n    return\
    \ largestDivisorIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b17813c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b1750a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2b1750a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2b1750a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2b17509bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmph3ni75or                        0x00005584215416f9 <unavailable> + 5881

    6    tmph3ni75or                        0x00005584215412c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b2b179ff460 __libc_start_main +
    245

    8    tmph3ni75or                        0x0000558421540fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpg_b05bh2/tmpg_b05bh2.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b943e54ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b943e241b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b943e241988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b943e2407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_b05bh2                        0x0000556639a6c335 <unavailable> + 4917

    5    libc.so.6                          0x00002b943e736460 __libc_start_main +
    245

    6    tmpg_b05bh2                        0x0000556639a6bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var max_divisor\
    \ = 0\n    var max_divisor_remainder = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if max_divisor_remainder == 0 {\n       \
    \         max_divisor = divisor\n                max_divisor_remainder = n % divisor\n\
    \            } else {\n                if max_divisor_remainder > n % divisor\
    \ {\n                    max_divisor = divisor\n                    max_divisor_remainder\
    \ = n % divisor\n                }\n            }\n        }\n    }\n    return\
    \ max_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpgnqpchp7/tmpgnqpchp7.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b922852bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9228222b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9228222988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92282217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgnqpchp7                        0x0000558483877335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9228717460 __libc_start_main +
    245

    6    tmpgnqpchp7                        0x0000558483876fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    var largestDivisorRemainder\
    \ = Int(0)\n    for number in 1...n {\n        if number % 2 == 0 {\n        \
    \    if number > largestDivisorRemainder {\n                largestDivisor = number\n\
    \                largestDivisorRemainder = Int(0)\n            }\n        } else\
    \ {\n            largestDivisorRemainder = largestDivisorRemainder + number\n\
    \        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpq7q4j2lr/tmpq7q4j2lr.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4727ee0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4727bd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4727bd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4727bd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7q4j2lr                        0x0000557c15e71335 <unavailable> + 4917

    5    libc.so.6                          0x00002b47280cc460 __libc_start_main +
    245

    6    tmpq7q4j2lr                        0x0000557c15e70fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n\n    var largestDivisor\
    \ = 1\n    var largestDivisorCount = 0\n\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            largestDivisorCount = divisor + 1\n     \
    \       if largestDivisorCount > largestDivisor {\n                largestDivisor\
    \ = largestDivisorCount\n            }\n        }\n    }\n\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp3d8a8q_l/tmp3d8a8q_l.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6268a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab62659ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab62659a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6265997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3d8a8q_l                        0x00005624c6626335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab626a8f460 __libc_start_main +
    245

    6    tmp3d8a8q_l                        0x00005624c6625fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            largestDivisor = divisor\n        }\n\
    \    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp0ed14chy/tmp0ed14chy.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023a2e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0239fdbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0239fdb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0239fda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ed14chy                        0x000055b3be3dc335 <unavailable> + 4917

    5    libc.so.6                          0x00002b023a4d0460 __libc_start_main +
    245

    6    tmp0ed14chy                        0x000055b3be3dbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = Int(n)\n\n    while\
    \ divisor > 1 {\n        if n % divisor == 0 {\n            largest = divisor\n\
    \        }\n        divisor--\n    }\n\n    return largest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpwrxvgmms.swift:13:16: error: cannot find operator '--' in scope;\
    \ did you mean '-= 1'?\n        divisor--\n               ^~\n"
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    var largestDivisorCount = 0\n\
    \    for number in 1...n {\n        if number % 2 == 0 {\n            if number\
    \ > largestDivisor {\n                largestDivisor = number\n              \
    \  largestDivisorCount = 1\n            } else {\n                largestDivisorCount\
    \ += 1\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpqc86xz6u/tmpqc86xz6u.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5eae0c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5eaddc0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5eaddc0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5eaddbf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqc86xz6u                        0x000055f08e31c335 <unavailable> + 4917

    5    libc.so.6                          0x00002b5eae2b5460 __libc_start_main +
    245

    6    tmpqc86xz6u                        0x000055f08e31bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi2eno16v/tmpi2eno16v.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50382afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5037fa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5037fa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5037fa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2eno16v                        0x000055e546d0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b503849b460 __libc_start_main +
    245

    6    tmpi2eno16v                        0x000055e546d0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpg_b05bh2/tmpg_b05bh2.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b943e54ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b943e241b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b943e241988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b943e2407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_b05bh2                        0x0000556639a6c335 <unavailable> + 4917

    5    libc.so.6                          0x00002b943e736460 __libc_start_main +
    245

    6    tmpg_b05bh2                        0x0000556639a6bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if divisor * divisor > n {\n     \
    \           largestDivisor = divisor\n            } else {\n                largestDivisor\
    \ = Int()\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpvfzsozzw/tmpvfzsozzw.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b229178ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2291485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2291485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22914847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfzsozzw                        0x000055ac4057f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b229197a460 __libc_start_main +
    245

    6    tmpvfzsozzw                        0x000055ac4057efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    var largestDivisorIndex = 0\n\
    \    for i := 0; i < n; i++ {\n        if n % i == 0 {\n            if largestDivisor\
    \ < i {\n                largestDivisor = i\n                largestDivisorIndex\
    \ = i\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpesvebki2.swift:8:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpesvebki2.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n       \
    \    ^\n/tmp/tmpesvebki2.swift:8:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 0; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi2eno16v/tmpi2eno16v.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50382afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5037fa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5037fa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5037fa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2eno16v                        0x000055e546d0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b503849b460 __libc_start_main +
    245

    6    tmpi2eno16v                        0x000055e546d0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for number in 1...n {\n     \
    \   if number % 2 == 0 {\n            if number > largestDivisor {\n         \
    \       largestDivisor = number\n            }\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpz12nvmip/tmpz12nvmip.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68bd1c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68bcebcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68bcebc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68bcebb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz12nvmip                        0x000055bdbab01335 <unavailable> + 4917

    5    libc.so.6                          0x00002b68bd3b1460 __libc_start_main +
    245

    6    tmpz12nvmip                        0x000055bdbab00fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(0)\n    var largestDivisorFactor\
    \ = Int(0)\n    for number in 1...n {\n        if number % 2 == 0 {\n        \
    \    if number > largestDivisor {\n                largestDivisor = number\n \
    \               largestDivisorFactor = Int(0)\n            }\n        } else {\n\
    \            if number % largestDivisorFactor == 0 {\n                largestDivisorFactor\
    \ = Int(number/largestDivisor)\n            } else {\n                largestDivisorFactor\
    \ = Int(number/largestDivisorFactor)\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002ad887d16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad887a0d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad887a0d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad887a0d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad887a0cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpqef73uos                        0x000055ee47e1493f <unavailable> + 6463

    6    tmpqef73uos                        0x000055ee47e14408 <unavailable> + 5128

    7    libc.so.6                          0x00002ad887f02460 __libc_start_main +
    245

    8    tmpqef73uos                        0x000055ee47e14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largestDivisor < divisor {\n  \
    \              largestDivisor = divisor\n            }\n        }\n    }\n   \
    \ return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpv73w4fh0/tmpv73w4fh0.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b249c24ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b249bf45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b249bf45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b249bf447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv73w4fh0                        0x000055ce8afa3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b249c43a460 __libc_start_main +
    245

    6    tmpv73w4fh0                        0x000055ce8afa2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpg_b05bh2/tmpg_b05bh2.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b943e54ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b943e241b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b943e241988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b943e2407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_b05bh2                        0x0000556639a6c335 <unavailable> + 4917

    5    libc.so.6                          0x00002b943e736460 __libc_start_main +
    245

    6    tmpg_b05bh2                        0x0000556639a6bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor * divisor > n {\n         \
    \       largestDivisor = divisor\n            } else {\n                break\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpog2q5djg/tmpog2q5djg.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b712898bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7128682b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7128682988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71286817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpog2q5djg                        0x000055d63502a335 <unavailable> + 4917

    5    libc.so.6                          0x00002b7128b77460 __libc_start_main +
    245

    6    tmpog2q5djg                        0x000055d635029fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largestDivisor > divisor {\n  \
    \              largestDivisor = divisor\n            }\n        }\n    }\n   \
    \ return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpgge8dt9o/tmpgge8dt9o.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7aa957bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7aa9272b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7aa9272988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7aa92717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgge8dt9o                        0x00005607bb14f42b <unavailable> + 5163

    5    libc.so.6                          0x00002b7aa9767460 __libc_start_main +
    245

    6    tmpgge8dt9o                        0x00005607bb14efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi2eno16v/tmpi2eno16v.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50382afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5037fa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5037fa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5037fa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2eno16v                        0x000055e546d0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b503849b460 __libc_start_main +
    245

    6    tmpi2eno16v                        0x000055e546d0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if divisor * divisor > largestDivisor\
    \ {\n                largestDivisor = divisor\n            }\n        }\n    }\n\
    \    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp35brd32o/tmp35brd32o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2f535ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2f5051b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2f5051988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2f50507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35brd32o                        0x0000555eee431335 <unavailable> + 4917

    5    libc.so.6                          0x00002ae2f5546460 __libc_start_main +
    245

    6    tmp35brd32o                        0x0000555eee430fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if divisor * divisor > largestDivisor\
    \ {\n                largestDivisor = divisor\n            }\n        }\n    }\n\
    \    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp35brd32o/tmp35brd32o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2f535ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2f5051b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2f5051988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2f50507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35brd32o                        0x0000555eee431335 <unavailable> + 4917

    5    libc.so.6                          0x00002ae2f5546460 __libc_start_main +
    245

    6    tmp35brd32o                        0x0000555eee430fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpg_b05bh2/tmpg_b05bh2.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b943e54ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b943e241b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b943e241988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b943e2407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_b05bh2                        0x0000556639a6c335 <unavailable> + 4917

    5    libc.so.6                          0x00002b943e736460 __libc_start_main +
    245

    6    tmpg_b05bh2                        0x0000556639a6bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    var largestDivisorRemainder\
    \ = Int(1)\n    for number in stride(from: Int(1), through: n, by: Int(2)) {\n\
    \        if number % 2 == 0 {\n            largestDivisor = number\n        }\
    \ else {\n            largestDivisorRemainder = number\n        }\n        if\
    \ largestDivisorRemainder > largestDivisor {\n            largestDivisor = largestDivisorRemainder\n\
    \        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpba4ki1ua/tmpba4ki1ua.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9838a26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b983871db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b983871d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b983871c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba4ki1ua                        0x000056262ac81475 <unavailable> + 5237

    5    libc.so.6                          0x00002b9838c12460 __libc_start_main +
    245

    6    tmpba4ki1ua                        0x000056262ac81129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if divisor > largestDivisor {\n  \
    \              largestDivisor = divisor\n            }\n        }\n    }\n   \
    \ return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp3pwx04sl/tmp3pwx04sl.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f03ef4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f03bebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f03beb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f03bea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3pwx04sl                        0x000056378e008335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6f040e0460 __libc_start_main +
    245

    6    tmp3pwx04sl                        0x000056378e007fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largestDivisor > divisor {\n  \
    \              largestDivisor = divisor\n            }\n        }\n    }\n   \
    \ return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpgge8dt9o/tmpgge8dt9o.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7aa957bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7aa9272b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7aa9272988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7aa92717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgge8dt9o                        0x00005607bb14f42b <unavailable> + 5163

    5    libc.so.6                          0x00002b7aa9767460 __libc_start_main +
    245

    6    tmpgge8dt9o                        0x00005607bb14efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi2eno16v/tmpi2eno16v.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50382afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5037fa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5037fa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5037fa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2eno16v                        0x000055e546d0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b503849b460 __libc_start_main +
    245

    6    tmpi2eno16v                        0x000055e546d0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if divisor * divisor > largestDivisor\
    \ {\n                largestDivisor = divisor\n            }\n        }\n    }\n\
    \    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpvptmt4oy/tmpvptmt4oy.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab732035c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab731d2cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab731d2c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab731d2b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvptmt4oy                        0x000055e99b5bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab732221460 __libc_start_main +
    245

    6    tmpvptmt4oy                        0x000055e99b5bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if max_divisor < divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp8a028488/tmp8a028488.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b770665ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7706351b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7706351988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77063507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8a028488                        0x000055d87e4ff335 <unavailable> + 4917

    5    libc.so.6                          0x00002b7706846460 __libc_start_main +
    245

    6    tmp8a028488                        0x000055d87e4fefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 0\n    }\n    var maxDivisor =\
    \ 1\n    var maxDivisorIndex = -1\n    var divisor = 2\n    for i := 1; i <= n;\
    \ i++ {\n        if n % divisor == 0 {\n            maxDivisorIndex = i\n    \
    \        maxDivisor = divisor\n        }\n        divisor++\n    }\n    return\
    \ maxDivisorIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp06tsky6o.swift:12:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp06tsky6o.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n\
    \           ^\n/tmp/tmp06tsky6o.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824446
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largest == 0 {\n              \
    \  largestDivisor = divisor\n            } else {\n                if largest\
    \ < divisor {\n                    largestDivisor = divisor\n                }\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpyd_64v4k.swift:9:16: error: cannot find 'largest' in scope\n  \
    \          if largest == 0 {\n               ^~~~~~~\n/tmp/tmpyd_64v4k.swift:12:20:\
    \ error: cannot find 'largest' in scope\n                if largest < divisor\
    \ {\n                   ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi2eno16v/tmpi2eno16v.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50382afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5037fa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5037fa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5037fa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2eno16v                        0x000055e546d0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b503849b460 __libc_start_main +
    245

    6    tmpi2eno16v                        0x000055e546d0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var max_divisor = 0\n    for divisor in 1...n {\n       \
    \ if n % divisor == 0 {\n            if divisor > max_divisor {\n            \
    \    max_divisor = divisor\n            }\n        }\n    }\n    return max_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi2eno16v/tmpi2eno16v.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50382afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5037fa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5037fa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5037fa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi2eno16v                        0x000055e546d0b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b503849b460 __libc_start_main +
    245

    6    tmpi2eno16v                        0x000055e546d0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    var largestDivisorCount = 0\n\
    \    for number in 1...n {\n        if number % 2 == 0 {\n            if number\
    \ > largestDivisor {\n                largestDivisor = number\n              \
    \  largestDivisorCount = 1\n            } else {\n                largestDivisorCount\
    \ += 1\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpqc86xz6u/tmpqc86xz6u.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5eae0c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5eaddc0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5eaddc0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5eaddbf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqc86xz6u                        0x000055f08e31c335 <unavailable> + 4917

    5    libc.so.6                          0x00002b5eae2b5460 __libc_start_main +
    245

    6    tmpqc86xz6u                        0x000055f08e31bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    var largestDivisorIndex = 0\n\
    \    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            if largestDivisor\
    \ < i {\n                largestDivisor = i\n                largestDivisorIndex\
    \ = i\n            }\n        }\n    }\n    return largestDivisorIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp7pjomj9z.swift:8:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp7pjomj9z.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n      \
    \     ^\n/tmp/tmp7pjomj9z.swift:8:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largestDivisor < divisor {\n  \
    \              largestDivisor = divisor\n            }\n        }\n    }\n   \
    \ return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpv73w4fh0/tmpv73w4fh0.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b249c24ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b249bf45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b249bf45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b249bf447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv73w4fh0                        0x000055ce8afa3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b249c43a460 __libc_start_main +
    245

    6    tmpv73w4fh0                        0x000055ce8afa2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    for divisor in 1...n {\n      \
    \  if n % divisor == 0 {\n            largest = divisor\n        }\n    }\n  \
    \  return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp2s0n9hwl/tmp2s0n9hwl.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99d7826c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99d751db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99d751d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99d751c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2s0n9hwl                        0x0000562daf2df475 <unavailable> + 5237

    5    libc.so.6                          0x00002b99d7a12460 __libc_start_main +
    245

    6    tmp2s0n9hwl                        0x0000562daf2df129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    var divisor = 1\n    for _ in 0..<n\
    \ {\n        divisor *= 2\n        if divisor > n {\n            divisor = n\n\
    \        }\n        if n % divisor == 0 {\n            largest = divisor\n   \
    \     }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmptnd7md08/tmptnd7md08.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f70cbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f709b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f709b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f709b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptnd7md08                        0x000055af45427335 <unavailable> + 4917

    5    libc.so.6                          0x00002b4f70ea8460 __libc_start_main +
    245

    6    tmptnd7md08                        0x000055af45426fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largest < divisor {\n         \
    \       largest = divisor\n            }\n        }\n    }\n    return largest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_sfvm630.swift:9:16: error: cannot find 'largest' in scope\n  \
    \          if largest < divisor {\n               ^~~~~~~\n/tmp/tmp_sfvm630.swift:10:17:\
    \ error: cannot find 'largest' in scope\n                largest = divisor\n \
    \               ^~~~~~~\n/tmp/tmp_sfvm630.swift:14:12: error: cannot find 'largest'\
    \ in scope\n    return largest\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor * divisor > largestDivisor\
    \ {\n                largestDivisor = divisor\n            }\n        }\n    }\n\
    \    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpho53ryby/tmpho53ryby.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1fae99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1fab90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1fab90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1fab8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpho53ryby                        0x0000560e5bad9335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba1fb085460 __libc_start_main +
    245

    6    tmpho53ryby                        0x0000560e5bad8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    var divisor = 0\n    for divisor\
    \ in stride(from: 1, to: n, by: 1) {\n        if n % divisor == 0 {\n        \
    \    if divisor * divisor > largestDivisor {\n                largestDivisor =\
    \ divisor\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824446
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in divisors(n) {\n\
    \        if divisor > largestDivisor {\n            largestDivisor = divisor\n\
    \        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpsl3ukgvr.swift:7:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors(n) {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824446
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 0\n    }\n\n    var max_divisor\
    \ = 0\n    var max_divisor_value = 0\n    var max_divisor_value_index = 0\n\n\
    \    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            if max_divisor\
    \ < i {\n                max_divisor = i\n                max_divisor_value =\
    \ i\n                max_divisor_value_index = i\n            }\n        }\n \
    \   }\n\n    return max_divisor_value\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdje3bvq1.swift:14:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpdje3bvq1.swift:14:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n\
    \           ^\n/tmp/tmpdje3bvq1.swift:14:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largestDivisor == 0 || largestDivisor\
    \ > divisor {\n                largestDivisor = divisor\n            }\n     \
    \   }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpqyiw2jj5/tmpqyiw2jj5.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb1a329c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb1a020b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb1a020988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb1a01f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqyiw2jj5                        0x000056318ac9f42b <unavailable> + 5163

    5    libc.so.6                          0x00002aeb1a515460 __libc_start_main +
    245

    6    tmpqyiw2jj5                        0x000056318ac9efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpg_b05bh2/tmpg_b05bh2.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b943e54ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b943e241b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b943e241988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b943e2407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_b05bh2                        0x0000556639a6c335 <unavailable> + 4917

    5    libc.so.6                          0x00002b943e736460 __libc_start_main +
    245

    6    tmpg_b05bh2                        0x0000556639a6bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    var largestDivisorCount =\
    \ 0\n    for number in 1...n {\n        if number % 2 == 0 {\n            if number\
    \ > largestDivisor {\n                largestDivisor = number\n              \
    \  largestDivisorCount = 1\n            } else {\n                largestDivisorCount\
    \ += 1\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpnfo757y_/tmpnfo757y_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accdf8d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accdf5cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accdf5cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accdf5ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnfo757y_                        0x0000561372323335 <unavailable> + 4917

    5    libc.so.6                          0x00002accdfac4460 __libc_start_main +
    245

    6    tmpnfo757y_                        0x0000561372322fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 0\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if divisor > maxDivisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpay9c82zb/tmpay9c82zb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af82e4b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af82e1aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af82e1ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af82e1ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpay9c82zb                        0x000055fc1845e335 <unavailable> + 4917

    5    libc.so.6                          0x00002af82e6a3460 __libc_start_main +
    245

    6    tmpay9c82zb                        0x000055fc1845dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if divisor * divisor > n {\n     \
    \           largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpdvhjkj28/tmpdvhjkj28.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f7b3ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f7b0e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f7b0e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f7b0e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdvhjkj28                        0x000055e195771335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6f7b5d7460 __libc_start_main +
    245

    6    tmpdvhjkj28                        0x000055e195770fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var largestDivisor\
    \ = 1\n    var largestDivisorFactor = 1\n    for i := 2; i <= n; i++ {\n     \
    \   if n % i == 0 {\n            largestDivisorFactor *= i\n            if largestDivisor\
    \ < largestDivisorFactor {\n                largestDivisor = largestDivisorFactor\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpn09k5vzd.swift:11:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpn09k5vzd.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmpn09k5vzd.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if divisor > maxDivisor {\n                maxDivisor\
    \ = divisor\n            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpsdx7cl1a/tmpsdx7cl1a.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7b10c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7b0dbfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7b0dbf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7b0dbe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsdx7cl1a                        0x000055a19883f335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad7b12b4460 __libc_start_main +
    245

    6    tmpsdx7cl1a                        0x000055a19883efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for d in divisors(n) {\n        if n\
    \ % d == 0 {\n            if largest < d {\n                largest = d\n    \
    \        }\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplzkvstnv.swift:7:14: error: cannot find 'divisors' in scope\n \
    \   for d in divisors(n) {\n             ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 0\n    }\n    var maxDivisor =\
    \ 1\n    var maxDivisorValue = n\n    for divisor in 2...n {\n        if n % divisor\
    \ == 0 {\n            if maxDivisorValue % divisor == 0 {\n                maxDivisorValue\
    \ = maxDivisor\n            } else {\n                maxDivisorValue = maxDivisorValue\
    \ / divisor\n            }\n        }\n    }\n    return maxDivisorValue\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpbrs7pzqf/tmpbrs7pzqf.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5c8327c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5c801eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5c801e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5c801d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrs7pzqf                        0x0000563c453df42b <unavailable> + 5163

    5    libc.so.6                          0x00002ab5c8513460 __libc_start_main +
    245

    6    tmpbrs7pzqf                        0x0000563c453defe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int()\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largestDivisor == 0 {\n       \
    \         largestDivisor = divisor\n            } else {\n                if divisor\
    \ > largestDivisor {\n                    largestDivisor = divisor\n         \
    \       }\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpe5vur5uz/tmpe5vur5uz.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9c57ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9c54c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9c54c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9c54c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe5vur5uz                        0x0000559bbc39e335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba9c59b8460 __libc_start_main +
    245

    6    tmpe5vur5uz                        0x0000559bbc39dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor * divisor > n {\n         \
    \       largestDivisor = divisor\n            } else {\n                largestDivisor\
    \ = n * divisor / divisor\n            }\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpxe2f6727/tmpxe2f6727.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af27748ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af277185b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af277185988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2771847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxe2f6727                        0x000056361fa4a335 <unavailable> + 4917

    5    libc.so.6                          0x00002af27767a460 __libc_start_main +
    245

    6    tmpxe2f6727                        0x000056361fa49fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let mut largest_divisor = n;\n    let mut max_divisor = 1;\n\
    \    while max_divisor < largest_divisor {\n        max_divisor *= 2;\n    }\n\
    \    return max_divisor;\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmpwgrp95.swift:6:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut largest_divisor\
    \ = n;\n            ^\n/tmp/tmpmpwgrp95.swift:6:13: note: join the identifiers\
    \ together\n    let mut largest_divisor = n;\n        ~~~~^~~~~~~~~~~~~~~\n  \
    \      mutlargest_divisor\n/tmp/tmpmpwgrp95.swift:6:13: note: join the identifiers\
    \ together with camel-case\n    let mut largest_divisor = n;\n        ~~~~^~~~~~~~~~~~~~~\n\
    \        mutLargest_divisor\n/tmp/tmpmpwgrp95.swift:7:13: error: found an unexpected\
    \ second identifier in constant declaration; is there an accidental break?\n \
    \   let mut max_divisor = 1;\n            ^\n/tmp/tmpmpwgrp95.swift:7:13: note:\
    \ join the identifiers together\n    let mut max_divisor = 1;\n        ~~~~^~~~~~~~~~~\n\
    \        mutmax_divisor\n/tmp/tmpmpwgrp95.swift:7:13: note: join the identifiers\
    \ together with camel-case\n    let mut max_divisor = 1;\n        ~~~~^~~~~~~~~~~\n\
    \        mutMax_divisor\n/tmp/tmpmpwgrp95.swift:7:9: error: invalid redeclaration\
    \ of 'mut'\n    let mut max_divisor = 1;\n        ^\n/tmp/tmpmpwgrp95.swift:6:9:\
    \ note: 'mut' previously declared here\n    let mut largest_divisor = n;\n   \
    \     ^\n/tmp/tmpmpwgrp95.swift:8:11: error: cannot find 'max_divisor' in scope\n\
    \    while max_divisor < largest_divisor {\n          ^~~~~~~~~~~\n/tmp/tmpmpwgrp95.swift:8:23:\
    \ error: binary operator '<' cannot be applied to operands of type '_' and '(Int)\
    \ -> Int'\n    while max_divisor < largest_divisor {\n          ~~~~~~~~~~~ ^\
    \ ~~~~~~~~~~~~~~~\n/tmp/tmpmpwgrp95.swift:9:9: error: cannot find 'max_divisor'\
    \ in scope\n        max_divisor *= 2;\n        ^~~~~~~~~~~\n/tmp/tmpmpwgrp95.swift:11:12:\
    \ error: cannot find 'max_divisor' in scope\n    return max_divisor;\n       \
    \    ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var max_divisor\
    \ = 0\n    var max_divisor_value = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if divisor > max_divisor {\n                max_divisor\
    \ = divisor\n                max_divisor_value = divisor\n            }\n    \
    \    }\n    }\n    return max_divisor_value\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmp2xqqxcux/tmp2xqqxcux.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7606d11c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7606a08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7606a08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7606a077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2xqqxcux                        0x00005579f48c3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b7606efd460 __libc_start_main +
    245

    6    tmp2xqqxcux                        0x00005579f48c2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            largestDivisor = divisor\n        }\n\
    \    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp0ed14chy/tmp0ed14chy.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023a2e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0239fdbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0239fdb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0239fda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ed14chy                        0x000055b3be3dc335 <unavailable> + 4917

    5    libc.so.6                          0x00002b023a4d0460 __libc_start_main +
    245

    6    tmp0ed14chy                        0x000055b3be3dbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let mut largest = n;\n    let mut max_divisor = 1;\n    for\
    \ divisor in 2..=n {\n        if n % divisor == 0 {\n            if divisor >\
    \ max_divisor {\n                max_divisor = divisor;\n            }\n     \
    \   }\n    }\n    if largest < max_divisor {\n        largest = max_divisor;\n\
    \    }\n    return largest;\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpu5m6oj78.swift:6:13: error: found an unexpected second identifier\
    \ in constant declaration; is there an accidental break?\n    let mut largest\
    \ = n;\n            ^\n/tmp/tmpu5m6oj78.swift:6:13: note: join the identifiers\
    \ together\n    let mut largest = n;\n        ~~~~^~~~~~~\n        mutlargest\n\
    /tmp/tmpu5m6oj78.swift:6:13: note: join the identifiers together with camel-case\n\
    \    let mut largest = n;\n        ~~~~^~~~~~~\n        mutLargest\n/tmp/tmpu5m6oj78.swift:7:13:\
    \ error: found an unexpected second identifier in constant declaration; is there\
    \ an accidental break?\n    let mut max_divisor = 1;\n            ^\n/tmp/tmpu5m6oj78.swift:7:13:\
    \ note: join the identifiers together\n    let mut max_divisor = 1;\n        ~~~~^~~~~~~~~~~\n\
    \        mutmax_divisor\n/tmp/tmpu5m6oj78.swift:7:13: note: join the identifiers\
    \ together with camel-case\n    let mut max_divisor = 1;\n        ~~~~^~~~~~~~~~~\n\
    \        mutMax_divisor\n/tmp/tmpu5m6oj78.swift:7:9: error: invalid redeclaration\
    \ of 'mut'\n    let mut max_divisor = 1;\n        ^\n/tmp/tmpu5m6oj78.swift:6:9:\
    \ note: 'mut' previously declared here\n    let mut largest = n;\n        ^\n\
    /tmp/tmpu5m6oj78.swift:8:21: error: cannot find operator '..=' in scope\n    for\
    \ divisor in 2..=n {\n                    ^~~\n/tmp/tmpu5m6oj78.swift:15:8: error:\
    \ cannot find 'largest' in scope\n    if largest < max_divisor {\n       ^~~~~~~\n\
    /tmp/tmpu5m6oj78.swift:15:18: error: cannot find 'max_divisor' in scope\n    if\
    \ largest < max_divisor {\n                 ^~~~~~~~~~~\n/tmp/tmpu5m6oj78.swift:16:9:\
    \ error: cannot find 'largest' in scope\n        largest = max_divisor;\n    \
    \    ^~~~~~~\n/tmp/tmpu5m6oj78.swift:16:19: error: cannot find 'max_divisor' in\
    \ scope\n        largest = max_divisor;\n                  ^~~~~~~~~~~\n/tmp/tmpu5m6oj78.swift:18:12:\
    \ error: cannot find 'largest' in scope\n    return largest;\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n\n    var maxDivisor\
    \ = 1\n    var maxDivisorFactor = 1\n    var maxDivisorFactorFactor = 1\n\n  \
    \  for divisor in 1...n {\n        if n % divisor == 0 {\n            if divisor\
    \ > maxDivisor {\n                maxDivisor = divisor\n                maxDivisorFactor\
    \ = divisor\n                maxDivisorFactorFactor = 1\n            } else {\n\
    \                maxDivisorFactor *= divisor\n                maxDivisorFactorFactor\
    \ *= divisor\n            }\n        }\n    }\n\n    return maxDivisor * maxDivisorFactor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpbcy14956/tmpbcy14956.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95038e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95035ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95035dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95035dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbcy14956                        0x000055b3cbd6a335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9503ad2460 __libc_start_main +
    245

    6    tmpbcy14956                        0x000055b3cbd69fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = Int(n)\n    var divisor = 1\n    while divisor\
    \ <= n {\n        if n % divisor == 0 {\n            largest = divisor\n     \
    \   }\n        divisor++\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpxe1v5sro.swift:12:16: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        divisor++\n               ^~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    var maxDivisorIndex = -1\n    for\
    \ i := 0; i < n; i++ {\n        if n % i == 0 {\n            if maxDivisor < i\
    \ {\n                maxDivisor = i\n                maxDivisorIndex = i\n   \
    \         }\n        }\n    }\n    return maxDivisorIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp91ai6v5u.swift:8:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp91ai6v5u.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n       \
    \    ^\n/tmp/tmp91ai6v5u.swift:8:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 0; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var max_divisor\
    \ = Int()\n    var max_divisor_index = -1\n    for i in 0..<n {\n        if n\
    \ % i == 0 {\n            if max_divisor < i {\n                max_divisor =\
    \ i\n                max_divisor_index = i\n            }\n        }\n    }\n\
    \    return max_divisor_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b946ed94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b946ea8b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b946ea8b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b946ea8b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b946ea8abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpi1w95ai_                        0x0000561e2bc9d70f <unavailable> + 5903

    6    tmpi1w95ai_                        0x0000561e2bc9d2c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b946ef80460 __libc_start_main +
    245

    8    tmpi1w95ai_                        0x0000561e2bc9cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(0)\n    var largestDivisorCount\
    \ = 0\n    for number in 1...n {\n        if number % 2 == 0 {\n            if\
    \ number > largestDivisor {\n                largestDivisor = number\n       \
    \         largestDivisorCount = 1\n            } else {\n                largestDivisorCount\
    \ += 1\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp72dvcvwn/tmp72dvcvwn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d4e0c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d4ddbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d4ddbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d4ddbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp72dvcvwn                        0x0000561fa5da7335 <unavailable> + 4917

    5    libc.so.6                          0x00002b5d4e2b2460 __libc_start_main +
    245

    6    tmp72dvcvwn                        0x0000561fa5da6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in divisors(n) {\n\
    \        if n % divisor == 0 {\n            largestDivisor = divisor\n       \
    \ }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpg90mqmlh.swift:7:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors(n) {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n\n    var largestDivisor\
    \ = 0\n    var largestDivisorIndex = 0\n\n    for i := 1; i < n; i++ {\n     \
    \   if n % i == 0 {\n            if largestDivisor == 0 {\n                largestDivisor\
    \ = i\n                largestDivisorIndex = i\n            } else {\n       \
    \         if largestDivisor > i {\n                    largestDivisor = i\n  \
    \                  largestDivisorIndex = i\n                }\n            }\n\
    \        }\n    }\n\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpb4enrnmt.swift:13:12: error: expected type\n    for i := 1; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpb4enrnmt.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < n; i++ {\n\
    \           ^\n/tmp/tmpb4enrnmt.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824446
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    var largestDivisorIndex = 0\n\
    \    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if largestDivisor\
    \ < i {\n                largestDivisor = i\n                largestDivisorIndex\
    \ = i\n            }\n        }\n    }\n    return largestDivisorIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpkjz73f3z.swift:8:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpkjz73f3z.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n      \
    \     ^\n/tmp/tmpkjz73f3z.swift:8:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824446
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    var maxDivisorIndex = 0\n    for\
    \ i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if maxDivisor <\
    \ i {\n                maxDivisor = i\n                maxDivisorIndex = i\n \
    \           }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpgfxs7u1t.swift:8:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpgfxs7u1t.swift:8:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n      \
    \     ^\n/tmp/tmpgfxs7u1t.swift:8:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor: Int = 0\n    var maxDivisorIndex: Int = 0\n\
    \    for i : Int in 1...n {\n        if n % i == 0 {\n            if maxDivisor\
    \ < i {\n                maxDivisor = i\n                maxDivisorIndex = i\n\
    \            }\n        }\n    }\n    return maxDivisorIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpn2e6z9ai/tmpn2e6z9ai.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaf0cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaf09f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaf09f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaf09f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn2e6z9ai                        0x000055e540a07335 <unavailable> + 4917

    5    libc.so.6                          0x00002adaf0ee8460 __libc_start_main +
    245

    6    tmpn2e6z9ai                        0x000055e540a06fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var maxDivisor = 1\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            maxDivisor = divisor\n        }\n    }\n   \
    \ return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpwzqk_4d6/tmpwzqk_4d6.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6e44dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6e41d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6e41d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6e41d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzqk_4d6                        0x000055fb74626335 <unavailable> + 4917

    5    libc.so.6                          0x00002af6e46ca460 __libc_start_main +
    245

    6    tmpwzqk_4d6                        0x000055fb74625fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor * divisor > n {\n         \
    \       largestDivisor = divisor\n            } else {\n                largestDivisor\
    \ = n * divisor\n            }\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp7b5csszw/tmp7b5csszw.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e5217cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e51e73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e51e73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e51e727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7b5csszw                        0x000055c21b637335 <unavailable> + 4917

    5    libc.so.6                          0x00002b4e52368460 __libc_start_main +
    245

    6    tmp7b5csszw                        0x000055c21b636fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824446
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in divisors {\n \
    \       if n % divisor == 0 {\n            if divisor > largestDivisor {\n   \
    \             largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpl5oe2n90.swift:7:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var maxDivisor =\
    \ 1\n    var maxDivisorIndex = 0\n    for i := 2; i <= n; i++ {\n        if n\
    \ % i == 0 {\n            if maxDivisor < i {\n                maxDivisor = i\n\
    \                maxDivisorIndex = i\n            }\n        }\n    }\n    return\
    \ maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp75u53yzb.swift:11:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp75u53yzb.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n\
    \           ^\n/tmp/tmp75u53yzb.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for divisor in 1...n {\n        if n\
    \ % divisor == 0 {\n            if largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpglvziu5o/tmpglvziu5o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef8721fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef86f16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef86f16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef86f157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglvziu5o                        0x000055f00043c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aef8740b460 __libc_start_main +
    245

    6    tmpglvziu5o                        0x000055f00043bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpg_b05bh2/tmpg_b05bh2.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b943e54ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b943e241b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b943e241988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b943e2407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_b05bh2                        0x0000556639a6c335 <unavailable> + 4917

    5    libc.so.6                          0x00002b943e736460 __libc_start_main +
    245

    6    tmpg_b05bh2                        0x0000556639a6bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 0\n    }\n    var maxDivisor =\
    \ 1\n    var maxDivisorIndex = -1\n    for i := 1; i <= n; i++ {\n        if n\
    \ % i == 0 {\n            if maxDivisor < i {\n                maxDivisor = i\n\
    \                maxDivisorIndex = i\n            }\n        }\n    }\n    return\
    \ maxDivisorIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmppn85hjlw.swift:11:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmppn85hjlw.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n\
    \           ^\n/tmp/tmppn85hjlw.swift:11:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(n)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            largestDivisor = divisor\n       \
    \ }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmp32g69vq3/tmp32g69vq3.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70cb305c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70caffcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70caffc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70caffb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp32g69vq3                        0x00005591c1914475 <unavailable> + 5237

    5    libc.so.6                          0x00002b70cb4f1460 __libc_start_main +
    245

    6    tmp32g69vq3                        0x00005591c1914129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(n)\n    var largestDivisorFactor\
    \ = Int(n)\n    var largestDivisorFactorCount = 0\n    for factor in 1...n {\n\
    \        if n % factor == 0 {\n            if largestDivisorFactor < factor {\n\
    \                largestDivisorFactor = factor\n                largestDivisorFactorCount\
    \ = 1\n            } else {\n                largestDivisorFactorCount++\n   \
    \         }\n        }\n    }\n    if largestDivisorFactorCount == 0 {\n     \
    \   return largestDivisor\n    }\n    if largestDivisorFactorCount == 1 {\n  \
    \      return largestDivisorFactor\n    }\n    if largestDivisorFactorCount >\
    \ 1 {\n        return largestDivisorFactor\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp2b9gwcxn.swift:15:42: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                largestDivisorFactorCount++\n        \
    \                                 ^~\n"
  stdout: ''
  timestamp: 1659824446
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 0\n    for divisor in 1...n {\n    \
    \    if n % divisor == 0 {\n            if divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpg_b05bh2/tmpg_b05bh2.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b943e54ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b943e241b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b943e241988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b943e2407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_b05bh2                        0x0000556639a6c335 <unavailable> + 4917

    5    libc.so.6                          0x00002b943e736460 __libc_start_main +
    245

    6    tmpg_b05bh2                        0x0000556639a6bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if divisor > largestDivisor {\n  \
    \              largestDivisor = divisor\n            }\n        }\n    }\n   \
    \ return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp3pwx04sl/tmp3pwx04sl.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f03ef4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f03bebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f03beb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f03bea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3pwx04sl                        0x000056378e008335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6f040e0460 __libc_start_main +
    245

    6    tmp3pwx04sl                        0x000056378e007fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for d in divisors(n) {\n        if n\
    \ % d == 0 {\n            largest = d\n        }\n    }\n    return largest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpi48l5vn8.swift:7:14: error: cannot find 'divisors' in scope\n \
    \   for d in divisors(n) {\n             ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824445
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = Int(1)\n    var largestDivisorCount\
    \ = 0\n    for number in 1...n {\n        if number % largestDivisor == 0 {\n\
    \            largestDivisorCount++\n            if largestDivisorCount > largestDivisor\
    \ {\n                largestDivisor = largestDivisorCount\n            }\n   \
    \     }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpga2ct0z6.swift:10:32: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            largestDivisorCount++\n                  \
    \             ^~\n"
  stdout: ''
  timestamp: 1659824446
