language: swift
name: HumanEval_98_count_upper
results:
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ c.isUpper() {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpgdrvxldk.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpgdrvxldk.swift:13:14:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if c.isUpper()\
    \ {\n           ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        guard c >= 'A'\
    \ && c <= 'Z' else {\n            return count\n        }\n        if c >= 'a'\
    \ && c <= 'z' {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpeq26h4i8.swift:13:20: error: single-quoted string literal found,\
    \ use '\"'\n        guard c >= 'A' && c <= 'Z' else {\n                   ^~~\n\
    \                   \"A\"\n/tmp/tmpeq26h4i8.swift:13:32: error: single-quoted\
    \ string literal found, use '\"'\n        guard c >= 'A' && c <= 'Z' else {\n\
    \                               ^~~\n                               \"Z\"\n/tmp/tmpeq26h4i8.swift:16:17:\
    \ error: single-quoted string literal found, use '\"'\n        if c >= 'a' &&\
    \ c <= 'z' {\n                ^~~\n                \"a\"\n/tmp/tmpeq26h4i8.swift:16:29:\
    \ error: single-quoted string literal found, use '\"'\n        if c >= 'a' &&\
    \ c <= 'z' {\n                            ^~~\n                            \"\
    z\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 {\n            if s.substring(idx, idx + 1).uppercased() != s.substring(idx,\
    \ idx + 1).lowercased() {\n                count += 1\n            }\n       \
    \ }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpslelukjd.swift:14:18: error: value of type 'String' has no member\
    \ 'substring'\n            if s.substring(idx, idx + 1).uppercased() != s.substring(idx,\
    \ idx + 1).lowercased() {\n               ~ ^~~~~~~~~\n/tmp/tmpslelukjd.swift:14:60:\
    \ error: value of type 'String' has no member 'substring'\n            if s.substring(idx,\
    \ idx + 1).uppercased() != s.substring(idx, idx + 1).lowercased() {\n        \
    \                                                 ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) && isEven(c - 'A') {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphl9tb6y1.swift:13:37: error: single-quoted string literal found,\
    \ use '\"'\n        if isUpper(c) && isEven(c - 'A') {\n                     \
    \               ^~~\n                                    \"A\"\n/tmp/tmphl9tb6y1.swift:12:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphl9tb6y1.swift:13:12: error: cannot find 'isUpper'\
    \ in scope\n        if isUpper(c) && isEven(c - 'A') {\n           ^~~~~~~\n/tmp/tmphl9tb6y1.swift:13:26:\
    \ error: cannot find 'isEven' in scope\n        if isUpper(c) && isEven(c - 'A')\
    \ {\n                         ^~~~~~\n/tmp/tmphl9tb6y1.swift:13:35: error: binary\
    \ operator '-' cannot be applied to operands of type 'Character' and 'String'\n\
    \        if isUpper(c) && isEven(c - 'A') {\n                                ~\
    \ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUppercase(c) {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpenqpulpx.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpenqpulpx.swift:13:12:\
    \ error: cannot find 'isUppercase' in scope\n        if isUppercase(c) {\n   \
    \        ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.countUpper { $0 % 2 == 0 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp10adah6d.swift:11:14: error: value of type 'String' has no member\
    \ 'countUpper'\n    return s.countUpper { $0 % 2 == 0 }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 {\n            if s.characters[idx].isUpper() {\n             \
    \   count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmppr43r5vf.swift:14:34: error: value of type 'Character' has no member\
    \ 'isUpper'\n            if s.characters[idx].isUpper() {\n               ~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.characters.count\
    \ {\n        if s[index].isUpper() {\n            count += 1\n        }\n    \
    \    if index % 2 == 0 && s[index].isUpper() {\n            count += 1\n     \
    \   }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp__mywzcb.swift:12:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for index in 0..<s.characters.count {\n           \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp__mywzcb.swift:13:21: error: value of type 'Character' has no member 'isUpper'\n\
    \        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n/tmp/tmp__mywzcb.swift:16:39:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if index %\
    \ 2 == 0 && s[index].isUpper() {\n                             ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.count {\n      \
    \  if s[index].isUpper() {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpu2hbrpa7.swift:13:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.unicodeScalars.filter({ $0.isUppercase }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpaltbpnid.swift:11:41: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    return s.unicodeScalars.filter({ $0.isUppercase\
    \ }).count\n                                     ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.unicodeScalars.filter({ $0.isUppercase }).filter({\
    \ $0.isEvenIndex }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphz50qc_x.swift:11:41: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    return s.unicodeScalars.filter({ $0.isUppercase\
    \ }).filter({ $0.isEvenIndex }).count\n                                     ~~\
    \ ^~~~~~~~~~~\n/tmp/tmphz50qc_x.swift:11:68: error: value of type 'Unicode.Scalar'\
    \ has no member 'isEvenIndex'\n    return s.unicodeScalars.filter({ $0.isUppercase\
    \ }).filter({ $0.isEvenIndex }).count\n                                      \
    \                          ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) && isEven(c - 'A') {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphl9tb6y1.swift:13:37: error: single-quoted string literal found,\
    \ use '\"'\n        if isUpper(c) && isEven(c - 'A') {\n                     \
    \               ^~~\n                                    \"A\"\n/tmp/tmphl9tb6y1.swift:12:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphl9tb6y1.swift:13:12: error: cannot find 'isUpper'\
    \ in scope\n        if isUpper(c) && isEven(c - 'A') {\n           ^~~~~~~\n/tmp/tmphl9tb6y1.swift:13:26:\
    \ error: cannot find 'isEven' in scope\n        if isUpper(c) && isEven(c - 'A')\
    \ {\n                         ^~~~~~\n/tmp/tmphl9tb6y1.swift:13:35: error: binary\
    \ operator '-' cannot be applied to operands of type 'Character' and 'String'\n\
    \        if isUpper(c) && isEven(c - 'A') {\n                                ~\
    \ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.count {\n      \
    \  if s[index].isUpper() {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpu2hbrpa7.swift:13:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] ==\
    \ 'U' {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpkqlxghly.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpkqlxghly.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpkqlxghly.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpkqlxghly.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmpkqlxghly.swift:13:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmpkqlxghly.swift:13:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmpkqlxghly.swift:13:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmpkqlxghly.swift:13:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.countUpper { $0 % 2 == 0 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp10adah6d.swift:11:14: error: value of type 'String' has no member\
    \ 'countUpper'\n    return s.countUpper { $0 % 2 == 0 }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 {\n            if s.substring(idx, idx + 1).uppercased() != s.substring(idx,\
    \ idx + 1).lowercased() {\n                count += 1\n            }\n       \
    \ }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpslelukjd.swift:14:18: error: value of type 'String' has no member\
    \ 'substring'\n            if s.substring(idx, idx + 1).uppercased() != s.substring(idx,\
    \ idx + 1).lowercased() {\n               ~ ^~~~~~~~~\n/tmp/tmpslelukjd.swift:14:60:\
    \ error: value of type 'String' has no member 'substring'\n            if s.substring(idx,\
    \ idx + 1).uppercased() != s.substring(idx, idx + 1).lowercased() {\n        \
    \                                                 ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.unicodeScalars.filter({ $0.isUppercase }).filter({\
    \ $0.isEvenIndex }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphz50qc_x.swift:11:41: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    return s.unicodeScalars.filter({ $0.isUppercase\
    \ }).filter({ $0.isEvenIndex }).count\n                                     ~~\
    \ ^~~~~~~~~~~\n/tmp/tmphz50qc_x.swift:11:68: error: value of type 'Unicode.Scalar'\
    \ has no member 'isEvenIndex'\n    return s.unicodeScalars.filter({ $0.isUppercase\
    \ }).filter({ $0.isEvenIndex }).count\n                                      \
    \                          ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.countUpper { $0.isUpper() }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp2x5pk091.swift:11:14: error: value of type 'String' has no member\
    \ 'countUpper'\n    return s.countUpper { $0.isUpper() }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n   \
    \     if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        } else\
    \ if s[i] == 'B' || s[i] == 'b' {\n            count += 1\n        } else if s[i]\
    \ == 'C' || s[i] == 'c' {\n            count += 1\n        } else if s[i] == 'D'\
    \ || s[i] == 'd' {\n            count += 1\n        } else if s[i] == 'E' || s[i]\
    \ == 'e' {\n            count += 1\n        } else if s[i] == 'F' || s[i] == 'f'\
    \ {\n            count += 1\n        } else if s[i] == 'G' || s[i] == 'g' {\n\
    \            count += 1\n        } else if s[i] == 'H' || s[i] == 'h' {\n    \
    \        count += 1\n        } else if s[i] == 'I' || s[i] == 'i' {\n        \
    \    count += 1\n        } else if s[i] == 'J' || s[i] == 'j' {\n            count\
    \ += 1\n        } else if s[i] == 'K' || s[i] == 'k' {\n            count += 1\n\
    \        } else if s[i] == 'L' || s[i] == 'l' {\n            count += 1\n    \
    \    } else if s[i] == 'M' || s[i] == 'm' {\n            count += 1\n        }\
    \ else if s[i] == 'N' || s[i] == 'n' {\n            count += 1\n        } else\
    \ if s[i] == 'O' || s[i] == 'o' {\n            count += 1\n        } else if s[i]\
    \ == 'P' || s[i] == 'p' {\n            count += 1\n        } else if s[i] == 'Q'\
    \ || s[i] == 'q' {\n            count += 1\n        } else if s[i] == 'R' || s[i]\
    \ == 'r' {\n            count += 1\n        } else if s[i] == 'S' || s[i] == 's'\
    \ {\n            count += 1\n        } else if s[i] == 'T' || s[i] == 't' {\n\
    \            count += 1\n        } else if s[i] == 'U' || s[i] == 'u' {\n    \
    \        count += 1\n        } else if s[i] == 'V' || s[i] == 'v' {\n        \
    \    count += 1\n        } else if s[i] == 'W' || s[i] == 'w' {\n            count\
    \ += 1\n        } else if s[i] == 'X' || s[i] == 'x' {\n            count += 1\n\
    \        } else if s[i] == 'Y' || s[i] == 'y' {\n            count += 1\n    \
    \    } else if s[i] == 'Z' || s[i] == 'z' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmput3zt92p.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmput3zt92p.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmput3zt92p.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmput3zt92p.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmput3zt92p.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n/tmp/tmput3zt92p.swift:15:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else if s[i] == 'B' || s[i] == 'b' {\n  \
    \                        ^~~\n                          \"B\"\n/tmp/tmput3zt92p.swift:15:42:\
    \ error: single-quoted string literal found, use '\"'\n        } else if s[i]\
    \ == 'B' || s[i] == 'b' {\n                                         ^~~\n    \
    \                                     \"b\"\n/tmp/tmput3zt92p.swift:17:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if s[i] == 'C'\
    \ || s[i] == 'c' {\n                          ^~~\n                          \"\
    C\"\n/tmp/tmput3zt92p.swift:17:42: error: single-quoted string literal found,\
    \ use '\"'\n        } else if s[i] == 'C' || s[i] == 'c' {\n                 \
    \                        ^~~\n                                         \"c\"\n\
    /tmp/tmput3zt92p.swift:19:27: error: single-quoted string literal found, use '\"\
    '\n        } else if s[i] == 'D' || s[i] == 'd' {\n                          ^~~\n\
    \                          \"D\"\n/tmp/tmput3zt92p.swift:19:42: error: single-quoted\
    \ string literal found, use '\"'\n        } else if s[i] == 'D' || s[i] == 'd'\
    \ {\n                                         ^~~\n                          \
    \               \"d\"\n/tmp/tmput3zt92p.swift:21:27: error: single-quoted string\
    \ literal found, use '\"'\n        } else"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.countUpper { $0 % 2 == 0 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp10adah6d.swift:11:14: error: value of type 'String' has no member\
    \ 'countUpper'\n    return s.countUpper { $0 % 2 == 0 }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.count {\n      \
    \  if s[index].isUpper() {\n            count += 1\n        }\n        if index%2\
    \ == 0 && s[index].isUpper() {\n            count += 1\n        }\n    }\n   \
    \ return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpyz4v2scd.swift:13:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n/tmp/tmpyz4v2scd.swift:16:37:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if index%2\
    \ == 0 && s[index].isUpper() {\n                           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.count {\n      \
    \  if s[index].isUpper() {\n            count += 1\n        }\n        if index%2\
    \ == 0 && s[index].isUpper() {\n            count += 1\n        }\n    }\n   \
    \ return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpyz4v2scd.swift:13:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n/tmp/tmpyz4v2scd.swift:16:37:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if index%2\
    \ == 0 && s[index].isUpper() {\n                           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n   \
    \     if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n   \
    \ }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpfl9lx65n.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmpfl9lx65n.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmpfl9lx65n.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmpfl9lx65n.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpfl9lx65n.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] ==\
    \ 'U' {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpkqlxghly.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpkqlxghly.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpkqlxghly.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpkqlxghly.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmpkqlxghly.swift:13:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmpkqlxghly.swift:13:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmpkqlxghly.swift:13:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmpkqlxghly.swift:13:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ s[idx].isUpper() {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmppw46et4t.swift:13:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[idx].isUpper() {\n           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.count {\n      \
    \  if s[index].isUpper() {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpu2hbrpa7.swift:13:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        guard c.isUppercase\
    \ else { continue }\n        if c.isEven() { count += 1; }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphnf52co4.swift:14:14: error: value of type 'Character' has no member\
    \ 'isEven'\n        if c.isEven() { count += 1; }\n           ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.countUpper { $0 % 2 == 0 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp10adah6d.swift:11:14: error: value of type 'String' has no member\
    \ 'countUpper'\n    return s.countUpper { $0 % 2 == 0 }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            if isEven(c - 'A') {\n                count += 1\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmptwd859_7.swift:14:27: error: single-quoted string literal found,\
    \ use '\"'\n            if isEven(c - 'A') {\n                          ^~~\n\
    \                          \"A\"\n/tmp/tmptwd859_7.swift:12:16: error: 'characters'\
    \ is unavailable: Please use String directly\n    for c in s.characters {\n  \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmptwd859_7.swift:13:12: error: cannot find 'isUpper' in scope\n   \
    \     if isUpper(c) {\n           ^~~~~~~\n/tmp/tmptwd859_7.swift:14:16: error:\
    \ cannot find 'isEven' in scope\n            if isEven(c - 'A') {\n          \
    \     ^~~~~~\n/tmp/tmptwd859_7.swift:14:25: error: binary operator '-' cannot\
    \ be applied to operands of type 'Character' and 'String'\n            if isEven(c\
    \ - 'A') {\n                      ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.count {\n      \
    \  if s[index].isUpper() {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpu2hbrpa7.swift:13:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        switch c {\n\
    \        case \"A\":\n        case \"E\":\n        case \"I\":\n        case \"\
    O\":\n        case \"U\":\n            count += 1\n        default:\n        \
    \    break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\"\
    ) == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s: \"B\") ==\
    \ 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\") == 0)\n\
    assert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphsgpures.swift:14:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"A\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmphsgpures.swift:15:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"E\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmphsgpures.swift:16:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"I\":\n        ^~~~~~~~~\n                  break\n/tmp/tmphsgpures.swift:17:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"O\":\n        ^~~~~~~~~\n                  break\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ s[idx].isUpper() {\n            count += 1\n        }\n        if idx % 2 ==\
    \ 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7c4bgy8y.swift:13:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[idx].isUpper() {\n           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.countUpper { $0 % 2 == 0 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp10adah6d.swift:11:14: error: value of type 'String' has no member\
    \ 'countUpper'\n    return s.countUpper { $0 % 2 == 0 }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.characters.count {\n\
    \        if idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n     \
    \   }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpnl0wwe6k.swift:12:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for idx in 0..<s.characters.count {\n             \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnl0wwe6k.swift:13:35:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if idx % 2\
    \ == 0 && s[idx].isUpper() {\n                           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.count {\n      \
    \  if s[index].isUpper() {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpu2hbrpa7.swift:13:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.unicodeScalars.filter({ $0.isUppercase }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpaltbpnid.swift:11:41: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    return s.unicodeScalars.filter({ $0.isUppercase\
    \ }).count\n                                     ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) && isEven(c - 'A') {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphl9tb6y1.swift:13:37: error: single-quoted string literal found,\
    \ use '\"'\n        if isUpper(c) && isEven(c - 'A') {\n                     \
    \               ^~~\n                                    \"A\"\n/tmp/tmphl9tb6y1.swift:12:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphl9tb6y1.swift:13:12: error: cannot find 'isUpper'\
    \ in scope\n        if isUpper(c) && isEven(c - 'A') {\n           ^~~~~~~\n/tmp/tmphl9tb6y1.swift:13:26:\
    \ error: cannot find 'isEven' in scope\n        if isUpper(c) && isEven(c - 'A')\
    \ {\n                         ^~~~~~\n/tmp/tmphl9tb6y1.swift:13:35: error: binary\
    \ operator '-' cannot be applied to operands of type 'Character' and 'String'\n\
    \        if isUpper(c) && isEven(c - 'A') {\n                                ~\
    \ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) && isEven(c - 'A') {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphl9tb6y1.swift:13:37: error: single-quoted string literal found,\
    \ use '\"'\n        if isUpper(c) && isEven(c - 'A') {\n                     \
    \               ^~~\n                                    \"A\"\n/tmp/tmphl9tb6y1.swift:12:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphl9tb6y1.swift:13:12: error: cannot find 'isUpper'\
    \ in scope\n        if isUpper(c) && isEven(c - 'A') {\n           ^~~~~~~\n/tmp/tmphl9tb6y1.swift:13:26:\
    \ error: cannot find 'isEven' in scope\n        if isUpper(c) && isEven(c - 'A')\
    \ {\n                         ^~~~~~\n/tmp/tmphl9tb6y1.swift:13:35: error: binary\
    \ operator '-' cannot be applied to operands of type 'Character' and 'String'\n\
    \        if isUpper(c) && isEven(c - 'A') {\n                                ~\
    \ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        switch c {\n\
    \        case 'A':\n        case 'a':\n            count += 1\n        case 'B':\n\
    \        case 'b':\n            count += 1\n        case 'C':\n        case 'c':\n\
    \            count += 1\n        case 'D':\n        case 'd':\n            count\
    \ += 1\n        case 'E':\n        case 'e':\n            count += 1\n       \
    \ case 'F':\n        case 'f':\n            count += 1\n        case 'G':\n  \
    \      case 'g':\n            count += 1\n        case 'H':\n        case 'h':\n\
    \            count += 1\n        case 'I':\n        case 'i':\n            count\
    \ += 1\n        case 'J':\n        case 'j':\n            count += 1\n       \
    \ case 'K':\n        case 'k':\n            count += 1\n        case 'L':\n  \
    \      case 'l':\n            count += 1\n        case 'M':\n        case 'm':\n\
    \            count += 1\n        case 'N':\n        case 'n':\n            count\
    \ += 1\n        case 'O':\n        case 'o':\n            count += 1\n       \
    \ case 'P':\n        case 'p':\n            count += 1\n        case 'Q':\n  \
    \      case 'q':\n            count += 1\n        case 'R':\n        case 'r':\n\
    \            count += 1\n        case 'S':\n        case 's':\n            count\
    \ += 1\n        case 'T':\n        case 't':\n            count += 1\n       \
    \ case 'U':\n        case 'u':\n            count += 1\n        case 'V':\n  \
    \      case 'v':\n            count += 1\n        case 'W':\n        case 'w':\n\
    \            count += 1\n        case 'X':\n        case 'x':\n            count\
    \ += 1\n        case 'Y':\n        case 'y':\n            count += 1\n       \
    \ case 'Z':\n        case 'z':\n            count += 1\n        }\n    }\n   \
    \ return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp18qun6om.swift:14:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'A':\n             ^~~\n             \"A\"\n/tmp/tmp18qun6om.swift:14:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case 'A':\n        ^~~~~~~~~\n                  break\n/tmp/tmp18qun6om.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'a':\n   \
    \          ^~~\n             \"a\"\n/tmp/tmp18qun6om.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'B':\n             ^~~\n      \
    \       \"B\"\n/tmp/tmp18qun6om.swift:17:9: error: 'case' label in a 'switch'\
    \ must have at least one executable statement\n        case 'B':\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp18qun6om.swift:18:14: error: single-quoted string\
    \ literal found, use '\"'\n        case 'b':\n             ^~~\n             \"\
    b\"\n/tmp/tmp18qun6om.swift:20:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'C':\n             ^~~\n             \"C\"\n/tmp/tmp18qun6om.swift:20:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case 'C':\n        ^~~~~~~~~\n                  break\n/tmp/tmp18qun6om.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'c':\n   \
    \          ^~~\n             \"c\"\n/tmp/tmp18qun6om.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'D':\n             ^~~\n      \
    \       \"D\"\n/tmp/tmp18qun6om.swift:23:9: error: 'case' label in a 'switch'\
    \ must have at least one executable statement\n        case 'D':\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp18qun6om.swift:24:14: error: single-quoted string\
    \ literal found, use '\"'\n        case 'd':\n             ^~~\n             \"\
    d\"\n/tmp/tmp18qun6om.swift:26:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'E':\n             ^~~\n             \"E\"\n/tmp/tmp18qun6om.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case 'E':\n        ^~~~~~~~~\n                  break\n/tmp/tmp18qun6om"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] ==\
    \ 'U' {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpkqlxghly.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpkqlxghly.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpkqlxghly.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpkqlxghly.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmpkqlxghly.swift:13:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmpkqlxghly.swift:13:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmpkqlxghly.swift:13:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmpkqlxghly.swift:13:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.countUpper { $0 % 2 == 0 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp10adah6d.swift:11:14: error: value of type 'String' has no member\
    \ 'countUpper'\n    return s.countUpper { $0 % 2 == 0 }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        switch c {\n\
    \        case 'A':\n        case 'a':\n            count += 1\n        case 'B':\n\
    \        case 'b':\n            count += 1\n        case 'C':\n        case 'c':\n\
    \            count += 1\n        case 'D':\n        case 'd':\n            count\
    \ += 1\n        case 'E':\n        case 'e':\n            count += 1\n       \
    \ case 'F':\n        case 'f':\n            count += 1\n        case 'G':\n  \
    \      case 'g':\n            count += 1\n        case 'H':\n        case 'h':\n\
    \            count += 1\n        case 'I':\n        case 'i':\n            count\
    \ += 1\n        case 'J':\n        case 'j':\n            count += 1\n       \
    \ case 'K':\n        case 'k':\n            count += 1\n        case 'L':\n  \
    \      case 'l':\n            count += 1\n        case 'M':\n        case 'm':\n\
    \            count += 1\n        case 'N':\n        case 'n':\n            count\
    \ += 1\n        case 'O':\n        case 'o':\n            count += 1\n       \
    \ case 'P':\n        case 'p':\n            count += 1\n        case 'Q':\n  \
    \      case 'q':\n            count += 1\n        case 'R':\n        case 'r':\n\
    \            count += 1\n        case 'S':\n        case 's':\n            count\
    \ += 1\n        case 'T':\n        case 't':\n            count += 1\n       \
    \ case 'U':\n        case 'u':\n            count += 1\n        case 'V':\n  \
    \      case 'v':\n            count += 1\n        case 'W':\n        case 'w':\n\
    \            count += 1\n        case 'X':\n        case 'x':\n            count\
    \ += 1\n        case 'Y':\n        case 'y':\n            count += 1\n       \
    \ case 'Z':\n        case 'z':\n            count += 1\n        }\n    }\n   \
    \ return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp18qun6om.swift:14:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'A':\n             ^~~\n             \"A\"\n/tmp/tmp18qun6om.swift:14:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case 'A':\n        ^~~~~~~~~\n                  break\n/tmp/tmp18qun6om.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'a':\n   \
    \          ^~~\n             \"a\"\n/tmp/tmp18qun6om.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'B':\n             ^~~\n      \
    \       \"B\"\n/tmp/tmp18qun6om.swift:17:9: error: 'case' label in a 'switch'\
    \ must have at least one executable statement\n        case 'B':\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp18qun6om.swift:18:14: error: single-quoted string\
    \ literal found, use '\"'\n        case 'b':\n             ^~~\n             \"\
    b\"\n/tmp/tmp18qun6om.swift:20:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'C':\n             ^~~\n             \"C\"\n/tmp/tmp18qun6om.swift:20:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case 'C':\n        ^~~~~~~~~\n                  break\n/tmp/tmp18qun6om.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'c':\n   \
    \          ^~~\n             \"c\"\n/tmp/tmp18qun6om.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'D':\n             ^~~\n      \
    \       \"D\"\n/tmp/tmp18qun6om.swift:23:9: error: 'case' label in a 'switch'\
    \ must have at least one executable statement\n        case 'D':\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp18qun6om.swift:24:14: error: single-quoted string\
    \ literal found, use '\"'\n        case 'd':\n             ^~~\n             \"\
    d\"\n/tmp/tmp18qun6om.swift:26:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'E':\n             ^~~\n             \"E\"\n/tmp/tmp18qun6om.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case 'E':\n        ^~~~~~~~~\n                  break\n/tmp/tmp18qun6om"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) && isEven(c - 'A') {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphl9tb6y1.swift:13:37: error: single-quoted string literal found,\
    \ use '\"'\n        if isUpper(c) && isEven(c - 'A') {\n                     \
    \               ^~~\n                                    \"A\"\n/tmp/tmphl9tb6y1.swift:12:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphl9tb6y1.swift:13:12: error: cannot find 'isUpper'\
    \ in scope\n        if isUpper(c) && isEven(c - 'A') {\n           ^~~~~~~\n/tmp/tmphl9tb6y1.swift:13:26:\
    \ error: cannot find 'isEven' in scope\n        if isUpper(c) && isEven(c - 'A')\
    \ {\n                         ^~~~~~\n/tmp/tmphl9tb6y1.swift:13:35: error: binary\
    \ operator '-' cannot be applied to operands of type 'Character' and 'String'\n\
    \        if isUpper(c) && isEven(c - 'A') {\n                                ~\
    \ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ s[idx].isUpper() {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmppw46et4t.swift:13:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[idx].isUpper() {\n           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        switch c {\n\
    \        case 'A':\n        case 'a':\n            count += 1\n        case 'B':\n\
    \        case 'b':\n            count += 1\n        case 'C':\n        case 'c':\n\
    \            count += 1\n        case 'D':\n        case 'd':\n            count\
    \ += 1\n        case 'E':\n        case 'e':\n            count += 1\n       \
    \ case 'F':\n        case 'f':\n            count += 1\n        case 'G':\n  \
    \      case 'g':\n            count += 1\n        case 'H':\n        case 'h':\n\
    \            count += 1\n        case 'I':\n        case 'i':\n            count\
    \ += 1\n        case 'J':\n        case 'j':\n            count += 1\n       \
    \ case 'K':\n        case 'k':\n            count += 1\n        case 'L':\n  \
    \      case 'l':\n            count += 1\n        case 'M':\n        case 'm':\n\
    \            count += 1\n        case 'N':\n        case 'n':\n            count\
    \ += 1\n        case 'O':\n        case 'o':\n            count += 1\n       \
    \ case 'P':\n        case 'p':\n            count += 1\n        case 'Q':\n  \
    \      case 'q':\n            count += 1\n        case 'R':\n        case 'r':\n\
    \            count += 1\n        case 'S':\n        case 's':\n            count\
    \ += 1\n        case 'T':\n        case 't':\n            count += 1\n       \
    \ case 'U':\n        case 'u':\n            count += 1\n        case 'V':\n  \
    \      case 'v':\n            count += 1\n        case 'W':\n        case 'w':\n\
    \            count += 1\n        case 'X':\n        case 'x':\n            count\
    \ += 1\n        case 'Y':\n        case 'y':\n            count += 1\n       \
    \ case 'Z':\n        case 'z':\n            count += 1\n        default:\n   \
    \         break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"\
    abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpgbp2t6n9.swift:14:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'A':\n             ^~~\n             \"A\"\n/tmp/tmpgbp2t6n9.swift:14:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case 'A':\n        ^~~~~~~~~\n                  break\n/tmp/tmpgbp2t6n9.swift:15:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'a':\n   \
    \          ^~~\n             \"a\"\n/tmp/tmpgbp2t6n9.swift:17:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'B':\n             ^~~\n      \
    \       \"B\"\n/tmp/tmpgbp2t6n9.swift:17:9: error: 'case' label in a 'switch'\
    \ must have at least one executable statement\n        case 'B':\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpgbp2t6n9.swift:18:14: error: single-quoted string\
    \ literal found, use '\"'\n        case 'b':\n             ^~~\n             \"\
    b\"\n/tmp/tmpgbp2t6n9.swift:20:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'C':\n             ^~~\n             \"C\"\n/tmp/tmpgbp2t6n9.swift:20:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case 'C':\n        ^~~~~~~~~\n                  break\n/tmp/tmpgbp2t6n9.swift:21:14:\
    \ error: single-quoted string literal found, use '\"'\n        case 'c':\n   \
    \          ^~~\n             \"c\"\n/tmp/tmpgbp2t6n9.swift:23:14: error: single-quoted\
    \ string literal found, use '\"'\n        case 'D':\n             ^~~\n      \
    \       \"D\"\n/tmp/tmpgbp2t6n9.swift:23:9: error: 'case' label in a 'switch'\
    \ must have at least one executable statement\n        case 'D':\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpgbp2t6n9.swift:24:14: error: single-quoted string\
    \ literal found, use '\"'\n        case 'd':\n             ^~~\n             \"\
    d\"\n/tmp/tmpgbp2t6n9.swift:26:14: error: single-quoted string literal found,\
    \ use '\"'\n        case 'E':\n             ^~~\n             \"E\"\n/tmp/tmpgbp2t6n9.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case 'E':\n        ^~~~~~~~~\n                  break\n/tmp/tmpgbp2t6n9"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) && isEven(c - 'A') {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphl9tb6y1.swift:13:37: error: single-quoted string literal found,\
    \ use '\"'\n        if isUpper(c) && isEven(c - 'A') {\n                     \
    \               ^~~\n                                    \"A\"\n/tmp/tmphl9tb6y1.swift:12:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphl9tb6y1.swift:13:12: error: cannot find 'isUpper'\
    \ in scope\n        if isUpper(c) && isEven(c - 'A') {\n           ^~~~~~~\n/tmp/tmphl9tb6y1.swift:13:26:\
    \ error: cannot find 'isEven' in scope\n        if isUpper(c) && isEven(c - 'A')\
    \ {\n                         ^~~~~~\n/tmp/tmphl9tb6y1.swift:13:35: error: binary\
    \ operator '-' cannot be applied to operands of type 'Character' and 'String'\n\
    \        if isUpper(c) && isEven(c - 'A') {\n                                ~\
    \ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.unicodeScalars.filter({ $0.isUppercase }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpaltbpnid.swift:11:41: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    return s.unicodeScalars.filter({ $0.isUppercase\
    \ }).count\n                                     ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.characters.count {\n\
    \        if idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n     \
    \   }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpnl0wwe6k.swift:12:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for idx in 0..<s.characters.count {\n             \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnl0wwe6k.swift:13:35:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if idx % 2\
    \ == 0 && s[idx].isUpper() {\n                           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.unicodeScalars.filter({ $0.isUppercase }).filter({\
    \ $0.isEvenIndex }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphz50qc_x.swift:11:41: error: value of type 'Unicode.Scalar' has\
    \ no member 'isUppercase'\n    return s.unicodeScalars.filter({ $0.isUppercase\
    \ }).filter({ $0.isEvenIndex }).count\n                                     ~~\
    \ ^~~~~~~~~~~\n/tmp/tmphz50qc_x.swift:11:68: error: value of type 'Unicode.Scalar'\
    \ has no member 'isEvenIndex'\n    return s.unicodeScalars.filter({ $0.isUppercase\
    \ }).filter({ $0.isEvenIndex }).count\n                                      \
    \                          ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.characters.count {\n\
    \        if idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n     \
    \   }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpnl0wwe6k.swift:12:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for idx in 0..<s.characters.count {\n             \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnl0wwe6k.swift:13:35:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if idx % 2\
    \ == 0 && s[idx].isUpper() {\n                           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.count {\n      \
    \  if s[index].isUpper() {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpu2hbrpa7.swift:13:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.count {\n      \
    \  if s[index].isUpper() {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpu2hbrpa7.swift:13:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n   \
    \     if s[i] == 'A' || s[i] == 'a' {\n            count++\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp_hfekm2h.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp_hfekm2h.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp_hfekm2h.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp_hfekm2h.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmp_hfekm2h.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ && isEven(c - 'A') {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp0rb_5l5c.swift:13:37: error: single-quoted string literal found,\
    \ use '\"'\n        if isUpper(c) && isEven(c - 'A') {\n                     \
    \               ^~~\n                                    \"A\"\n/tmp/tmp0rb_5l5c.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) && isEven(c - 'A')\
    \ {\n           ^~~~~~~\n/tmp/tmp0rb_5l5c.swift:13:26: error: cannot find 'isEven'\
    \ in scope\n        if isUpper(c) && isEven(c - 'A') {\n                     \
    \    ^~~~~~\n/tmp/tmp0rb_5l5c.swift:13:35: error: binary operator '-' cannot be\
    \ applied to operands of type 'Character' and 'String'\n        if isUpper(c)\
    \ && isEven(c - 'A') {\n                                ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.count {\n      \
    \  if s[index].isUpper() {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"aBCdEf\"\
    ) == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\"\
    ) == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\n\
    assert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpu2hbrpa7.swift:13:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUppercase(c) && isEven(c - 'a') {\n            count += 1\n        }\n   \
    \ }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpznhvwx9e.swift:13:41: error: single-quoted string literal found,\
    \ use '\"'\n        if isUppercase(c) && isEven(c - 'a') {\n                 \
    \                       ^~~\n                                        \"a\"\n/tmp/tmpznhvwx9e.swift:12:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpznhvwx9e.swift:13:12: error: cannot find 'isUppercase'\
    \ in scope\n        if isUppercase(c) && isEven(c - 'a') {\n           ^~~~~~~~~~~\n\
    /tmp/tmpznhvwx9e.swift:13:30: error: cannot find 'isEven' in scope\n        if\
    \ isUppercase(c) && isEven(c - 'a') {\n                             ^~~~~~\n/tmp/tmpznhvwx9e.swift:13:39:\
    \ error: binary operator '-' cannot be applied to operands of type 'Character'\
    \ and 'String'\n        if isUppercase(c) && isEven(c - 'a') {\n             \
    \                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) && isEven(c - 'A') {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphl9tb6y1.swift:13:37: error: single-quoted string literal found,\
    \ use '\"'\n        if isUpper(c) && isEven(c - 'A') {\n                     \
    \               ^~~\n                                    \"A\"\n/tmp/tmphl9tb6y1.swift:12:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphl9tb6y1.swift:13:12: error: cannot find 'isUpper'\
    \ in scope\n        if isUpper(c) && isEven(c - 'A') {\n           ^~~~~~~\n/tmp/tmphl9tb6y1.swift:13:26:\
    \ error: cannot find 'isEven' in scope\n        if isUpper(c) && isEven(c - 'A')\
    \ {\n                         ^~~~~~\n/tmp/tmphl9tb6y1.swift:13:35: error: binary\
    \ operator '-' cannot be applied to operands of type 'Character' and 'String'\n\
    \        if isUpper(c) && isEven(c - 'A') {\n                                ~\
    \ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        guard c >= 'A'\
    \ && c <= 'Z' else {\n            return count\n        }\n        guard c >=\
    \ 'a' && c <= 'z' else {\n            return count\n        }\n        count +=\
    \ 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpodd0bes6.swift:13:20: error: single-quoted string literal found,\
    \ use '\"'\n        guard c >= 'A' && c <= 'Z' else {\n                   ^~~\n\
    \                   \"A\"\n/tmp/tmpodd0bes6.swift:13:32: error: single-quoted\
    \ string literal found, use '\"'\n        guard c >= 'A' && c <= 'Z' else {\n\
    \                               ^~~\n                               \"Z\"\n/tmp/tmpodd0bes6.swift:16:20:\
    \ error: single-quoted string literal found, use '\"'\n        guard c >= 'a'\
    \ && c <= 'z' else {\n                   ^~~\n                   \"a\"\n/tmp/tmpodd0bes6.swift:16:32:\
    \ error: single-quoted string literal found, use '\"'\n        guard c >= 'a'\
    \ && c <= 'z' else {\n                               ^~~\n                   \
    \            \"z\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.characters.count\
    \ {\n        if s[index].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp1p0nr4i0.swift:12:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for index in 0..<s.characters.count {\n           \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp1p0nr4i0.swift:13:21: error: value of type 'Character' has no member 'isUpper'\n\
    \        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            if isEven(c) {\n                count += 1\n     \
    \       }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\"\
    ) == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s: \"B\") ==\
    \ 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\") == 0)\n\
    assert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzbq3ql3v.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpzbq3ql3v.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n\
    /tmp/tmpzbq3ql3v.swift:14:16: error: cannot find 'isEven' in scope\n         \
    \   if isEven(c) {\n               ^~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    return s.countUpper { $0.isUpper() }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp2x5pk091.swift:11:14: error: value of type 'String' has no member\
    \ 'countUpper'\n    return s.countUpper { $0.isUpper() }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ s[idx].isUpper() {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmppw46et4t.swift:13:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[idx].isUpper() {\n           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 {\n            if s.unicodeScalars.contains(UnicodeScalar(s.unicodeScalars[idx]))\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbj9c3d6f.swift:14:73: error: cannot convert value of type 'Int'\
    \ to expected argument type 'String.UnicodeScalarView.Index' (aka 'String.Index')\n\
    \            if s.unicodeScalars.contains(UnicodeScalar(s.unicodeScalars[idx]))\
    \ {\n                                                                        ^\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUppercase(c) && isEven(c - 'A') {\n            count += 1\n        }\n   \
    \ }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpvh20_a1p.swift:13:41: error: single-quoted string literal found,\
    \ use '\"'\n        if isUppercase(c) && isEven(c - 'A') {\n                 \
    \                       ^~~\n                                        \"A\"\n/tmp/tmpvh20_a1p.swift:12:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpvh20_a1p.swift:13:12: error: cannot find 'isUppercase'\
    \ in scope\n        if isUppercase(c) && isEven(c - 'A') {\n           ^~~~~~~~~~~\n\
    /tmp/tmpvh20_a1p.swift:13:30: error: cannot find 'isEven' in scope\n        if\
    \ isUppercase(c) && isEven(c - 'A') {\n                             ^~~~~~\n/tmp/tmpvh20_a1p.swift:13:39:\
    \ error: binary operator '-' cannot be applied to operands of type 'Character'\
    \ and 'String'\n        if isUppercase(c) && isEven(c - 'A') {\n             \
    \                       ~ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) && isEven(c - 'A') {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmphl9tb6y1.swift:13:37: error: single-quoted string literal found,\
    \ use '\"'\n        if isUpper(c) && isEven(c - 'A') {\n                     \
    \               ^~~\n                                    \"A\"\n/tmp/tmphl9tb6y1.swift:12:16:\
    \ error: 'characters' is unavailable: Please use String directly\n    for c in\
    \ s.characters {\n               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphl9tb6y1.swift:13:12: error: cannot find 'isUpper'\
    \ in scope\n        if isUpper(c) && isEven(c - 'A') {\n           ^~~~~~~\n/tmp/tmphl9tb6y1.swift:13:26:\
    \ error: cannot find 'isEven' in scope\n        if isUpper(c) && isEven(c - 'A')\
    \ {\n                         ^~~~~~\n/tmp/tmphl9tb6y1.swift:13:35: error: binary\
    \ operator '-' cannot be applied to operands of type 'Character' and 'String'\n\
    \        if isUpper(c) && isEven(c - 'A') {\n                                ~\
    \ ^ ~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ c.isUpper() {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpgdrvxldk.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpgdrvxldk.swift:13:14:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if c.isUpper()\
    \ {\n           ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.characters.count {\n\
    \        if idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n     \
    \   }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpnl0wwe6k.swift:12:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for idx in 0..<s.characters.count {\n             \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnl0wwe6k.swift:13:35:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if idx % 2\
    \ == 0 && s[idx].isUpper() {\n                           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i++ {\n   \
    \     if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp7x99b_s0.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i++ {\n           ^\n            <#type#>\n/tmp/tmp7x99b_s0.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i++\
    \ {\n           ^\n/tmp/tmp7x99b_s0.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i++ {\n           ^\n/tmp/tmp7x99b_s0.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            \
    \       ^~~\n                   \"A\"\n/tmp/tmp7x99b_s0.swift:13:35: error: single-quoted\
    \ string literal found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n                                  ^~~\n\
    \                                  \"E\"\n/tmp/tmp7x99b_s0.swift:13:50: error:\
    \ single-quoted string literal found, use '\"'\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n                    \
    \                             ^~~\n                                          \
    \       \"I\"\n/tmp/tmp7x99b_s0.swift:13:65: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \              ^~~\n                                                         \
    \       \"O\"\n/tmp/tmp7x99b_s0.swift:13:80: error: single-quoted string literal\
    \ found, use '\"'\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n                                                  \
    \                             ^~~\n                                          \
    \                                     \"U\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 {\n            if s.characters[idx].isUpper() {\n             \
    \   count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmppr43r5vf.swift:14:34: error: value of type 'Character' has no member\
    \ 'isUpper'\n            if s.characters[idx].isUpper() {\n               ~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.count {\n      \
    \  if s[index].isUpper() {\n            count += 1\n        }\n        if index%2\
    \ == 0 && s[index].isUpper() {\n            count += 1\n        }\n    }\n   \
    \ return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpyz4v2scd.swift:13:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n/tmp/tmpyz4v2scd.swift:16:37:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if index%2\
    \ == 0 && s[index].isUpper() {\n                           ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if isUpper(c)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbgfkpel1.swift:13:12: error: cannot find 'isUpper' in scope\n \
    \       if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.characters.count {\n\
    \        if idx % 2 == 0 {\n            if s.characters[idx].isUpper() {\n   \
    \             count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpbcnyza81.swift:12:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for idx in 0..<s.characters.count {\n             \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpbcnyza81.swift:14:34:\
    \ error: value of type 'Character' has no member 'isUpper'\n            if s.characters[idx].isUpper()\
    \ {\n               ~~~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s.characters {\n        if\
    \ isUpper(c) {\n            count += 1\n        }\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpsqidkt8s.swift:12:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpsqidkt8s.swift:13:12:\
    \ error: cannot find 'isUpper' in scope\n        if isUpper(c) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for c in s {\n        if c.isUpper()\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpx6ybw1cb.swift:13:14: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if c.isUpper() {\n           ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 && s[idx].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpzud8ib29.swift:13:35: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if idx % 2 == 0 && s[idx].isUpper() {\n                 \
    \          ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for index in 0..<s.count {\n      \
    \  if s[index].isUpper() {\n            count += 1\n        }\n        if index\
    \ % 2 == 0 && s[index].isUpper() {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_upper(s: \"\
    aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpp8ngzkgb.swift:13:21: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[index].isUpper() {\n           ~~~~~~~~ ^~~~~~~\n/tmp/tmpp8ngzkgb.swift:16:39:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if index %\
    \ 2 == 0 && s[index].isUpper() {\n                             ~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ idx % 2 == 0 {\n            if s.characters[idx].isUpper() {\n             \
    \   count += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmppr43r5vf.swift:14:34: error: value of type 'Character' has no member\
    \ 'isUpper'\n            if s.characters[idx].isUpper() {\n               ~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for i := 0; i < len(s); i += 2 {\n\
    \        if s[i] == 'A' || s[i] == 'a' {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_upper(s:\
    \ \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") == 0)\nassert(count_upper(s:\
    \ \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\nassert(count_upper(s: \"\
    U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s: \"EEEE\"\
    ) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpj1z_mmxz.swift:12:12: error: expected type\n    for i := 0; i <\
    \ len(s); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpj1z_mmxz.swift:12:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(s); i +=\
    \ 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:12:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(s); i += 2 {\n           ^\n/tmp/tmpj1z_mmxz.swift:13:20:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                   ^~~\n                   \"A\"\n/tmp/tmpj1z_mmxz.swift:13:35:\
    \ error: single-quoted string literal found, use '\"'\n        if s[i] == 'A'\
    \ || s[i] == 'a' {\n                                  ^~~\n                  \
    \                \"a\"\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.characters.count {\n\
    \        if idx % 2 == 0 && s.characters[idx].isUpper() {\n            count +=\
    \ 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s: \"abcdefg\") ==\
    \ 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s: \"B\") == 0)\n\
    assert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\") == 0)\nassert(count_upper(s:\
    \ \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmply48csr4.swift:12:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for idx in 0..<s.characters.count {\n             \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmply48csr4.swift:13:46:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if idx % 2\
    \ == 0 && s.characters[idx].isUpper() {\n                           ~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
    /// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s:\
    \ \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s:\
    \ String) -> Int {\n    var count = 0\n    for idx in 0..<s.count {\n        if\
    \ s[idx].isUpper() {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
    \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
    \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\"\
    ) == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
  status: SyntaxError
  stderr: "/tmp/tmppw46et4t.swift:13:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if s[idx].isUpper() {\n           ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824549
