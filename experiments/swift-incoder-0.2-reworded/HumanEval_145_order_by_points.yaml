name: HumanEval_145_order_by_points
language: swift
prompt: "\n/// Write a function which sorts the given array of integers\n/// in ascending\
  \ order according to the sum of their digits.\n/// Note: if there are several items\
  \ with similar sum of their digits,\n/// order them based on their index in original\
  \ array.\n/// For example:\n/// >>> order_by_points(nums: [1, 11, -1, -11, -12])\n\
  /// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums: [] as [Int])\n/// [] as\
  \ [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12])\
  \ == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145,\
  \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
  \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
  \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3])\
  \ == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3,\
  \ 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
  \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
completions: ["    var sum = 0\n    var result = [Int]()\n    for n in nums {\n  \
    \      sum += n\n        result.append(n)\n    }\n    result.sort(by: {\n    \
    \    sum - $0\n    })\n    return result", "    var result = [Int]()\n    var\
    \ sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n \
    \   }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum - a\n \
    \       let bSum = sum - b\n        return aSum < bSum\n    })\n    return result",
  "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aDigit = a % 10\n        let bDigit = b % 10\n        return aDigit\
    \ < bDigit || (aDigit == bDigit && a.compareTo(b) == .orderedAscending)\n    })\n\
    \    return result", "    var numsSorted = [Int]()\n    var sum = 0\n    for n\
    \ in nums {\n        sum += n\n        numsSorted.append(n)\n    }\n    var numsSortedBySum\
    \ = numsSorted.sorted()\n    var numsSortedBySumReversed = numsSortedBySum.reversed()\n\
    \    var numsSortedBySumReversedByIndex = numsSortedBySum.reversed().sorted()\n\
    \    var numsSortedBySumReversedByIndexReversed = numsSortedBySum.reversed().sorted().reversed()\n\
    \    return numsSortedBySumReversedByIndexReversed", "    guard nums.count > 0\
    \ else { return nums }\n    let numsCopy = nums.map { $0 }\n    let numsCopySorted\
    \ = numsCopy.sorted()\n    return numsCopySorted.map { $0 }", "    var sum = 0\n\
    \    var result = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: {\n        sum - $0\n    })\n    return result", " \
    \   var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum - a\n        let bSum = sum - b\n        if aSum == bSum\
    \ {\n            return a.compare(to: b) == .orderedAscending\n        }\n   \
    \     return aSum < bSum\n    })\n    return result", "    var numsSorted = [Int]()\n\
    \    var sum = 0\n    for n in nums {\n        sum += n\n        numsSorted.append(n)\n\
    \    }\n    var numsSortedCopy = numsSorted\n    for n in numsSorted {\n     \
    \   var index = numsSortedCopy.index {\n            $0 > n\n        }\n      \
    \  if index != NSNotFound {\n            numsSortedCopy.remove(at: index)\n  \
    \          numsSortedCopy.insert(n, at: index)\n        }\n    }\n    return numsSortedCopy",
  "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        let aInd = a.hashValue\
    \ % aSum\n        let bInd = b.hashValue % bSum\n        return aInd < bInd\n\
    \    })\n    return result", "    var sum = 0\n    var result = [Int]()\n    for\
    \ n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n      \
    \  if a < b {\n            return true\n        } else if a == b {\n         \
    \   return a < 0\n        } else {\n            return false\n        }\n    })\n\
    \    return result", "    var result = [Int]()\n    for num in nums {\n      \
    \  let digits = String(num).characters.map { Int($0) }\n        let sum = digits.reduce(0,\
    \ +)\n        result.append(num)\n        if sum < 0 {\n            result +=\
    \ [sum]\n        }\n    }\n    return result", "    var sum = 0\n    var result\
    \ = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        return sum - a < sum\
    \ - b\n    })\n    return result", "    var result = [Int]()\n    var sum = 0\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n      \
    \  if aSum == bSum {\n            return a.compare(to: b) == .orderedAscending\n\
    \        }\n        return aSum < bSum\n    })\n    return result", "    var result\
    \ = [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        return sum > b\n    })\n\
    \    return result", "    let numsSorted = nums.sorted()\n    var sum = 0\n  \
    \  var index = 0\n    var result = [Int]()\n    for num in numsSorted {\n    \
    \    sum += num\n        if sum > 0 {\n            result.append(index)\n    \
    \    }\n        sum += num\n        index++\n    }\n    return result", "    var\
    \ result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n \
    \       result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n   \
    \     let aSum = sum\n        let bSum = sum\n        if a < b {\n           \
    \ return true\n        }\n        if a == b {\n            return a < aSum\n \
    \       }\n        return false\n    })\n    return result", "    var result =\
    \ [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        if a < b {\n            return true\n        }\n\
    \        if a > b {\n            return false\n        }\n        if aSum < bSum\
    \ {\n            return true\n        }\n        if aSum > bSum {\n          \
    \  return false\n        }\n        return false\n    })\n    return result",
  "    guard !nums.isEmpty else { return [] }\n    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort\
    \ { $0.0 < $1.0 }\n    return result", "    let numsCopy = nums.copy()\n    let\
    \ numsCopySorted = numsCopy.sorted()\n    return numsCopySorted", "    let numsSorted\
    \ = nums.sorted { $0.digits < $1.digits }\n    return numsSorted.map { $0.digits\
    \ }", "    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums {\n  \
    \      sum += n\n        numsSorted.append(n)\n    }\n    numsSorted.sort()\n\
    \    return numsSorted", "    var sum = 0\n    var result = [Int]()\n    for n\
    \ in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        return sum - a < sum - b\n    })\n    return result",
  "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort { a, b in\n        return\
    \ sum - a + b\n    }\n    return result", "    var result = [Int]()\n    var sum\
    \ = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n    }\n\
    \    result.sort(by: { (a, b) -> Bool in\n        return sum - a < sum - b\n \
    \   })\n    return result", "    var sum = 0\n    var result = [Int]()\n    for\
    \ n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n      \
    \  let aDiff = a - aSum\n        let bDiff = b - bSum\n        if aDiff < bDiff\
    \ {\n            return true\n        } else if aDiff > bDiff {\n            return\
    \ false\n        } else {\n            return a < b\n        }\n    })\n    return\
    \ result", "    var numsSorted = nums\n    var sum = 0\n    for n in numsSorted\
    \ {\n        sum += n\n    }\n    var index = 0\n    for n in numsSorted {\n \
    \       if sum < 0 {\n            numsSorted.insert(numsSorted[index], at: 0)\n\
    \            sum -= numsSorted[index]\n        } else {\n            numsSorted.insert(numsSorted[index],\
    \ at: numsSorted.endIndex)\n            sum -= numsSorted[numsSorted.endIndex]\n\
    \        }\n        index += 1\n    }\n    return numsSorted", "    var sum =\
    \ 0\n    var result = [Int]()\n    for n in nums {\n        sum += n\n       \
    \ result.append(n)\n    }\n    result.sortInPlace()\n    return result", "   \
    \ var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n\
    \        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n  \
    \      let aSum = sum\n        let bSum = sum\n        if a < b {\n          \
    \  return true\n        }\n        if a > b {\n            return false\n    \
    \    }\n        if aSum < bSum {\n            return true\n        }\n       \
    \ if aSum > bSum {\n            return false\n        }\n        return false\n\
    \    })\n    return result", "    var result = [Int]()\n    var sum = 0\n    for\
    \ num in nums {\n        sum += num\n        result.append(num)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum.truncatingRemainder(dividingBy:\
    \ 10)\n        let bSum = sum.truncatingRemainder(dividingBy: 10)\n        return\
    \ aSum == bSum\n    })\n    return result", "    var result = [Int]()\n    var\
    \ sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n \
    \   }\n    result.sort(by: { (a: Int, b: Int) -> Bool in\n        return sum -\
    \ a < sum - b\n    })\n    return result", "    var numsSorted = [Int]()\n   \
    \ var numsSum = nums.reduce(0, +)\n    for num in nums {\n        let numsDigit\
    \ = num % 10\n        let numsSumDigit = numsSum % 10\n        if numsDigit >\
    \ numsSumDigit {\n            numsSorted.append(num)\n        } else {\n     \
    \       numsSorted.append(numsSum)\n        }\n        numsSum += num\n    }\n\
    \    return numsSorted", "    var sum = 0\n    var result = [Int]()\n    for n\
    \ in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        return sum - a < sum - b\n    })\n    return result",
  "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if a < b {\n        \
    \    return true\n        }\n        if a > b {\n            return false\n  \
    \      }\n        if aSum == bSum {\n            return a.compare(to: b) == .orderedAscending\n\
    \        }\n        return aSum < bSum\n    })\n    return result", "    var sum\
    \ = 0\n    var result = [Int]()\n    for n in nums {\n        sum += n\n     \
    \   result.append(n)\n    }\n    result.sort { a, b in\n        return sum - a\
    \ + b\n    }\n    return result", "    var result = [Int]()\n    var sum = 0\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        return sum - a < sum - b\n    })\n    return result",
  "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        let aIndex = a.hashValue\
    \ % aSum\n        let bIndex = b.hashValue % bSum\n        return aIndex < bIndex\n\
    \    })\n    return result", "    var result = [Int]()\n    var sum = 0\n    for\
    \ num in nums {\n        sum += num\n        result.append(num)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = a.toInt()\n        let bSum = b.toInt()\n\
    \        return aSum < bSum || (aSum == bSum && a.compareTo(b) == .orderedAscending)\n\
    \    })\n    return result", "    let numsCopy = nums.map { $0 }\n    let numsCopySorted\
    \ = numsCopy.sorted()\n    return numsCopySorted.map { $0 }", "    var numsSorted\
    \ = [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n        numsSorted.append(n)\n\
    \    }\n    for n in numsSorted {\n        if sum < 0 {\n            sum *= -1\n\
    \            numsSorted.insert(n, 0)\n        } else {\n            numsSorted.insert(n,\
    \ numsSorted.endIndex.advancedBy(sum))\n            sum -= n\n        }\n    }\n\
    \    return numsSorted", "    var result = [Int]()\n    var sum = 0\n    for n\
    \ in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n      \
    \  if a < b {\n            return true\n        }\n        if a > b {\n      \
    \      return false\n        }\n        if aSum < bSum {\n            return true\n\
    \        }\n        if aSum > bSum {\n            return false\n        }\n  \
    \      return false\n    })\n    return result", "    var sum = 0\n    var result\
    \ = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        if a < b {\n            return true\n        }\n\
    \        if a > b {\n            return false\n        }\n        if aSum < bSum\
    \ {\n            return true\n        }\n        if aSum > bSum {\n          \
    \  return false\n        }\n        return a.compare(to: b) == .orderedAscending\n\
    \    })\n    return result", "    var sum = 0\n    var result = [Int]()\n    for\
    \ n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n      \
    \  if a < 0 {\n            aSum = -aSum\n        }\n        if b < 0 {\n     \
    \       bSum = -bSum\n        }\n        return aSum < bSum\n    })\n    return\
    \ result", "    var numsSorted = nums\n    if nums.isEmpty {\n        return numsSorted\n\
    \    }\n    var sum = 0\n    for i in 0..<nums.count {\n        sum += nums[i]\n\
    \        numsSorted.swapAt(i, nums.indexOf(sum))\n    }\n    return numsSorted",
  "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        sum -= a\n        sum\
    \ -= b\n        return aSum == bSum\n    })\n    return result", "    var sum\
    \ = 0\n    var result = [Int]()\n    for n in nums {\n        sum += n\n     \
    \   result.append(n)\n    }\n    result.sort(by: {\n        sum - $0\n    })\n\
    \    return result", "    var result = [Int]()\n    var sum = 0\n    for n in\
    \ nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n      \
    \  if a < b {\n            return true\n        } else if a == b {\n         \
    \   return a < aSum\n        }\n        return false\n    })\n    return result",
  "    return nums.sorted(by: { (a, b) -> Bool in\n        let aSum = a.map { Int($0)\
    \ }.reduce(0) { $0 + $1 }\n        let bSum = b.map { Int($0) }.reduce(0) { $0\
    \ + $1 }\n        return aSum < bSum\n    })", "    var sum = 0\n    var result\
    \ = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        sum = aSum + b\n        return sum > 0\n    })\n\
    \    return result", "    guard !nums.isEmpty else { return [] }\n    var sum\
    \ = 0\n    var result = [Int]()\n    for n in nums {\n        sum += n\n     \
    \   result.append(n)\n    }\n    result.sort { $0.0 < $1.0 }\n    return result",
  "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if a < b {\n        \
    \    return true\n        } else if a > b {\n            return false\n      \
    \  } else {\n            return aSum < bSum\n        }\n    })\n    return result",
  "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sortInPlace()\n    return result",
  "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum - a < sum - b\n    })\n    return result", "    var sum =\
    \ 0\n    var result = [Int]()\n    for n in nums {\n        sum += n\n       \
    \ result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n        return\
    \ sum - a < sum - b\n    })\n    return result", "    var sum = 0\n    var result\
    \ = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        return sum - a < sum\
    \ - b\n    })\n    return result", "    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ {\n        sum - $0\n    })\n    return result", "    var result = [Int]()\n\
    \    var sum = 0\n    for n in nums {\n        sum += n\n    }\n    for n in nums\
    \ {\n        if sum < 0 {\n            sum += n\n        } else {\n          \
    \  sum += n % 10\n        }\n        result.append(n)\n    }\n    return result",
  "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum - a < sum - b\n    })\n    return result", "    var result\
    \ = [Int]()\n    var sum = 0\n    for num in nums {\n        sum += num\n    \
    \    if sum > 0 {\n            result.insert(sum, num)\n            sum = 0\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var sum\
    \ = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n    }\n\
    \    result.sort(by: { (a, b) -> Bool in\n        return sum - a < sum - b\n \
    \   })\n    return result", "    var sum = 0\n    var result = [Int]()\n    for\
    \ n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n      \
    \  if a < b {\n            return true\n        }\n        if a > b {\n      \
    \      return false\n        }\n        if aSum == bSum {\n            return\
    \ a.compare(to: b) == .orderedAscending\n        }\n        return aSum < bSum\n\
    \    })\n    return result", "    var numsSorted = [Int]()\n    var sum = 0\n\
    \    for num in nums {\n        sum += num\n        numsSorted.append(num)\n \
    \   }\n    var i = 0\n    for num in numsSorted {\n        if num > 0 {\n    \
    \        swap(&numsSorted[i], &numsSorted[sum - num])\n            i += 1\n  \
    \      }\n    }\n    return numsSorted", "    let numsSorted = nums.sorted()\n\
    \    var sum = 0\n    var index = 0\n    var result = [Int]()\n    for num in\
    \ numsSorted {\n        sum += num\n        if sum > 0 {\n            result.append(index)\n\
    \        }\n        sum += num\n        index++\n    }\n    return result", " \
    \   var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum - a\n        let bSum = sum - b\n        if aSum == bSum\
    \ { return a.compare(b) == .orderedAscending }\n        return aSum > bSum\n \
    \   })\n    return result", "    var sum = 0\n    var result = [Int]()\n    for\
    \ n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = a.toInt()\n        let bSum = b.toInt()\n\
    \        return aSum < bSum || (aSum == bSum && a.compare(to: b) == .orderedAscending)\n\
    \    })\n    return result", "    var sum = 0\n    var result = [Int]()\n    for\
    \ n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n      \
    \  sum = aSum + b\n        return sum == aSum\n    })\n    return result", " \
    \   var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sortInPlace()\n    return result",
  "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum > b\n    })\n    return result", "    var sum = 0\n    var\
    \ result = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a: Int, b: Int) -> Bool in\n        return sum\
    \ - a < sum - b\n    })\n    return result", "    var result = [Int]()\n    var\
    \ sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n \
    \   }\n    result.sort(by: {\n        sum - $0\n    })\n    return result", " \
    \   var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum - a\n        let bSum = sum - b\n        return aSum <\
    \ bSum\n    })\n    return result", "    let numsSorted = nums.sorted()\n    return\
    \ numsSorted.map { $0 + $1 }", "    var sum = 0\n    var result = [Int]()\n  \
    \  for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort\
    \ { $0.0 < $1.0 }\n    return result", "    let numsSorted = nums.sorted()\n \
    \   return numsSorted.map { $0.toInt() }", "    var sum = 0\n    var result =\
    \ [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n \
    \   }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n     \
    \   let bSum = sum\n        if a < b {\n            return true\n        }\n \
    \       if a > b {\n            return false\n        }\n        return aSum <\
    \ bSum\n    })\n    return result", "    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ {\n        sum - $0\n    })\n    return result", "    var result = [Int]()\n\
    \    var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: {\n        sum - $0\n    })\n    return result", " \
    \   let numsCopy = nums.map { $0 }\n    let numsCopySorted = numsCopy.sorted()\n\
    \    return numsCopySorted.map { $0 }", "    var result = [Int]()\n    var sum\
    \ = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n    }\n\
    \    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n        let\
    \ bSum = sum\n        if a < b {\n            return true\n        }\n       \
    \ if a > b {\n            return false\n        }\n        if aSum < bSum {\n\
    \            return true\n        }\n        if aSum > bSum {\n            return\
    \ false\n        }\n        return false\n    })\n    return result", "    let\
    \ numsCopy = nums.map { $0 }\n    let numsCopySorted = numsCopy.sorted()\n   \
    \ return numsCopySorted.map { $0 }", "    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a: Int, b: Int) -> Bool in\n        let aSum = sum\n        let bSum = sum\n\
    \        if aSum == bSum {\n            return a < b\n        }\n        if aSum\
    \ > bSum {\n            return true\n        }\n        return false\n    })\n\
    \    return result", "    var sum = 0\n    var result = [Int]()\n    for n in\
    \ nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n      \
    \  if a < b {\n            return true\n        }\n        if a > b {\n      \
    \      return false\n        }\n        if aSum < bSum {\n            return true\n\
    \        }\n        if aSum > bSum {\n            return false\n        }\n  \
    \      return false\n    })\n    return result", "    var sum = 0\n    var result\
    \ = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = a.toInt()\n\
    \        let bSum = b.toInt()\n        return aSum == bSum ? a.toInt() < b.toInt()\
    \ : aSum > bSum\n    })\n    return result", "    var sum = 0\n    var result\
    \ = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a: Int, b: Int) -> Bool in\n        let aSum =\
    \ sum - a\n        let bSum = sum - b\n        return aSum < bSum\n    })\n  \
    \  return result", "    var sum = 0\n    var result = [Int]()\n    for n in nums\
    \ {\n        sum += n\n        result.append(n)\n    }\n    result.sortInPlace()\n\
    \    return result + [sum]", "    var sum = 0\n    var result = [Int]()\n    for\
    \ n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum + a\n        let bSum = sum + b\n\
    \        return aSum < bSum\n    })\n    return result", "    var sum = 0\n  \
    \  var result = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort { $0 + $1 < $1 + $2 }\n    return result", "    var result\
    \ = [Int]()\n    var sum = 0\n    for num in nums {\n        sum += num\n    \
    \    result.append(num)\n    }\n    result.sort(by: { (a, b) -> Bool in\n    \
    \    let aSum = sum\n        let bSum = sum\n        if aSum == bSum {\n     \
    \       return a < b\n        }\n        return aSum < bSum\n    })\n    return\
    \ result", "    let numsSorted = nums.sorted()\n    var sum = 0\n    var index\
    \ = 0\n    var result = [Int]()\n    while index < numsSorted.count {\n      \
    \  sum += numsSorted[index]\n        result.append(sum)\n        index += 1\n\
    \    }\n    return result", "    var result = [Int]()\n    var sum = 0\n    for\
    \ n in nums {\n        sum += n\n    }\n    for n in nums {\n        if sum <\
    \ 0 {\n            sum += n\n        } else {\n            sum += n % 10\n   \
    \     }\n        result.append(n)\n    }\n    return result", "    var sum = 0\n\
    \    var result = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        if aSum == bSum {\n            return a.compare(to:\
    \ b) == .orderedAscending\n        } else {\n            return aSum < bSum\n\
    \        }\n    })\n    return result", "    guard nums.count > 0 else { return\
    \ nums }\n    var numsSorted = nums\n    var sum = 0\n    for i in 0..<nums.count\
    \ {\n        sum += nums[i]\n        numsSorted.remove(at: i)\n        numsSorted.insert(sum,\
    \ at: i)\n    }\n    return numsSorted", "    let numsSorted = nums.sorted()\n\
    \    var sum = 0\n    var index = 0\n    while index < nums.count {\n        sum\
    \ += nums[index]\n        if sum > 0 {\n            numsSorted.insert(nums[index],\
    \ at: index)\n        }\n        index += 1\n    }\n    return numsSorted", " \
    \   var sum = 0\n    var result = [Int]()\n    for num in nums {\n        sum\
    \ += num\n        result.append(num)\n    }\n    result.sort(by: { (a, b) -> Bool\
    \ in\n        let aSum = sum\n        let bSum = sum\n        let aIndex = a.hashValue\
    \ % aSum\n        let bIndex = b.hashValue % bSum\n        return aIndex < bIndex\n\
    \    })\n    return result", "    var sum = 0\n    var result = [Int]()\n    for\
    \ n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n      \
    \  if a < b {\n            return true\n        }\n        if a > b {\n      \
    \      return false\n        }\n        if aSum == bSum {\n            return\
    \ a.compare(to: b) == .orderedAscending\n        }\n        return aSum < bSum\n\
    \    })\n    return result", "    var numsSorted = [Int]()\n    var sum = 0\n\
    \    for num in nums {\n        sum += num\n        numsSorted.append(num)\n \
    \   }\n    return numsSorted.sorted(by: { $0 + $1 < $1 })", "    let numsSorted\
    \ = nums.sorted()\n    return numsSorted.map { $0 + $1 }", "    var sum = 0\n\
    \    var result = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aDigit = a % 10\n\
    \        let bDigit = b % 10\n        return aDigit > bDigit || (aDigit == bDigit\
    \ && a.compareTo(b) == .orderedAscending)\n    })\n    return result", "    var\
    \ result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n \
    \   }\n    for n in nums {\n        if sum < 0 {\n            sum += n\n     \
    \   } else {\n            if sum > 0 {\n                sum += n\n           \
    \ }\n            result.append(n)\n        }\n    }\n    return result", "   \
    \ var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n\
    \        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n  \
    \      let aSum = sum\n        let bSum = sum\n        if aSum == bSum {\n   \
    \         return a.compare(to: b) == .orderedAscending\n        }\n        return\
    \ aSum < bSum\n    })\n    return result", "    let numsSorted = nums.sorted()\n\
    \    var sum = 0\n    var index = 0\n    var result = [Int]()\n    while index\
    \ < numsSorted.count {\n        sum += numsSorted[index]\n        if sum > 0 {\n\
    \            result.append(numsSorted[index])\n        }\n        index += 1\n\
    \    }\n    return result", "    var numsSorted = nums\n    if nums.isEmpty {\n\
    \        return numsSorted\n    }\n    var sum = 0\n    for n in numsSorted {\n\
    \        sum += n\n    }\n    var digitSums = [Int]()\n    for n in numsSorted\
    \ {\n        digitSums.append(sum % 10)\n        sum -= n % 10\n    }\n    var\
    \ result = [Int]()\n    for d in digitSums {\n        if !contains(result, d)\
    \ {\n            result.append(d)\n        }\n    }\n    return result", "   \
    \ var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum += n\n\
    \        result.append(n)\n    }\n    result.sort { sum - $0 }\n    return result",
  "    let numsCopy = nums.map { $0 }\n    let numsCopySorted = numsCopy.sorted()\n\
    \    return numsCopySorted.map { $0 }", "    var result = [Int]()\n    var sum\
    \ = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n    }\n\
    \    result.sort(by: { (a, b) -> Bool in\n        return sum - a < sum - b\n \
    \   })\n    return result", "    var sum = 0\n    var result = [Int]()\n    for\
    \ n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n      \
    \  sum = aSum + b\n        return sum == aSum\n    })\n    return result", " \
    \   var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum - a < sum - b\n    })\n    return result", "    return nums.sorted(by:\
    \ { (num1, num2) in\n        let num1String = String(num1)\n        let num2String\
    \ = String(num2)\n        let num1Sum = num1String.reduce(0) { $0 + $1 }\n   \
    \     let num2Sum = num2String.reduce(0) { $0 + $1 }\n        return num1Sum >\
    \ num2Sum ? 1 : -1\n    })", "    var numsSorted = [Int]()\n    var sum = 0\n\
    \    for n in nums {\n        sum += n\n        numsSorted.append(n)\n    }\n\
    \    var i = 0\n    for n in numsSorted {\n        if sum < 0 {\n            sum\
    \ *= -1\n            numsSorted.insert(i, -n)\n        } else {\n            sum\
    \ *= 10\n            numsSorted.insert(i, n)\n        }\n        i += 1\n    }\n\
    \    return numsSorted", "    var sum = 0\n    var result = [Int]()\n    for n\
    \ in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum - a\n        let bSum = sum - b\n\
    \        return aSum < bSum\n    })\n    return result", '    return nums.sorted
    { $0.digits.reduce(0) { $0 + $1 } > $1.digits.reduce(0) { $0 + $1 } }', "    var\
    \ numsSorted = [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n\
    \        numsSorted.append(n)\n    }\n    var numsSortedCopy = numsSorted\n  \
    \  for n in numsSorted {\n        var index = numsSortedCopy.index{$0 >= n}\n\
    \        if index != nil {\n            numsSortedCopy.remove(at: index!)\n  \
    \          numsSortedCopy.insert(n, at: 0)\n        }\n    }\n    return numsSortedCopy",
  "    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum +=\
    \ num\n        if sum < 0 {\n            sum = 0\n        }\n        if sum >\
    \ 0 {\n            result.append(num)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        sum = aSum + b\n    \
    \    return sum < 0\n    })\n    return result", "    var sum = 0\n    var index\
    \ = 0\n    for n in nums {\n        sum += n\n        if sum > 0 {\n         \
    \   index += 1\n            sum -= n\n        }\n    }\n    return nums[index..<nums.count]",
  "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum\n        let bSum = sum\n        if a < b {\n        \
    \    return true\n        } else if a > b {\n            return false\n      \
    \  } else {\n            return aSum < bSum\n        }\n    })\n    return result",
  "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n    }\n    for n in nums {\n        if sum < 0 {\n            sum += n\n\
    \        } else {\n            if sum > 0 {\n                sum += n\n      \
    \      }\n            result.insert(n, at: result.index(of: sum))\n          \
    \  sum -= n\n        }\n    }\n    return result", '    return nums.sorted { $0.digits.sum
    + $1.digits.sum < 0 }', "    var sum = 0\n    var result = [Int]()\n    for n\
    \ in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum - a\n        let bSum = sum - b\n\
    \        return aSum < bSum\n    })\n    return result", "    var result = [Int]()\n\
    \    for num in nums {\n        let digits = num.digits\n        let sum = digits.reduce(0,\
    \ +)\n        if result.contains(sum) {\n            result.sort(by: { $0.digits\
    \ < $1.digits })\n        } else {\n            result.append(num)\n        }\n\
    \    }\n    return result", "    var numsSorted = [Int]()\n    var sum = 0\n \
    \   for n in nums {\n        sum += n\n        numsSorted.append(n)\n    }\n \
    \   var numsSortedCopy = numsSorted.copy()\n    numsSorted.sort()\n    var result\
    \ = [Int]()\n    for n in numsSorted {\n        if numsSortedCopy.contains(n)\
    \ {\n            numsSortedCopy.remove(n)\n            result.insert(sum, n)\n\
    \        } else {\n            result.insert(sum, n)\n        }\n    }\n    return\
    \ result", "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n \
    \       sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a, b)\
    \ -> Bool in\n        let aSum = sum + a\n        let bSum = sum + b\n       \
    \ return aSum < bSum\n    })\n    return result", '    return nums.sorted(by:
    { $0.digits.reduce(0,+) + $1.digits.reduce(0,+) })', '    return nums.sorted {
    $0.digits.sum + $1.digits.sum }', "    var result = [Int]()\n    var sum = 0\n\
    \    for n in nums {\n        sum += n\n    }\n    for n in nums {\n        if\
    \ sum < 0 {\n            sum += n\n        } else {\n            if sum == 0 {\n\
    \                result.append(n)\n            } else {\n                let index\
    \ = nums.firstIndex(where: { $0 + n == sum})\n                result.append(nums[index])\n\
    \            }\n        }\n    }\n    return result", "    var sum = 0\n    var\
    \ result = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sortInPlace()\n    return result", "    var sum = 0\n    var\
    \ result = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        sum = aSum + b\n        return sum < 0\n    })\n\
    \    return result", "    let numsSorted = nums.sorted()\n    var sum = 0\n  \
    \  var index = 0\n    var result = [Int]()\n    while index < nums.count {\n \
    \       sum += nums[index]\n        result.append(nums[index])\n        if sum\
    \ > 0 {\n            sum -= numsSorted[index]\n            index++\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    var sum = 0\n    for\
    \ n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n      \
    \  if aSum < bSum { return true }\n        if aSum > bSum { return false }\n \
    \       return a.compare(to: b) == .orderedAscending\n    })\n    return result",
  "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort { sum - $0 }\n    return\
    \ result", "    return nums.sorted(by: {\n        let sum = $0.reduce(0, +) +\
    \ $1.reduce(0, +)\n        return sum == 0 ? $0.hashValue < $1.hashValue : $0.hashValue\
    \ > $1.hashValue\n    })", "    var result = [Int]()\n    var sum = 0\n    for\
    \ n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum + a\n        let bSum = sum + b\n\
    \        return aSum < bSum\n    })\n    return result", "    var sum = 0\n  \
    \  var result = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: {\n        sum == $0.reduce(0, +) || sum == $1.reduce(0,\
    \ +)\n    })\n    return result", '    return nums.sorted(by: sort_by_digits)',
  "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum - a < sum - b\n    })\n    return result", "    var result\
    \ = [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        let aDiff = aSum - a\n        let bDiff = bSum -\
    \ b\n        if aDiff != bDiff {\n            return aDiff > bDiff\n        }\n\
    \        return a > b\n    })\n    return result", "    var result = [Int]()\n\
    \    var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum - a\n\
    \        let bSum = sum - b\n        return aSum < bSum\n    })\n    return result",
  "    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum +=\
    \ num\n        result.append(num)\n    }\n    result.sort(by: { (a, b) -> Bool\
    \ in\n        let aSum = sum\n        let bSum = sum\n        if a < b {\n   \
    \         return true\n        }\n        if a == b {\n            return a <\
    \ aSum\n        }\n        return false\n    })\n    return result", "    var\
    \ sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum += n\n \
    \       result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n   \
    \     return sum - a < sum - b\n    })\n    return result", "    var result =\
    \ [Int]()\n    for num in nums {\n        let digits = num.digits\n        if\
    \ digits.isEmpty {\n            result.append(num)\n            continue\n   \
    \     }\n        var sum = 0\n        for d in digits {\n            sum += d\n\
    \        }\n        if sum < 0 {\n            sum *= -1\n        }\n        if\
    \ result.count > 0 && result[result.count - 1] == sum {\n            result[result.count\
    \ - 1] += 1\n        } else {\n            result.append(num)\n        }\n   \
    \ }\n    return result", "    var numsSorted = nums\n    if nums.isEmpty {\n \
    \       return numsSorted\n    }\n    var sumOfDigits = nums.reduce(0, +)\n  \
    \  var digitSums = nums.map { $0.digits.reduce(0, +) }\n    var index = 0\n  \
    \  while index < nums.count {\n        if digitSums[index] != sumOfDigits {\n\
    \            sumOfDigits = digitSums[index]\n            numsSorted = numsSorted.sorted()\n\
    \            digitSums = numsSorted.map { $0.digits.reduce(0, +) }\n         \
    \   index = numsSorted.count - 1\n        } else {\n            index += 1\n \
    \       }\n    }\n    return numsSorted", "    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aDigit = a % 10\n        let bDigit = b % 10\n\
    \        return aDigit > bDigit || (aDigit == bDigit && a.compare(b) == .orderedAscending)\n\
    \    })\n    return result", "    var sum = 0\n    var result = [Int]()\n    for\
    \ n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum - a\n        let bSum = sum - b\n\
    \        return aSum < bSum\n    })\n    return result", "    var result = [Int]()\n\
    \    var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        if aSum > bSum {\n            return true\n     \
    \   } else if aSum < bSum {\n            return false\n        } else {\n    \
    \        return a.0 > b.0\n        }\n    })\n    return result", "    var result\
    \ = [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        let aDiff = a - aSum\n        let bDiff = b - bSum\n\
    \        return aDiff < bDiff\n    })\n    return result", '    return nums.sorted
    { $0.digits.sum < $1.digits.sum }', "    var result = [Int]()\n    var sum = 0\n\
    \    for n in nums {\n        sum += n\n    }\n    for n in nums {\n        if\
    \ sum < 0 {\n            sum += n\n        } else {\n            if sum > 0 {\n\
    \                sum += n\n            }\n            if sum == 0 {\n        \
    \        result.append(n)\n            }\n        }\n    }\n    return result",
  "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum - a\n        let bSum = sum - b\n        return aSum <\
    \ bSum\n    })\n    return result", "    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort\
    \ { $0.0 < $1.0 }\n    return result", "    var result = [Int]()\n    var sum\
    \ = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n    }\n\
    \    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum - a\n       \
    \ let bSum = sum - b\n        return aSum < bSum\n    })\n    return result",
  '    return nums.sorted { $0.digits.reduce(0) { $0 + $1 } }', "    var sum = 0\n\
    \    var result = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        if aSum == bSum {\n            return a.compare(to:\
    \ b) == .orderedAscending\n        }\n        return aSum < bSum\n    })\n   \
    \ return result", "    var result = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by: {\
    \ (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n        if\
    \ a < b {\n            return true\n        }\n        if a > b {\n          \
    \  return false\n        }\n        if aSum == bSum {\n            return a.compare(to:\
    \ b) == .orderedAscending\n        }\n        return aSum < bSum\n    })\n   \
    \ return result", "    var sum = 0\n    var result = [Int]()\n    for n in nums\
    \ {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by: {\
    \ (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n        sum\
    \ = aSum + b\n        return sum < 0\n    })\n    return result", "    var numsSorted\
    \ = [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n        numsSorted.append(n)\n\
    \    }\n    \n    var numsSorted2 = numsSorted\n    for n in numsSorted {\n  \
    \      if numsSorted2.contains(sum) {\n            numsSorted2.remove(sum)\n \
    \           numsSorted2.append(n)\n        }\n    }\n    return numsSorted2",
  "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        let aSum = sum - a\n        let bSum = sum - b\n        return aSum <\
    \ bSum\n    })\n    return result", "    guard !nums.isEmpty else { return []\
    \ }\n    var sums = nums.map { $0.digits }\n    sums.sort { $0.0 < $1.0 }\n  \
    \  return sums.map { $0.number }", "    let numsSorted = nums.sorted { $0.digits\
    \ < $1.digits }\n    return numsSorted.map { $0.digits }", "    var sum = 0\n\
    \    var result = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        sum = aSum + b\n        return sum < 0\n    })\n\
    \    return result", "    var result = [Int]()\n    var sum = 0\n    for n in\
    \ nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n      \
    \  sum = aSum + b\n        return sum < 0\n    })\n    return result", "    var\
    \ sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum += n\n \
    \       result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n   \
    \     let aSum = sum + a\n        let bSum = sum + b\n        return aSum < bSum\n\
    \    })\n    return result", "    var numsSorted = nums\n    if nums.isEmpty {\n\
    \        return numsSorted\n    }\n    var sum = 0\n    for n in numsSorted {\n\
    \        sum += n\n    }\n    var digitSums = [Int]()\n    for n in numsSorted\
    \ {\n        digitSums.append(sum % 10)\n        sum /= 10\n    }\n    var result\
    \ = [Int]()\n    var i = 0\n    while i < numsSorted.count {\n        if digitSums[i]\
    \ == 0 {\n            result.append(numsSorted[i])\n            i += 1\n     \
    \       continue\n        }\n        var j = i\n        while digitSums[j] !=\
    \ 0 {\n            j += 1\n        }\n        if j == i {\n            result.append(numsSorted[i])\n\
    \            i += 1\n        } else {\n            var tmp = numsSorted[i]\n \
    \           numsSorted[i] = numsSorted[j]\n            numsSorted[j] = tmp\n \
    \       }\n    }\n    return result", "    var result = [Int]()\n    var sum =\
    \ 0\n    for n in nums {\n        sum += n\n    }\n    for n in nums {\n     \
    \   if sum < 0 {\n            sum += n\n        } else {\n            result.append(n)\n\
    \        }\n    }\n    return result", "    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n      \
    \  if aSum == bSum {\n            return a.compare(to: b) == .orderedAscending\n\
    \        }\n        return aSum < bSum\n    })\n    return result", "    let numsSorted\
    \ = nums.sorted()\n    var sum = 0\n    var index = 0\n    var result = [Int]()\n\
    \    for num in numsSorted {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(index)\n        }\n        sum += num\n        index++\n\
    \    }\n    return result", "    var result = [Int]()\n    var sum = 0\n    for\
    \ num in nums {\n        sum += num\n    }\n    for num in nums {\n        if\
    \ sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n        \
    \    sum += num\n        }\n        result.append(num)\n    }\n    return result",
  "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum - a < sum - b\n    })\n    return result", "    var numsSorted\
    \ = [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n        numsSorted.append(n)\n\
    \    }\n    var index = 0\n    while index < numsSorted.count {\n        let n\
    \ = numsSorted[index]\n        let digitSum = sum % 10\n        if digitSum ==\
    \ 0 {\n            numsSorted.remove(at: index)\n        } else {\n          \
    \  sum += digitSum\n            index += 1\n        }\n    }\n    return numsSorted",
  "    var sum = 0\n    var index = 0\n    for n in nums {\n        sum += n\n   \
    \     if sum > 0 {\n            sum -= nums[index]\n            index++\n    \
    \    }\n    }\n    return nums[index..<nums.count]", "    var sum = 0\n    var\
    \ result = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        sum = aSum + b\n        return sum == aSum\n    })\n\
    \    return result", "    var result = [Int]()\n    for n in nums {\n        let\
    \ digits = n.digits\n        let sum = digits.reduce(0, +)\n        result.append(sum)\n\
    \    }\n    return result.sorted()", '    return nums.sorted { $0.digits.reduce(0,
    +) + $1.digits.reduce(0, +) }', "    var sum = 0\n    var result = [Int]()\n \
    \   for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort\
    \ { sum, n in\n        return sum - n\n    }\n    return result", "    var sum\
    \ = 0\n    var result = [Int]()\n    for num in nums {\n        sum += num\n \
    \       result.append(num)\n    }\n    result.sort(by: { (a, b) -> Bool in\n \
    \       let aSum = sum - a\n        let bSum = sum - b\n        if aSum == bSum\
    \ { return a.compare(b) == .orderedAscending }\n        return aSum > bSum\n \
    \   })\n    return result", "    var sum = 0\n    var result = [Int]()\n    for\
    \ n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sortInPlace()\n\
    \    return result", "    var result = [Int]()\n    var sum = 0\n    for num in\
    \ nums {\n        sum += num\n    }\n    for num in nums {\n        if sum < 0\
    \ {\n            sum += 10\n        }\n        if sum > 0 {\n            sum +=\
    \ num\n        }\n        result.append(num)\n    }\n    return result", "   \
    \ var result = [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n\
    \        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n  \
    \      let aSum = sum.truncatingRemainder(dividingBy: 10)\n        let bSum =\
    \ sum.truncatingRemainder(dividingBy: 10)\n        return aSum == bSum\n    })\n\
    \    return result", "    var result = [Int]()\n    var sum = 0\n    for n in\
    \ nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum - a\n        let bSum = sum - b\n\
    \        return aSum < bSum\n    })\n    return result", "    var numsSorted =\
    \ [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n        numsSorted.append(n)\n\
    \    }\n    numsSorted.sort()\n    return numsSorted", "    let digits = nums.map({\
    \ String($0) })\n    let digitSums = digits.map({ Int($0.reduce(0) { $0 + Int(String($0).prefix(while:\
    \ { $0 != \"-\" }))! }) })\n    let sortedDigitSums = digitSums.sorted()\n   \
    \ return nums.map { Int(String($0)) }\n        .sorted()\n        .map { Int(String($0))\
    \ }\n        .map { Int(String($0)) }\n        .map { Int(String($0)) }\n    \
    \    .map { Int(String($0)) }\n        .map { Int(String($0)) }\n        .map\
    \ { Int(String($0)) }\n        .map { Int(String($0)) }\n        .map { Int(String($0))\
    \ }\n        .map { Int(String($0)) }\n        .map { Int(String($0)) }\n    \
    \    .map { Int(String($0)) }\n        .map { Int(String($0)) }\n        .map\
    \ { Int(String($0)) }\n        .map { Int(String($0)) }\n        .map { Int(String($0))\
    \ }\n        .map { Int(String($0)) }\n        .map { Int(String($0)) }\n    \
    \    .map { Int(String($0)) }\n        .map { Int(String($0)) }\n        .map\
    \ { Int(String($0)) }\n        .map { Int(String($0)) }\n        .map { Int(String($0))\
    \ }\n        .map { Int(String($0)) }\n        .map { Int(String($0)) }\n    \
    \    .map { Int(String($0)) }\n        .map { Int(String($0)) }\n        .map\
    \ { Int(String($0)) }\n        .map { Int(String($0)) }\n        .map { Int(String($0))\
    \ }\n        .map { Int(String($0)) }\n        .map { Int(String($0)) }\n    \
    \    .map { Int(String($0)) }\n        .map { Int(String($0)) }\n        .map\
    \ { Int(String($0)) }\n        .map { Int(String($0)) }\n        .map { Int(String($0))\
    \ }\n        .map { Int(String($0)) }\n        .map { Int(String($0)) }\n    \
    \    .map { Int(String($0)) }\n        .map { Int(String($0)) }\n        .map\
    \ { Int(String($0)) }\n        .map { Int(String($0)) }\n        .map { Int(String($0))\
    \ }\n        .map { Int(String($0)) }\n        .map { Int(String($0)) }\n    \
    \    .map { Int(String($0)) }\n        .map { Int(String($0)) }\n        .map\
    \ { Int(String($0)) }\n        .map { Int(String($0)) }\n        .", "    var\
    \ sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum += n\n \
    \       result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n   \
    \     let aSum = sum + a\n        let bSum = sum + b\n        return aSum < bSum\n\
    \    })\n    return result", "    var result = [Int]()\n    var sum = 0\n    for\
    \ n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum.squareRoot()\n        let bSum =\
    \ sum.squareRoot()\n        let aDiff = aSum - a\n        let bDiff = bSum - b\n\
    \        if aDiff < bDiff {\n            return true\n        }\n        return\
    \ false\n    })\n    return result", "    var result = [Int]()\n    var sum =\
    \ 0\n    for n in nums {\n        sum += n\n        result.append(n)\n    }\n\
    \    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum + a\n       \
    \ let bSum = sum + b\n        return aSum < bSum\n    })\n    return result",
  "    var result = [Int]()\n    for n in nums {\n        let digits = n.digits\n\
    \        if digits.count > 0 {\n            let sum = digits.reduce(0, +)\n  \
    \          if result.contains(where: { $0 == sum }) {\n                let index\
    \ = result.index(of: sum)!\n                result[index] = n\n            } else\
    \ {\n                result.append(n)\n            }\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n \
    \       sum += n\n    }\n    for n in nums {\n        if sum < 0 {\n         \
    \   sum += n\n        } else {\n            sum += n % 10\n        }\n       \
    \ result.append(n)\n    }\n    return result", "    var sum = 0\n    var result\
    \ = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aDigit = a % 10\n\
    \        let bDigit = b % 10\n        return aDigit < bDigit || (aDigit == bDigit\
    \ && a.compareTo(b) == .orderedAscending)\n    })\n    return result", "    guard\
    \ !nums.isEmpty else { return [] }\n    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort\
    \ { $0.0 < $1.0 }\n    return result", "    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a: Int, b: Int) -> Bool in\n        let aSum = Int(truncating: Double(a)\
    \ / 10)\n        let bSum = Int(truncating: Double(b) / 10)\n        return aSum\
    \ < bSum || (aSum == bSum && a.compareTo(b) == .orderedAscending)\n    })\n  \
    \  return result", "    var numsSorted = [Int]()\n    var sum = 0\n    for n in\
    \ nums {\n        sum += n\n        numsSorted.append(n)\n    }\n    var numsSortedCopy\
    \ = numsSorted.copy()\n    \n    var i = 0\n    var j = 0\n    var k = 0\n   \
    \ while i < numsSorted.count {\n        j = k\n        while j < numsSorted.count\
    \ && numsSorted[j] == sum {\n            j += 1\n        }\n        if j == numsSorted.count\
    \ {\n            numsSortedCopy.append(numsSorted[i])\n            i += 1\n  \
    \      } else {\n            numsSortedCopy.append(numsSorted[j])\n          \
    \  k += 1\n        }\n    }\n    return numsSortedCopy", "    var sum = 0\n  \
    \  var index = 0\n    for n in nums {\n        sum += n\n        if sum > 0 {\n\
    \            index += 1\n        }\n    }\n    return nums[index..<nums.count]",
  "    let numsSorted = nums.sorted()\n    var sum = 0\n    var index = 0\n    var\
    \ result = [Int]()\n    for num in numsSorted {\n        sum += num\n        if\
    \ sum > 0 {\n            result.append(index)\n        }\n        index += 1\n\
    \        sum -= num\n    }\n    return result", "    var numsSorted = [Int]()\n\
    \    var sum = 0\n    for n in nums {\n        sum += n\n        numsSorted.append(n)\n\
    \    }\n    \n    var numsSorted2 = numsSorted\n    \n    for n in numsSorted\
    \ {\n        var index = numsSorted2.index(of: n)\n        if index != nil {\n\
    \            numsSorted2.remove(at: index!)\n            numsSorted2.insert(n,\
    \ at: 0)\n        }\n    }\n    \n    return numsSorted2", "    var sum = 0\n\
    \    var result = [Int]()\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort { sum, n in\n        return sum - n\n    }\n    return\
    \ result", "    var result = [Int]()\n    var sum = 0\n    for n in nums {\n \
    \       sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a, b)\
    \ -> Bool in\n        let aSum = sum\n        let bSum = sum\n        if aSum\
    \ == bSum { return a.compare(to: b) == .orderedAscending }\n        if aSum >\
    \ bSum { return true }\n        if aSum < bSum { return false }\n        return\
    \ a.compare(to: b) == .orderedDescending\n    })\n    return result", "    var\
    \ sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum += n\n \
    \       result.append(n)\n    }\n    result.sort(by: { (a: Int, b: Int) -> Bool\
    \ in\n        return sum - a < sum - b\n    })\n    return result", "    var result\
    \ = [Int]()\n    var sum = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        if a < b {\n            return true\n        }\n\
    \        if a > b {\n            return false\n        }\n        if aSum < bSum\
    \ {\n            return true\n        }\n        if aSum > bSum {\n          \
    \  return false\n        }\n        return false\n    })\n    return result",
  "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n        sum +=\
    \ n\n        result.append(n)\n    }\n    result.sort(by: { (a, b) -> Bool in\n\
    \        return sum > b\n    })\n    return result", "    var result = [Int]()\n\
    \    var sum = 0\n    for num in nums {\n        sum += num\n        if sum >\
    \ 0 {\n            result.append(num)\n            sum -= num\n        }\n   \
    \ }\n    return result", "    var result = [Int]()\n    var sum = 0\n    for n\
    \ in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum - a\n        let bSum = sum - b\n\
    \        if aSum < bSum { return true }\n        if aSum > bSum { return false\
    \ }\n        return a.compare(to: b) == .orderedAscending\n    })\n    return\
    \ result", "    var sum = 0\n    var result = [Int]()\n    for n in nums {\n \
    \       sum += n\n        result.append(n)\n    }\n    result.sort { $0.0 < $1.0\
    \ }\n    return result", "    var sum = 0\n    var result = [Int]()\n    for n\
    \ in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort\
    \ { sum - $0 }\n    return result"]
stop_tokens:
- "\n}"
