name: HumanEval_18_how_many_times
language: swift
prompt: "\n/// Find how many times a given substring can be found in the original\
  \ string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring:\
  \ \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n///\
  \ 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc how_many_times(string:\
  \ String, substring: String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(how_many_times(string: \"\", substring:\
  \ \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") ==\
  \ 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
  \ \"john doe\", substring: \"john\") == 1)"
completions: ["    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return 1\n    }\n    var count = 0\n    var startIndex =\
    \ 0\n    var endIndex = 0\n    while startIndex < string.count {\n        endIndex\
    \ = string.index(substring, startIndex)\n        if endIndex == startIndex {\n\
    \            count += 1\n            startIndex = endIndex + 1\n        } else\
    \ {\n            count += 1\n            startIndex = endIndex + 1\n        }\n\
    \    }\n    return count", "    if string == \"\" || substring == \"\" {\n   \
    \     return 0\n    }\n    var count = 0\n    var i = 0\n    var j = 0\n    while\
    \ i < string.count {\n        if string[i] == substring[j] {\n            count\
    \ += 1\n            i += 1\n            j += 1\n            if j == substring.count\
    \ {\n                j = 0\n            }\n        } else {\n            i = 0\n\
    \            j += 1\n            if j == substring.count {\n                j\
    \ = 0\n            }\n        }\n    }\n    return count", "    if string == \"\
    \" {\n        return 0\n    }\n    if substring == \"\" {\n        return 1\n\
    \    }\n    var count = 0\n    var start = 0\n    var end = string.count\n   \
    \ while start < end {\n        start = string.startIndex.advanced(by: start)\n\
    \        end = string.endIndex.advanced(by: end)\n        if string.substring(from:\
    \ start, length: substring.length) == substring {\n            count += 1\n  \
    \      }\n    }\n    return count", "    var count = 0\n    for index in 0..<string.characters.count\
    \ {\n        if string.substring(from: index).contains(substring) {\n        \
    \    count += 1\n        }\n    }\n    return count", "    if string == \"\" {\n\
    \        return 0\n    }\n    if substring == \"\" {\n        return countOccurrences(string,\
    \ \"\")\n    }\n    var count = 0\n    var i = 0\n    var j = string.count\n \
    \   var k = substring.count\n    while i < j && k < string.count {\n        if\
    \ string[i] == substring[k] {\n            count = count + 1\n            i =\
    \ i + 1\n            k = k + 1\n        }\n        else {\n            i = i +\
    \ 1\n        }\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return count(string)\n    }\n\
    \    var count = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var last\
    \ = 0\n    var found = false\n    for i < string.count {\n        if string[i]\
    \ == substring[0] {\n            found = true\n            j = i\n           \
    \ for k < substring.count {\n                if string[i+k] == substring[k] {\n\
    \                    found = true\n                    last = k\n            \
    \        k += last\n                } else {\n                    found = false\n\
    \                }\n            }\n            if found {\n                count\
    \ += last - j\n                i += last - j\n            } else {\n         \
    \       count += 1\n                i += 1\n            }\n        } else {\n\
    \            count += 1\n            i += 1\n        }\n    }\n    return count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return count(string)\n    }\n    var count = 0\n    var start = 0\n \
    \   var end = count(string)\n    while start < end {\n        if string[start]\
    \ == substring[0] {\n            count += 1\n            start += 1\n        \
    \    if start == end {\n                return count\n            }\n        }\n\
    \        if string[end] == substring[0] {\n            count -= 1\n          \
    \  end -= 1\n            if start == end {\n                return count\n   \
    \         }\n        }\n        start += 1\n        end -= 1\n    }\n    return\
    \ count", "    if string == \"\" || substring == \"\" {\n        return 0\n  \
    \  }\n\n    var count = 0\n    var startIndex = 0\n    var endIndex = 0\n    var\
    \ lastCharIndex = 0\n\n    for char in string {\n        if char == substring[lastCharIndex]\
    \ {\n            count += 1\n            lastCharIndex += 1\n        } else {\n\
    \            if lastCharIndex != 0 {\n                endIndex = startIndex +\
    \ lastCharIndex\n                count += endIndex - startIndex\n            \
    \    startIndex = endIndex\n            }\n            lastCharIndex = 0\n   \
    \         startIndex = endIndex\n            endIndex += 1\n        }\n    }\n\
    \n    if lastCharIndex != 0 {\n        endIndex = startIndex + lastCharIndex\n\
    \        count += endIndex - startIndex\n    }\n\n    return count", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ countOccurrences(string, \"\")\n    }\n    var count = 0\n    var i = 0\n  \
    \  var j = string.startIndex\n    var k = string.endIndex\n    while i < j {\n\
    \        if string[i] == substring[0] {\n            count = countOccurrences(string,\
    \ substring)\n            i += substring.length - 1\n        } else {\n      \
    \      i += 1\n        }\n    }\n    return count", "    if string == \"\" ||\
    \ substring == \"\" {\n        return 0\n    }\n\n    var count = 0\n    var start\
    \ = 0\n    var end = string.count\n\n    while start < end {\n        start =\
    \ string.index(substring, start) + 1\n        end = string.index(substring, end)\
    \ + end\n        count += 1\n    }\n\n    return count", "    if string == \"\"\
    \ {\n        return 0\n    }\n    if substring == \"\" {\n        return string.count\n\
    \    }\n    var count = 0\n    var i = 0\n    var j = string.count\n    while\
    \ i < j {\n        if string[i] == substring[0] {\n            count += 1\n  \
    \          i += substring.length - 1\n        } else if string[i] == substring[1]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[2] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[3] {\n      \
    \      count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[4] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[5] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[6]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[7] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[8] {\n      \
    \      count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[9] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[10] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[11]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[12] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[13] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[14] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[15] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[16]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[17] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[18] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[19] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[20] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[21]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[22] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[23] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[24] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[25] {\n            count += 1",
  "    var count = 0\n    for s in string.split(substring) {\n        if s == substring\
    \ {\n            count += 1\n        }\n    }\n    return count", "    let start\
    \ = string.startIndex.advancedBy(substring.startIndex)\n    let end = string.endIndex.advancedBy(substring.endIndex)\n\
    \    return string.distance(from: start, to: end) + 1", "    if string == \"\"\
    \ {\n        return 0\n    }\n    if substring == \"\" {\n        return count(string)\n\
    \    }\n    var count = 0\n    var i = 0\n    var j = string.startIndex\n    while\
    \ i < string.endIndex {\n        if string[i] == substring[0] {\n            count\
    \ += 1\n            i += 1\n            if i == string.endIndex {\n          \
    \      j = string.endIndex\n            } else {\n                i += 1\n   \
    \         }\n        } else {\n            count = 0\n            i += 1\n   \
    \     }\n    }\n    return count", "    if string == \"\" {\n        return 0\n\
    \    }\n    if substring == \"\" {\n        return 1\n    }\n    var count = 0\n\
    \    var i = 0\n    var j = 0\n    var k = string.startIndex\n    while i < string.endIndex\
    \ {\n        j = string.startIndex\n        while j < string.endIndex {\n    \
    \        if string[j] != substring[k] {\n                break\n            }\n\
    \            j += 1\n            k += 1\n        }\n        if j == string.endIndex\
    \ {\n            count += 1\n        }\n        i += 1\n    }\n    return count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return count(string)\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = string.count\n    while i < j {\n        if string[i] == substring[0] {\n\
    \            count += 1\n            i += substring.length - 1\n        } else\
    \ if string[i] == substring[1] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[2] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[3]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[4] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[5] {\n      \
    \      count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[6] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[7] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[8]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[9] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[10] {\n     \
    \       count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[11] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[12] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[13]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[14] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[15] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[16] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[17] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[18]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[19] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[20] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[21] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[22] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[23]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[24] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[25] {\n  \
    \          count += 1", '    return count_overlapping_cases(string, substring)',
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return string.count\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t =\
    \ 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n\
    \    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n \
    \   var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n  \
    \  var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n   \
    \ var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var\
    \ t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y\
    \ = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d =\
    \ 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var\
    \ d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i\
    \ = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n =\
    \ 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n\
    \    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n \
    \   var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n  \
    \  var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n   \
    \ var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var\
    \ n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s\
    \ = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x =\
    \ 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ countOccurrences(string, \"\", true)\n    }\n    var count = 0\n    var last\
    \ = 0\n    for index in 0..<string.characters.count {\n        if string.substring(index,\
    \ 1) == substring {\n            count += 1\n            last = index\n      \
    \  }\n    }\n    if last < string.characters.count {\n        count += countOccurrences(string,\
    \ string.substring(last, string.characters.count), true)\n    }\n    return count",
  "    let index = string.index(of: substring)\n    return index != nil ? string.distance(from:\
    \ string.startIndex, to: index!.offsetByIndex(of: substring)) : 0", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ string.count\n    }\n    var count = 0\n    var i = 0\n    var j = string.count\n\
    \    while i < j {\n        if string[i] == substring[0] {\n            count\
    \ += how_many_times(string: String(string[i..<j]), substring: substring[1:])\n\
    \            i += substring.length - 1\n        } else {\n            i += 1\n\
    \        }\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return countOccurrences(string,\
    \ \"\", true)\n    }\n    var count = 0\n    var startIndex = 0\n    var endIndex\
    \ = string.characters.count\n    var substringIndex = string.characters.startIndex\n\
    \    while substringIndex < endIndex {\n        if string.characters.contains(substringIndex,\
    \ substringIndex) {\n            count += 1\n        }\n        substringIndex\
    \ += 1\n    }\n    return count", "    if string == \"\" {\n        return 0\n\
    \    }\n    if substring == \"\" {\n        return 1\n    }\n    var count = 0\n\
    \    var i = 0\n    var j = string.count\n    while i < j {\n        if string[i]\
    \ == substring[0] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[1] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[2]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[3] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[4] {\n      \
    \      count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[5] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[6] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[7]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[8] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[9] {\n      \
    \      count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[10] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[11] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[12]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[13] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[14] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[15] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[16] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[17]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[18] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[19] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[20] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[21] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[22]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[23] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[24] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[25] {\n            count += 1\n            ", "    if\
    \ string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n    \
    \    return countOccurrences(string, \"\", true)\n    }\n    var count = 0\n \
    \   var startIndex = 0\n    var endIndex = string.count\n    while startIndex\
    \ < endIndex {\n        let index = string.index(startIndex, offsetBy: substring.count)\n\
    \        if index == startIndex {\n            count += 1\n            startIndex\
    \ += substring.count\n        } else if index == endIndex {\n            count\
    \ += 1\n            endIndex -= substring.count\n        } else {\n          \
    \  count += 1\n            startIndex = index\n            endIndex = index\n\
    \        }\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return count(string)\n    }\n\
    \    var count = 0\n    var i = 0\n    var j = string.startIndex\n    while i\
    \ < string.endIndex {\n        if string[i] == substring[0] {\n            count\
    \ += 1\n            i += substring.length - 1\n        } else if string[i] ==\
    \ substring[1] {\n            count += 1\n            i += substring.length -\
    \ 1\n        } else if string[i] == substring[2] {\n            count += 1\n \
    \           i += substring.length - 1\n        } else if string[i] == substring[3]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[4] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[5] {\n      \
    \      count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[6] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[7] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[8]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[9] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[10] {\n     \
    \       count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[11] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[12] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[13]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[14] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[15] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[16] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[17] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[18]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[19] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[20] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[21] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[22] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[23]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[24] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[25] {", " \
    \   if string == \"\" || substring == \"\" {\n        return 0\n    }\n    var\
    \ count = 0\n    var startIndex = 0\n    var endIndex = 0\n    while startIndex\
    \ < string.count {\n        endIndex = string.index(substring, startIndex)\n \
    \       if endIndex == startIndex {\n            count += 1\n            startIndex\
    \ = string.index(substring, startIndex) + 1\n        } else {\n            count\
    \ += 1\n            startIndex = endIndex + 1\n        }\n    }\n    return count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return 1\n    }\n    if string.hasPrefix(substring) {\n        return\
    \ 1 + how_many_times(string.dropFirst(substring.length), substring)\n    }\n \
    \   if string.hasSuffix(substring) {\n        return 1 + how_many_times(string,\
    \ substring.dropLast(substring.length))\n    }\n    return 0", "    if string\
    \ == \"\" || substring == \"\" {\n        return 0\n    }\n    var count = 0\n\
    \    var start = 0\n    var end = string.characters.count\n    while start < end\
    \ {\n        let index = string.characters.index(of: substring, options: .caseInsensitive)\n\
    \        if index == nil {\n            break\n        }\n        count += 1\n\
    \        start = index! + 1\n    }\n    return count", "    let start = string.startIndex.advancedBy(substring.startIndex.distanceTo(string.startIndex))\n\
    \    let end = string.endIndex.advancedBy(substring.startIndex.distanceTo(string.startIndex))\n\
    \    let range = start..<end\n    return range.count", "    var count = 0\n  \
    \  for c in string.unicodeScalars {\n        if c == substring {\n           \
    \ count += 1\n        }\n    }\n    return count", "    if string == \"\" {\n\
    \        return 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n\
    \    if string.hasPrefix(substring) {\n        return 1 + how_many_times(string[string.startIndex..<string.endIndex],\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string[string.endIndex..<string.startIndex], substring)\n   \
    \ }\n    return 0", "    if string == \"\" {\n        return 0\n    }\n    if\
    \ substring == \"\" {\n        return 1\n    }\n    var count = 0\n    var i =\
    \ 0\n    var j = string.characters.count\n    var k = substring.characters.count\n\
    \    while i < j {\n        if string.characters[i] == substring.characters[k]\
    \ {\n            count += 1\n            i += k\n            k -= 1\n        }\n\
    \        i += 1\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n    var count\
    \ = 0\n    var i = 0\n    var j = 0\n    for i < string.count {\n        if string[i]\
    \ == substring[j] {\n            count += 1\n            i += 1\n            j\
    \ += 1\n            if j == substring.count {\n                j = 0\n       \
    \     }\n        } else {\n            j = 0\n        }\n    }\n    return count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return 1\n    }\n    if string.hasPrefix(substring) {\n        return\
    \ 1 + how_many_times(string[string.startIndex..<string.endIndex], substring)\n\
    \    }\n    if string.hasSuffix(substring) {\n        return 1 + how_many_times(string[string.endIndex..<string.startIndex],\
    \ substring)\n    }\n    if string.hasPrefix(substring) {\n        return 1 +\
    \ how_many_times(string[string.startIndex..<string.endIndex], substring)\n   \
    \ }\n    if string.hasSuffix(substring) {\n        return 1 + how_many_times(string[string.endIndex..<string.startIndex],\
    \ substring)\n    }\n    if string.hasPrefix(substring) {\n        return 1 +\
    \ how_many_times(string[string.startIndex..<string.endIndex], substring)\n   \
    \ }\n    if string.hasSuffix(substring) {\n        return 1 + how_many_times(string[string.endIndex..<string.startIndex],\
    \ substring)\n    }\n    if string.hasPrefix(substring) {\n        return 1 +\
    \ how_many_times(string[string.startIndex..<string.endIndex], substring)\n   \
    \ }\n    if string.hasSuffix(substring) {\n        return 1 + how_many_times(string[string.endIndex..<string.startIndex],\
    \ substring)\n    }\n    if string.hasPrefix(substring) {\n        return 1 +\
    \ how_many_times(string[string.startIndex..<string.endIndex], substring)\n   \
    \ }\n    if string.hasSuffix(substring) {\n        return 1 + how_many_times(string[string.endIndex..<string.startIndex],\
    \ substring)\n    }\n    if string.hasPrefix(substring) {\n        return 1 +\
    \ how_many_times(string[string.startIndex..<string.endIndex], substring)\n   \
    \ }\n    if string.hasSuffix(substring) {\n        return 1 + how_many_times(string[string.endIndex..<string.startIndex],\
    \ substring)\n    }\n    if string.hasPrefix(substring) {\n        return 1 +\
    \ how_many_times(string[string.startIndex..<string.endIndex], substring)\n   \
    \ }\n    if string.hasSuffix(substring) {\n        return 1 + how_many_times(string[string.endIndex..<string.startIndex],\
    \ substring)\n    }\n    if string.hasPrefix(substring) {\n        return 1 +\
    \ how_many_times(string[string.startIndex..<string.endIndex], substring)\n   \
    \ }\n    if string.hasSuffix(substring) {\n        return 1 + ho", '    return
    count(string, substring, true)', "    if string == \"\" {\n        return 0\n\
    \    }\n    if substring == \"\" {\n        return 1\n    }\n    var count = 0\n\
    \    var i = 0\n    var j = string.count\n    while i < j {\n        if string[i]\
    \ == substring[0] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[1] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else {\n            i += 1\n\
    \        }\n    }\n    return count", "    if string == \"\" || substring == \"\
    \" {\n        return 0\n    }\n    var count = 0\n    var last = 0\n    for index\
    \ in 0..<string.characters.count {\n        if string.substring(index, 1) == substring\
    \ {\n            count += 1\n            if last < index {\n                last\
    \ = index\n            }\n        }\n    }\n    return count", "    if string\
    \ == \"\" || substring == \"\" {\n        return 0\n    }\n    var count = 0\n\
    \    var start = 0\n    var end = string.count\n    while start < end {\n    \
    \    let index = string.index(start, offsetBy: substring.count)\n        if index\
    \ == nil {\n            break\n        }\n        start = index!.advanced(by:\
    \ substring.count)\n        count += 1\n    }\n    return count", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ count(string)\n    }\n    var count = 0\n    var i = 0\n    var j = string.characters.count\n\
    \    while i < j {\n        if string.characters[i] != substring.characters[j]\
    \ {\n            count += 1\n            i = j\n        } else {\n           \
    \ i += 1\n            j += 1\n        }\n    }\n    return count", "    let substrings\
    \ = substring.characters\n    var count = 0\n    for char in string.characters\
    \ {\n        if substrings.contains(char) {\n            count += 1\n        }\n\
    \    }\n    return count", "    if string == \"\" {\n        return 0\n    }\n\
    \    if substring == \"\" {\n        return 1\n    }\n    if string.hasPrefix(substring)\
    \ {\n        return 1 + how_many_times(string.dropFirst(substring.length), substring)\n\
    \    }\n    if string.hasSuffix(substring) {\n        return 1 + how_many_times(string.dropLast(substring.length),\
    \ substring)\n    }\n    return 0", '    return string.countSubstrings(substring)',
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return count(string)\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = string.startIndex\n    while i < string.endIndex {\n    \
    \    if string[k] == substring[j] {\n            count += 1\n            i +=\
    \ 1\n            j += 1\n            if j == substring.endIndex {\n          \
    \      j = 0\n                k += 1\n            }\n        } else {\n      \
    \      j = 0\n            k += 1\n        }\n    }\n    return count", "    var\
    \ count = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var\
    \ m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r\
    \ = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w =\
    \ 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var aa = 0\n    var ab =\
    \ 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n    var af = 0\n    var ag\
    \ = 0\n    var ah = 0\n    var ai = 0\n    var aj = 0\n    var ak = 0\n    var\
    \ al = 0\n    var am = 0\n    var an = 0\n    var ao = 0\n    var ap = 0\n   \
    \ var aq = 0\n    var ar = 0\n    var as = 0\n    var at = 0\n    var au = 0\n\
    \    var av = 0\n    var aw = 0\n    var ax = 0\n    var ay = 0\n    var az =\
    \ 0\n    var ba = 0\n    var bb = 0\n    var bc = 0\n    var bd = 0\n    var be\
    \ = 0\n    var bf = 0\n    var bg = 0\n    var bh = 0\n    var bi = 0\n    var\
    \ bj = 0\n    var bk = 0\n    var bl = 0\n    var bm = 0\n    var bn = 0\n   \
    \ var bo = 0\n    var bp = 0\n    var bq = 0\n    var br = 0\n    var bs = 0\n\
    \    var bt = 0\n    var bu = 0\n    var bv = 0\n    var bw = 0\n    var bx =\
    \ 0\n    var by = 0\n    var bz = 0\n    var ca = 0\n    var cb = 0\n    var cc\
    \ = 0\n    var cd = 0\n    var ce = 0\n    var cf = 0\n    var cg = 0\n    var\
    \ ch = 0\n    var ci = 0\n    var cj = 0\n    var ck = 0\n    var cl = 0\n   \
    \ var cm = 0\n    var cn = 0\n    var co = 0\n    var cp = 0\n    var cq = 0\n\
    \    var cr = 0\n    var cs = 0\n    var ct = 0\n    var cu = 0\n    var cv =\
    \ 0\n    var cw = 0\n    var cx = 0\n    var cy = 0\n    var cz = 0\n    var da\
    \ = 0\n    var db = 0\n    var dc = 0\n    var dd = 0\n    var de = 0\n    var\
    \ df = 0\n    var dg = 0\n    var dh = 0\n    var di = 0\n    var dj = 0\n   \
    \ var dk = 0\n    var dl = 0\n    var dm = 0\n    var dn = 0\n    var do = 0\n\
    \    var dp = 0\n    var dq = 0\n    var dr = 0\n    var ds = 0\n    var dt =\
    \ 0\n    var du = 0\n    var dv = 0\n    var dw = 0\n    var dx = 0\n    var dy\
    \ = 0\n    var dz = 0\n    var ea = 0\n    var eb = 0\n    var ec = 0\n    var\
    \ ed = 0\n    var ee = 0", "    let index = string.firstIndex(of: substring)\n\
    \    if index == nil {\n        return 0\n    }\n    let start = index!\n    let\
    \ end = string.index(start, offsetBy: substring.count)\n    return string.distance(from:\
    \ start, to: end) + 1", "    var count = 0\n    var i = 0\n    var j = string.characters.count\n\
    \    var k = substring.characters.count\n    while i < j {\n        if string[i]\
    \ != substring[k] {\n            count = count + 1\n        }\n        i += 1\n\
    \        k += 1\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return count(string)\n    }\n\
    \    var count = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n\
    \    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n \
    \   var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n  \
    \  var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var aa = 0\n  \
    \  var ab = 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n    var af = 0\n\
    \    var ag = 0\n    var ah = 0\n    var ai = 0\n    var aj = 0\n    var ak =\
    \ 0\n    var al = 0\n    var am = 0\n    var an = 0\n    var ao = 0\n    var ap\
    \ = 0\n    var aq = 0\n    var ar = 0\n    var as = 0\n    var at = 0\n    var\
    \ au = 0\n    var av = 0\n    var aw = 0\n    var ax = 0\n    var ay = 0\n   \
    \ var az = 0\n    var ba = 0\n    var bb = 0\n    var bc = 0\n    var bd = 0\n\
    \    var be = 0\n    var bf = 0\n    var bg = 0\n    var bh = 0\n    var bi =\
    \ 0\n    var bj = 0\n    var bk = 0\n    var bl = 0\n    var bm = 0\n    var bn\
    \ = 0\n    var bo = 0\n    var bp = 0\n    var bq = 0\n    var br = 0\n    var\
    \ bs = 0\n    var bt = 0\n    var bu = 0\n    var bv = 0\n    var bw = 0\n   \
    \ var bx = 0\n    var by = 0\n    var bz = 0\n    var ca = 0\n    var cb = 0\n\
    \    var cc = 0\n    var cd = 0\n    var ce = 0\n    var cf = 0\n    var cg =\
    \ 0\n    var ch = 0\n    var ci = 0\n    var cj = 0\n    var ck = 0\n    var cl\
    \ = 0\n    var cm = 0\n    var cn = 0\n    var co = 0\n    var cp = 0\n    var\
    \ cq = 0\n    var cr = 0\n    var cs = 0\n    var ct = 0\n    var cu = 0\n   \
    \ var cv = 0\n    var cw = 0\n    var cx = 0\n    var cy = 0\n    var cz = 0\n\
    \    var da = 0\n    var db = 0\n    var dc = 0\n    var dd = 0\n    var de =\
    \ 0\n    var df = 0\n    var dg = 0\n    var dh = 0\n    var di = 0\n    var dj\
    \ = 0\n    var dk = 0\n    var dl = 0\n    var dm = 0\n    var dn = 0\n    var\
    \ do = 0\n    var dp = 0\n    var dq = 0\n    var dr = 0\n    var ds = 0\n   \
    \ var dt = 0\n    var du = 0\n    var dv = 0\n    var dw = 0\n    var dx = 0\n\
    \    var dy = 0\n", "    if string == \"\" || substring == \"\" {\n        return\
    \ 0\n    }\n    var count = 0\n    var i = 0\n    var j = 0\n    var k = 0\n \
    \   var lastCharIndex = 0\n    var lastChar = string[0]\n    var lastSubstringIndex\
    \ = 0\n    var lastSubstring = substring[0]\n    for i = 0; i < len(string); i++\
    \ {\n        if string[i] == lastChar {\n            count++\n            lastCharIndex\
    \ = i\n        }\n        if substring[j] == lastSubstring {\n            lastSubstringIndex\
    \ = j\n            j++\n        }\n        if j == len(substring) {\n        \
    \    count++\n            lastSubstringIndex = i\n            j = 0\n        }\n\
    \    }\n    if lastCharIndex == 0 {\n        return count\n    }\n    if lastSubstringIndex\
    \ == 0 {\n        return count + 1\n    }\n    if lastCharIndex < lastSubstringIndex\
    \ {\n        return count + how_many_times(string[lastCharIndex..], substring[lastSubstringIndex..])\n\
    \    }\n    return count + how_many_times(string[lastCharIndex..], substring[lastSubstringIndex..])\
    \ + 1", "    if string == \"\" {\n        return 0\n    }\n    if substring ==\
    \ \"\" {\n        return countOccurrences(string, \"\")\n    }\n    var count\
    \ = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = string.characters.count\n\
    \    var m = substring.characters.count\n    for (i; i < l; i++ {\n        if\
    \ string[i] == substring[j] {\n            count++\n            j = j + 1\n  \
    \          if j == m {\n                j = 0\n                k = k + 1\n   \
    \         }\n        }\n    }\n    return count", "    if string == \"\" || substring\
    \ == \"\" {\n        return 0\n    }\n\n    var count = 0\n    var start = 0\n\
    \    var end = string.count\n\n    while start < end {\n        let index = string.index(start,\
    \ offsetBy: substring.count)\n        if index == nil {\n            break\n \
    \       }\n        start = index!\n        count += 1\n    }\n\n    return count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return 1\n    }\n    var count = 0\n    var i = 0\n    var j = 0\n  \
    \  var k = string.startIndex\n    while i < string.endIndex {\n        if string[k]\
    \ == substring[j] {\n            count += 1\n            j += 1\n            if\
    \ j == substring.count {\n                j = 0\n                k += 1\n    \
    \        }\n        } else {\n            j = 0\n            k += 1\n        }\n\
    \        i += 1\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return count(string)\n    }\n\
    \    var count = 0\n    var start = 0\n    var end = count(string)\n    while\
    \ start < end {\n        start = string.index(substring, start) + 1\n        end\
    \ = string.index(substring, end) + 1\n        count += 1\n    }\n    return count",
  "    if string == \"\" || substring == \"\" {\n        return 0\n    }\n    var\
    \ count = 0\n    var last = 0\n    for index in 0..<string.characters.count {\n\
    \        if string.characters[index] == substring.characters[index] {\n      \
    \      count += 1\n        } else {\n            if count > 0 {\n            \
    \    count -= 1\n            }\n            last = index\n        }\n    }\n \
    \   return count + last - string.characters.count", "    if string == \"\" {\n\
    \        return 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n\
    \    var count = 0\n    var i = 0\n    var j = string.characters.count\n    var\
    \ k = substring.characters.count\n    while i < j {\n        if string[i] == substring[k]\
    \ {\n            count += 1\n            i += 1\n            k += 1\n        \
    \    if k == substring.characters.count {\n                k = 0\n           \
    \ }\n        } else {\n            i += 1\n        }\n    }\n    return count",
  "    var count = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = string.characters.count\n\
    \    var m = substring.characters.count\n    while i < l && j < m {\n        if\
    \ string[i] != substring[j] {\n            count += 1\n            i += 1\n  \
    \          j += 1\n        } else {\n            i += 1\n            j += 1\n\
    \        }\n    }\n    while i < l {\n        count += 1\n        i += 1\n   \
    \ }\n    while j < m {\n        count += 1\n        j += 1\n    }\n    return\
    \ count", "    if string == \"\" || substring == \"\" {\n        return 0\n  \
    \  }\n    var count = 0\n    var i = 0\n    var j = string.characters.count\n\
    \    var k = substring.characters.count\n    while i < j {\n        if string.characters[i]\
    \ != substring.characters[k] {\n            count += 1\n        }\n        i +=\
    \ 1\n        k += 1\n    }\n    return count", "    if string == \"\" {\n    \
    \    return 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n  \
    \  if string.hasPrefix(substring) {\n        return 1 + how_many_times(string.dropFirst(),\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string, substring.dropLast())\n    }\n    if string.hasPrefix(substring)\
    \ || string.hasSuffix(substring) {\n        return how_many_times(string.dropFirst(),\
    \ substring) + how_many_times(string, substring.dropLast())\n    }\n    return\
    \ 0", "    let index = string.firstIndex(of: substring)\n    return index == nil\
    \ ? 0 : index!.distance(string)", "    let index = string.firstIndex(of: substring)\n\
    \    if index == nil {\n        return 0\n    }\n    let substringLength = substring.length\n\
    \    let stringLength = string.length\n    let substringIndex = index!\n    let\
    \ stringIndex = substringIndex\n    let substringEnd = substringIndex + substringLength\n\
    \    let stringEnd = stringIndex + stringLength\n    let substringRange = string.substring(to:\
    \ substringIndex)\n    let stringRange = string.substring(to: stringIndex)\n \
    \   let substringRangeEnd = substringRange.endIndex\n    let stringRangeEnd =\
    \ stringRange.endIndex\n    let overlap = substringRangeEnd >= stringRangeEnd\n\
    \    let count = substringRange.distance(from: stringRange)\n    if overlap {\n\
    \        count += substringLength\n    }\n    return count", "    if string ==\
    \ \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ count(string)\n    }\n    var count = 0\n    var i = 0\n    var j = 0\n    var\
    \ k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p\
    \ = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u =\
    \ 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n\
    \    var aa = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n    var ae =\
    \ 0\n    var af = 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n    var aj\
    \ = 0\n    var ak = 0\n    var al = 0\n    var am = 0\n    var an = 0\n    var\
    \ ao = 0\n    var ap = 0\n    var aq = 0\n    var ar = 0\n    var as = 0\n   \
    \ var at = 0\n    var au = 0\n    var av = 0\n    var aw = 0\n    var ax = 0\n\
    \    var ay = 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n    var bc =\
    \ 0\n    var bd = 0\n    var be = 0\n    var bf = 0\n    var bg = 0\n    var bh\
    \ = 0\n    var bi = 0\n    var bj = 0\n    var bk = 0\n    var bl = 0\n    var\
    \ bm = 0\n    var bn = 0\n    var bo = 0\n    var bp = 0\n    var bq = 0\n   \
    \ var br = 0\n    var bs = 0\n    var bt = 0\n    var bu = 0\n    var bv = 0\n\
    \    var bw = 0\n    var bx = 0\n    var by = 0\n    var bz = 0\n    var ca =\
    \ 0\n    var cb = 0\n    var cc = 0\n    var cd = 0\n    var ce = 0\n    var cf\
    \ = 0\n    var cg = 0\n    var ch = 0\n    var ci = 0\n    var cj = 0\n    var\
    \ ck = 0\n    var cl = 0\n    var cm = 0\n    var cn = 0\n    var co = 0\n   \
    \ var cp = 0\n    var cq = 0\n    var cr = 0\n    var cs = 0\n    var ct = 0\n\
    \    var cu = 0\n    var cv = 0\n    var cw = 0\n    var cx = 0\n    var cy =\
    \ 0\n    var cz = 0\n    var da = 0\n    var db = 0\n    var dc = 0\n    var dd\
    \ = 0\n    var de = 0\n    var df = 0\n    var dg = 0\n    var dh = 0\n    var\
    \ di = 0\n    var dj = 0\n    var dk = 0\n    var dl = 0\n    var dm = 0\n   \
    \ var dn = 0\n    var do = 0\n    var dp = 0\n    var dq = 0\n    var dr = 0\n\
    \    var ds = 0\n    var dt = 0\n    var du = 0\n    var dv = 0\n    var dw =\
    \ 0\n    var dx = 0\n    var dy = 0\n", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n    var count\
    \ = 0\n    var start = 0\n    var end = string.count\n    while start < end {\n\
    \        let index = string.index(start, offsetBy: substring.count)\n        if\
    \ index == nil {\n            break\n        }\n        start = index!\n     \
    \   count += 1\n    }\n    return count", '    return count(string, substring)',
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return 1\n    }\n    var count = 0\n    var i = 0\n    var j = string.startIndex\n\
    \    while i < string.endIndex {\n        if string[i] == substring[0] {\n   \
    \         count += 1\n            i += substring.length - 1\n        } else {\n\
    \            i += 1\n        }\n    }\n    return count", "    if string == \"\
    \" {\n        return 0\n    }\n    if substring == \"\" {\n        return 1\n\
    \    }\n    if string.hasPrefix(substring) {\n        return 1 + how_many_times(string.dropFirst(substring.length),\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string.dropLast(substring.length), substring)\n    }\n    if\
    \ string.hasPrefix(substring) || string.hasSuffix(substring) {\n        return\
    \ how_many_times(string.dropFirst(substring.length), substring) + how_many_times(string.dropLast(substring.length),\
    \ substring)\n    }\n    return 0", "    if string == \"\" {\n        return 0\n\
    \    }\n    if substring == \"\" {\n        return 1\n    }\n    var count = 0\n\
    \    var i = 0\n    var j = string.count\n    var k = substring.count\n    while\
    \ i < j && k < string.count {\n        if string[i] != substring[k] {\n      \
    \      count = count + 1\n        }\n        i = i + 1\n        k = k + 1\n  \
    \  }\n    return count", "    if string == \"\" {\n        return 0\n    }\n \
    \   if substring == \"\" {\n        return count(string)\n    }\n    var count\
    \ = 0\n    var start = 0\n    var end = count(string)\n    while start < end {\n\
    \        start = string.index(substring, start) + 1\n        end = string.index(substring,\
    \ end) + 1\n        count += 1\n    }\n    return count", "    if string == \"\
    \" || substring == \"\" {\n        return 0\n    }\n    var count = 0\n    var\
    \ last = 0\n    for i := 0; i < len(string); i++ {\n        if string[i] == substring[0]\
    \ {\n            count++\n            last = i\n        }\n    }\n    for i :=\
    \ 0; i < len(substring); i++ {\n        if string[last+i] != substring[i] {\n\
    \            count = 0\n            break\n        }\n    }\n    return count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return count(string)\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = string.characters.count\n    var k = substring.characters.count\n    while\
    \ i < j {\n        if string[i] == substring[k] {\n            count += 1\n  \
    \          i += k\n            k += k\n        } else {\n            i += 1\n\
    \        }\n    }\n    return count", "    if string.hasSuffix(substring) {\n\
    \        return string.count(substring)\n    }\n    return string.count(substring)\
    \ + how_many_times(string.dropLast(), substring)", "    if string == \"\" {\n\
    \        return 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n\
    \    var count = 0\n    var i = 0\n    var j = string.count\n    var k = substring.count\n\
    \    while i < j && k < string.count {\n        if string[i] == substring[k] {\n\
    \            count += 1\n            i += 1\n            k += 1\n        }\n \
    \       if string[i] == substring[k] {\n            count += 1\n            i\
    \ += 1\n        }\n        if string[i] == substring[k] {\n            i += 1\n\
    \        }\n        if string[i] == substring[k] {\n            i += 1\n     \
    \       k += 1\n        }\n    }\n    return count", "    if string == \"\" {\n\
    \        return 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n\
    \    if string.hasPrefix(substring) {\n        return 1 + how_many_times(string[string.startIndex..<string.endIndex],\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string[string.endIndex..<string.startIndex], substring)\n   \
    \ }\n    return 0", "    if string == \"\" {\n        return 0\n    }\n    if\
    \ substring == \"\" {\n        return count(string)\n    }\n    var count = 0\n\
    \    var start = 0\n    var end = count(string)\n    while start < end {\n   \
    \     start = find(string, substring, start)\n        end = find(string, substring,\
    \ end + 1)\n        count += 1\n    }\n    return count", "    if string == \"\
    \" || substring == \"\" {\n        return 0\n    }\n\n    var count = 0\n    var\
    \ lastIndex = string.startIndex\n    var index = string.startIndex\n    while\
    \ index != string.endIndex {\n        if string[index] == substring[0] {\n   \
    \         count += 1\n            lastIndex = index\n        }\n        index++\n\
    \    }\n\n    if lastIndex != string.endIndex {\n        count += 1\n    }\n\n\
    \    return count", "    if string == \"\" {\n        return 0\n    }\n    if\
    \ substring == \"\" {\n        return 1\n    }\n    var count = 0\n    var start\
    \ = 0\n    var end = string.count\n    while start < end {\n        let mid =\
    \ start + (end - start) / 2\n        if string.substring(from: mid).lowercased()\
    \ == substring.lowercased() {\n            count += 1\n            start = mid\
    \ + 1\n        } else {\n            end = mid\n        }\n    }\n    return count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return 1\n    }\n    var count = 0\n    var i = 0\n    var j = string.count\n\
    \    while i < j {\n        if string[i] == substring[0] {\n            count\
    \ += 1\n            i += substring.length - 1\n        } else if string[i] ==\
    \ substring[1] {\n            count += 1\n            i += substring.length -\
    \ 1\n        } else if string[i] == substring[2] {\n            count += 1\n \
    \           i += substring.length - 1\n        } else if string[i] == substring[3]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[4] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[5] {\n      \
    \      count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[6] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[7] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[8]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[9] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[10] {\n     \
    \       count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[11] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[12] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[13]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[14] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[15] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[16] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[17] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[18]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[19] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[20] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[21] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[22] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[23]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[24] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[25] {\n  \
    \          count += 1\n            ", "    var count = 0\n    for char in string\
    \ {\n        if char == substring {\n            count += 1\n        }\n    }\n\
    \    return count", "    if string == \"\" {\n        return 0\n    }\n    if\
    \ substring == \"\" {\n        return count(string)\n    }\n    var count = 0\n\
    \    var start = 0\n    var end = count(string)\n    while start < end {\n   \
    \     start = string.startIndex(of: substring, range: start..<end)\n        end\
    \ = string.endIndex(of: substring, range: start..<end)\n        if start == end\
    \ {\n            count += 1\n        }\n    }\n    return count", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ 1\n    }\n    if string.hasPrefix(substring) {\n        return 1 + how_many_times(string[string.startIndex..<string.endIndex],\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string[string.endIndex..<string.startIndex], substring)\n   \
    \ }\n    if string.hasPrefix(substring) {\n        return 1 + how_many_times(string[string.startIndex..<string.endIndex],\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string[string.endIndex..<string.startIndex], substring)\n   \
    \ }\n    return 0", "    if string == \"\" {\n        return 0\n    }\n    if\
    \ substring == \"\" {\n        return 1\n    }\n    if string[string.startIndex.advanced(by:\
    \ 0)] == substring[0] {\n        return how_many_times(string: String(string.dropFirst()),\
    \ substring: String(substring.dropFirst()))\n    }\n    if string[string.startIndex.advanced(by:\
    \ 0)] == substring[1] {\n        return how_many_times(string: String(string.dropFirst()),\
    \ substring: String(substring.dropFirst())) + how_many_times(string: String(string.dropFirst()),\
    \ substring: String(substring.dropFirst())) + how_many_times(string: String(string.dropFirst()),\
    \ substring: String(substring.dropFirst()))\n    }\n    if string[string.startIndex.advanced(by:\
    \ 0)] == substring[2] {\n        return how_many_times(string: String(string.dropFirst()),\
    \ substring: String(substring.dropFirst())) + how_many_times(string: String(string.dropFirst()),\
    \ substring: String(substring.dropFirst())) + how_many_times(string: String(string.dropFirst()),\
    \ substring: String(substring.dropFirst())) + how_many_times(string: String(string.dropFirst()),\
    \ substring: String(substring.dropFirst())) + how_many_times(string: String(string.dropFirst()),\
    \ substring: String(substring.dropFirst()))\n    }\n    if string[string.startIndex.advanced(by:\
    \ 0)] == substring[3] {\n        return how_many_times(string: String(string.dropFirst()),\
    \ substring: String(substring.dropFirst())) + how_many_times(string: String(string.dropFirst()),\
    \ substring: String(substring.dropFirst())) + how_many_times(string: String(string.dropFirst()),\
    \ substring: String(substring.dropFirst())) + how_many_times(string: String(string.dropFirst()),\
    \ substring: String(substring.dropFirst())) + how_many_times(string: String(string.dropFirst()),\
    \ substring: String(substring.dropFirst())) + how_many_times(string: String(string.dropFirst()),\
    \ substring: String(substring.dropFirst()))\n    }\n    if string[string.startIndex.advanced(by:\
    \ 0)] == substring[4] {\n        return how_many_times(string: String(string.dropFirst()),\
    \ substring: String(substring.dropFirst())) + how_many_times(string: String(string.dropFirst()),\
    \ substring: String(substring.dropFirst())) + how_many_times(string: String(string.dropFirst()),\
    \ substring: String(substring.dropFirst())) + how_", "    if string == \"\" {\n\
    \        return 0\n    }\n    if substring == \"\" {\n        return count(string)\n\
    \    }\n    var count = 0\n    var i = 0\n    var j = string.characters.count\n\
    \    while i < j {\n        if string[i] == substring[0] {\n            count\
    \ += 1\n            i += count(substring)\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n    if string.hasPrefix(substring)\
    \ {\n        return 1 + how_many_times(string[string.startIndex..<string.endIndex],\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string[string.endIndex..<string.startIndex], substring)\n   \
    \ }\n    if string.hasPrefix(substring) {\n        return 1 + how_many_times(string[string.startIndex..<string.endIndex],\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string[string.endIndex..<string.startIndex], substring)\n   \
    \ }\n    return 0", "    if string == \"\" {\n        return 0\n    }\n    if\
    \ substring == \"\" {\n        return 1\n    }\n    if string.hasSuffix(substring)\
    \ {\n        return 1 + how_many_times(string.dropLast(), substring)\n    }\n\
    \    if string.hasPrefix(substring) {\n        return 1 + how_many_times(substring,\
    \ string.dropFirst())\n    }\n    return 0", "    if string == \"\" {\n      \
    \  return 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n    var\
    \ count = 0\n    var i = 0\n    var j = string.count\n    var k = substring.count\n\
    \    while i < j {\n        if string[i] == substring[0] {\n            count\
    \ += 1\n            i += k\n        } else {\n            i += 1\n        }\n\
    \    }\n    return count", '    return string.split(substring).count + 1', " \
    \   if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return count(string)\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = string.characters.count\n    var k = substring.characters.count\n    while\
    \ i < j {\n        if string[i] == substring[k] {\n            count += 1\n  \
    \          i += k\n            k += 1\n            if k == substring.characters.count\
    \ {\n                k = 0\n            }\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return count", "    var count = 0\n    for index in\
    \ 0..<string.characters.count {\n        if string.substring(from: index).lowercased()\
    \ == substring.lowercased() {\n            count += 1\n        }\n    }\n    return\
    \ count", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return count(string)\n    }\n    var count = 0\n    var i\
    \ = 0\n    var j = string.startIndex\n    while i < string.endIndex {\n      \
    \  if string[i] == substring[0] {\n            count += 1\n            i += 1\n\
    \            if i == string.endIndex {\n                i += 1\n             \
    \   j = string.startIndex\n            }\n        } else {\n            i = j\n\
    \            j += 1\n        }\n    }\n    return count", "    let start = string.startIndex.advancedBy(substring.startIndex)\n\
    \    let end = string.endIndex.advancedBy(substring.endIndex)\n    let range =\
    \ start..<end\n    return count(string.unicodeScalars.filter({ $0.isASCII }) +\
    \ string.unicodeScalars.filter({ !$0.isASCII }), range)", "    if string == \"\
    \" {\n        return 0\n    }\n    if substring == \"\" {\n        return count(string)\n\
    \    }\n    var count = 0\n    var i = 0\n    var j = string.count\n    var k\
    \ = substring.count\n    while i < j {\n        if string[i] == substring[0] {\n\
    \            count += 1\n            i += k\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return count", "    if string == \"\" || substring\
    \ == \"\" {\n        return 0\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = string.characters.count\n    var k = substring.characters.count\n    while\
    \ i < j && k < string.characters.count {\n        if string.characters[i] == substring.characters[k]\
    \ {\n            count += 1\n            i += 1\n            k += 1\n        }\n\
    \        if string.characters[i] == substring.characters[k] {\n            i +=\
    \ 1\n            k += 1\n        }\n        if string.characters[i] == substring.characters[k]\
    \ {\n            i += 1\n            k += 1\n        }\n        if string.characters[i]\
    \ == substring.characters[k] {\n            i += 1\n            k += 1\n     \
    \   }\n        if string.characters[i] == substring.characters[k] {\n        \
    \    i += 1\n            k += 1\n        }\n        if string.characters[i] ==\
    \ substring.characters[k] {\n            i += 1\n            k += 1\n        }\n\
    \        if string.characters[i] == substring.characters[k] {\n            i +=\
    \ 1\n            k += 1\n        }\n        if string.characters[i] == substring.characters[k]\
    \ {\n            i += 1\n            k += 1\n        }\n        if string.characters[i]\
    \ == substring.characters[k] {\n            i += 1\n            k += 1\n     \
    \   }\n        if string.characters[i] == substring.characters[k] {\n        \
    \    i += 1\n            k += 1\n        }\n        if string.characters[i] ==\
    \ substring.characters[k] {\n            i += 1\n            k += 1\n        }\n\
    \        if string.characters[i] == substring.characters[k] {\n            i +=\
    \ 1\n            k += 1\n        }\n        if string.characters[i] == substring.characters[k]\
    \ {\n            i += 1\n            k += 1\n        }\n        if string.characters[i]\
    \ == substring.characters[k] {\n            i += 1\n            k += 1\n     \
    \   }\n        if string.characters[i] == substring.characters[k] {\n        \
    \    i += 1\n            k += 1\n        }\n        if string.characters[i] ==\
    \ substring.characters[k] {\n            i += 1\n            k += 1\n        }\n\
    \        if string.characters[i] == substring.characters[k] {\n            i +=\
    \ 1\n            k += 1\n        }\n        if string.characters[i] == substring.characters[k]\
    \ {\n            i += 1\n            k += 1\n        }\n        if string.characters[i]\
    \ == substring.characters[k] {\n            i += 1\n            k += 1\n     \
    \   }\n        if string.characters[i] == substring.characters[k] {\n        \
    \    i += 1\n            k += 1\n        }\n        if string.characters[i] ==\
    \ substring.characters[k] {\n            i += 1\n            k += 1\n        }\n\
    \        if string.characters[i] == substring.characters[k] {\n            i +=\
    \ 1\n            k += 1\n        }\n        if string.characters[i] == substring.characters[k]\
    \ {\n            i += 1\n            k += 1\n        }\n        if string.characters[i]\
    \ == ", "    if string == \"\" {\n        return 0\n    }\n    if substring ==\
    \ \"\" {\n        return 1\n    }\n    if string.hasPrefix(substring) {\n    \
    \    return 1 + how_many_times(string.dropFirst(substring.length), substring)\n\
    \    }\n    if string.hasSuffix(substring) {\n        return 1 + how_many_times(string.dropLast(substring.length),\
    \ substring)\n    }\n    if string.hasPrefix(substring) || string.hasSuffix(substring)\
    \ {\n        return how_many_times(string.dropFirst(substring.length), substring)\
    \ + how_many_times(string.dropLast(substring.length), substring)\n    }\n    return\
    \ 0", "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\
    \" {\n        return 1\n    }\n    var count = 0\n    var start = 0\n    var end\
    \ = string.count\n    while start < end {\n        start = string.index(substring,\
    \ start) + 1\n        end = string.index(substring, end) + 1\n        count +=\
    \ 1\n    }\n    return count", "    if string == \"\" {\n        return 0\n  \
    \  }\n    if substring == \"\" {\n        return 1\n    }\n    if string.hasPrefix(substring)\
    \ {\n        return 1 + how_many_times(string[string.startIndex..<string.endIndex],\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string[string.endIndex..<string.startIndex], substring)\n   \
    \ }\n    return 0", "    let start = string.startIndex.advanced(by: substring.startIndex)\n\
    \    let end = string.endIndex.advanced(by: substring.startIndex.successor())\n\
    \    let count = string.distance(from: start, to: end)\n    return count", " \
    \   if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return 1\n    }\n    var count = 0\n    var i = 0\n    var j = 0\n  \
    \  var k = 0\n    var last = 0\n    var last2 = 0\n    var last3 = 0\n    var\
    \ last4 = 0\n    var last5 = 0\n    var last6 = 0\n    var last7 = 0\n    var\
    \ last8 = 0\n    var last9 = 0\n    var last10 = 0\n    var last11 = 0\n    var\
    \ last12 = 0\n    var last13 = 0\n    var last14 = 0\n    var last15 = 0\n   \
    \ var last16 = 0\n    var last17 = 0\n    var last18 = 0\n    var last19 = 0\n\
    \    var last20 = 0\n    var last21 = 0\n    var last22 = 0\n    var last23 =\
    \ 0\n    var last24 = 0\n    var last25 = 0\n    var last26 = 0\n    var last27\
    \ = 0\n    var last28 = 0\n    var last29 = 0\n    var last30 = 0\n    var last31\
    \ = 0\n    var last32 = 0\n    var last33 = 0\n    var last34 = 0\n    var last35\
    \ = 0\n    var last36 = 0\n    var last37 = 0\n    var last38 = 0\n    var last39\
    \ = 0\n    var last40 = 0\n    var last41 = 0\n    var last42 = 0\n    var last43\
    \ = 0\n    var last44 = 0\n    var last45 = 0\n    var last46 = 0\n    var last47\
    \ = 0\n    var last48 = 0\n    var last49 = 0\n    var last50 = 0\n    var last51\
    \ = 0\n    var last52 = 0\n    var last53 = 0\n    var last54 = 0\n    var last55\
    \ = 0\n    var last56 = 0\n    var last57 = 0\n    var last58 = 0\n    var last59\
    \ = 0\n    var last60 = 0\n    var last61 = 0\n    var last62 = 0\n    var last63\
    \ = 0\n    var last64 = 0\n    var last65 = 0\n    var last66 = 0\n    var last67\
    \ = 0\n    var last68 = 0\n    var last69 = 0\n    var last70 = 0\n    var last71\
    \ = 0\n    var last72 = 0\n    var last73 = 0\n    var last74 = 0\n    var last75\
    \ = 0\n    var last76 = 0\n    var last77 = 0\n    var last78 = 0\n    var last79\
    \ = 0\n    var last80 = 0\n    var last81 = 0\n    var last82 = 0\n    var last83\
    \ = 0\n    var last84 = 0\n    var last85 = 0\n    var last86 = 0\n    var last87\
    \ = 0\n    var last88 = 0\n    var last89 = 0\n    var last90 = 0\n    var last91\
    \ = 0\n    var last92 = 0\n    var last93 = 0\n    var last94 = 0\n    var last95\
    \ = 0\n    var last96", "    if string == \"\" || substring == \"\" {\n      \
    \  return 0\n    }\n    var count = 0\n    var start = 0\n    var end = string.count\n\
    \    while start < end {\n        let index = string.index(start, offsetBy: substring.count)\n\
    \        if index == nil {\n            break\n        }\n        start = index!\n\
    \        count += 1\n    }\n    return count", "    if string == \"\" {\n    \
    \    return 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n  \
    \  var count = 0\n    var start = 0\n    var end = string.count\n    while start\
    \ < end {\n        let index = string.index(string.startIndex, offsetBy: start)\n\
    \        if index == string.endIndex {\n            break\n        }\n       \
    \ let substringIndex = string.index(index, offsetBy: substring.count)\n      \
    \  if substringIndex == string.endIndex {\n            break\n        }\n    \
    \    if substringIndex < index {\n            count += 1\n            start =\
    \ substringIndex\n        } else {\n            start = index\n        }\n   \
    \ }\n    return count", "    if string == \"\" {\n        return 0\n    }\n  \
    \  if substring == \"\" {\n        return count(string)\n    }\n    var count\
    \ = 0\n    var i = 0\n    var j = string.startIndex\n    while i < string.endIndex\
    \ {\n        if string[i] == substring[0] {\n            count += 1\n        \
    \    i = j\n            j = string.startIndex\n        } else {\n            j\
    \ += 1\n        }\n    }\n    return count", "    if string == \"\" {\n      \
    \  return 0\n    }\n    if substring == \"\" {\n        return count(string)\n\
    \    }\n    var count = 0\n    var i = 0\n    var j = string.startIndex\n    while\
    \ i < string.endIndex {\n        if string[j] != substring[i] {\n            count\
    \ += 1\n            i = string.startIndex\n        } else {\n            i +=\
    \ 1\n        }\n        j += 1\n    }\n    return count", "    if string == \"\
    \" {\n        return 0\n    }\n    if substring == \"\" {\n        return countOccurrences(string,\
    \ \"\")\n    }\n    return countOccurrences(string, substring)", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ count(string)\n    }\n    var count = 0\n    var i = 0\n    var j = string.count\n\
    \    var k = substring.count\n    while i < j {\n        if string[i] == substring[k]\
    \ {\n            count += 1\n            i += k\n            k += k\n        }\n\
    \        i += 1\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n    var count\
    \ = 0\n    var start = 0\n    var end = string.count\n    while start < end {\n\
    \        let index = string.index(start, offsetBy: substring.count)\n        if\
    \ index == nil {\n            return count\n        }\n        start = index!.advanced(by:\
    \ substring.count)\n        count += 1\n    }\n    return count", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ count(string)\n    }\n    var count = 0\n    var i = 0\n    var j = string.characters.count\n\
    \    while i < j {\n        if string.characters.contains(substring.characters.suffix(from:\
    \ i)) {\n            count += 1\n            i += substring.characters.count -\
    \ 1\n        } else {\n            i += 1\n        }\n    }\n    return count",
  "    var count = 0\n    var i = 0\n    var j = string.characters.count\n    var\
    \ k = substring.characters.count\n    while i < j && k < string.characters.count\
    \ {\n        if string.characters[i] == substring.characters[k] {\n          \
    \  count += 1\n            i += 1\n            k += 1\n        } else if string.characters[i]\
    \ < substring.characters[k] {\n            i += 1\n        } else {\n        \
    \    k += 1\n        }\n    }\n    return count", "    if string.hasSuffix(substring)\
    \ {\n        return string.countSubstrings(substring)\n    }\n    return string.countSubstrings(substring)\
    \ + 1", "    if string == \"\" {\n        return 0\n    }\n    if substring ==\
    \ \"\" {\n        return 1\n    }\n    if string.hasPrefix(substring) {\n    \
    \    return 1 + how_many_times(string[string.startIndex..<string.endIndex], substring)\n\
    \    }\n    if string.hasSuffix(substring) {\n        return 1 + how_many_times(string[string.endIndex..<string.startIndex],\
    \ substring)\n    }\n    if string.hasPrefix(substring) {\n        return 1 +\
    \ how_many_times(string[string.startIndex..<string.endIndex], substring)\n   \
    \ }\n    if string.hasSuffix(substring) {\n        return 1 + how_many_times(string[string.endIndex..<string.startIndex],\
    \ substring)\n    }\n    return 0", "    if string == \"\" {\n        return 0\n\
    \    }\n    if substring == \"\" {\n        return 1\n    }\n    var count = 0\n\
    \    var startIndex = 0\n    var endIndex = 0\n    while startIndex < string.count\
    \ {\n        endIndex = string.index(substring, startIndex)\n        if endIndex\
    \ == startIndex {\n            count += 1\n            startIndex += 1\n     \
    \   } else {\n            count += endIndex - startIndex\n            startIndex\
    \ = endIndex + 1\n        }\n    }\n    return count", "    if string == \"\"\
    \ || substring == \"\" {\n        return 0\n    }\n    var count = 0\n    var\
    \ start = 0\n    var end = string.characters.count\n    while start < end {\n\
    \        let index = string.characters.index(of: substring, options: .caseInsensitive)\n\
    \        if index == nil {\n            break\n        }\n        start = index!\n\
    \        count += 1\n        end -= (index!.distance(from: string.startIndex))\n\
    \    }\n    return count", "    var count = 0\n    for index in 0..<string.characters.count\
    \ {\n        if string.substring(from: index).contains(substring) {\n        \
    \    count += 1\n        }\n    }\n    return count", "    var count = 0\n   \
    \ for index in 0..<string.characters.count {\n        if string.substring(from:\
    \ index).lowercased() == substring.lowercased() {\n            count += 1\n  \
    \      }\n    }\n    return count", "    var count = 0\n    for s in string.split(substring)\
    \ {\n        if s == substring {\n            count += 1\n        }\n    }\n \
    \   return count", "    var count = 0\n    for s in string.split(substring) {\n\
    \        if s == substring {\n            count += 1\n        }\n    }\n    return\
    \ count", '    return count_occurrences(string, substring)', "    if string ==\
    \ \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ count(string)\n    }\n    var count = 0\n    var i = 0\n    var j = string.count\n\
    \    var k = substring.count\n    while i < j {\n        if string[i] == substring[k]\
    \ {\n            count += 1\n            i += k\n            k += 1\n        \
    \    if k == substring.count {\n                j -= 1\n                k = 0\n\
    \            }\n        } else {\n            i += 1\n            k += 1\n   \
    \         if k == substring.count {\n                j -= 1\n                k\
    \ = 0\n            }\n        }\n    }\n    return count", "    if string == \"\
    \" {\n        return 0\n    }\n    if substring == \"\" {\n        return 1\n\
    \    }\n    var count = 0\n    var start = 0\n    var end = string.characters.count\n\
    \    while start < end {\n        let index = string.index(string.startIndex,\
    \ offsetBy: start)\n        if index == string.endIndex {\n            break\n\
    \        }\n        let index2 = string.index(index, offsetBy: substring.characters.count)\n\
    \        if index2 == string.endIndex {\n            break\n        }\n      \
    \  if string.substring(with: index2) == substring {\n            count += 1\n\
    \        }\n        start = index2 + 1\n    }\n    return count", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ 1\n    }\n    var count = 0\n    var start = 0\n    var end = string.count\n\
    \    while start < end {\n        start = string.startIndex.advanced(by: start)\n\
    \        end = string.endIndex.advanced(by: end)\n        if string.substring(from:\
    \ start, length: substring.length) == substring {\n            count += 1\n  \
    \      }\n    }\n    return count", '    return count_substring(string, substring)',
  "    if string.hasSuffix(substring) {\n        return string.countSubstrings(substring)\n\
    \    }\n    if string.hasPrefix(substring) {\n        return string.countSubstrings(substring)\n\
    \    }\n    return 0", "    if string == \"\" {\n        return 0\n    }\n   \
    \ if substring == \"\" {\n        return count(string)\n    }\n    var count =\
    \ 0\n    var i = 0\n    var j = string.count\n    while i < j {\n        if string[i]\
    \ == substring[0] {\n            count += 1\n            i += count(substring)\n\
    \        } else {\n            i += 1\n        }\n    }\n    return count", " \
    \   if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return count(string)\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = string.startIndex\n    var k = string.endIndex\n    while i < k {\n    \
    \    if string[i] == substring[0] {\n            count += 1\n            i +=\
    \ 1\n            while i < k {\n                if string[i] == substring[1] {\n\
    \                    count += 1\n                    i += 1\n                }\
    \ else {\n                    break\n                }\n            }\n      \
    \  } else {\n            i += 1\n        }\n    }\n    return count", "    if\
    \ string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n    \
    \    return count(string)\n    }\n    var count = 0\n    var i = 0\n    var j\
    \ = string.startIndex\n    while i < string.endIndex {\n        if string[i] ==\
    \ substring[0] {\n            count += 1\n            i = j\n            j = string.startIndex\n\
    \        } else {\n            j += 1\n        }\n    }\n    return count", " \
    \   if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return count(string)\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = string.count\n    var k = substring.count\n    while i < j {\n        if\
    \ string[i] == substring[k] {\n            count += 1\n            i += k\n  \
    \          k += 1\n            if k == substring.count {\n                j -=\
    \ 1\n                k = 0\n            }\n        } else {\n            i +=\
    \ 1\n            k += 1\n            if k == substring.count {\n             \
    \   j -= 1\n                k = 0\n            }\n        }\n    }\n    return\
    \ count", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return 1\n    }\n    var count = 0\n    var startIndex =\
    \ 0\n    var endIndex = 0\n    while startIndex < string.count {\n        endIndex\
    \ = string.index(substring, startIndex)\n        if endIndex == startIndex {\n\
    \            count += 1\n            startIndex = string.index(substring, startIndex)\
    \ + 1\n        } else {\n            count += endIndex - startIndex\n        \
    \    startIndex = endIndex + 1\n        }\n    }\n    return count", "    if string\
    \ == \"\" || substring == \"\" {\n        return 0\n    }\n    var count = 0\n\
    \    var start = 0\n    var end = string.count\n    while start < end {\n    \
    \    let index = string.index(start, offsetBy: substring.count)\n        if index\
    \ == nil {\n            break\n        }\n        start = index!\n        count\
    \ += 1\n    }\n    return count", "    if string == \"\" {\n        return 0\n\
    \    }\n    if substring == \"\" {\n        return 1\n    }\n    var count = 0\n\
    \    var i = 0\n    var j = string.count\n    while i < j {\n        if string[i]\
    \ == substring[0] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else {\n            i += 1\n        }\n    }\n    return count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return 1\n    }\n    var count = 0\n    var i = 0\n    var j = 0\n  \
    \  var k = 0\n    var l = string.count\n    var m = substring.count\n    while\
    \ i < l {\n        if string[i] == substring[j] {\n            count += 1\n  \
    \          i += k\n            j += m\n            k = 0\n        }\n        if\
    \ string[i] == substring[k] {\n            count += 1\n            i += m\n  \
    \          k += m\n            m = 0\n        }\n        if string[i] == substring[j]\
    \ {\n            count += 1\n            i += k\n            j += m\n        \
    \    k = 0\n        }\n        if string[i] == substring[k] {\n            count\
    \ += 1\n            i += m\n            k += m\n            m = 0\n        }\n\
    \        if string[i] == substring[j] {\n            count += 1\n            i\
    \ += k\n            j += m\n            k = 0\n        }\n        if string[i]\
    \ == substring[k] {\n            count += 1\n            i += m\n            k\
    \ += m\n            m = 0\n        }\n        if string[i] == substring[j] {\n\
    \            count += 1\n            i += k\n            j += m\n            k\
    \ = 0\n        }\n        if string[i] == substring[k] {\n            count +=\
    \ 1\n            i += m\n            k += m\n            m = 0\n        }\n  \
    \      if string[i] == substring[j] {\n            count += 1\n            i +=\
    \ k\n            j += m\n            k = 0\n        }\n        if string[i] ==\
    \ substring[k] {\n            count += 1\n            i += m\n            k +=\
    \ m\n            m = 0\n        }\n        if string[i] == substring[j] {\n  \
    \          count += 1\n            i += k\n            j += m\n            k =\
    \ 0\n        }\n        if string[i] == substring[k] {\n            count += 1\n\
    \            i += m\n            k += m\n            m = 0\n        }\n      \
    \  if string[i] == substring[j] {\n            count += 1\n            i += k\n\
    \            j += m\n            k = 0\n        }\n        if string[i] == substring[k]\
    \ {\n            count += 1\n            i += m\n            k += m\n        \
    \    m = 0\n        }\n        if string[i] == substring[j] {\n            count\
    \ += 1\n            i += k\n            j += m\n            k = 0\n        }\n\
    \        if string[i] == substring[k] {\n            count += 1\n            i\
    \ += m\n            k += m\n            m = 0\n        }\n        if string[i]\
    \ == substring[j] {\n            count += 1\n            i += k\n            j\
    \ += m\n            k = 0\n        }\n        if string[i] == substring[k] {\n\
    \            count += 1\n            i += m\n            k += m\n            m\
    \ = 0\n        }\n        if string[i] == substring[j] {\n            count +=\
    \ 1\n            i += k\n            j += m\n            k = 0\n        }\n  \
    \      if string[i] == substring[k] {\n            count += 1\n            i +=\
    \ m\n            ", "    var count = 0\n    for index in 0..<string.characters.count\
    \ {\n        if string.substring(from: index).lowercased() == substring.lowercased()\
    \ {\n            count += 1\n        }\n    }\n    return count", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ 1\n    }\n    var count = 0\n    var i = 0\n    var j = string.startIndex\n\
    \    while i < string.endIndex {\n        if string[i] == substring[0] {\n   \
    \         count += 1\n            i = string.startIndex\n            j = string.startIndex\n\
    \        } else {\n            j += 1\n        }\n    }\n    return count", '    return
    string.count(substring)', "    if string == \"\" {\n        return 0\n    }\n\
    \    if substring == \"\" {\n        return 1\n    }\n    var count = 0\n    var\
    \ i = 0\n    var j = 0\n    for ; i < len(string); i++ {\n        if string[i]\
    \ == substring[0] {\n            count++\n            for ; j < len(substring);\
    \ j++ {\n                if string[i+j] != substring[j] {\n                  \
    \  break\n                }\n            }\n        }\n    }\n    return count",
  "    if string == \"\" || substring == \"\" {\n        return 0\n    }\n    var\
    \ count = 0\n    var i = 0\n    var j = string.characters.count\n    var k = substring.characters.count\n\
    \    while i < j {\n        if string.characters[i] == substring.characters[k]\
    \ {\n            count += 1\n            i += 1\n            k += 1\n        \
    \    if k == substring.characters.count {\n                k = 0\n           \
    \ }\n        } else {\n            i += 1\n        }\n    }\n    return count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return 1\n    }\n    var count = 0\n    var i = 0\n    var j = 0\n  \
    \  var k = 0\n    var l = string.characters.count\n    var m = substring.characters.count\n\
    \    while i < l {\n        if string[i] == substring[j] {\n            count\
    \ += 1\n            i += 1\n            j += 1\n            if j == m {\n    \
    \            j = 0\n                k += 1\n            }\n        } else {\n\
    \            i = 0\n            j += 1\n            if j == m {\n            \
    \    j = 0\n                k += 1\n            }\n        }\n    }\n    return\
    \ count", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return 1\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = string.characters.count\n    var k = substring.characters.count\n    while\
    \ i < j {\n        if string[i] != substring[k] {\n            count += 1\n  \
    \      }\n        i += 1\n        k += 1\n    }\n    return count", "    if string\
    \ == \"\" || substring == \"\" {\n        return 0\n    }\n    var count = 0\n\
    \    var i = 0\n    var j = string.characters.count\n    while i < j {\n     \
    \   if string.characters[i] != substring.characters[i] {\n            count +=\
    \ 1\n        }\n        i += 1\n    }\n    return count", "    if string == \"\
    \" || substring == \"\" {\n        return 0\n    }\n    var count = 0\n    var\
    \ i = 0\n    var j = string.characters.count\n    var k = substring.characters.count\n\
    \    while i < j {\n        if string[i] != substring[k] {\n            count\
    \ = count + 1\n        }\n        i = i + 1\n        k = k - 1\n    }\n    return\
    \ count", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return 1\n    }\n    var count = 0\n    var start = 0\n \
    \   var end = string.count\n    var substringIndex = string.startIndex.distance(stringIndex,\
    \ substringIndex)\n    while substringIndex < end {\n        if string[substringIndex]\
    \ == substring[0] {\n            count += 1\n            substringIndex += 1\n\
    \            start = substringIndex\n            substringIndex = string.startIndex.distance(stringIndex,\
    \ substringIndex)\n        } else {\n            substringIndex += 1\n       \
    \ }\n    }\n    return count", "    if string == \"\" {\n        return 0\n  \
    \  }\n    if substring == \"\" {\n        return 1\n    }\n    var count = 0\n\
    \    var i = 0\n    var j = string.characters.count\n    var k = substring.characters.count\n\
    \    while i < j {\n        if string[i] == substring[k] {\n            count\
    \ += 1\n            i += 1\n            k += 1\n            if k == substring.characters.count\
    \ {\n                k = 0\n            }\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return count", '    return count_overlapping_cases(string,
    substring)', "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return 1\n    }\n    if string.rangeOfString(substring) ==\
    \ nil {\n        return 0\n    }\n    var count = 0\n    var start = 0\n    var\
    \ end = string.count\n    while start < end {\n        start = string.rangeOfString(substring,\
    \ options: .BackwardsSearch, range: NSMakeRange(start, substring.length)).location\n\
    \        end = string.rangeOfString(substring, options: .BackwardsSearch, range:\
    \ NSMakeRange(start + substring.length, substring.length)).location\n        if\
    \ start == end {\n            count += 1\n        }\n    }\n    return count",
  "    if string.hasSuffix(substring) {\n        return string.count(substring)\n\
    \    }\n    if string.hasPrefix(substring) {\n        return string.count(substring)\n\
    \    }\n    return 0", "    if string == \"\" {\n        return 0\n    }\n   \
    \ if substring == \"\" {\n        return 1\n    }\n    var count = 0\n    var\
    \ i = 0\n    var j = 0\n    for ; i < len(string); i++ {\n        if string[i]\
    \ == substring[j] {\n            count++\n            j++\n            if j ==\
    \ len(substring) {\n                j = 0\n            }\n        } else {\n \
    \           j = 0\n        }\n    }\n    return count", "    if string == \"\"\
    \ {\n        return 0\n    }\n    if substring == \"\" {\n        return 1\n \
    \   }\n    var count = 0\n    var i = 0\n    var j = string.startIndex\n    while\
    \ i < string.endIndex {\n        if string[i] == substring[0] {\n            count\
    \ += 1\n            i += 1\n            j = i\n            while i < string.endIndex\
    \ && string[i] == substring[1] {\n                i += 1\n            }\n    \
    \        if i == string.endIndex {\n                count += 1\n             \
    \   j = i\n            }\n        } else {\n            j += 1\n        }\n  \
    \  }\n    return count", "    if string.hasSuffix(substring) {\n        return\
    \ string.countSubstrings(substring)\n    }\n    if string.hasPrefix(substring)\
    \ {\n        return string.countSubstrings(substring)\n    }\n    return 0", " \
    \   if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return 1\n    }\n    var count = 0\n    var start = 0\n    var end =\
    \ string.count\n    while start < end {\n        start = string.index(substring,\
    \ start) + 1\n        end = string.index(substring, end) + 1\n        count +=\
    \ 1\n    }\n    return count", "    var count = 0\n    for s in string.split(substring)\
    \ {\n        if s == substring {\n            count += 1\n        }\n    }\n \
    \   return count", "    var count = 0\n    var index = string.startIndex\n   \
    \ while index != string.endIndex {\n        index = string.index(substring, startIndex:\
    \ index)\n        if index != string.endIndex {\n            count += 1\n    \
    \    }\n    }\n    return count", "    if string == \"\" {\n        return 0\n\
    \    }\n    if substring == \"\" {\n        return 1\n    }\n    var count = 0\n\
    \    var i = 0\n    var j = 0\n    var k = string.startIndex\n    while i < string.endIndex\
    \ {\n        if k == string.startIndex {\n            j = string.startIndex\n\
    \        } else {\n            j = k\n        }\n        if string.substringWithRange(k)\
    \ == substring {\n            count += 1\n        }\n        k = j\n        i\
    \ += 1\n    }\n    return count", "    if string == \"\" {\n        return 0\n\
    \    }\n    if substring == \"\" {\n        return countOccurrences(string, \"\
    \")\n    }\n    var count = 0\n    var i = 0\n    var j = string.characters.count\n\
    \    while i < j {\n        if string.characters[i] == substring.characters[0]\
    \ {\n            count += countOccurrences(string.substringFromIndex(i + 1), substring)\n\
    \            i += 1\n        } else if string.characters[i] == substring.characters[1]\
    \ {\n            count += countOccurrences(string.substringFromIndex(i), substring)\n\
    \            i += 1\n        } else {\n            i += 1\n        }\n    }\n\
    \    return count", "    if string == \"\" {\n        return 0\n    }\n    if\
    \ substring == \"\" {\n        return 1\n    }\n    var count = 0\n    var i =\
    \ 0\n    var j = string.count\n    var k = substring.count\n    while i < j {\n\
    \        if string[i] == substring[k] {\n            count += 1\n            i\
    \ += k\n            k += k\n        }\n        i += 1\n    }\n    return count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return string.count\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var last = 0\n    var last2 = 0\n    var last3 = 0\n\
    \    var last4 = 0\n    var last5 = 0\n    var last6 = 0\n    var last7 = 0\n\
    \    var last8 = 0\n    var last9 = 0\n    var last10 = 0\n    var last11 = 0\n\
    \    var last12 = 0\n    var last13 = 0\n    var last14 = 0\n    var last15 =\
    \ 0\n    var last16 = 0\n    var last17 = 0\n    var last18 = 0\n    var last19\
    \ = 0\n    var last20 = 0\n    var last21 = 0\n    var last22 = 0\n    var last23\
    \ = 0\n    var last24 = 0\n    var last25 = 0\n    var last26 = 0\n    var last27\
    \ = 0\n    var last28 = 0\n    var last29 = 0\n    var last30 = 0\n    var last31\
    \ = 0\n    var last32 = 0\n    var last33 = 0\n    var last34 = 0\n    var last35\
    \ = 0\n    var last36 = 0\n    var last37 = 0\n    var last38 = 0\n    var last39\
    \ = 0\n    var last40 = 0\n    var last41 = 0\n    var last42 = 0\n    var last43\
    \ = 0\n    var last44 = 0\n    var last45 = 0\n    var last46 = 0\n    var last47\
    \ = 0\n    var last48 = 0\n    var last49 = 0\n    var last50 = 0\n    var last51\
    \ = 0\n    var last52 = 0\n    var last53 = 0\n    var last54 = 0\n    var last55\
    \ = 0\n    var last56 = 0\n    var last57 = 0\n    var last58 = 0\n    var last59\
    \ = 0\n    var last60 = 0\n    var last61 = 0\n    var last62 = 0\n    var last63\
    \ = 0\n    var last64 = 0\n    var last65 = 0\n    var last66 = 0\n    var last67\
    \ = 0\n    var last68 = 0\n    var last69 = 0\n    var last70 = 0\n    var last71\
    \ = 0\n    var last72 = 0\n    var last73 = 0\n    var last74 = 0\n    var last75\
    \ = 0\n    var last76 = 0\n    var last77 = 0\n    var last78 = 0\n    var last79\
    \ = 0\n    var last80 = 0\n    var last81 = 0\n    var last82 = 0\n    var last83\
    \ = 0\n    var last84 = 0\n    var last85 = 0\n    var last86 = 0\n    var last87\
    \ = 0\n    var last88 = 0\n    var last89 = 0\n    var last90 = 0\n    var last91\
    \ = 0\n    var last92 = 0\n    var last93 = 0\n    var last94 = 0\n    var last95\
    \ = 0\n    var ", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return 1\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t =\
    \ 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n\
    \    var z = 0\n    var aa = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n\
    \    var ae = 0\n    var af = 0\n    var ag = 0\n    var ah = 0\n    var ai =\
    \ 0\n    var aj = 0\n    var ak = 0\n    var al = 0\n    var am = 0\n    var an\
    \ = 0\n    var ao = 0\n    var ap = 0\n    var aq = 0\n    var ar = 0\n    var\
    \ as = 0\n    var at = 0\n    var au = 0\n    var av = 0\n    var aw = 0\n   \
    \ var ax = 0\n    var ay = 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n\
    \    var bc = 0\n    var bd = 0\n    var be = 0\n    var bf = 0\n    var bg =\
    \ 0\n    var bh = 0\n    var bi = 0\n    var bj = 0\n    var bk = 0\n    var bl\
    \ = 0\n    var bm = 0\n    var bn = 0\n    var bo = 0\n    var bp = 0\n    var\
    \ bq = 0\n    var br = 0\n    var bs = 0\n    var bt = 0\n    var bu = 0\n   \
    \ var bv = 0\n    var bw = 0\n    var bx = 0\n    var by = 0\n    var bz = 0\n\
    \    var ca = 0\n    var cb = 0\n    var cc = 0\n    var cd = 0\n    var ce =\
    \ 0\n    var cf = 0\n    var cg = 0\n    var ch = 0\n    var ci = 0\n    var cj\
    \ = 0\n    var ck = 0\n    var cl = 0\n    var cm = 0\n    var cn = 0\n    var\
    \ co = 0\n    var cp = 0\n    var cq = 0\n    var cr = 0\n    var cs = 0\n   \
    \ var ct = 0\n    var cu = 0\n    var cv = 0\n    var cw = 0\n    var cx = 0\n\
    \    var cy = 0\n    var cz = 0\n    var da = 0\n    var db = 0\n    var dc =\
    \ 0\n    var dd = 0\n    var de = 0\n    var df = 0\n    var dg = 0\n    var dh\
    \ = 0\n    var di = 0\n    var dj = 0\n    var dk = 0\n    var dl = 0\n    var\
    \ dm = 0\n    var dn = 0\n    var do = 0\n    var dp = 0\n    var dq = 0\n   \
    \ var dr = 0\n    var ds = 0\n    var dt = 0\n    var du = 0\n    var dv = 0\n\
    \    var dw = 0\n    var dx = 0\n    var dy = 0\n    var dz", "    var count =\
    \ 0\n    for index in 0..<string.characters.count {\n        if string.substring(from:\
    \ index).lowercased() == substring.lowercased() {\n            count += 1\n  \
    \      }\n    }\n    return count", "    if string == \"\" {\n        return 0\n\
    \    }\n    if substring == \"\" {\n        return count(string)\n    }\n    var\
    \ count = 0\n    var i = 0\n    var j = string.startIndex\n    while i < string.endIndex\
    \ {\n        if string[i] == substring[0] {\n            count += 1\n        \
    \    i = j\n            j = string.startIndex\n        } else {\n            j\
    \ += 1\n        }\n    }\n    return count", "    if string == \"\" {\n      \
    \  return 0\n    }\n    if substring == \"\" {\n        return countOccurrences(string,\
    \ \"\", true)\n    }\n    var count = 0\n    var i = 0\n    var j = string.count\n\
    \    var k = substring.count\n    while i < j {\n        if string[i] == substring[k]\
    \ {\n            count += 1\n            i += k\n            k -= 1\n        }\n\
    \        i += 1\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return count(string)\n    }\n\
    \    var count = 0\n    var i = 0\n    var j = string.characters.count\n    while\
    \ i < j {\n        if string.characters[i] == substring.characters[0] {\n    \
    \        count += 1\n            i += 1\n        } else if string.characters[i]\
    \ == substring.characters[1] {\n            count += 1\n            i += 1\n \
    \           j += 1\n        } else if string.characters[i] == substring.characters[2]\
    \ {\n            count += 1\n            i += 1\n            j += 1\n        \
    \    i += 1\n        } else if string.characters[i] == substring.characters[3]\
    \ {\n            count += 1\n            i += 1\n            j += 1\n        \
    \    i += 1\n            j += 1\n        } else if string.characters[i] == substring.characters[4]\
    \ {\n            count += 1\n            i += 1\n            j += 1\n        \
    \    i += 1\n            j += 1\n            i += 1\n            j += 1\n    \
    \    } else if string.characters[i] == substring.characters[5] {\n           \
    \ count += 1\n            i += 1\n            j += 1\n            i += 1\n   \
    \         j += 1\n            i += 1\n            j += 1\n            i += 1\n\
    \            j += 1\n        } else if string.characters[i] == substring.characters[6]\
    \ {\n            count += 1\n            i += 1\n            j += 1\n        \
    \    i += 1\n            j += 1\n            i += 1\n            j += 1\n    \
    \        i += 1\n            j += 1\n            i += 1\n            j += 1\n\
    \            i += 1\n            j += 1\n        } else if string.characters[i]\
    \ == substring.characters[7] {\n            count += 1\n            i += 1\n \
    \           j += 1\n            i += 1\n            j += 1\n            i += 1\n\
    \            j += 1\n            i += 1\n            j += 1\n            i +=\
    \ 1\n            j += 1\n            i += 1\n            j += 1\n            i\
    \ += 1\n            j += 1\n            i += 1\n            j += 1\n         \
    \   i += 1\n            j += 1\n            i += 1\n            j += 1\n     \
    \       i += 1\n            j += 1\n            i += 1\n            j += 1\n \
    \           i += 1\n            j += 1\n            i += 1\n            j += 1\n\
    \            i += 1\n            j += 1\n            i += 1\n            j +=\
    \ 1\n            i += 1\n            j += 1\n            i += 1\n            j\
    \ += 1\n            i += 1\n            j += 1\n            i += 1\n         \
    \   j += 1\n            i += 1\n            j += 1\n            i += 1\n     \
    \       j += 1\n            i += 1\n            j += 1\n            i += 1\n \
    \           j += 1\n            i += 1\n            j += 1\n            i += 1\n\
    \            j += 1\n            i += 1\n            j += 1\n            i +=\
    \ 1\n            j += 1\n            i += 1\n            j += 1\n            i\
    \ += 1\n            j += 1\n            i += 1\n            j += 1", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ 1\n    }\n    var count = 0\n    var i = 0\n    var j = 0\n    for ; i < len(string);\
    \ i++ {\n        if string[i] == substring[0] {\n            count++\n       \
    \     for ; j < len(substring); j++ {\n                if string[i+j] != substring[j]\
    \ {\n                    break\n                }\n            }\n        }\n\
    \    }\n    return count", "    if string == \"\" {\n        return 0\n    }\n\
    \    if substring == \"\" {\n        return 1\n    }\n    var count = 0\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n\
    \ = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s =\
    \ 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n\
    \    var y = 0\n    var z = 0\n    var aa = 0\n    var ab = 0\n    var ac = 0\n\
    \    var ad = 0\n    var ae = 0\n    var af = 0\n    var ag = 0\n    var ah =\
    \ 0\n    var ai = 0\n    var aj = 0\n    var ak = 0\n    var al = 0\n    var am\
    \ = 0\n    var an = 0\n    var ao = 0\n    var ap = 0\n    var aq = 0\n    var\
    \ ar = 0\n    var as = 0\n    var at = 0\n    var au = 0\n    var av = 0\n   \
    \ var aw = 0\n    var ax = 0\n    var ay = 0\n    var az = 0\n    var ba = 0\n\
    \    var bb = 0\n    var bc = 0\n    var bd = 0\n    var be = 0\n    var bf =\
    \ 0\n    var bg = 0\n    var bh = 0\n    var bi = 0\n    var bj = 0\n    var bk\
    \ = 0\n    var bl = 0\n    var bm = 0\n    var bn = 0\n    var bo = 0\n    var\
    \ bp = 0\n    var bq = 0\n    var br = 0\n    var bs = 0\n    var bt = 0\n   \
    \ var bu = 0\n    var bv = 0\n    var bw = 0\n    var bx = 0\n    var by = 0\n\
    \    var bz = 0\n    var ca = 0\n    var cb = 0\n    var cc = 0\n    var cd =\
    \ 0\n    var ce = 0\n    var cf = 0\n    var cg = 0\n    var ch = 0\n    var ci\
    \ = 0\n    var cj = 0\n    var ck = 0\n    var cl = 0\n    var cm = 0\n    var\
    \ cn = 0\n    var co = 0\n    var cp = 0\n    var cq = 0\n    var cr = 0\n   \
    \ var cs = 0\n    var ct = 0\n    var cu = 0\n    var cv = 0\n    var cw = 0\n\
    \    var cx = 0\n    var cy = 0\n    var cz = 0\n    var da = 0\n    var db =\
    \ 0\n    var dc = 0\n    var dd = 0\n    var de = 0\n    var df = 0\n    var dg\
    \ = 0\n    var dh = 0\n    var di = 0\n    var dj = 0\n    var dk = 0\n    var\
    \ dl = 0\n    var dm = 0\n    var dn = 0\n    var do = 0\n    var dp = 0\n   \
    \ var dq = 0\n    var dr = 0\n    var ds = 0\n    var dt = 0\n    var du = 0\n\
    \    var dv = 0\n    var dw = 0\n    var dx = 0\n    var dy = 0\n    var dz",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return count(string)\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o\
    \ = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t =\
    \ 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n\
    \    var z = 0\n    var A = 0\n    var B = 0\n    var C = 0\n    var D = 0\n \
    \   var E = 0\n    var F = 0\n    var G = 0\n    var H = 0\n    var I = 0\n  \
    \  var J = 0\n    var K = 0\n    var L = 0\n    var M = 0\n    var N = 0\n   \
    \ var O = 0\n    var P = 0\n    var Q = 0\n    var R = 0\n    var S = 0\n    var\
    \ T = 0\n    var U = 0\n    var V = 0\n    var W = 0\n    var X = 0\n    var Y\
    \ = 0\n    var Z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d =\
    \ 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n \
    \   var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n  \
    \  var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n   \
    \ var y = 0\n    var z = 0\n    var A = 0\n    var B = 0\n    var C = 0\n    var\
    \ D = 0\n    var E = 0\n    var F = 0\n    var G = 0\n    var H = 0\n    var I\
    \ = 0\n    var J = 0\n    var K = 0\n    var L = 0\n    var M = 0\n    var N =\
    \ 0\n    var O = 0\n    var P = 0\n    var Q = 0\n    var R = 0\n    var S = 0\n\
    \    var T = 0\n    var U = 0\n    var V = 0\n    var W = 0\n    var X = 0\n \
    \   var Y = 0\n    var Z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n  \
    \  var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n   \
    \ var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var\
    \ n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s\
    \ = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x =\
    \ 0\n    var y = 0\n    var z = 0\n    var A = 0\n", "    if string == \"\" {\n\
    \        return 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n\
    \    if string[string.startIndex.successor()] == substring {\n        return 1\
    \ + how_many_times(string[string.startIndex.successor()..<string.endIndex], substring)\n\
    \    }\n    if string[string.endIndex.predecessor()] == substring {\n        return\
    \ 1 + how_many_times(string[string.startIndex.successor()..<string.endIndex],\
    \ substring)\n    }\n    return how_many_times(string[string.startIndex.successor()..<string.endIndex],\
    \ substring) + how_many_times(string[string.endIndex.predecessor()..<string.startIndex],\
    \ substring)", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return 1\n    }\n    if string.hasPrefix(substring) {\n \
    \       return 1 + how_many_times(string.dropFirst(substring.length), substring)\n\
    \    }\n    if string.hasSuffix(substring) {\n        return 1 + how_many_times(string.dropLast(substring.length),\
    \ substring)\n    }\n    return 0", "    if string == \"\" {\n        return 0\n\
    \    }\n    if substring == \"\" {\n        return count(string)\n    }\n    var\
    \ count = 0\n    var i = 0\n    var j = string.characters.count\n    var k = substring.characters.count\n\
    \    while i < j {\n        if string.characters[i] != substring.characters[k]\
    \ {\n            count += 1\n        }\n        i += 1\n        k += 1\n     \
    \   if k > substring.characters.count {\n            k = 0\n        }\n    }\n\
    \    return count", "    var count = 0\n    for index in 0..<string.characters.count\
    \ {\n        if string.substring(from: index).lowercased() == substring.lowercased()\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for c in string.unicodeScalars {\n        if c == substring {\n   \
    \         count += 1\n        }\n    }\n    return count", "    if string == \"\
    \" {\n        return 0\n    }\n    if substring == \"\" {\n        return 1\n\
    \    }\n    if string.hasPrefix(substring) {\n        return 1 + how_many_times(string.dropFirst(substring.length),\
    \ substring)\n    }\n    if string.hasSuffix(substring) {\n        return 1 +\
    \ how_many_times(string.dropLast(substring.length), substring)\n    }\n    if\
    \ string.hasPrefix(substring) || string.hasSuffix(substring) {\n        return\
    \ how_many_times(string.dropFirst(substring.length), substring) + how_many_times(string.dropLast(substring.length),\
    \ substring)\n    }\n    return 0", "    if string == \"\" {\n        return 0\n\
    \    }\n    if substring == \"\" {\n        return 1\n    }\n    var count = 0\n\
    \    var start = 0\n    var end = string.count\n    while start < end {\n    \
    \    if string[start] == substring[0] {\n            count += 1\n            start\
    \ += 1\n            if start == end {\n                return count\n        \
    \    }\n        }\n        if string[end] == substring[0] {\n            count\
    \ += 1\n            end -= 1\n            if start == end {\n                return\
    \ count\n            }\n        }\n        if string[start] == substring[1] {\n\
    \            count += 1\n            start += 1\n            if start == end {\n\
    \                return count\n            }\n        }\n        if string[end]\
    \ == substring[1] {\n            count += 1\n            end -= 1\n          \
    \  if start == end {\n                return count\n            }\n        }\n\
    \        if string[start] == substring[2] {\n            count += 1\n        \
    \    start += 1\n            if start == end {\n                return count\n\
    \            }\n        }\n        if string[end] == substring[2] {\n        \
    \    count += 1\n            end -= 1\n            if start == end {\n       \
    \         return count\n            }\n        }\n        if string[start] ==\
    \ substring[3] {\n            count += 1\n            start += 1\n           \
    \ if start == end {\n                return count\n            }\n        }\n\
    \        if string[end] == substring[3] {\n            count += 1\n          \
    \  end -= 1\n            if start == end {\n                return count\n   \
    \         }\n        }\n        if string[start] == substring[4] {\n         \
    \   count += 1\n            start += 1\n            if start == end {\n      \
    \          return count\n            }\n        }\n        if string[end] == substring[4]\
    \ {\n            count += 1\n            end -= 1\n            if start == end\
    \ {\n                return count\n            }\n        }\n        if string[start]\
    \ == substring[5] {\n            count += 1\n            start += 1\n        \
    \    if start == end {\n                return count\n            }\n        }\n\
    \        if string[end] == substring[5] {\n            count += 1\n          \
    \  end -= 1\n            if start == end {\n                return count\n   \
    \         }\n        }\n        if string[start] == substring[6] {\n         \
    \   count += 1\n            start += 1\n            if start == end {\n      \
    \          return count\n            }\n        }\n        if string[end] == substring[6]\
    \ {\n            count += 1\n            end -= 1\n            if start == end\
    \ {\n                return count\n            }\n        }\n        if string[start]\
    \ == substring[7] {\n            count += 1\n            start += 1\n        \
    \    if start == end {\n                return count\n            }\n        }\n\
    \        if string[end] == substring[7] {\n            count += 1\n          \
    \  end -= 1\n            if start == end {\n                return count\n   \
    \         }\n        }\n        if string[start] == substring[8] {\n", "    if\
    \ string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n    \
    \    return string.count\n    }\n    var count = 0\n    var start = 0\n    var\
    \ end = string.count\n    while start < end {\n        let index = string.index(start,\
    \ offsetBy: substring.count)\n        if index == nil {\n            break\n \
    \       }\n        start = index!.advanced(by: substring.count)\n        count\
    \ += 1\n    }\n    return count", "    if string == \"\" {\n        return 0\n\
    \    }\n    if substring == \"\" {\n        return 1\n    }\n    var count = 0\n\
    \    var i = 0\n    var j = 0\n    var k = 0\n    var last = 0\n    for i < string.count\
    \ {\n        if string[i] == substring[0] {\n            count += 1\n        \
    \    last = i\n            i += 1\n            continue\n        }\n        if\
    \ string[i] == substring[1] {\n            count += 1\n            last = i\n\
    \            i += 1\n            continue\n        }\n        if string[i] ==\
    \ substring[2] {\n            count += 1\n            last = i\n            i\
    \ += 1\n            continue\n        }\n        if string[i] == substring[3]\
    \ {\n            count += 1\n            last = i\n            i += 1\n      \
    \      continue\n        }\n        if string[i] == substring[4] {\n         \
    \   count += 1\n            last = i\n            i += 1\n            continue\n\
    \        }\n        if string[i] == substring[5] {\n            count += 1\n \
    \           last = i\n            i += 1\n            continue\n        }\n  \
    \      if string[i] == substring[6] {\n            count += 1\n            last\
    \ = i\n            i += 1\n            continue\n        }\n        if string[i]\
    \ == substring[7] {\n            count += 1\n            last = i\n          \
    \  i += 1\n            continue\n        }\n        if string[i] == substring[8]\
    \ {\n            count += 1\n            last = i\n            i += 1\n      \
    \      continue\n        }\n        if string[i] == substring[9] {\n         \
    \   count += 1\n            last = i\n            i += 1\n            continue\n\
    \        }\n        if string[i] == substring[10] {\n            count += 1\n\
    \            last = i\n            i += 1\n            continue\n        }\n \
    \       if string[i] == substring[11] {\n            count += 1\n            last\
    \ = i\n            i += 1\n            continue\n        }\n        if string[i]\
    \ == substring[12] {\n            count += 1\n            last = i\n         \
    \   i += 1\n            continue\n        }\n        if string[i] == substring[13]\
    \ {\n            count += 1\n            last = i\n            i += 1\n      \
    \      continue\n        }\n        if string[i] == substring[14] {\n        \
    \    count += 1\n            last = i\n            i += 1\n            continue\n\
    \        }\n        if string[i] == substring[15] {\n            count += 1\n\
    \            last = i\n            i += 1\n            continue\n        }\n \
    \       if string[i] == substring[16] {\n            count += 1\n            last\
    \ = i\n            i += 1\n            continue\n        }\n        if string[i]\
    \ == substring[17] {\n            count += 1\n            last = i\n         \
    \   i += 1\n            continue\n        }\n        if string[i] == substring[18]\
    \ {\n            count += 1\n            last = i\n            i += 1\n      \
    \      continue\n        }\n        if string[i] == substring[19] {\n        \
    \    count += 1\n            last = i\n            i += 1\n            continue\n\
    \        }\n        if string[i] == substring[20] {\n            count += 1\n\
    \            last = i\n            i += 1\n            continue\n        }\n \
    \       if string[i] == substring[21] {\n            count += 1\n            last\
    \ = i\n            i += 1", "    if string == \"\" {\n        return 0\n    }\n\
    \    if substring == \"\" {\n        return 1\n    }\n    var count = 0\n    var\
    \ i = 0\n    var j = 0\n    while i < string.count {\n        j = string.index(substring,\
    \ i)\n        if j == nil {\n            break\n        }\n        count = count\
    \ + 1\n        i = j + 1\n    }\n    return count", "    if string == \"\" ||\
    \ substring == \"\" {\n        return 0\n    }\n    var count = 0\n    var startIndex\
    \ = 0\n    var endIndex = 0\n    while startIndex < string.count {\n        endIndex\
    \ = string.index(substring, startIndex).offsetBy(len(substring))\n        if endIndex\
    \ == startIndex {\n            count += 1\n        } else {\n            count\
    \ += endIndex - startIndex\n        }\n        startIndex = endIndex + 1\n   \
    \ }\n    return count", '    return string.countSubstrings(substring)', "    if\
    \ string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n    \
    \    return 1\n    }\n    if string.rangeOfString(substring) == nil {\n      \
    \  return 0\n    }\n    return string.rangeOfString(substring).location + string.rangeOfString(substring).length",
  "    var count = 0\n    for index in 0..<string.characters.count {\n        if string.substring(from:\
    \ index).contains(substring) {\n            count += 1\n        }\n    }\n   \
    \ return count", "    if string == \"\" || substring == \"\" {\n        return\
    \ 0\n    }\n    var count = 0\n    var i = 0\n    var j = string.count\n    var\
    \ k = substring.count\n    while i < j {\n        if string[i] == substring[k]\
    \ {\n            count += 1\n            i += k\n            k += 1\n        }\n\
    \        i += 1\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return count(string)\n    }\n\
    \    var count = 0\n    var i = 0\n    var j = string.count\n    var k = substring.count\n\
    \    while i < j {\n        if string[i] == substring[k] {\n            count\
    \ += 1\n            i += k\n            k += 1\n            if k == substring.count\
    \ {\n                k = 0\n            }\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n    var count\
    \ = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = string.characters.count\n\
    \    var m = substring.characters.count\n    while i < l {\n        j = string.characters.index(string.startIndex,\
    \ offsetBy: i)\n        k = substring.characters.index(substring.startIndex, offsetBy:\
    \ j)\n        if k == nil {\n            break\n        }\n        if string.characters[k!]\
    \ != substring.characters[j!] {\n            break\n        }\n        i += 1\n\
    \        count += 1\n    }\n    return count", '    return count_substrings(string,
    substring)', "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return count(string)\n    }\n    var count = 0\n    var i\
    \ = 0\n    var j = string.startIndex\n    while i < string.endIndex {\n      \
    \  if string[i] == substring[0] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[1] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[2]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[3] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[4] {\n      \
    \      count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[5] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[6] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[7]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[8] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[9] {\n      \
    \      count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[10] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[11] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[12]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[13] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[14] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[15] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[16] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[17]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[18] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[19] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[20] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[21] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[22]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[23] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[24] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[25] {", "    if string == \"\" {\n        return 0\n\
    \    }\n    if substring == \"\" {\n        return count(string)\n    }\n    var\
    \ count = 0\n    var i = 0\n    var j = string.characters.count\n    var k = substring.characters.count\n\
    \    while i < j {\n        if string[i] != substring[k] {\n            count\
    \ = count + 1\n        }\n        i = i + 1\n        k = k - 1\n    }\n    return\
    \ count", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return count(string)\n    }\n    var count = 0\n    var i\
    \ = 0\n    var j = 0\n    for i < string.count {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            i += 1\n            for j < substring.count\
    \ {\n                if string[i] == substring[j] {\n                    count\
    \ += 1\n                    i += 1\n                    j += 1\n             \
    \   }\n            }\n        }\n    }\n    return count", "    if string == \"\
    \" {\n        return 0\n    }\n    if substring == \"\" {\n        return count(string)\n\
    \    }\n    var count = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var\
    \ l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q\
    \ = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v =\
    \ 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var A = 0\n\
    \    var B = 0\n    var C = 0\n    var D = 0\n    var E = 0\n    var F = 0\n \
    \   var G = 0\n    var H = 0\n    var I = 0\n    var J = 0\n    var K = 0\n  \
    \  var L = 0\n    var M = 0\n    var N = 0\n    var O = 0\n    var P = 0\n   \
    \ var Q = 0\n    var R = 0\n    var S = 0\n    var T = 0\n    var U = 0\n    var\
    \ V = 0\n    var W = 0\n    var X = 0\n    var Y = 0\n    var Z = 0\n    var a\
    \ = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f =\
    \ 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n\
    \    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n \
    \   var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n  \
    \  var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n   \
    \ var A = 0\n    var B = 0\n    var C = 0\n    var D = 0\n    var E = 0\n    var\
    \ F = 0\n    var G = 0\n    var H = 0\n    var I = 0\n    var J = 0\n    var K\
    \ = 0\n    var L = 0\n    var M = 0\n    var N = 0\n    var O = 0\n    var P =\
    \ 0\n    var Q = 0\n    var R = 0\n    var S = 0\n    var T = 0\n    var U = 0\n\
    \    var V = 0\n    var W = 0\n    var X = 0\n    var Y = 0\n    var Z = 0\n \
    \   var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n  \
    \  var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n   \
    \ var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var\
    \ p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u\
    \ = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z =\
    \ 0\n    var A = 0\n", "    if string == \"\" {\n        return 0\n    }\n   \
    \ if substring == \"\" {\n        return count(string)\n    }\n    var count =\
    \ 0\n    var i = 0\n    var j = 0\n    var k = 0\n    for k in 0..<count(string)\
    \ {\n        if string[k] == substring[0] {\n            i = k\n            j\
    \ = k\n        }\n        if string[k] == substring[1] {\n            i = k\n\
    \            j = k + 1\n        }\n        if string[k] == substring[2] {\n  \
    \          i = k\n            j = k + 2\n        }\n        if string[k] == substring[3]\
    \ {\n            i = k\n            j = k + 3\n        }\n        if string[k]\
    \ == substring[4] {\n            i = k\n            j = k + 4\n        }\n   \
    \     if string[k] == substring[5] {\n            i = k\n            j = k + 5\n\
    \        }\n        if string[k] == substring[6] {\n            i = k\n      \
    \      j = k + 6\n        }\n        if string[k] == substring[7] {\n        \
    \    i = k\n            j = k + 7\n        }\n        if string[k] == substring[8]\
    \ {\n            i = k\n            j = k + 8\n        }\n        if string[k]\
    \ == substring[9] {\n            i = k\n            j = k + 9\n        }\n   \
    \     if string[k] == substring[10] {\n            i = k\n            j = k +\
    \ 10\n        }\n        if string[k] == substring[11] {\n            i = k\n\
    \            j = k + 11\n        }\n        if string[k] == substring[12] {\n\
    \            i = k\n            j = k + 12\n        }\n        if string[k] ==\
    \ substring[13] {\n            i = k\n            j = k + 13\n        }\n    \
    \    if string[k] == substring[14] {\n            i = k\n            j = k + 14\n\
    \        }\n        if string[k] == substring[15] {\n            i = k\n     \
    \       j = k + 15\n        }\n        if string[k] == substring[16] {\n     \
    \       i = k\n            j = k + 16\n        }\n        if string[k] == substring[17]\
    \ {\n            i = k\n            j = k + 17\n        }\n        if string[k]\
    \ == substring[18] {\n            i = k\n            j = k + 18\n        }\n \
    \       if string[k] == substring[19] {\n            i = k\n            j = k\
    \ + 19\n        }\n        if string[k] == substring[20] {\n            i = k\n\
    \            j = k + 20\n        }\n        if string[k] == substring[21] {\n\
    \            i = k\n            j = k + 21\n        }\n        if string[k] ==\
    \ substring[22] {\n            i = k\n            j = k + 22\n", "    if string.hasSuffix(substring)\
    \ {\n        return string.count(substring)\n    }\n    return string.count(substring)\
    \ + how_many_times(string, substring[..<string.count])", '    return count_overlapping_cases(string,
    substring)', "    let start = string.startIndex.advancedBy(substring.startIndex.distanceTo(string.startIndex))\n\
    \    let end = string.startIndex.advancedBy(substring.endIndex.distanceTo(string.startIndex))\n\
    \    let count = string.distance(from: start, to: end) + 1\n    return count",
  "    if string == \"\" || substring == \"\" {\n        return 0\n    }\n    var\
    \ count = 0\n    var i = 0\n    var j = 0\n    var k = string.startIndex\n   \
    \ while i < string.endIndex && j < substring.endIndex {\n        if string[i]\
    \ == substring[j] {\n            count += 1\n            i += 1\n            j\
    \ += 1\n        } else if string[i] < substring[j] {\n            i += 1\n   \
    \     } else {\n            j += 1\n        }\n    }\n    return count", "   \
    \ if string == \"\" || substring == \"\" {\n        return 0\n    }\n    var count\
    \ = 0\n    var startIndex = 0\n    var endIndex = string.count\n    var substringIndex\
    \ = string.startIndex\n    while substringIndex < endIndex {\n        if string[substringIndex]\
    \ == substring[0] {\n            substringIndex += 1\n            count += 1\n\
    \            if substringIndex == string.endIndex {\n                substringIndex\
    \ += 1\n                endIndex -= 1\n            }\n        } else {\n     \
    \       substringIndex += 1\n        }\n    }\n    return count", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ count(string)\n    }\n    var count = 0\n    var i = 0\n    var j = string.count\n\
    \    var k = substring.count\n    while i < j && k < string.count {\n        if\
    \ string[i] == substring[k] {\n            count += 1\n            i += 1\n  \
    \          k += 1\n        }\n        if string[i] == substring[k] {\n       \
    \     i += 1\n            k += 1\n        }\n        if string[i] == substring[k]\
    \ {\n            i += 1\n            k += 1\n        }\n        if string[i] ==\
    \ substring[k] {\n            i += 1\n            k += 1\n        }\n        if\
    \ string[i] == substring[k] {\n            i += 1\n            k += 1\n      \
    \  }\n        if string[i] == substring[k] {\n            i += 1\n           \
    \ k += 1\n        }\n        if string[i] == substring[k] {\n            i +=\
    \ 1\n            k += 1\n        }\n        if string[i] == substring[k] {\n \
    \           i += 1\n            k += 1\n        }\n        if string[i] == substring[k]\
    \ {\n            i += 1\n            k += 1\n        }\n        if string[i] ==\
    \ substring[k] {\n            i += 1\n            k += 1\n        }\n        if\
    \ string[i] == substring[k] {\n            i += 1\n            k += 1\n      \
    \  }\n        if string[i] == substring[k] {\n            i += 1\n           \
    \ k += 1\n        }\n        if string[i] == substring[k] {\n            i +=\
    \ 1\n            k += 1\n        }\n        if string[i] == substring[k] {\n \
    \           i += 1\n            k += 1\n        }\n        if string[i] == substring[k]\
    \ {\n            i += 1\n            k += 1\n        }\n        if string[i] ==\
    \ substring[k] {\n            i += 1\n            k += 1\n        }\n        if\
    \ string[i] == substring[k] {\n            i += 1\n            k += 1\n      \
    \  }\n        if string[i] == substring[k] {\n            i += 1\n           \
    \ k += 1\n        }\n        if string[i] == substring[k] {\n            i +=\
    \ 1\n            k += 1\n        }\n        if string[i] == substring[k] {\n \
    \           i += 1\n            k += 1\n        }\n        if string[i] == substring[k]\
    \ {\n            i += 1\n            k += 1\n        }\n        if string[i] ==\
    \ substring[k] {\n            i += 1\n            k += 1\n        }\n        if\
    \ string[i] == substring[k] {\n            i += 1\n            k += 1\n      \
    \  }\n        if string[i] == substring[k] {\n            i += 1\n           \
    \ k += 1\n        }\n        if string[i] == substring[k] {\n            i +=\
    \ 1\n            k += 1\n        }\n        if string[i] == substring[k] {\n \
    \           i += 1\n            k += 1\n        }\n        if string[i] == substring[k]\
    \ {\n            i += 1\n            k += 1\n        }\n        if string[i] ==\
    \ substring[k] {\n            i += 1\n            k += 1\n        }\n        if\
    \ string[i] == substring[k] {\n            i += 1\n            k ", '    return
    count_overlapping_cases(string, substring)', "    if string == \"\" {\n      \
    \  return 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n    var\
    \ count = 0\n    var i = 0\n    var j = string.count\n    var k = substring.count\n\
    \    while i < j {\n        if string[i] == substring[k] {\n            count\
    \ += 1\n            i += 1\n            k += 1\n            if k == substring.count\
    \ {\n                k = 0\n            }\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n    var count\
    \ = 0\n    var i = 0\n    var j = string.characters.count\n    var k = substring.characters.count\n\
    \    while i < j {\n        if string.characters[i] != substring.characters[k]\
    \ {\n            count += 1\n        }\n        i += 1\n        k += 1\n    }\n\
    \    return count", "    var count = 0\n    for index in 0..<string.characters.count\
    \ {\n        if string.substring(from: index).lowercased() == substring.lowercased()\
    \ {\n            count += 1\n        }\n    }\n    return count", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ 1\n    }\n    var count = 0\n    var i = 0\n    var j = string.count\n    var\
    \ k = substring.count\n    while i < j && k < string.count {\n        if string[i]\
    \ == substring[k] {\n            count += 1\n            i += 1\n            k\
    \ += 1\n        }\n        if k == substring.count {\n            j += 1\n   \
    \         k = 0\n        }\n    }\n    return count", "    if string == \"\" ||\
    \ substring == \"\" {\n        return 0\n    }\n    var count = 0\n    var i =\
    \ 0\n    var j = string.characters.count\n    var k = substring.characters.count\n\
    \    while i < j {\n        if string[i] != substring[k] {\n            count\
    \ = count + 1\n        }\n        i += 1\n        k += 1\n    }\n    return count",
  "    if string == \"\" || substring == \"\" {\n        return 0\n    }\n    var\
    \ count = 0\n    var i = 0\n    var j = string.characters.count\n    var k = substring.characters.count\n\
    \    while i < j {\n        if string[i] != substring[j] {\n            count\
    \ = count + 1\n        }\n        i = i + 1\n        j = j - 1\n    }\n    while\
    \ i < k {\n        if string[i] != substring[k] {\n            count = count +\
    \ 1\n        }\n        i = i + 1\n        k = k - 1\n    }\n    return count",
  "    if string == \"\" || substring == \"\" {\n        return 0\n    }\n    var\
    \ count = 0\n    var i = 0\n    var j = string.characters.count\n    var k = substring.characters.count\n\
    \    while i < j && i < k {\n        if string.characters[i] == substring.characters[i]\
    \ {\n            i += 1\n            count += 1\n        } else {\n          \
    \  i = 0\n        }\n    }\n    return count", "    if string == \"\" {\n    \
    \    return 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n  \
    \  var count = 0\n    var start = 0\n    var end = string.count\n    while start\
    \ < end {\n        start = string.index(substring, start) + 1\n        end = string.index(substring,\
    \ end) + 1\n        count += 1\n    }\n    return count", "    if string == \"\
    \" {\n        return 0\n    }\n    if substring == \"\" {\n        return 1\n\
    \    }\n    var count = 0\n    var i = 0\n    var j = string.count\n    while\
    \ i < j {\n        if string[i] == substring[0] {\n            i += 1\n      \
    \      count += how_many_times(string: String(string[i..<j]), substring: substring[1:])\n\
    \        } else {\n            i += 1\n        }\n    }\n    return count", " \
    \   let start = string.startIndex.distanceTo(substring.startIndex)\n    let end\
    \ = string.endIndex.distanceTo(substring.endIndex)\n    return end - start", " \
    \   if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return count(string)\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = string.characters.count\n    while i < j {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            i += count(substring)\n        } else\
    \ {\n            i += 1\n        }\n    }\n    return count", "    var count =\
    \ 0\n    for index in 0..<string.characters.count {\n        if string.substring(from:\
    \ index).lowercased() == substring.lowercased() {\n            count += 1\n  \
    \      }\n    }\n    return count"]
stop_tokens:
- "\n}"
