name: HumanEval_162_string_to_md5
language: swift
prompt: "\n/// Given a string 'text', return its md5 hash equivalent string.\n///\
  \ If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"Hello\
  \ world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text: String)\
  \ -> String? {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(string_to_md5(text: \"Hello world\") ==\
  \ \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text: \"\") == nil)\n\
  assert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\
  assert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
  )"
completions: ["    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()",
  "    let data = text.data(using: String.Encoding.utf8)\n    if let hash = MD5(data!)\
    \ {\n        return hash.base64EncodedString()\n    }\n    return nil", "    if\
    \ text == \"\" {\n        return nil\n    }\n    let data = text.data(using: .utf8)\n\
    \    let hash = data.md5()\n    return String(data: hash, encoding: .utf8)", " \
    \   if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    let hash = data.md5()\n    return hash?.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    return md5(text)", "    let\
    \ data = text.data(using: .utf8)\n    if let hash = data.md5() {\n        return\
    \ String(data: hash, encoding: .utf8)\n    }\n    return nil", "    if text ==\
    \ \"\" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5(data: data)\n    return hash.base64EncodedString()", "   \
    \ if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    let hash = MD5(data!)\n    return hash.hexString", "    if text\
    \ == \"\" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    let hash = MD5.hash(data!)\n    return hash.hexString", "    if text == \"\
    \" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5(data: data)\n    return hash.base64EncodedString()", "   \
    \ if text == \"\" {\n        return nil\n    }\n    var md5 = MD5()\n    md5.update(text.data(using:\
    \ .utf8)!)\n    return String(data: md5.digest(), encoding: .utf8)", "    if text\
    \ == \"\" {\n        return nil\n    }\n    return MD5Hash(text)", "    if text\
    \ == \"\" {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n\
    \    let hash = MD5(data: data)\n    return hash.base64EncodedString()", "   \
    \ guard text != \"\" else {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8)", "    if text == \"\" {\n        return\
    \ nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n    let hash\
    \ = MD5.hash(data!)\n    return String(data: hash, encoding: String.Encoding.utf8)",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    let hash = MD5(data!)\n    return hash.base64EncodedString()", " \
    \   if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    let digest = data.md5()\n    return digest.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    if let hash = data.md5() {\n        return String(data:\
    \ hash, encoding: String.Encoding.utf8)\n    }\n    return nil", "    if text\
    \ == \"\" {\n        return nil\n    }\n    return MD5Hash(text)", "    guard\
    \ text != \"\" else {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5.hash(data: data)\n    return hash.hexString", " \
    \   if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8)", "    if text == \"\" {\n        return\
    \ nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n    let\
    \ hash = MD5(data: data)\n    return hash.base64EncodedString()", "    if text\
    \ == \"\" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return String(data: hash, encoding:\
    \ String.Encoding.utf8) ?? nil", "    let data = text.data(using: .utf8)\n   \
    \ if let hash = data.md5() {\n        return String(data: hash, encoding: .utf8)\n\
    \    }\n    return nil", "    if text == \"\" {\n        return nil\n    }\n \
    \   let data = text.data(using: .utf8)\n    let hash = MD5(data!)\n    return\
    \ hash.base64EncodedString()", "    if text == \"\" {\n        return nil\n  \
    \  }\n    let data = text.data(using: .utf8)!\n    let digest = MD5(data: data)\n\
    \    return digest.base64EncodedString()", "    if text == \"\" {\n        return\
    \ nil\n    }\n    let data = text.data(using: .utf8)!\n    let hash = MD5(data:\
    \ data)\n    return hash.base64EncodedString()", "    if text == \"\" {\n    \
    \    return nil\n    }\n    let data = text.data(using: .utf8)!\n    let hash\
    \ = MD5(data: data)\n    return hash.base64EncodedString()", "    guard let data\
    \ = text.data(using: .utf8) else {\n        return nil\n    }\n    return data.md5()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8)", "    if text == \"\" {\n        return\
    \ nil\n    }\n    let data = text.data(using: .utf8)\n    if let hash = data.md5()\
    \ {\n        return String(data: hash, encoding: .utf8)\n    }\n    return nil",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil", "    if text == \"\" {\n    \
    \    return nil\n    }\n    let data = text.data(using: .utf8)\n    let hash =\
    \ MD5.hash(data!)\n    return hash?.base64EncodedString()", "    if text == \"\
    \" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    let hash = MD5.hash(data!)\n    return String(data: hash, encoding: String.Encoding.utf8)",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n    return String(data:\
    \ hash!, encoding: String.Encoding.utf8)", "    if text == \"\" {\n        return\
    \ nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n    let hash\
    \ = MD5.hash(data!)\n    return String(data: hash, encoding: String.Encoding.utf8)",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n    return hash.hexString",
  "    let data = text.data(using: String.Encoding.utf8)\n    if let hash = MD5(data!)\
    \ {\n        return hash.base64EncodedString()\n    }\n    return nil", "    if\
    \ text == \"\" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5(data: data)\n    return hash.base64EncodedString()", "   \
    \ let data = text.data(using: .utf8)\n    if let hash = MD5(data!) {\n       \
    \ return hash.base64EncodedString()\n    }\n    return nil", "    if text == \"\
    \" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return hash.hexString", "    if text\
    \ == \"\" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    if let hash = data.md5() {\n        return String(data: hash, encoding: String.Encoding.utf8)\n\
    \    }\n    return nil", "    if text == \"\" {\n        return nil\n    }\n \
    \   let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5(data:\
    \ data)\n    return hash.base64EncodedString()", "    if text == \"\" {\n    \
    \    return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    var md5: MD5\n    md5.Init()\n\
    \    md5.Update(text.data(using: .utf8)!)\n    var md5String: String = String()\n\
    \    for _ in 0..<md5.Size {\n        md5String += String(format: \"%02x\", md5.Sum(nil))\n\
    \    }\n    return md5String", "    if text == \"\" {\n        return nil\n  \
    \  }\n    let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return hash.hexString", "    if text == \"\" {\n        return nil\n\
    \    }\n    let data = text.data(using: String.Encoding.utf8)!\n    let hash =\
    \ MD5(data: data)\n    return hash.base64EncodedString()", "    if text == \"\"\
    \ {\n        return nil\n    }\n    let data = text.data(using: .utf8)\n    return\
    \ md5(data!)", "    if text == \"\" {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = MD5(data: data)\n    return hash.hexString",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil", "    if text == \"\" {\n    \
    \    return nil\n    }\n    let data = text.data(using: .utf8)!\n    let hash\
    \ = MD5(data: data)\n    return hash.base64EncodedString()", "    if text == \"\
    \" {\n        return nil\n    }\n    var md5: MD5\n    md5.CalculateString(text)\n\
    \    return md5.GetMD5String()", "    if text == \"\" {\n        return nil\n\
    \    }\n    let data = text.data(using: String.Encoding.utf8)\n    let hash =\
    \ MD5.hash(data!)\n    return String(data: hash, encoding: String.Encoding.utf8)",
  "    guard text != \"\" else {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    if let hash = data.md5() {\n        return String(data:\
    \ hash, encoding: String.Encoding.utf8)\n    }\n    return nil", "    if text\
    \ == \"\" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5(data: data)\n    return hash.hexString", "    if text == \"\
    \" {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n   \
    \ let hash = MD5.hash(data: data)\n    return String(data: hash, encoding: .utf8)",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8)", "    if text == \"\" {\n        return\
    \ nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n    let hash\
    \ = MD5(data!)\n    return hash.base64EncodedString()", "    if text == \"\" {\n\
    \        return nil\n    }\n    let data = text.data(using: .utf8)\n    let hash\
    \ = data.md5()\n    return String(data: hash, encoding: .utf8)", "    if text\
    \ == \"\" {\n        return nil\n    }\n    let data = text.data(using: .utf8)\n\
    \    let hash = MD5(data!)\n    return hash.base64EncodedString()", "    if text\
    \ == \"\" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return String(data: hash, encoding:\
    \ String.Encoding.utf8) ?? nil", "    if text == \"\" {\n        return nil\n\
    \    }\n    let data = text.data(using: .utf8)\n    if let hash = data.md5() {\n\
    \        return String(hash)\n    }\n    return nil", "    if text == \"\" {\n\
    \        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    let hash = MD5.hash(data!)\n    return String(data: hash!, encoding: String.Encoding.utf8)",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    let hash = data.md5()\n    return hash?.base64EncodedString()",
  "    guard let data = text.data(using: .utf8) else { return nil }\n    let hash\
    \ = MD5(data: data)\n    return hash.base64EncodedString()", "    if text == \"\
    \" {\n        return nil\n    }\n    let data = text.data(using: .utf8)\n    if\
    \ let hash = data.md5() {\n        return String(hash)\n    }\n    return nil",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8)", "    if text == \"\" {\n        return\
    \ nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n    let hash\
    \ = MD5.hash(data!)\n    return String(data: hash!, encoding: String.Encoding.utf8)",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data: hash,\
    \ encoding: .utf8)", "    if text == \"\" {\n        return nil\n    }\n    let\
    \ data = text.data(using: String.Encoding.utf8)\n    if let hash = data.md5()\
    \ {\n        return String(data: hash, encoding: String.Encoding.utf8)\n    }\n\
    \    return nil", "    if text == \"\" {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)\n    let hash = data.md5()\n    return hash?.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil", "    let data = text.data(using:\
    \ .utf8)\n    if let hash = MD5(data!) {\n        return hash.base64EncodedString()\n\
    \    }\n    return nil", "    if text == \"\" {\n        return nil\n    }\n \
    \   let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8)", "   \
    \ if text == \"\" {\n        return nil\n    }\n    var md5: MD5\n    md5.Init()\n\
    \    md5.Update(text.data(using: .utf8)!)\n    var md5String: String = String()\n\
    \    for _ in 0..<md5.Size {\n        md5String += String(format: \"%02x\", md5.Sum(nil))\n\
    \    }\n    return md5String", "    if text == \"\" {\n        return nil\n  \
    \  }\n    let data = text.data(using: .utf8)!\n    let hash = MD5(data: data)\n\
    \    return hash.base64EncodedString()", "    if text == \"\" {\n        return\
    \ nil\n    }\n    let data = text.data(using: .utf8)\n    return String(data:\
    \ data, encoding: .utf8)", "    if text == \"\" {\n        return nil\n    }\n\
    \    let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8) ?? nil",
  "    let data = text.data(using: String.Encoding.utf8)\n    if let hash = MD5.hash(data!)\
    \ {\n        return hash.base64EncodedString()\n    }\n    return nil", "    if\
    \ text == \"\" {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return String(data: hash, encoding:\
    \ .utf8)", "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()",
  "    let data = text.data(using: .utf8)\n    if let hash = data.md5() {\n      \
    \  return String(data: hash, encoding: .utf8)\n    }\n    return nil", "    if\
    \ text == \"\" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return String(data: hash, encoding:\
    \ String.Encoding.utf8)", "    if text == \"\" {\n        return nil\n    }\n\
    \    let data = text.data(using: .utf8)\n    let hash = MD5(data!)\n    return\
    \ hash.base64EncodedString()", "    if text == \"\" {\n        return nil\n  \
    \  }\n    let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5(data:\
    \ data)\n    return hash.base64EncodedString()", "    let data = text.data(using:\
    \ .utf8)\n    if let hash = MD5.hash(data!) {\n        return hash.base64EncodedString()\n\
    \    }\n    return nil", "    if text == \"\" {\n        return nil\n    }\n \
    \   var md5: MD5\n    md5.CalculateString(text)\n    return md5.GetMD5String()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    let hash = MD5.hash(data!)\n    return String(data: hash!, encoding:\
    \ .utf8)", "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    let hash = data.md5()\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    if let hash = data.md5() {\n        return String(hash)\n\
    \    }\n    return nil", "    if text == \"\" {\n        return nil\n    }\n \
    \   var md5: MD5\n    md5.Init()\n    md5.Update(text.data(using: .utf8)!)\n \
    \   var md5String: String = String()\n    for _ in 0..<md5.Size {\n        md5String\
    \ += String(format: \"%02x\", md5.Digest())\n    }\n    return md5String", " \
    \   if text == \"\" {\n        return nil\n    }\n    var md5: MD5\n    md5.Init()\n\
    \    md5.Update(text.data(using: .utf8)!)\n    var md5String: String = String()\n\
    \    for _ in 0..<md5.Size {\n        md5String += String(format: \"%02x\", md5.Sum(nil))\n\
    \    }\n    return md5String", "    if text == \"\" {\n        return nil\n  \
    \  }\n    let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5(data:\
    \ data)\n    return hash.base64EncodedString()", "    if text == \"\" {\n    \
    \    return nil\n    }\n    let data = text.data(using: .utf8)\n    let hash =\
    \ MD5.hash(data!)\n    return String(data: hash!, encoding: .utf8)", "    if text\
    \ == \"\" {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n\
    \    let hash = MD5(data: data)\n    return hash.base64EncodedString()", "   \
    \ if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    let hash = MD5(data!)\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    if let hash = data.md5() {\n        return String(hash)\n    }\n\
    \    return nil", "    if text == \"\" {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)\n    if let hash = data.md5() {\n \
    \       return String(data: hash, encoding: .utf8)\n    }\n    return nil", " \
    \   let data = text.data(using: String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n\
    \    return String(data: hash!, encoding: String.Encoding.utf8) ?? nil", "   \
    \ if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    let hash = MD5(data!)\n    return hash.base64EncodedString()", " \
    \   if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    if let hash = data.md5() {\n        return String(hash)\n    }\n\
    \    return nil", "    if text == \"\" {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n \
    \   return hash.hexString", "    if text == \"\" {\n        return nil\n    }\n\
    \    let data = text.data(using: .utf8)!\n    let hash = MD5(data: data)\n   \
    \ return hash.base64EncodedString()", "    if text == \"\" {\n        return nil\n\
    \    }\n    let data = text.data(using: .utf8)\n    let digest = data.md5()\n\
    \    return digest.base64EncodedString()", "    if text == \"\" {\n        return\
    \ nil\n    }\n    let data = text.data(using: .utf8)\n    let hash = data.md5()\n\
    \    return String(data: hash, encoding: .utf8)", "    if text == \"\" {\n   \
    \     return nil\n    }\n    var md5: MD5\n    md5.CalculateString(text)\n   \
    \ return md5.GetMD5String()", "    if text == \"\" {\n        return nil\n   \
    \ }\n    let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5(data:\
    \ data)\n    return hash.base64EncodedString()", "    if text == \"\" {\n    \
    \    return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return hash.hexString", "    if text\
    \ == \"\" {\n        return nil\n    }\n    var md5: CC_MD5_CTX = CC_MD5_CTX()\n\
    \    defer { CC_MD5_CTX_free(md5) }\n    CC_MD5_CTX_init(md5)\n    defer { CC_MD5_CTX_cleanup(md5)\
    \ }\n    CC_MD5_Update(md5, text.data(using: .utf8)!, text.count)\n    var digest\
    \ = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    CC_MD5_Final(digest,\
    \ &md5)\n    return String(data: digest, encoding: .utf8)", "    if text == \"\
    \" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return String(data: hash, encoding:\
    \ String.Encoding.utf8) ?? nil", "    if text == \"\" {\n        return nil\n\
    \    }\n    var md5: CString?\n    guard let md5 = MD5(text) else {\n        return\
    \ nil\n    }\n    return String(data: md5._buffer, encoding: .utf8)", "    if\
    \ text == \"\" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return String(data: hash, encoding:\
    \ String.Encoding.utf8)", "    if text == \"\" {\n        return nil\n    }\n\
    \    let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5(data:\
    \ data)\n    return hash.base64EncodedString()", "    if text == \"\" {\n    \
    \    return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return hash.hexString", "    if text\
    \ == \"\" {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return String(data: hash, encoding:\
    \ .utf8)", "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5(data: data)\n    return hash.hexString", "    if\
    \ text == \"\" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    let hash = MD5(data!)\n    return hash.base64EncodedString()", "    if text\
    \ == \"\" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    let hash = MD5(data!)\n    return hash.hexString", "    if text == \"\" {\n\
    \        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return String(data: hash, encoding:\
    \ String.Encoding.utf8)", "    if text == \"\" {\n        return nil\n    }\n\
    \    let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8)", "   \
    \ if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    if let hash = data.md5() {\n        return String(data:\
    \ hash, encoding: String.Encoding.utf8)\n    }\n    return nil", "    if text\
    \ == \"\" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return String(data: hash, encoding:\
    \ String.Encoding.utf8)", "    if text == \"\" {\n        return nil\n    }\n\
    \    let data = text.data(using: .utf8)!\n    let hash = MD5(data: data)\n   \
    \ return hash.hexString", "    if text == \"\" {\n        return nil\n    }\n\
    \    let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8)", "   \
    \ if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data: hash,\
    \ encoding: .utf8)", "    if text == \"\" {\n        return nil\n    }\n    let\
    \ data = text.data(using: .utf8)\n    let hash = MD5(data!)\n    return hash.hexString",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    let hash = MD5(data!)\n    return hash.base64EncodedString()", " \
    \   if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8)", "    if text == \"\" {\n        return\
    \ nil\n    }\n    var md5: MD5\n    md5.CalculateString(text.utf8)\n    return\
    \ String(data: md5.bytes, encoding: .utf8)", "    if text == \"\" {\n        return\
    \ nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n    let\
    \ hash = MD5(data: data)\n    return hash.base64EncodedString()", "    if text\
    \ == \"\" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return String(data: hash, encoding:\
    \ String.Encoding.utf8)", "    if text == \"\" {\n        return nil\n    }\n\
    \    let data = text.data(using: String.Encoding.utf8)\n    let hash = data.md5()\n\
    \    return hash.base64EncodedString()", "    let data = text.data(using: .utf8)\n\
    \    if let hash = data.md5() {\n        return String(hash)\n    }\n    return\
    \ nil", "    let data = text.data(using: String.Encoding.utf8)\n    if let hash\
    \ = data.md5() {\n        return String(data: hash, encoding: String.Encoding.utf8)\n\
    \    }\n    return nil", "    if text == \"\" {\n        return nil\n    }\n \
    \   let data = text.data(using: .utf8)!\n    let hash = MD5.hash(data: data)\n\
    \    return String(data: hash, encoding: .utf8)", "    if text == \"\" {\n   \
    \     return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    let hash = MD5(data!)\n    return hash.base64EncodedString()", "    if text\
    \ == \"\" {\n        return nil\n    }\n    let data = text.data(using: .utf8)\n\
    \    if let hash = data.md5() {\n        return String(hash)\n    }\n    return\
    \ nil", "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    let hash = MD5(data!)\n    return hash.base64EncodedString()", " \
    \   if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    let hash = data.md5()\n    return hash?.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return hash.hexString",
  "    guard text != \"\" else {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data: hash,\
    \ encoding: .utf8)", "    if text == \"\" {\n        return nil\n    }\n    let\
    \ data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8)", "   \
    \ if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data: hash,\
    \ encoding: .utf8)", "    if text == \"\" {\n        return nil\n    }\n    let\
    \ data = text.data(using: String.Encoding.utf8)\n    return md5(data: data!)",
  "    if text == \"\" {\n        return nil\n    }\n    var md5 = MD5()\n    md5.update(text.data(using:\
    \ .utf8)!)\n    return String(data: md5.digest(), encoding: .utf8)", "    if text\
    \ == \"\" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    return NSData(bytes: data, length: data.count).md5()", "    if text == \"\
    \" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return String(data: hash, encoding:\
    \ String.Encoding.utf8) ?? nil", "    if text == \"\" {\n        return nil\n\
    \    }\n    let data = text.data(using: String.Encoding.utf8)!\n    let hash =\
    \ MD5.hash(data: data)\n    return String(data: hash, encoding: String.Encoding.utf8)",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data: hash,\
    \ encoding: .utf8)", "    if text == \"\" {\n        return nil\n    }\n    let\
    \ data = text.data(using: .utf8)\n    if let hash = data.md5() {\n        return\
    \ String(data: hash, encoding: .utf8)\n    }\n    return nil", "    if text ==\
    \ \"\" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5(data: data)\n    return hash.base64EncodedString()", "   \
    \ if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil", "    if text == \"\" {\n    \
    \    return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    let hash = MD5(data!)\n    return hash.hexString", "    if text == \"\" {\n\
    \        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    if let hash = data.md5() {\n        return String(hash)\n    }\n    return\
    \ nil", "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data: hash,\
    \ encoding: .utf8)", "    if text == \"\" {\n        return nil\n    }\n    let\
    \ data = text.data(using: String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n\
    \    return hash.hexString", "    if text == \"\" {\n        return nil\n    }\n\
    \    let data = text.data(using: .utf8)\n    let hash = MD5(data!)\n    return\
    \ hash.hexString", "    if text == \"\" {\n        return nil\n    }\n    let\
    \ data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8) ?? nil",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8)", "    if text == \"\" {\n        return\
    \ nil\n    }\n    let data = text.data(using: .utf8)!\n    let hash = md5(data:\
    \ data)\n    return hash.base64EncodedString()", "    if text == \"\" {\n    \
    \    return nil\n    }\n    let data = text.data(using: .utf8)\n    let hash =\
    \ MD5(data!)\n    return hash.base64EncodedString()", "    if text == \"\" {\n\
    \        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5(data: data)\n    return hash.base64EncodedString()", "   \
    \ if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let digest = MD5(data: data)\n    return digest.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8)", "    if text == \"\" {\n        return\
    \ nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n    let\
    \ hash = MD5(data: data)\n    return hash.base64EncodedString()", "    if text\
    \ == \"\" {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n\
    \    let hash = MD5(data: data)\n    return hash.base64EncodedString()", "   \
    \ if text == \"\" {\n        return nil\n    }\n    var md5: CString?\n    MD5Init(&md5)\n\
    \    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding))\n    MD5Final(&md5)\n\
    \    return String(data: md5!, encoding: NSUTF8StringEncoding)", "    if text\
    \ == \"\" {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n\
    \    let hash = MD5(data: data)\n    return hash.base64EncodedString()", "   \
    \ if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    let hash = MD5(data!)\n    return hash.base64EncodedString()", " \
    \   if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    let hash = data.md5()\n    return hash.base64EncodedString()", " \
    \   if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n    return String(data:\
    \ hash!, encoding: String.Encoding.utf8)", "    if text == \"\" {\n        return\
    \ nil\n    }\n    let data = text.data(using: .utf8)\n    if let hash = data.md5()\
    \ {\n        return String(data: hash, encoding: .utf8)\n    }\n    return nil",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    let hash = MD5(data!)\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil", "    if text == \"\" {\n    \
    \    return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    if let hash = data.md5() {\n        return String(data: hash, encoding: .utf8)\n\
    \    }\n    return nil", "    if text == \"\" {\n        return nil\n    }\n \
    \   var md5: MD5\n    md5.CalculateString(text)\n    return md5.GetMD5String()",
  "    let data = text.data(using: .utf8)\n    if let hash = MD5(data!) {\n      \
    \  return hash.base64EncodedString()\n    }\n    return nil", "    guard text\
    \ != \"\" else {\n        return nil\n    }\n\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8)", "    if text == \"\" {\n        return\
    \ nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n    let\
    \ hash = MD5.hash(data: data)\n    return String(data: hash, encoding: String.Encoding.utf8)",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    if let hash = data.md5() {\n        return String(data:\
    \ hash, encoding: .utf8)\n    }\n    return nil", "    if text == \"\" {\n   \
    \     return nil\n    }\n    let data = text.data(using: .utf8)\n    let hash\
    \ = data.md5()\n    return hash.base64EncodedString()", "    if text == \"\" {\n\
    \        return nil\n    }\n    let data = text.data(using: .utf8)\n    if let\
    \ hash = data.md5() {\n        return String(hash)\n    }\n    return nil", " \
    \   if text == \"\" {\n        return nil\n    }\n    var md5: MD5\n    md5.Init()\n\
    \    defer md5.Reset()\n    md5.Write([]byte(text))\n    return md5.Sum(nil)",
  "    if text == \"\" {\n        return nil\n    }\n    var md5: MD5\n    md5.CalculateString(text.utf8)\n\
    \    return String(data: md5.bytes, encoding: .utf8)", "    if text == \"\" {\n\
    \        return nil\n    }\n    let data = text.data(using: .utf8)!\n    let hash\
    \ = MD5.hash(data: data)\n    return String(data: hash, encoding: .utf8)", " \
    \   if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    let hash = data.md5()\n    return hash.base64EncodedString()", " \
    \   if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    if let hash = data.md5() {\n        return String(data:\
    \ hash, encoding: String.Encoding.utf8)\n    }\n    return nil", "    if text\
    \ == \"\" {\n        return nil\n    }\n    var md5: MD5\n    md5.Init()\n   \
    \ md5.Update(text.data(using: .utf8)!)\n    var md5String: String = String()\n\
    \    for _ in 0..<md5.Size {\n        md5String += String(format: \"%02x\", md5.Sum(nil))\n\
    \    }\n    return md5String", "    if text == \"\" {\n        return nil\n  \
    \  }\n    var md5: MD5\n    md5.CalculateString(text)\n    return md5.GetMD5String()"]
stop_tokens:
- "\n}"
