language: swift
name: HumanEval_22_filter_integers
results:
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let int = value as?\
    \ Int {\n            result.append(int)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let int = value as?\
    \ Int {\n            result.append(int)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        switch value {\n      \
    \  case let value as Int:\n            result.append(value)\n        case let\
    \ value as Int8:\n            result.append(value)\n        case let value as\
    \ Int16:\n            result.append(value)\n        case let value as Int32:\n\
    \            result.append(value)\n        case let value as Int64:\n        \
    \    result.append(value)\n        case let value as Int:\n            result.append(value)\n\
    \        case let value as Int:\n            result.append(value)\n        case\
    \ let value as Int:\n            result.append(value)\n        case let value\
    \ as Int:\n            result.append(value)\n        case let value as Int:\n\
    \            result.append(value)\n        case let value as Int:\n          \
    \  result.append(value)\n        case let value as Int:\n            result.append(value)\n\
    \        case let value as Int:\n            result.append(value)\n        case\
    \ let value as Int:\n            result.append(value)\n        case let value\
    \ as Int:\n            result.append(value)\n        case let value as Int:\n\
    \            result.append(value)\n        case let value as Int:\n          \
    \  result.append(value)\n        case let value as Int:\n            result.append(value)\n\
    \        case let value as Int:\n            result.append(value)\n        case\
    \ let value as Int:\n            result.append(value)\n        case let value\
    \ as Int:\n            result.append(value)\n        case let value as Int:\n\
    \            result.append(value)\n        case let value as Int:\n          \
    \  result.append(value)\n        case let value as Int:\n            result.append(value)\n\
    \        case let value as Int:\n            result.append(value)\n        case\
    \ let value as Int:\n            result.append(value)\n        case let value\
    \ as Int:\n            result.append(value)\n        case let value as Int:\n\
    \            result.append(value)\n        case let value as Int:\n          \
    \  result.append(value)\n        case let value as Int:\n            result.append(value)\n\
    \        case let value as Int:\n            result.append(value)\n        case\
    \ let value as Int:\n            result.append(value)\n        case let value\
    \ as Int:\n            result.append(value)\n        case let value as Int:\n\
    \            result.append(value)\n        case let value as Int:\n          \
    \  result.append(value)\n        case let value as Int:\n            result.append(value)\n\
    \        case let value as Int:\n            result.append(value)\n        case\
    \ let value as Int:\n            result.append(value)\n        case let value\
    \ as Int:\n            result.append(value)\n        case let value as Int:\n\
    \            result.append(value)\n        case let value as Int:\n          \
    \  result.append(value)\n        case let value as Int:\n            result.append(value)\n\
    \        case let value as Int:\n            result.append(value)\n        case\
    \ let value as Int:\n            result.append(value)\n        case let value\
    \ as Int:\n            result.append(value)\n        case let value as Int:\n\
    \            result.append(value)\n        case let value as Int:\n          \
    \  result.append(value)\n        case let value as Int:\n            result.append(value)\n\
    \        case let value as Int:\n            result.append(value)\n        case\
    \ let value as Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpxw9ddx90.swift:109:30: error: expected ':' after 'case'\n     \
    \   case let value as Int\n                             ^\n/tmp/tmpxw9ddx90.swift:127:71:\
    \ error: expected '}' at end of brace statement\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n                            \
    \                                          ^\n/tmp/tmpxw9ddx90.swift:9:25: note:\
    \ to match this opening '{'\n    for value in values {\n                     \
    \   ^\n/tmp/tmpxw9ddx90.swift:127:71: error: expected '}' at end of brace statement\n\
    assert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    \                                                                      ^\n/tmp/tmpxw9ddx90.swift:7:54:\
    \ note: to match this opening '{'\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n                                                     ^\n/tmp/tmpxw9ddx90.swift:14:27:\
    \ error: cannot convert value of type 'Int8' to expected argument type 'Int'\n\
    \            result.append(value)\n                          ^\n             \
    \             Int( )\n/tmp/tmpxw9ddx90.swift:16:27: error: cannot convert value\
    \ of type 'Int16' to expected argument type 'Int'\n            result.append(value)\n\
    \                          ^\n                          Int( )\n/tmp/tmpxw9ddx90.swift:18:27:\
    \ error: cannot convert value of type 'Int32' to expected argument type 'Int'\n\
    \            result.append(value)\n                          ^\n             \
    \             Int( )\n/tmp/tmpxw9ddx90.swift:20:27: error: cannot convert value\
    \ of type 'Int64' to expected argument type 'Int'\n            result.append(value)\n\
    \                          ^\n                          Int( )\n/tmp/tmpxw9ddx90.swift:10:9:\
    \ error: switch must be exhaustive\n        switch value {\n        ^\n/tmp/tmpxw9ddx90.swift:10:9:\
    \ note: do you want to add a default clause?\n        switch value {\n       \
    \ ^\n/tmp/tmpxw9ddx90.swift:113:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let int = value as?\
    \ Int {\n            result.append(int)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let int = value as?\
    \ Int {\n            result.append(int)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered = [Int]()\n    for value in values {\n        if let value = value\
    \ as? Int {\n            filtered.append(value)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ filtered: [Int] = []\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            filtered.append(intValue)\n        }\n    }\n    return\
    \ filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        guard let value = value\
    \ as? Int else {\n            continue\n        }\n        result.append(value)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let int = value as?\
    \ Int {\n            result.append(int)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let int = value as?\
    \ Int {\n            result.append(int)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let int = value as?\
    \ Int {\n            result.append(int)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let value = value\
    \ as? Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let int = value as?\
    \ Int {\n            result.append(int)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        guard let intValue =\
    \ Int(value) else {\n            throw SwiftError.invalidArgument(\n         \
    \       reason: \"Expected an integer, but got \\(String(describing: value))\"\
    ,\n                underlyingType: type(of: value),\n                value: value\n\
    \            )\n        }\n        result.append(intValue)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmplyhwkia0.swift:10:34: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        guard let intValue = Int(value)\
    \ else {\n                                 ^\n                               \
    \        as! String\n/tmp/tmplyhwkia0.swift:11:19: error: cannot find 'SwiftError'\
    \ in scope\n            throw SwiftError.invalidArgument(\n                  ^~~~~~~~~~\n\
    /tmp/tmplyhwkia0.swift:11:13: error: error is not handled because the enclosing\
    \ function is not declared 'throws'\n            throw SwiftError.invalidArgument(\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let int = Int(value)\
    \ {\n            result.append(int)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp2qrsqkgt.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        guard let value = value\
    \ as? Int else { continue }\n        result.append(value)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let intValue = value\
    \ as? Int {\n            result.append(intValue)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result = [Int]()\n    for value in values {\n        if let value = value as?\
    \ Int {\n            result.append(value)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 0
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return\
    \ values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824711
- exit_code: 1
  program: "\n/// Filter given array of any swiftthon values only for integers\n///\
    \ >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values:\
    \ [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n\
    /// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for value in values {\n        if let int = Int(value)\
    \ {\n            result.append(int)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp2qrsqkgt.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824780
