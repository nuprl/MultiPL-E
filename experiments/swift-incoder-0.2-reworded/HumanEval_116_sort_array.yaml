name: HumanEval_116_sort_array
language: swift
prompt: "\n/// In this Kata, you have to sort an array of non-negative integers according\
  \ to\n/// number of ones in their binary representation in ascending order.\n///\
  \ For similar number of ones, sort based on decimal value.\n/// It must be implemented\
  \ like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n/// [1, 2, 3, 4, 5]\n///\
  \ >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5, -4, -3, -2]\n/// >>> sort_array(arr:\
  \ [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1,\
  \ 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5,\
  \ -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
  \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7,\
  \ 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6,\
  \ 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16,\
  \ 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4,\
  \ 8, 16, 32])"
completions: ["    var result = [Int]()\n    for num in arr {\n        var ones =\
    \ 0\n        for _ in 0..<num.bitWidth {\n            if num & 1 == 1 {\n    \
    \            ones += 1\n            }\n            num >>= 1\n        }\n    \
    \    result.append((ones * 10) + num)\n    }\n    result.sort()\n    return result",
  '    return arr.sorted()', "    var result = arr\n    if arr.count < 2 {\n     \
    \   return result\n    }\n    var ones = arr.filter({$0 > 0}).count\n    if ones\
    \ == 0 {\n        return result\n    }\n    var decimal = arr.filter({$0 > 0}).reduce(0,\
    \ {$0 + $1})\n    if decimal == 0 {\n        return result\n    }\n    var twos\
    \ = arr.filter({$0 > 0}).filter({$0 == 1}).count\n    if twos == 0 {\n       \
    \ return result\n    }\n    var decimal2 = arr.filter({$0 > 0}).reduce(0, {$0\
    \ + $1})\n    if decimal2 == 0 {\n        return result\n    }\n    var threes\
    \ = arr.filter({$0 > 0}).filter({$0 == 1}).filter({$0 == 2}).count\n    if threes\
    \ == 0 {\n        return result\n    }\n    var decimal3 = arr.filter({$0 > 0}).reduce(0,\
    \ {$0 + $1})\n    if decimal3 == 0 {\n        return result\n    }\n    var fours\
    \ = arr.filter({$0 > 0}).filter({$0 == 1}).filter({$0 == 2}).filter({$0 == 3}).count\n\
    \    if fours == 0 {\n        return result\n    }\n    var decimal4 = arr.filter({$0\
    \ > 0}).reduce(0, {$0 + $1})\n    if decimal4 == 0 {\n        return result\n\
    \    }\n    var fives = arr.filter({$0 > 0}).filter({$0 == 1}).filter({$0 == 2}).filter({$0\
    \ == 3}).filter({$0 == 4}).count\n    if fives == 0 {\n        return result\n\
    \    }\n    var decimal5 = arr.filter({$0 > 0}).reduce(0, {$0 + $1})\n    if decimal5\
    \ == 0 {\n        return result\n    }\n    var sixes = arr.filter({$0 > 0}).filter({$0\
    \ == 1}).filter({$0 == 2}).filter({$0 == 3}).filter({$0 == 4}).filter({$0 == 5}).count\n\
    \    if sixes == 0 {\n        return result\n    }\n    var decimal6 = arr.filter({$0\
    \ > 0}).reduce(0, {$0 + $1})\n    if decimal6 == 0 {\n        return result\n\
    \    }\n    var sevens = arr.filter({$0 > 0}).filter({$0 == 1}).filter({$0 ==\
    \ 2}).filter({$0 == 3}).filter({$0 == 4}).filter({$0 == 5}).filter({$0 == 6}).count\n\
    \    if sevens == 0 {\n        return result\n    }\n    var decimal7 = arr.filter({$0\
    \ > 0}).reduce(0, {$0 + $1})\n    if decimal7 == 0 {\n        return result\n\
    \    }\n    var eights = arr.filter({$0 > 0}).filter({$0 == 1}).filter({$0 ==\
    \ 2}).filter({$", "    var sorted = [Int]()\n    var oneCount = [Int]()\n    var\
    \ decimalCount = [Int]()\n    for num in arr {\n        oneCount[num.ones()] +=\
    \ 1\n        decimalCount[num.decimalValue()] += 1\n    }\n    for num in oneCount\
    \ {\n        sorted = append(sorted, num)\n    }\n    for num in decimalCount\
    \ {\n        sorted = append(sorted, num)\n    }\n    sorted = append(sorted,\
    \ 0)\n    sorted = append(sorted, 0)\n    return sorted", '    return arr.sorted()',
  "    var result = [Int]()\n    var ones = 0\n    for num in arr {\n        if num\
    \ == 1 {\n            ones += 1\n        } else {\n            if ones > 0 {\n\
    \                result.append((ones - 1) * 10 + num)\n                ones =\
    \ 0\n            } else {\n                result.insert(num, num)\n         \
    \   }\n        }\n    }\n    return result", "    var sorted: [Int] = []\n   \
    \ var ones = 0\n    var decimal = 0\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ / 2\n        }\n    }\n    sorted = arr\n    sorted.sort(by: {\n        if $0\
    \ < $1 {\n            return ones > decimal\n        } else {\n            return\
    \ decimal > ones\n        }\n    })\n    return sorted", "    var result = [Int]()\n\
    \    var oneCount = 0\n    for element in arr {\n        if element == 1 {\n \
    \           oneCount++\n        } else {\n            if oneCount > 0 {\n    \
    \            result.sort()\n            }\n            oneCount = 0\n        \
    \    result.append(element)\n        }\n    }\n    if oneCount > 0 {\n       \
    \ result.sort()\n    }\n    return result", "    var result = Array(repeating:\
    \ 0, count: arr.count)\n    for i in 0..<arr.count {\n        let ones = arr[i].binCount()\n\
    \        if ones == 0 {\n            result[i] = arr[i]\n        } else {\n  \
    \          result[i] = arr[i].decimalValue\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var ones = 0\n    for element in arr {\n        if\
    \ element == 1 {\n            ones += 1\n        } else {\n            result\
    \ += [ones]\n            ones = 1\n        }\n    }\n    result += [ones]\n  \
    \  return result", "    var result = [Int]()\n    for num in arr {\n        if\
    \ num == 0 {\n            continue\n        }\n        var ones = 0\n        var\
    \ dec = 0\n        while num != 0 {\n            dec += num % 10\n           \
    \ num /= 10\n        }\n        if dec > 0 {\n            dec -= 1\n         \
    \   ones += 1\n        }\n        if ones == 0 {\n            result.append(dec)\n\
    \        } else {\n            result.append(dec)\n            result.append(dec)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var ones\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            ones += 1\n  \
    \      } else {\n            if ones > 0 {\n                result.append((ones\
    \ - 1) * 10 + num)\n                ones = 0\n            } else {\n         \
    \       result.insert(num, num)\n            }\n        }\n    }\n    return result",
  "    return arr.sorted(by: { (a, b) -> Bool in\n        let aBits = binary(a: a)\n\
    \        let bBits = binary(b: b)\n        let aCount = aBits.count\n        let\
    \ bCount = bBits.count\n        if aCount < bCount {\n            return true\n\
    \        } else if aCount > bCount {\n            return false\n        } else\
    \ {\n            let aDigits = aBits.dropLast()\n            let bDigits = bBits.dropLast()\n\
    \            let aDecimal = Int(aDigits, radix: 2)\n            let bDecimal =\
    \ Int(bDigits, radix: 2)\n            return aDecimal < bDecimal\n        }\n\
    \    })", '    return arr.sorted()', "    var sorted = [Int]()\n    var ones =\
    \ 0\n    var decimal = 0\n    for num in arr {\n        if num == 1 {\n      \
    \      ones += 1\n        } else {\n            decimal += num\n        }\n  \
    \  }\n    if ones == arr.count {\n        sorted = arr\n    } else {\n       \
    \ sorted = arr.sorted{ $0 > $1 }\n    }\n    if ones > arr.count {\n        sorted\
    \ = sorted.sorted{ $0 > $1 }\n    }\n    if decimal > arr.count {\n        sorted\
    \ = sorted.sorted{ $0 < $1 }\n    }\n    return sorted", "    var sortedArray\
    \ = [Int]()\n    var oneCount = 0\n    var decimalCount = 0\n    for element in\
    \ arr {\n        if element == 1 {\n            oneCount++\n        } else {\n\
    \            decimalCount += element / 2\n        }\n    }\n    if oneCount >\
    \ decimalCount {\n        sortedArray = arr.sorted()\n    } else {\n        sortedArray\
    \ = arr.sorted(by: {\n            ($0 as Int) < ($1 as Int)\n        })\n    }\n\
    \    return sortedArray", "    var result = [Int]()\n    var ones = [Int]()\n\
    \    for num in arr {\n        if num == 0 {\n            ones.append(num)\n \
    \       } else {\n            ones = sort_array(ones)\n            if ones[len(ones)-1]\
    \ < num {\n                result.append(num)\n            } else {\n        \
    \        result.extend(ones)\n                result.append(num)\n           \
    \ }\n        }\n    }\n    return sort_array(result)", "    var sorted = [Int]()\n\
    \    for num in arr {\n        let bin = String(num, radix: 2)\n        let ones\
    \ = bin.count(\"1\")\n        if ones == 0 {\n            sorted.append(num)\n\
    \        } else {\n            let decimal = Int(bin, radix: 10)\n           \
    \ sorted.append(decimal)\n        }\n    }\n    return sorted", "    var result\
    \ = [Int]()\n    var ones = 0\n    for num in arr {\n        if num == 1 {\n \
    \           ones += 1\n        } else {\n            if ones > 0 {\n         \
    \       result.append((ones - 1) * 10 + num)\n                ones = 0\n     \
    \       } else {\n                result.insert(result.count, num)\n         \
    \   }\n        }\n    }\n    return result", "    var result = [Int]()\n    var\
    \ ones = 0\n    var decimal = 0\n    for element in arr {\n        ones += element\n\
    \        decimal += element / 2\n    }\n    for element in arr {\n        if ones\
    \ == 0 {\n            result.append(element)\n        } else {\n            if\
    \ element == 0 {\n                result.append(decimal)\n            } else {\n\
    \                result.append(element - ones)\n                result.append(decimal)\n\
    \            }\n        }\n        ones = element % 2\n        decimal = 0\n \
    \   }\n    return result", "    var result = [Int]()\n    var ones = 0\n    for\
    \ element in arr {\n        if element == 1 {\n            ones += 1\n       \
    \ } else {\n            if ones > 0 {\n                result.append((ones - 1)\
    \ * 10 + element)\n                ones = 0\n            } else {\n          \
    \      result.insert(element, at: 0)\n            }\n        }\n    }\n    return\
    \ result", '    return arr.sorted()', "    var result = arr\n    for i in 0..<arr.count\
    \ {\n        if arr[i] == 0 {\n            result.removeAtIndex(i)\n        }\n\
    \    }\n    result.sort()\n    return result", "    var result = [Int]()\n   \
    \ var ones = 0\n    var decimal = 0\n    for num in arr {\n        if num == 1\
    \ {\n            ones += 1\n        } else {\n            decimal += num\n   \
    \     }\n    }\n    if ones > 0 {\n        result = sort_array(arr)\n        ones\
    \ = 0\n        decimal = 0\n        for num in arr {\n            if num == 1\
    \ {\n                ones += 1\n            } else {\n                decimal\
    \ += num\n            }\n        }\n    }\n    if ones == 0 {\n        result\
    \ = arr.sorted()\n    }\n    if decimal > 0 {\n        result = result.sorted()\n\
    \    }\n    return result", "    var result = Array(repeating: 0, count: arr.count)\n\
    \    for i in 0..<arr.count {\n        let bin = binary(arr[i])\n        let index\
    \ = bin.index(of: \"1\")!\n        result[index] = arr[i]\n    }\n    return result.sorted(by:\
    \ >)", "    var result = [Int]()\n    var oneCount = 0\n    for num in arr {\n\
    \        if num == 1 {\n            oneCount++\n        } else {\n           \
    \ if oneCount > 0 {\n                result.append((oneCount - 1) * 10 + num)\
    \ // sort by decimal value\n            }\n            oneCount = 1\n        }\n\
    \    }\n    if oneCount > 0 {\n        result.append((oneCount - 1) * 10 + num)\
    \ // sort by decimal value\n    }\n    return result", '    return arr.sorted()',
  "    var sorted = [Int]()\n    var oneCount = 0\n    for num in arr {\n        if\
    \ num == 1 {\n            oneCount++\n        } else {\n            sorted.append(num)\n\
    \        }\n    }\n    if oneCount > 0 {\n        sorted = sorted.sorted()\n \
    \   }\n    return sorted", "    var result = [Int]()\n    var ones = 0\n    var\
    \ decimal = 0\n    for x in arr {\n        if x == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += pow(x, 2)\n        }\n    }\n    if\
    \ ones > 0 {\n        result = sort_array(arr: arr)\n    }\n    if ones == 0 {\n\
    \        result.sort()\n    }\n    if ones < 0 {\n        result.sort(by: {$0\
    \ < $1})\n    }\n    if decimal > 0 {\n        result = sort_array(arr: result)\n\
    \    }\n    return result", "    var result = [Int]()\n    var ones = 0\n    var\
    \ decimal = 0\n    for element in arr {\n        if element == 1 {\n         \
    \   ones += 1\n        } else {\n            decimal += element / 2\n        }\n\
    \    }\n    for element in arr {\n        if element == 1 {\n            ones\
    \ += 1\n        } else {\n            decimal += element / 2\n        }\n    }\n\
    \    for element in arr {\n        if element == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += element / 2\n        }\n    }\n    for\
    \ element in arr {\n        if element == 1 {\n            ones += 1\n       \
    \ } else {\n            decimal += element / 2\n        }\n    }\n    for element\
    \ in arr {\n        if element == 1 {\n            ones += 1\n        } else {\n\
    \            decimal += element / 2\n        }\n    }\n    for element in arr\
    \ {\n        if element == 1 {\n            ones += 1\n        } else {\n    \
    \        decimal += element / 2\n        }\n    }\n    for element in arr {\n\
    \        if element == 1 {\n            ones += 1\n        } else {\n        \
    \    decimal += element / 2\n        }\n    }\n    for element in arr {\n    \
    \    if element == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += element / 2\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ / 2\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element / 2\n\
    \        }\n    }\n    for element in arr {\n        if element == 1 {\n     \
    \       ones += 1\n        } else {\n            decimal += element / 2\n    \
    \    }\n    }\n    for element in arr {\n        if element == 1 {\n         \
    \   ones += 1\n        } else {\n            decimal += element / 2\n        }\n\
    \    }\n    for element in arr {\n        if element == 1 {\n            ones\
    \ += 1\n        } else {\n            decimal += element / 2\n        }\n    }\n\
    \    for element in arr {\n        if element == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += element / 2\n        }\n    }\n    for\
    \ element in arr {\n        if element == 1 {\n            ones += 1\n       \
    \ } else {\n            decimal += element / 2\n        }\n    }\n    for element\
    \ in arr {\n        if element == 1 {\n            ones += 1\n        } else {\n\
    \            decimal += element / 2\n        }\n    }\n    for element in arr\
    \ {\n        if element == 1 {\n            ones += 1\n        } else {\n    \
    \        decimal += element / 2\n        }\n    }\n    for element in arr {\n\
    \        if element == 1 {\n            ones += 1\n        } else {\n        \
    \    decimal += element / 2\n        }\n    }\n    for element in arr {\n    \
    \    if element == 1 {\n            ", "    var result = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            if oneCount > 0 {\n                result.append((oneCount\
    \ - 1) * 10 + Int(num))\n                oneCount = 0\n            } else {\n\
    \                result.insert(result.count, Int(num))\n            }\n      \
    \  }\n    }\n    return result", '    return arr.sorted()', "    var sorted =\
    \ [Int]()\n    var oneCount = 0\n    for num in arr {\n        if num == 1 {\n\
    \            oneCount++\n        } else {\n            if oneCount > 0 {\n   \
    \             sorted.append(oneCount)\n                oneCount = 0\n        \
    \    }\n            sorted.append(num)\n        }\n    }\n    if oneCount > 0\
    \ {\n        sorted.append(oneCount)\n    }\n    return sorted", "    var result\
    \ = arr\n    for index in 0..<arr.count {\n        let ones = arr[index] & 1\n\
    \        if ones > 0 {\n            let temp = result[index]\n            result[index]\
    \ = result[index] >> 1\n            result[index] = result[index] | ones\n   \
    \         result[index] = result[index] << 1\n            result[index] = temp\n\
    \        }\n    }\n    return result", "    var result = arr\n    let len = arr.count\n\
    \    for i in 0..<len {\n        let ones = arr[i].bitCount\n        if ones <\
    \ len {\n            let tmp = result[i]\n            result[i] = result[ones]\n\
    \            result[ones] = tmp\n        }\n    }\n    return result", "    var\
    \ result = arr\n    for i in 0..<arr.count {\n        let ones = arr[i].trailingZeroBitCount\n\
    \        if ones > 0 {\n            let decimal = arr[i].trailingZeroBitCount\
    \ / bits\n            result[i] = arr[i]\n            result[arr.index(of: decimal)!]\
    \ = arr[i]\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var i = 0\n    for num in arr {\n        if num == 0 {\n            continue\n\
    \        }\n        var j = i\n        while j > 0 && num % 2 == 0 {\n       \
    \     j /= 2\n        }\n        if j > i {\n            swap(&result[i], &result[j])\n\
    \        }\n        i += 1\n    }\n    return result", "    var result = [Int]()\n\
    \    var i = 0\n    var j = 0\n    var k = 0\n    var temp = 0\n    var count\
    \ = 0\n    for k in arr {\n        if k == 1 {\n            j = i\n          \
    \  i = k\n        } else {\n            temp = i\n            i = j\n        \
    \    j = k\n        }\n        count = count + 1\n    }\n    for k in arr {\n\
    \        if k == 1 {\n            result.append(k)\n        } else {\n       \
    \     result.append(arr[temp])\n            result.append(k)\n        }\n    }\n\
    \    for k in arr {\n        if k == 1 {\n            result.append(k)\n     \
    \   } else {\n            result.append(arr[temp])\n            result.append(k)\n\
    \        }\n    }\n    for k in arr {\n        if k == 1 {\n            result.append(k)\n\
    \        } else {\n            result.append(arr[temp])\n            result.append(k)\n\
    \        }\n    }\n    for k in arr {\n        if k == 1 {\n            result.append(k)\n\
    \        } else {\n            result.append(arr[temp])\n            result.append(k)\n\
    \        }\n    }\n    for k in arr {\n        if k == 1 {\n            result.append(k)\n\
    \        } else {\n            result.append(arr[temp])\n            result.append(k)\n\
    \        }\n    }\n    for k in arr {\n        if k == 1 {\n            result.append(k)\n\
    \        } else {\n            result.append(arr[temp])\n            result.append(k)\n\
    \        }\n    }\n    for k in arr {\n        if k == 1 {\n            result.append(k)\n\
    \        } else {\n            result.append(arr[temp])\n            result.append(k)\n\
    \        }\n    }\n    for k in arr {\n        if k == 1 {\n            result.append(k)\n\
    \        } else {\n            result.append(arr[temp])\n            result.append(k)\n\
    \        }\n    }\n    for k in arr {\n        if k == 1 {\n            result.append(k)\n\
    \        } else {\n            result.append(arr[temp])\n            result.append(k)\n\
    \        }\n    }\n    for k in arr {\n        if k == 1 {\n            result.append(k)\n\
    \        } else {\n            result.append(arr[temp])\n            result.append(k)\n\
    \        }\n    }\n    for k in arr {\n        if k == 1 {\n            result.append(k)\n\
    \        } else {\n            result.append(arr[temp])\n            result.append(k)\n\
    \        }\n    }\n    for k in arr {\n        if k == 1 {\n            result.append(k)\n\
    \        } else {\n            result.append(arr[temp])\n            result.append(k)\n\
    \        }\n    }\n    for k in arr {\n        if k == 1 {\n            result.append(k)\n\
    \        } else {\n            result.append(arr[temp])\n            result.append(k)\n\
    \        }\n    }\n    for k in arr {\n        if k == 1 {\n            result.append(k)\n\
    \        } else {\n            result.append(arr[temp])\n            result.append(k)\n\
    \        }\n    }\n    for k in arr {\n        if k == 1 {\n            result.append(k)\n\
    \        } else {\n            result.append(arr[temp])\n            result.append(k)\n",
  "    var result = [Int]()\n    var ones = [0]\n    var zeros = [0]\n    for x in\
    \ arr {\n        if x == 1 {\n            ones[0]++\n        } else {\n      \
    \      zeros[0]++\n        }\n    }\n    for x in ones {\n        result.append(x)\n\
    \    }\n    for x in zeros {\n        result.append(x)\n    }\n    return result",
  "    var result = [Int]()\n    for num in arr {\n        let bin = String(num, radix:\
    \ 2)\n        let count = bin.count\n        if count == 1 {\n            result.append(num)\n\
    \        } else {\n            let decimal = Int(bin, radix: 10)\n           \
    \ result.append(decimal)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    var count = 0\n    for num in arr {\n        if num == 1 {\n\
    \            count += 1\n        } else {\n            if count > 0 {\n      \
    \          result.append((count - 1) * 10 + num)\n                count = 0\n\
    \            } else {\n                result.insert(num, num)\n            }\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var ones\
    \ = 0\n    var dec = 0\n    for num in arr {\n        if num == 1 {\n        \
    \    ones += 1\n        } else {\n            dec += num\n        }\n    }\n \
    \   if ones > 0 {\n        result.sortInPlace()\n    } else {\n        result.sortInPlaceByDec(dec)\n\
    \    }\n    return result", "    var result = [Int]()\n    var ones = 0\n    var\
    \ decimal = 0\n    for x in arr {\n        if x != 0 {\n            decimal =\
    \ decimal + x\n        } else {\n            ones = ones + 1\n        }\n    }\n\
    \    if ones == 0 {\n        return arr\n    }\n    if ones < arr.count {\n  \
    \      decimal = decimal / ones\n    }\n    for x in arr {\n        if x != 0\
    \ {\n            decimal = decimal - x\n        } else {\n            decimal\
    \ = decimal + x\n        }\n        if decimal > 0 {\n            result.append(decimal)\n\
    \            decimal = 0\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    var ones = 0\n    var dec = 0\n    for num in arr {\n       \
    \ if num == 1 {\n            ones += 1\n        } else {\n            dec += num\n\
    \        }\n    }\n    if ones > 0 {\n        result = dec.sorted()\n    } else\
    \ {\n        result = arr.sorted()\n    }\n    return result", "    var result\
    \ = [Int]()\n    var ones = 0\n    var decimal = 0\n    for x in arr {\n     \
    \   if x != 0 {\n            ones++\n            decimal = decimal * 10 + x\n\
    \        } else {\n            if ones > 0 {\n                result.insert(decimal,\
    \ at: result.endIndex)\n                ones = 0\n                decimal = 0\n\
    \            }\n        }\n    }\n    if ones > 0 {\n        result.insert(decimal,\
    \ at: result.endIndex)\n    }\n    return result", "    var result = [Int]()\n\
    \    var oneCount = 0\n    var decimalCount = 0\n    for number in arr {\n   \
    \     if number == 1 {\n            oneCount++\n        } else {\n           \
    \ decimalCount += number\n        }\n    }\n    if oneCount > decimalCount {\n\
    \        for number in arr {\n            if number == 1 {\n                result.append(number)\n\
    \            }\n        }\n    } else {\n        for number in arr {\n       \
    \     if number == 1 {\n                result.append(decimalCount)\n        \
    \    }\n            decimalCount -= number\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var ones = 0\n    for x in arr {\n        if x ==\
    \ 1 {\n            ones += 1\n        } else {\n            if ones > 0 {\n  \
    \              result.append((ones - 1) * 10)\n            }\n            ones\
    \ = 1\n            result.append(x)\n        }\n    }\n    if ones > 0 {\n   \
    \     result.append((ones - 1) * 10)\n    }\n    return result", "    var result\
    \ = [Int]()\n    var ones = 0\n    var dec = 0\n    for x in arr {\n        if\
    \ x == 1 {\n            ones += 1\n        } else {\n            dec += x\n  \
    \      }\n    }\n    if ones == dec {\n        for _ in arr {\n            result.append(0)\n\
    \        }\n        return result\n    }\n    for _ in arr {\n        result.append(0)\n\
    \    }\n    for x in arr {\n        if x == 1 {\n            ones += 1\n     \
    \   } else {\n            dec += x\n        }\n    }\n    for x in arr {\n   \
    \     if x == 1 {\n            ones += 1\n        } else {\n            dec +=\
    \ x\n        }\n    }\n    for x in arr {\n        if x == 1 {\n            ones\
    \ += 1\n        } else {\n            dec += x\n        }\n    }\n    for x in\
    \ arr {\n        if x == 1 {\n            ones += 1\n        } else {\n      \
    \      dec += x\n        }\n    }\n    for x in arr {\n        if x == 1 {\n \
    \           ones += 1\n        } else {\n            dec += x\n        }\n   \
    \ }\n    for x in arr {\n        if x == 1 {\n            ones += 1\n        }\
    \ else {\n            dec += x\n        }\n    }\n    for x in arr {\n       \
    \ if x == 1 {\n            ones += 1\n        } else {\n            dec += x\n\
    \        }\n    }\n    for x in arr {\n        if x == 1 {\n            ones +=\
    \ 1\n        } else {\n            dec += x\n        }\n    }\n    for x in arr\
    \ {\n        if x == 1 {\n            ones += 1\n        } else {\n          \
    \  dec += x\n        }\n    }\n    for x in arr {\n        if x == 1 {\n     \
    \       ones += 1\n        } else {\n            dec += x\n        }\n    }\n\
    \    for x in arr {\n        if x == 1 {\n            ones += 1\n        } else\
    \ {\n            dec += x\n        }\n    }\n    for x in arr {\n        if x\
    \ == 1 {\n            ones += 1\n        } else {\n            dec += x\n    \
    \    }\n    }\n    for x in arr {\n        if x == 1 {\n            ones += 1\n\
    \        } else {\n            dec += x\n        }\n    }\n    for x in arr {\n\
    \        if x == 1 {\n            ones += 1\n        } else {\n            dec\
    \ += x\n        }\n    }\n    for x in arr {\n        if x == 1 {\n          \
    \  ones += 1\n        } else {\n            dec += x\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones += 1\n        } else {\n \
    \           dec += x\n        }\n    }\n    for x in arr {\n        if x == 1\
    \ {\n            ones += 1\n        } else {\n            dec += x\n        }\n\
    \    }\n    for x in arr {\n        if x == 1 {\n            ones += 1\n     \
    \   } else {", "    var result = arr\n    for i in 0..<arr.count {\n        let\
    \ ones = arr[i].bitCount()\n        if ones < 0 {\n            ones = -ones\n\
    \        }\n        if ones == 0 {\n            result[i] = arr[i]\n         \
    \   continue\n        }\n        let decimal = arr[i].decimalValue\n        if\
    \ decimal < 0 {\n            decimal = -decimal\n        }\n        if decimal\
    \ < ones {\n            result[i] = arr[i]\n            continue\n        }\n\
    \        let index = ones - decimal\n        result[i] = arr[i]\n        result[index]\
    \ = arr[i]\n    }\n    return result", "    var result = arr\n    for i in 0..<arr.count\
    \ {\n        let ones = arr[i].trailingZeroBitCount()\n        if ones > 0 {\n\
    \            switch ones {\n            case 1:\n                result.sort(by:\
    \ {$0 < $1})\n            case 2:\n                result.sort(by: {$0 < $1 &&\
    \ $1 < $0})\n            case 3:\n                result.sort(by: {$0 < $1 &&\
    \ $1 < $0 && $1 < $0})\n            case 4:\n                result.sort(by: {$0\
    \ < $1 && $1 < $0 && $1 < $0 && $1 < $0})\n            case 5:\n             \
    \   result.sort(by: {$0 < $1 && $1 < $0 && $1 < $0 && $1 < $0 && $1 < $0})\n \
    \           case 6:\n                result.sort(by: {$0 < $1 && $1 < $0 && $1\
    \ < $0 && $1 < $0 && $1 < $0 && $1 < $0})\n            default:\n            \
    \    result.sort(by: {$0 < $1 && $1 < $0 && $1 < $0 && $1 < $0 && $1 < $0 && $1\
    \ < $0 && $1 < $0})\n            }\n        }\n    }\n    return result", "  \
    \  var sorted = [Int]()\n    var oneCount = [Int]()\n    for number in arr {\n\
    \        oneCount[number & 1] += 1\n    }\n    for number in arr {\n        sorted.append(number\
    \ & 1)\n    }\n    for number in arr {\n        sorted.append(oneCount[number\
    \ & 1] * 10 + number >> 1)\n    }\n    return sorted", "    var result = [Int]()\n\
    \    var ones = 0\n    var decimal = 0\n    for number in arr {\n        ones\
    \ = number & 1\n        decimal = decimal + ones\n        if decimal > 1 {\n \
    \           decimal = decimal - ones\n        }\n        result = append(result,\
    \ number)\n    }\n    return result", "    var result = [Int]()\n    var ones\
    \ = [Int]()\n    var zeros = [Int]()\n    for num in arr {\n        if num ==\
    \ 1 {\n            ones.append(num)\n        } else {\n            zeros.append(num)\n\
    \        }\n    }\n    for num in ones {\n        result.append(num)\n    }\n\
    \    for num in zeros {\n        result.append(num)\n    }\n    return result",
  '    return arr.sorted()', "    var result = arr\n    for index in 0..<arr.count\
    \ {\n        let ones = arr[index] & 1\n        if ones == 0 {\n            continue\n\
    \        }\n        let index = index\n        let value = arr[index]\n      \
    \  let temp = arr[index]\n        arr[index] = arr[index] >> 1\n        arr[index]\
    \ = arr[index] | ones\n        arr[index] = temp\n    }\n    for index in 0..<arr.count\
    \ {\n        let ones = arr[index] & 1\n        if ones == 0 {\n            continue\n\
    \        }\n        let index = index\n        let value = arr[index]\n      \
    \  let temp = arr[index]\n        arr[index] = arr[index] >> 1\n        arr[index]\
    \ = arr[index] | ones\n        arr[index] = temp\n    }\n    for index in 0..<arr.count\
    \ {\n        let ones = arr[index] & 1\n        if ones == 0 {\n            continue\n\
    \        }\n        let index = index\n        let value = arr[index]\n      \
    \  let temp = arr[index]\n        arr[index] = arr[index] >> 1\n        arr[index]\
    \ = arr[index] | ones\n        arr[index] = temp\n    }\n    for index in 0..<arr.count\
    \ {\n        let ones = arr[index] & 1\n        if ones == 0 {\n            continue\n\
    \        }\n        let index = index\n        let value = arr[index]\n      \
    \  let temp = arr[index]\n        arr[index] = arr[index] >> 1\n        arr[index]\
    \ = arr[index] | ones\n        arr[index] = temp\n    }\n    for index in 0..<arr.count\
    \ {\n        let ones = arr[index] & 1\n        if ones == 0 {\n            continue\n\
    \        }\n        let index = index\n        let value = arr[index]\n      \
    \  let temp = arr[index]\n        arr[index] = arr[index] >> 1\n        arr[index]\
    \ = arr[index] | ones\n        arr[index] = temp\n    }\n    for index in 0..<arr.count\
    \ {\n        let ones = arr[index] & 1\n        if ones == 0 {\n            continue\n\
    \        }\n        let index = index\n        let value = arr[index]\n      \
    \  let temp = arr[index]\n        arr[index] = arr[index] >> 1\n        arr[index]\
    \ = arr[index] | ones\n        arr[index] = temp\n    }\n    for index in 0..<arr.count\
    \ {\n        let ones = arr[index] & 1\n        if ones == 0 {\n            continue\n\
    \        }\n        let index = index\n        let value = arr[index]\n      \
    \  let temp = arr[index]\n        arr[index] = arr[index] >> 1\n        arr[index]\
    \ = arr[index] | ones\n        arr[index] = temp\n    }\n    for index in 0..<arr.count\
    \ {\n        let ones = arr[index] & 1\n", "    var result = [Int]()\n    var\
    \ ones = 0\n    var decimal = 0\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ / 2\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element / 2\n\
    \        }\n    }\n    for element in arr {\n        if ones > 0 {\n         \
    \   result.insert(decimal, element)\n            ones = 0\n            decimal\
    \ = 0\n        } else {\n            result.insert(element, element)\n       \
    \ }\n    }\n    return result", "    var sorted = [Int]()\n    var ones = 0\n\
    \    var decimal = 0\n    for n in arr {\n        if n == 1 {\n            ones\
    \ += 1\n        } else {\n            decimal += pow(2, ones)\n            ones\
    \ = 0\n        }\n        sorted.append(n)\n    }\n    if ones > 0 {\n       \
    \ decimal += pow(2, ones)\n        sorted.append(0)\n    }\n    sorted.reverse()\n\
    \    sorted = sorted.map { $0 + $1 * decimal }\n    return sorted", '    return
    arr.sorted()', "    var result = arr\n    for i in 0..<arr.count {\n        let\
    \ ones = arr[i].trailingZeroBitCount\n        if ones == 0 {\n            continue\n\
    \        }\n        let decimal = arr[i].trailingZeroBitCount / ones\n       \
    \ if decimal > result.count {\n            result = Array(repeating: 0, count:\
    \ result.count + ones)\n        }\n        result[result.count - ones] = arr[i]\n\
    \    }\n    return result", "    var result = [Int]()\n    var oneCount = 0\n\
    \    for value in arr {\n        if value == 1 {\n            oneCount++\n   \
    \     } else {\n            if oneCount > 0 {\n                result.sort()\n\
    \            }\n            oneCount = 0\n            result.append(value)\n \
    \       }\n    }\n    if oneCount > 0 {\n        result.sort()\n    }\n    return\
    \ result", "    var result = arr\n    var ones = [1]\n    for element in arr {\n\
    \        if element == 0 {\n            ones = append(ones, 0)\n        } else\
    \ {\n            ones = append(ones, 1)\n        }\n    }\n    for element in\
    \ ones {\n        result = append(result, element)\n    }\n    return result",
  "    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for x in arr\
    \ {\n        if x != 0 {\n            decimal = decimal + x\n        } else {\n\
    \            ones = ones + 1\n        }\n    }\n    if ones == arr.count {\n \
    \       for y in arr {\n            if y != 0 {\n                decimal = decimal\
    \ + y\n            }\n        }\n    }\n    for x in arr {\n        if x != 0\
    \ {\n            result.append(decimal)\n            decimal = 0\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in arr {\n  \
    \      var count = 0\n        for y in x {\n            if y == 1 {\n        \
    \        count += 1\n            }\n        }\n        if count == 0 {\n     \
    \       result.insert(x, at: 0)\n        } else {\n            result.insert(x,\
    \ at: result.count - count)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for num in arr {\n        if num == 0 {\n            continue\n\
    \        }\n        var ones = 0\n        var dec = 0\n        for _ in 0..<num\
    \ {\n            if num % 2 == 0 {\n                ones += 1\n            } else\
    \ {\n                dec += num / 2\n            }\n            num /= 2\n   \
    \     }\n        if ones < dec {\n            result.insert(dec, num)\n      \
    \  } else {\n            result.insert(ones, num)\n        }\n    }\n    return\
    \ result", '    return arr.sorted()', '    return arr.sorted()', '    return arr.sorted()',
  "    var result = [Int]()\n    var oneCount = 0\n    for num in arr {\n        if\
    \ num == 1 {\n            oneCount++\n        } else {\n            if oneCount\
    \ > 0 {\n                result.append((oneCount - 1) * 10 + num) // sort by dec\n\
    \            }\n            oneCount = 0\n        }\n    }\n    if oneCount >\
    \ 0 {\n        result.append((oneCount - 1) * 10 + num) // sort by dec\n    }\n\
    \    return result", "    var result = [Int]()\n    var oneCount = 0\n    for\
    \ num in arr {\n        if num == 1 {\n            oneCount++\n        } else\
    \ {\n            if oneCount > 0 {\n                result.append((oneCount -\
    \ 1) * 10 + num) // sort based on decimal value\n            }\n            oneCount\
    \ = 0\n        }\n    }\n    if oneCount > 0 {\n        result.append((oneCount\
    \ - 1) * 10 + num) // sort based on decimal value\n    }\n    return result",
  "    var result = [Int]()\n    var oneCount = 0\n    for num in arr {\n        if\
    \ num == 1 {\n            oneCount++\n        } else {\n            if oneCount\
    \ > 0 {\n                result.append((oneCount - 1) * 10 + num)\n          \
    \      oneCount = 0\n            } else {\n                result.insert(num,\
    \ num)\n            }\n        }\n    }\n    return result", "    var result =\
    \ [Int]()\n    var oneCount = 0\n    for element in arr {\n        if element\
    \ == 1 {\n            oneCount++\n        } else {\n            if oneCount >\
    \ 0 {\n                result.append((oneCount - 1) * 10 + element)\n        \
    \    }\n            oneCount = 0\n        }\n    }\n    if oneCount > 0 {\n  \
    \      result.append((oneCount - 1) * 10 + arr[arr.count])\n    }\n    return\
    \ result", "    var result = Array(repeating: 0, count: arr.count)\n    for i\
    \ in 0..<arr.count {\n        let ones = arr[i].binCount()\n        if ones <\
    \ 0 {\n            ones = -ones\n        }\n        result[i] = ones\n    }\n\
    \    return result.sorted()", "    var result = [Int]()\n    var i = 0\n    for\
    \ num in arr {\n        if num == 1 {\n            result.append(i)\n        }\n\
    \        i += 1\n    }\n    for num in arr {\n        if num != 1 {\n        \
    \    result.insert(i, num)\n        }\n        i += 1\n    }\n    return result",
  "    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for element\
    \ in arr {\n        if element == 1 {\n            ones += 1\n        } else {\n\
    \            decimal += element / 2\n        }\n    }\n    if ones > 0 {\n   \
    \     result = sort_array(arr)\n        ones--\n    }\n    for element in arr\
    \ {\n        if element == 1 {\n            result.append(decimal)\n        }\
    \ else {\n            result.append(element)\n        }\n    }\n    return result",
  '    return arr.sorted()', "    var result = [Int]()\n    var ones = 0\n    var\
    \ decimal = 0\n    for element in arr {\n        ones += element\n        decimal\
    \ += element / 2\n    }\n    if ones < 0 {\n        ones = -ones\n        decimal\
    \ = -decimal\n    }\n    for element in arr {\n        if element == 0 {\n   \
    \         continue\n        }\n        if ones == 0 {\n            result.insert(decimal,\
    \ element)\n        } else {\n            if decimal < element {\n           \
    \     result.insert(decimal, element)\n            } else {\n                result.insert(element,\
    \ element)\n            }\n        }\n        ones--\n        decimal *= 2\n \
    \   }\n    return result", '    return arr.sorted()', '    return arr.sorted(by:
    { $0.isOne() ? $0.decimalValue() : $0.decimalValue() > $1.decimalValue() })',
  "    var result = [Int]()\n    var ones = 0\n    for num in arr {\n        if num\
    \ == 1 {\n            ones += 1\n        } else {\n            ones = 0\n    \
    \    }\n        if ones == 0 {\n            result.append(num)\n        }\n  \
    \  }\n    return result", "    var result = [Int]()\n    var ones = 0\n    var\
    \ decimal = 0\n    for v in arr {\n        if v == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += v\n        }\n    }\n    if ones > 0\
    \ {\n        result = sort_array(arr: arr)\n    }\n    if ones == 0 {\n      \
    \  result = sort_array(arr: result)\n    }\n    if decimal > 0 {\n        result\
    \ = sort_array(arr: result)\n    }\n    return result", '    return arr.sorted()',
  "    var result = Array(repeating: 0, count: arr.count)\n    for i in 0..<arr.count\
    \ {\n        if arr[i] == 0 {\n            continue\n        }\n        let bin\
    \ = String(format: \"%0*b%0*b\", 0, arr[i], 0)\n        let binLen = bin.count\n\
    \        let binStr = bin.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \        let binArr = Array(binStr)\n        let binCount = binArr.count\n   \
    \     let binSum = binArr.map { Int($0) }.reduce(0, +)\n        let binSumInt\
    \ = Int(binSum)\n        let binSumFloat = binSumInt.floatValue\n        let binSumInt\
    \ = Int(binSumFloat)\n        let binSumFloat = binSumInt.floatValue\n       \
    \ let binSumInt = Int(binSumFloat)\n        let binSumFloat = binSumInt.floatValue\n\
    \        let binSumInt = Int(binSumFloat)\n        let binSumFloat = binSumInt.floatValue\n\
    \        let binSumInt = Int(binSumFloat)\n        let binSumFloat = binSumInt.floatValue\n\
    \        let binSumInt = Int(binSumFloat)\n        let binSumFloat = binSumInt.floatValue\n\
    \        let binSumInt = Int(binSumFloat)\n        let binSumFloat = binSumInt.floatValue\n\
    \        let binSumInt = Int(binSumFloat)\n        let binSumFloat = binSumInt.floatValue\n\
    \        let binSumInt = Int(binSumFloat)\n        let binSumFloat = binSumInt.floatValue\n\
    \        let binSumInt = Int(binSumFloat)\n        let binSumFloat = binSumInt.floatValue\n\
    \        let binSumInt = Int(binSumFloat)\n        let binSumFloat = binSumInt.floatValue\n\
    \        let binSumInt = Int(binSumFloat)\n        let binSumFloat = binSumInt.floatValue\n\
    \        let binSumInt = Int(binSumFloat)\n        let binSumFloat = binSumInt.floatValue\n\
    \        let binSumInt = Int(binSumFloat)\n        let binSumFloat = binSumInt.floatValue\n\
    \        let binSumInt = Int(binSumFloat)\n        let binSumFloat = binSumInt.floatValue\n\
    \        let binSumInt = Int(binSumFloat)\n        let binSumFloat = binSumInt.floatValue\n\
    \        let binSumInt = Int(binSumFloat)\n        let binSumFloat = binSumInt.floatValue\n\
    \        let binSumInt = Int(binSumFloat)\n        let bin", "    var result =\
    \ [Int]()\n    var oneCount = [Int]()\n    var oneCountCount = [Int]()\n    var\
    \ oneCountCountCount = [Int]()\n    var oneCountCountCountCount = [Int]()\n  \
    \  var oneCountCountCountCountCount = [Int]()\n    var oneCountCountCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCountCountCount = [Int]()\n\
    \    var oneCountCountCountCountCountCountCountCountCountCountCount = [Int]()\n\
    \    var oneCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var oneCountCountCountCountCountCountCountCountCountCountCountCountCount",
  "    var result = [Int]()\n    var oneCount = 0\n    for num in arr {\n        if\
    \ num == 1 {\n            oneCount++\n        } else {\n            if oneCount\
    \ > 0 {\n                result.append((oneCount - 1) * 10 + num) // sort by decimal\
    \ value\n            }\n            oneCount = 0\n        }\n    }\n    if oneCount\
    \ > 0 {\n        result.append((oneCount - 1) * 10 + num) // sort by decimal value\n\
    \    }\n    return result", "    var result = [Int]()\n    var oneCount = [Int]()\n\
    \    var decimalCount = [Int]()\n    for x in arr {\n        if x == 1 {\n   \
    \         oneCount[x] = oneCount[x] + 1\n        } else {\n            decimalCount[x]\
    \ = decimalCount[x] + 1\n        }\n    }\n    for x in oneCount {\n        if\
    \ oneCount[x] > decimalCount[x] {\n            result.append(x)\n        }\n \
    \   }\n    for x in decimalCount {\n        if decimalCount[x] > oneCount[x] {\n\
    \            result.append(x)\n        }\n    }\n    return result", '    return
    arr.sorted()', "    var result = [Int]()\n    var ones = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            ones += 1\n        } else {\n        \
    \    if ones > 0 {\n                result.append((ones - 1) * 10 + num)\n   \
    \             ones = 0\n            } else {\n                result.insert(num,\
    \ num)\n            }\n        }\n    }\n    return result", "    var result =\
    \ arr\n    for index in 0..<arr.count {\n        let ones = arr[index] & 1\n \
    \       if ones == 0 {\n            continue\n        }\n        let decimal =\
    \ arr[index] >> 1\n        if decimal < 0 {\n            decimal = -decimal\n\
    \        }\n        if decimal > ones {\n            decimal = ones - decimal\n\
    \        }\n        if decimal > 0 {\n            arr[index] = decimal\n     \
    \   } else {\n            arr[index] = ones\n        }\n    }\n    return result",
  "    var result = arr\n    for i in 0..<arr.count {\n        let ones = arr[i].trailingZeroBitCount()\n\
    \        if ones > 0 {\n            switch ones {\n            case 1:\n     \
    \           result.sort(by: {$0 < $1})\n            case 2:\n                result.sort(by:\
    \ {$0 > $1})\n            case 3:\n                result.sort(by: {$0 > $1})\n\
    \            case 4:\n                result.sort(by: {$0 < $1})\n           \
    \ case 5:\n                result.sort(by: {$0 < $1})\n            case 6:\n \
    \               result.sort(by: {$0 > $1})\n            default:\n           \
    \     break\n            }\n        }\n    }\n    return result", "    var sorted:\
    \ [Int] = []\n    for num in arr {\n        sorted.append(num)\n    }\n    sorted.sort()\n\
    \    return sorted", "    \n    var result = arr\n    \n    if arr.count < 2 {\n\
    \        return result\n    }\n    \n    let ones = arr.filter { $0 == 1 }\n \
    \   let tens = arr.filter { $0 % 10 == 0 }\n    let hundreds = arr.filter { $0\
    \ % 100 == 0 }\n    let thousands = arr.filter { $0 % 1000 == 0 }\n    \n    if\
    \ ones.count < tens.count {\n        result = ones\n    } else if tens.count <\
    \ hundreds.count {\n        result = tens\n    } else if hundreds.count < thousands.count\
    \ {\n        result = hundreds\n    } else {\n        result = thousands\n   \
    \ }\n    \n    return result", "    var result = arr\n    for i in 0..<arr.count\
    \ {\n        let ones = arr[i].bitCount()\n        if ones < 0 {\n           \
    \ ones = -ones\n        }\n        if ones == 0 {\n            result[i] = arr[i]\n\
    \            continue\n        }\n        let decimal = arr[i].decimalValue()\n\
    \        if decimal < 0 {\n            decimal = -decimal\n        }\n       \
    \ if decimal < ones {\n            result[i] = arr[i]\n            continue\n\
    \        }\n        let index = ones - decimal\n        if index < 0 {\n     \
    \       result[i] = arr[i]\n            continue\n        }\n        if index\
    \ == 0 {\n            result[i] = arr[i]\n            continue\n        }\n  \
    \      let temp = arr[i]\n        result[i] = arr[index - 1]\n        result[index\
    \ - 1] = temp\n    }\n    return result", "    var result = [Int]()\n    var oneCount\
    \ = 0\n    var decimalCount = 0\n    for num in arr {\n        if num == 1 {\n\
    \            oneCount++\n        } else {\n            decimalCount += num\n \
    \       }\n    }\n    if oneCount > decimalCount {\n        for num in arr {\n\
    \            if num == 1 {\n                result.append(num)\n            }\n\
    \        }\n    } else {\n        for num in arr {\n            if num == 1 {\n\
    \                result.append(decimalCount)\n            }\n        }\n    }\n\
    \    return result", "    var result = arr\n    for idx in 0..<arr.count {\n \
    \       if result[idx] == 0 {\n            result.removeAtIndex(idx)\n       \
    \ }\n    }\n    result.sort()\n    return result", "    var result = [Int]()\n\
    \    var ones = 0\n    for num in arr {\n        ones = num.binCount()\n     \
    \   if ones > 0 {\n            result.insert(num, ones)\n        } else {\n  \
    \          result.insert(num, num.decimalValue())\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    var ones = [0]\n    for num in arr {\n\
    \        if num == 1 {\n            ones[0]++\n        } else {\n            ones[0]--\n\
    \        }\n    }\n    for num in arr {\n        if num == 1 {\n            result.append(num)\n\
    \        } else {\n            let index = ones[0]\n            result.append(num)\n\
    \            ones[0] = index\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    var count = 0\n    for element in arr {\n        if element ==\
    \ 1 {\n            count += 1\n        } else {\n            if count > 0 {\n\
    \                result.append((count - 1) * 10 + element)\n                count\
    \ = 0\n            } else {\n                result.append(element)\n        \
    \    }\n        }\n    }\n    if count > 0 {\n        result.append((count - 1)\
    \ * 10 + element)\n    }\n    return result", "    var result = Array(repeating:\
    \ 0, count: arr.count)\n    var ones = 0\n    for x in arr {\n        if x !=\
    \ 0 {\n            ones += 1\n        }\n    }\n    if ones == 0 {\n        for\
    \ x in arr {\n            result[arr.index(x)] = x\n        }\n    } else {\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var temp = 0\n\
    \        for x in arr {\n            if x != 0 {\n                temp = i\n \
    \               i = j\n                j = k\n                k = temp\n     \
    \       }\n        }\n        for _ in 0..<ones {\n            result[k] = arr[i]\n\
    \            i += 1\n            k += 1\n        }\n        for _ in 0..<(ones\
    \ - 1) {\n            result[k] = arr[j]\n            j += 1\n            k +=\
    \ 1\n        }\n        for _ in 0..<(ones - 1) {\n            result[k] = arr[k]\n\
    \            k += 1\n        }\n        for _ in 0..<ones {\n            result[k]\
    \ = arr[i]\n            i += 1\n            k += 1\n        }\n    }\n    return\
    \ result", "    var result = arr\n    if arr.count > 0 {\n        var ones = [0]\n\
    \        var zeros = [0]\n        var i = 0\n        while i < arr.count {\n \
    \           if arr[i] == 1 {\n                ones[i] += 1\n            } else\
    \ {\n                zeros[i] += 1\n            }\n            i += 1\n      \
    \  }\n        if ones.count > 0 {\n            ones = ones[0..<ones.count-1]\n\
    \            zeros = zeros[0..<zeros.count-1]\n        }\n        if ones.count\
    \ > 0 {\n            result = sort_array(ones) + result\n        }\n        if\
    \ zeros.count > 0 {\n            result = result + sort_array(zeros)\n       \
    \ }\n    }\n    return result", "    var sorted = [Int]()\n    var count = 0\n\
    \    for element in arr {\n        if element == 1 {\n            sorted.append(element)\n\
    \            count += 1\n        } else {\n            sorted.append(count + element)\n\
    \            count = 0\n        }\n    }\n    return sorted", "    var sorted\
    \ = [Int]()\n    var ones = 0\n    for num in arr {\n        if num == 1 {\n \
    \           ones += 1\n        } else {\n            sorted.append(num)\n    \
    \    }\n    }\n    if ones == 0 {\n        sorted = arr\n    }\n    if ones >\
    \ 0 {\n        sorted = sorted.sorted()\n    }\n    return sorted", '    return
    arr.sorted()', "    var result = [Int]()\n    var oneCount = 0\n    var decCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            decCount += num\n        }\n    }\n    if oneCount\
    \ > decCount {\n        for num in arr {\n            if num == 1 {\n        \
    \        result.insert(result.count, num)\n                oneCount--\n      \
    \      }\n        }\n    } else {\n        for num in arr {\n            if num\
    \ == 1 {\n                result.insert(result.count, num)\n                decCount--\n\
    \            }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var ones = 0\n    var decimal = 0\n    for x in arr {\n        if x != 0\
    \ {\n            decimal = decimal * 10 + x\n        } else {\n            ones\
    \ = ones + 1\n        }\n    }\n    if ones == arr.count {\n        result = arr\n\
    \    } else {\n        result = sort_array(arr: arr)\n    }\n    for x in result\
    \ {\n        if decimal == 0 {\n            if x > 0 {\n                decimal\
    \ = decimal * 10 + x\n            } else {\n                decimal = decimal\
    \ * 10 - x\n            }\n        } else {\n            if x > 0 {\n        \
    \        decimal = decimal * 10 + x\n            } else {\n                decimal\
    \ = decimal * 10 - x\n            }\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    var ones = [0]\n    var zeros = [0]\n    for x in\
    \ arr {\n        if x == 1 {\n            ones[0]++\n        } else {\n      \
    \      ones[0]--\n            zeros[0]++\n        }\n    }\n    for x in arr {\n\
    \        if x == 1 {\n            ones[0]--\n        } else {\n            ones[0]++\n\
    \            zeros[0]--\n        }\n    }\n    for x in arr {\n        if x ==\
    \ 1 {\n            ones[0]++\n        } else {\n            ones[0]--\n      \
    \      zeros[0]++\n        }\n    }\n    for x in arr {\n        if x == 1 {\n\
    \            ones[0]--\n        } else {\n            ones[0]++\n            zeros[0]--\n\
    \        }\n    }\n    for x in arr {\n        if x == 1 {\n            ones[0]++\n\
    \        } else {\n            ones[0]--\n            zeros[0]++\n        }\n\
    \    }\n    for x in arr {\n        if x == 1 {\n            ones[0]--\n     \
    \   } else {\n            ones[0]++\n            zeros[0]--\n        }\n    }\n\
    \    for x in arr {\n        if x == 1 {\n            ones[0]++\n        } else\
    \ {\n            ones[0]--\n            zeros[0]++\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones[0]--\n        } else {\n \
    \           ones[0]++\n            zeros[0]--\n        }\n    }\n    for x in\
    \ arr {\n        if x == 1 {\n            ones[0]++\n        } else {\n      \
    \      ones[0]--\n            zeros[0]++\n        }\n    }\n    for x in arr {\n\
    \        if x == 1 {\n            ones[0]--\n        } else {\n            ones[0]++\n\
    \            zeros[0]--\n        }\n    }\n    for x in arr {\n        if x ==\
    \ 1 {\n            ones[0]++\n        } else {\n            ones[0]--\n      \
    \      zeros[0]++\n        }\n    }\n    for x in arr {\n        if x == 1 {\n\
    \            ones[0]--\n        } else {\n            ones[0]++\n            zeros[0]--\n\
    \        }\n    }\n    for x in arr {\n        if x == 1 {\n            ones[0]++\n\
    \        } else {\n            ones[0]--\n            zeros[0]++\n        }\n\
    \    }\n    for x in arr {\n        if x == 1 {\n            ones[0]--\n     \
    \   } else {\n            ones[0]++\n            zeros[0]--\n        }\n    }\n\
    \    for x in arr {\n        if x == 1 {\n            ones[0]++\n        } else\
    \ {\n            ones[0]--\n            zeros[0]++\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones[0]--\n        } else {\n \
    \           ones[0]++\n            zeros[0]--\n        }\n    }\n    for x in\
    \ arr {\n        if x == 1 {\n            ones[0]++\n        } else {", "    var\
    \ result = [Int]()\n    for num in arr {\n        let ones = num.bitCount()\n\
    \        if ones == 0 {\n            result.insert(num, at: 0)\n        } else\
    \ {\n            let decimal = num.decimalValue\n            if decimal < 0 {\n\
    \                result.insert(num, at: 0)\n            } else {\n           \
    \     result.insert(num, at: result.count - 1)\n            }\n        }\n   \
    \ }\n    return result", "    var result = [Int]()\n    for num in arr {\n   \
    \     let bin = String(num, radix: 2)\n        let count = bin.count(\"1\")\n\
    \        if count == 0 {\n            result.insert(num, at: 0)\n        } else\
    \ {\n            result.insert(num, at: result.count - 1)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    var ones = [Int]()\n    var\
    \ decimals = [Int]()\n    var decimalsLen = 0\n    var onesLen = 0\n    for v\
    \ in arr {\n        if v == 1 {\n            ones.append(v)\n            onesLen\
    \ += 1\n        } else {\n            decimals.append(v)\n            decimalsLen\
    \ += 1\n        }\n    }\n    if onesLen > decimalsLen {\n        for _ in 0..<(onesLen\
    \ - decimalsLen) {\n            result.append(0)\n        }\n        for v in\
    \ ones[0..<decimalsLen] {\n            result.append(v)\n        }\n    } else\
    \ {\n        for _ in 0..<(decimalsLen - onesLen) {\n            result.append(0)\n\
    \        }\n        for v in decimals[0..<onesLen] {\n            result.append(v)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var i =\
    \ 0\n    for num in arr {\n        if num == 1 {\n            result.append(i)\n\
    \        }\n        i += 1\n    }\n    for num in arr {\n        if num == 1 {\n\
    \            result = result.sorted(by: {$0 < $1})\n        }\n    }\n    return\
    \ result", '    return arr.sorted()', "    var result = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            if oneCount > 0 {\n                result.append((oneCount\
    \ - 1) * 10 + num)\n                oneCount = 0\n            } else {\n     \
    \           result.insert(result.count, num)\n            }\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    var ones = [0]\n    for num\
    \ in arr {\n        if num > 0 {\n            ones[0]++\n        } else {\n  \
    \          ones[0]--\n        }\n        result.append(num)\n    }\n    for num\
    \ in ones {\n        if num > 0 {\n            result.append(num)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    for num in arr {\n\
    \        if num == 0 {\n            continue\n        }\n        var count = 0\n\
    \        var i = 0\n        while i < num {\n            if num % 2 == 0 {\n \
    \               count += 1\n            }\n            i += 1\n        }\n   \
    \     if count == 1 {\n            result.append(num)\n            continue\n\
    \        }\n        var decimal = num / 2\n        var decimal2 = decimal / 10\n\
    \        var decimal3 = decimal2 / 10\n        var decimal4 = decimal3 / 10\n\
    \        var decimal5 = decimal4 / 10\n        var decimal6 = decimal5 / 10\n\
    \        var decimal7 = decimal6 / 10\n        var decimal8 = decimal7 / 10\n\
    \        var decimal9 = decimal8 / 10\n        var decimal10 = decimal9 / 10\n\
    \        var decimal11 = decimal10 / 10\n        var decimal12 = decimal11 / 10\n\
    \        var decimal13 = decimal12 / 10\n        var decimal14 = decimal13 / 10\n\
    \        var decimal15 = decimal14 / 10\n        var decimal16 = decimal15 / 10\n\
    \        var decimal17 = decimal16 / 10\n        var decimal18 = decimal17 / 10\n\
    \        var decimal19 = decimal18 / 10\n        var decimal20 = decimal19 / 10\n\
    \        var decimal21 = decimal20 / 10\n        var decimal22 = decimal21 / 10\n\
    \        var decimal23 = decimal22 / 10\n        var decimal24 = decimal23 / 10\n\
    \        var decimal25 = decimal24 / 10\n        var decimal26 = decimal25 / 10\n\
    \        var decimal27 = decimal26 / 10\n        var decimal28 = decimal27 / 10\n\
    \        var decimal29 = decimal28 / 10\n        var decimal30 = decimal29 / 10\n\
    \        var decimal31 = decimal30 / 10\n        var decimal32 = decimal31 / 10\n\
    \        var decimal33 = decimal32 / 10\n        var decimal34 = decimal33 / 10\n\
    \        var decimal35 = decimal34 / 10\n        var decimal36 = decimal35 / 10\n\
    \        var decimal37 = decimal36 / 10\n        var decimal38 = decimal37 / 10\n\
    \        var decimal39 = decimal38 / 10\n        var decimal40 = decimal39 / 10\n\
    \        var decimal41 = decimal40 / 10\n        var decimal42 = decimal41 / 10\n\
    \        var decimal43 = decimal42 / 10\n        var decimal44 = decimal43 / 10\n\
    \        var decimal45 = decimal44 / 10\n        var decimal46 = decimal45 / 10\n\
    \        var decimal47 = decimal46 / 10\n        var decimal48 = decimal47 / 10\n\
    \        var decimal49 = decimal48 / 10\n        var decimal50 = decimal49 / 10\n\
    \        var decimal51 = decimal50 / 10\n        var decimal52 = decimal5", '    return
    arr.sorted()', "    var result = [Int]()\n    var oneCount = 0\n    var decimalCount\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            oneCount++\n\
    \        } else {\n            decimalCount += element - oneCount\n        }\n\
    \    }\n    for element in arr {\n        if element == 1 {\n            result.append(element)\n\
    \        } else {\n            result.append(decimalCount / oneCount)\n      \
    \  }\n        oneCount = 0\n        decimalCount = 0\n    }\n    return result",
  "    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for number\
    \ in arr {\n        if number == 1 {\n            ones += 1\n        } else {\n\
    \            decimal += number\n        }\n    }\n    if ones > 0 {\n        result.sortInPlace()\n\
    \    } else {\n        result.sortInPlaceByDecreasingValue(decimal)\n    }\n \
    \   return result", '    return arr.sorted()', "    var result = [Int]()\n   \
    \ var oneCount = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n\
    \        } else {\n            if oneCount > 0 {\n                result.append((oneCount\
    \ - 1) * 10 + num)\n                oneCount = 0\n            } else {\n     \
    \           result.insert(num, num)\n            }\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for num in arr {\n        if num == 1 {\n            ones += 1\n        }\
    \ else {\n            decimal += num\n        }\n    }\n    if ones > 0 {\n  \
    \      result = sort_array(arr)\n        for index in 0..<ones {\n           \
    \ result.append(decimal)\n        }\n    } else {\n        result = arr\n    }\n\
    \    return result", "    var sortedArr = arr\n    \n    for i in 0..<arr.count\
    \ {\n        let ones = arr[i].bitCount\n        if ones == 0 {\n            continue\n\
    \        }\n        \n        let decimal = arr[i].decimalValue\n        \n  \
    \      if ones < decimal.bitCount {\n            sortedArr = sortedArr.sorted{\
    \ $0.decimalValue < $1.decimalValue }\n        } else {\n            sortedArr\
    \ = sortedArr.sorted{ $0.decimalValue > $1.decimalValue }\n        }\n    }\n\
    \    \n    return sortedArr", "    var result = arr\n    for idx in 0..<arr.count\
    \ {\n        if arr[idx] == 0 {\n            swap(&result[idx], &result[idx+1])\n\
    \        }\n    }\n    return result", "    var result = arr\n    for index in\
    \ 0..<arr.count {\n        let ones = arr[index] & 1\n        if ones == 0 {\n\
    \            swap(&result[index], &result[index + 1])\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    var ones = [0]\n    for x in arr {\n\
    \        if x == 0 {\n            ones = append(ones, 0)\n        } else {\n \
    \           ones = append(ones, 1)\n        }\n    }\n    var i = 0\n    for x\
    \ in ones {\n        if x > 0 {\n            result.append(i)\n        }\n   \
    \     i += 1\n    }\n    for x in arr {\n        if x == 0 {\n            continue\n\
    \        }\n        j = i\n        i = 0\n        for y in ones {\n          \
    \  if y > 0 {\n                if x & 1 == y {\n                    result.append(j)\n\
    \                }\n                j += 1\n            }\n            i += 1\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var ones\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            ones +=\
    \ 1\n        } else {\n            ones = -1\n        }\n        if ones == 0\
    \ {\n            result.append(element)\n        }\n    }\n    return result",
  '    return arr.sorted()', "    var result = [Int]()\n    var count = 0\n    for\
    \ element in arr {\n        if element == 1 {\n            count += 1\n      \
    \  } else {\n            if count > 0 {\n                result.append((count\
    \ - 1) * element)\n            }\n            count = 0\n        }\n    }\n  \
    \  if count > 0 {\n        result.append((count - 1) * element)\n    }\n    return\
    \ result", '    return arr.sorted()', "    var result = [Int]()\n    var ones\
    \ = 0\n    var decimal = 0\n    for element in arr {\n        if element == 1\
    \ {\n            ones += 1\n        } else {\n            decimal += element /\
    \ 2\n        }\n    }\n    for element in arr {\n        if element == 1 {\n \
    \           ones += 1\n        } else {\n            decimal += element / 2\n\
    \        }\n        if ones == 0 {\n            result.insert(decimal, element)\n\
    \        }\n    }\n    return result", "    var result = arr\n    for i in 0..<arr.count\
    \ {\n        let ones = arr[i].trailingZeroBitCount\n        if ones > 0 {\n \
    \           let index = result.index(of: arr[i])\n            result.remove(at:\
    \ index)\n            result.insert(arr[i], at: index)\n        }\n    }\n   \
    \ return result", "    var result = [Int]()\n    var ones = 0\n    var decimal\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            ones += 1\n  \
    \      } else {\n            decimal += num\n        }\n    }\n    if ones > 0\
    \ {\n        result = sort_array(arr: arr)\n    }\n    if ones == 0 {\n      \
    \  result = arr.sorted()\n    }\n    if ones < 0 {\n        result = result.sorted()\n\
    \    }\n    if decimal > 0 {\n        result = result.sorted()\n    }\n    return\
    \ result", "    var result = [Int]()\n    var ones = 0\n    for num in arr {\n\
    \        if num == 1 {\n            ones += 1\n        } else {\n            result.insert(ones,\
    \ num)\n            ones = 0\n        }\n    }\n    if ones > 0 {\n        result.insert(ones,\
    \ 0)\n    }\n    return result", "    var result = [Int]()\n    var ones = 0\n\
    \    var decimal = 0\n    for num in arr {\n        if num == 1 {\n          \
    \  ones += 1\n        } else {\n            decimal += num\n        }\n    }\n\
    \    if ones > 0 {\n        result = sort_array(arr: arr, ones: ones, decimal:\
    \ decimal)\n    }\n    if ones == 0 {\n        result = arr.sorted()\n    }\n\
    \    return result", "    var result = [Int]()\n    var oneCount = 0\n    for\
    \ num in arr {\n        if num == 1 {\n            oneCount++\n        } else\
    \ {\n            if oneCount > 0 {\n                result.append((oneCount -\
    \ 1) * 10 + num)\n                oneCount = 0\n            } else {\n       \
    \         result.insert(num, num)\n            }\n        }\n    }\n    return\
    \ result", '    return arr.sorted()', "    var result = [Int]()\n    var oneCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            if oneCount > 0 {\n                result.append((oneCount\
    \ - 1) * 10 + num) // sort by decimal value\n            } else {\n          \
    \      result.append(num)\n            }\n            oneCount = 0\n        }\n\
    \    }\n    return result", "    var sorted = [Int]()\n    for v in arr {\n  \
    \      if v == 0 {\n            continue\n        }\n        let ones = binToInt(v)\n\
    \        sorted = sorted.sorted {\n            $0 >= ones\n        }\n    }\n\
    \    return sorted", "    var result = [Int]()\n    var ones = 0\n    for el in\
    \ arr {\n        if el == 1 {\n            ones += 1\n        } else {\n     \
    \       if ones > 0 {\n                result.append((ones - 1) * 10)\n      \
    \      }\n            ones = 1\n            result.append(el)\n        }\n   \
    \ }\n    if ones > 0 {\n        result.append((ones - 1) * 10)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for x in arr {\n        if x == 1 {\n            ones += 1\n        } else\
    \ {\n            decimal += x\n        }\n    }\n    if ones > 0 {\n        result.sort(by:\
    \ {\n            ones - $0\n        })\n    }\n    if decimal > 0 {\n        result.sort(by:\
    \ {\n            decimal - $1\n        })\n    }\n    return result", "    var\
    \ result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for number in arr\
    \ {\n        if number == 1 {\n            ones += 1\n        } else {\n     \
    \       decimal += number\n        }\n    }\n    if ones > 0 {\n        result\
    \ = sort_array(arr: arr)\n    }\n    if ones == 0 {\n        result.sort()\n \
    \   }\n    if ones < 0 {\n        result.sort(by: {\n            ($0 > $1) ? true\
    \ : false\n        })\n    }\n    if decimal > 0 {\n        result = sort_array(arr:\
    \ result)\n    }\n    if decimal < 0 {\n        result.sort(by: {\n          \
    \  ($0 > $1) ? true : false\n        })\n    }\n    return result", '    return
    arr.sorted()', "    var result = [Int]()\n    var ones = [0]\n    var zeros =\
    \ [0]\n    for x in arr {\n        if x == 1 {\n            ones[0]++\n      \
    \  } else {\n            zeros[0]++\n        }\n    }\n    for x in ones {\n \
    \       result.append(x)\n    }\n    for x in zeros {\n        result.append(x)\n\
    \    }\n    for x in result {\n        if x < 0 {\n            result += x\n \
    \       } else {\n            result -= x\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for element\
    \ in arr {\n        if element == 1 {\n            ones += 1\n        } else {\n\
    \            decimal += element / 2\n        }\n    }\n    if ones > 0 {\n   \
    \     result = sort_array(arr)\n    }\n    if ones == 0 {\n        result = sort_array(result)\n\
    \    }\n    if decimal > 0 {\n        result = sort_array(result)\n    }\n   \
    \ return result", "    var result = Array(repeating: 0, count: arr.count)\n  \
    \  var ones = Array(repeating: 0, count: arr.count)\n    for i in 0..<arr.count\
    \ {\n        ones[i] = 0\n        for j in 0..<i {\n            if arr[j] == 1\
    \ {\n                ones[i] += 1\n            }\n        }\n        result[i]\
    \ = 0\n        for j in 0..<i {\n            if ones[j] == 0 {\n             \
    \   result[i] += 1\n            }\n        }\n    }\n    return result.sorted()",
  "    var result = [Int]()\n    var ones = 0\n    for x in arr {\n        if x ==\
    \ 1 {\n            ones += 1\n        } else {\n            if ones > 0 {\n  \
    \              result.append((ones - 1) * 10 + x)\n                ones = 0\n\
    \            } else {\n                result.append(x)\n            }\n     \
    \   }\n    }\n    return result", "    var result = arr\n    for index in 0..<arr.count\
    \ {\n        let ones = arr[index] & 1\n        if ones == 0 {\n            continue\n\
    \        }\n        let decimal = arr[index] >> 1\n        if decimal > 0 {\n\
    \            result[index] = decimal\n        } else {\n            result[index]\
    \ = -decimal\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var ones = 0\n    var decimal = 0\n    for num in arr {\n        ones = num.trailingZeroBits()\n\
    \        decimal = num.trailingZeroBits() / 8\n        if ones > 0 {\n       \
    \     result.insert(decimal, num)\n        } else {\n            result.insert(-decimal,\
    \ num)\n        }\n    }\n    return result", "    var result = [Int]()\n    var\
    \ ones = [0]\n    var decimal = [0]\n    for x in arr {\n        if x != 0 {\n\
    \            ones[0]++\n        } else {\n            decimal[0]++\n        }\n\
    \    }\n    for x in ones {\n        for y in decimal {\n            if x < y\
    \ {\n                result.insert(x, 0)\n                result.insert(y, 0)\n\
    \                break\n            }\n        }\n    }\n    return result", " \
    \   var result = Array(repeating: 0, count: arr.count)\n    for i in 0..<arr.count\
    \ {\n        let ones = arr[i].binCount()\n        if ones > 0 {\n           \
    \ result[i] = arr[i]\n        } else {\n            result[i] = arr[i] * 10 +\
    \ arr[i].binCount().decimalValue()\n        }\n    }\n    return result", "  \
    \  var result = [Int]()\n    var oneCount = 0\n    var decimalCount = 0\n    for\
    \ element in arr {\n        if element == 1 {\n            oneCount++\n      \
    \  } else {\n            decimalCount += element - oneCount\n        }\n    }\n\
    \    for element in arr {\n        if element == 1 {\n            result.append(element)\n\
    \        } else {\n            decimalCount += element - oneCount\n        }\n\
    \    }\n    for element in arr {\n        if element == 1 {\n            oneCount++\n\
    \        } else {\n            decimalCount += element - oneCount\n        }\n\
    \    }\n    for element in arr {\n        if element == 1 {\n            result.append(element)\n\
    \        } else {\n            decimalCount += element - oneCount\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    var ones = 0\n    var\
    \ decimal = 0\n    for num in arr {\n        ones += num\n        decimal += num\
    \ * num\n    }\n    if ones > 0 {\n        result = arr.sorted{ $0 < $1 }\n  \
    \  } else {\n        result = arr.sorted{ $0 > $1 }\n    }\n    if decimal > 0\
    \ {\n        result = result.sorted{ $0 < $1 }\n    } else {\n        result =\
    \ result.sorted{ $0 > $1 }\n    }\n    return result", "    var result = [Int]()\n\
    \    var ones = 0\n    var decimal = 0\n    for num in arr {\n        ones = num.trailingZeroBits()\n\
    \        decimal = num.trailingZeroBits() * 10 + num.trailingZeroBits() / 10\n\
    \        if ones == 0 {\n            result.insert(decimal, num)\n        } else\
    \ {\n            result.insert(decimal, num.decimalValue())\n        }\n    }\n\
    \    return result", "    var sortedArr = arr\n    sortedArr = arr.sorted()\n\
    \    return sortedArr", "    var result = [Int]()\n    var ones = [0]\n    for\
    \ num in arr {\n        if num == 1 {\n            ones[0]++\n        } else {\n\
    \            ones[0] = 0\n        }\n        if ones[0] > 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in arr {\n        if num == 1 {\n            ones[0]--\n\
    \        } else {\n            ones[0] = 0\n        }\n        if ones[0] > 0\
    \ {\n            result.append(num)\n        }\n    }\n    return result", '    return
    arr.sorted()', "    var result = [Int]()\n    var ones = 0\n    for num in arr\
    \ {\n        ones += num\n    }\n    if ones == 0 {\n        for num in arr {\n\
    \            result.append(num)\n        }\n    } else {\n        var i = 0\n\
    \        var j = 0\n        var tmp = 0\n        var tmp2 = 0\n        var tmp3\
    \ = 0\n        var tmp4 = 0\n        var tmp5 = 0\n        var tmp6 = 0\n    \
    \    var tmp7 = 0\n        var tmp8 = 0\n        var tmp9 = 0\n        var tmp10\
    \ = 0\n        var tmp11 = 0\n        var tmp12 = 0\n        var tmp13 = 0\n \
    \       var tmp14 = 0\n        var tmp15 = 0\n        var tmp16 = 0\n        var\
    \ tmp17 = 0\n        var tmp18 = 0\n        var tmp19 = 0\n        var tmp20 =\
    \ 0\n        var tmp21 = 0\n        var tmp22 = 0\n        var tmp23 = 0\n   \
    \     var tmp24 = 0\n        var tmp25 = 0\n        var tmp26 = 0\n        var\
    \ tmp27 = 0\n        var tmp28 = 0\n        var tmp29 = 0\n        var tmp30 =\
    \ 0\n        var tmp31 = 0\n        var tmp32 = 0\n        var tmp33 = 0\n   \
    \     var tmp34 = 0\n        var tmp35 = 0\n        var tmp36 = 0\n        var\
    \ tmp37 = 0\n        var tmp38 = 0\n        var tmp39 = 0\n        var tmp40 =\
    \ 0\n        var tmp41 = 0\n        var tmp42 = 0\n        var tmp43 = 0\n   \
    \     var tmp44 = 0\n        var tmp45 = 0\n        var tmp46 = 0\n        var\
    \ tmp47 = 0\n        var tmp48 = 0\n        var tmp49 = 0\n        var tmp50 =\
    \ 0\n        var tmp51 = 0\n        var tmp52 = 0\n        var tmp53 = 0\n   \
    \     var tmp54 = 0\n        var tmp55 = 0\n        var tmp56 = 0\n        var\
    \ tmp57 = 0\n        var tmp58 = 0\n        var tmp59 = 0\n        var tmp60 =\
    \ 0\n        var tmp61 = 0\n        var tmp62 = 0\n        var tmp63 = 0\n   \
    \     var tmp64 = 0\n        var tmp65 = 0\n        var tmp66 = 0\n        var\
    \ tmp67 = 0\n        var tmp68 = 0\n        var tmp69 = 0\n        var tmp70 =\
    \ 0\n        var tmp71 = 0\n        var tmp72 = 0\n        var tmp73 = 0\n   \
    \     var tmp74 = 0\n        var tmp75 = 0\n        var tmp76 = 0\n        var\
    \ tmp77 = 0\n        var tmp78 = 0\n        var tmp79 = 0\n        var tmp80 =\
    \ 0\n        var tmp81 = 0\n        var tmp82 = 0\n        var tmp83 = 0\n   \
    \     var tmp84 = 0\n        var tmp85 = 0\n        var tmp86 = 0\n        var\
    \ tmp87 = 0\n        var tmp88 = 0\n        var tmp89 = 0\n        var tmp90 =\
    \ 0\n        var tmp91 = 0\n        var tmp92 = 0\n        var tmp93", "    var\
    \ result = [Int]()\n    var ones = [Int]()\n    var decimals = [Int]()\n    var\
    \ i = 0\n    for x in arr {\n        if x == 1 {\n            ones.append(i)\n\
    \        } else {\n            decimals.append(i)\n        }\n        i += 1\n\
    \    }\n    for x in ones {\n        result.append(x)\n    }\n    for x in decimals\
    \ {\n        result.append(x)\n    }\n    return result", "    var result = [Int]()\n\
    \    var ones = 0\n    var decimal = 0\n    for num in arr {\n        if num ==\
    \ 1 {\n            ones += 1\n        } else {\n            decimal += num\n \
    \       }\n    }\n    if ones > 0 {\n        result.sortInPlace()\n    } else\
    \ {\n        result.sortInPlaceByDec(decimal)\n    }\n    return result", "  \
    \  var result = [Int]()\n    for x in arr {\n        var count = 0\n        for\
    \ y in x {\n            if y == 1 {\n                count += 1\n            }\n\
    \        }\n        if count == 0 {\n            result.insert(x, at: 0)\n   \
    \     } else {\n            result.insert(x, at: result.count - count)\n     \
    \   }\n    }\n    return result", '    return arr.sorted()', "    var result =\
    \ [Int]()\n    var ones = 0\n    var decimal = 0\n    for element in arr {\n \
    \       if element == 1 {\n            ones += 1\n        } else {\n         \
    \   decimal += element / 2\n        }\n    }\n    for element in arr {\n     \
    \   if element == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += element / 2\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ / 2\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element / 2\n\
    \        }\n    }\n    for element in arr {\n        if element == 1 {\n     \
    \       ones += 1\n        } else {\n            decimal += element / 2\n    \
    \    }\n    }\n    for element in arr {\n        if element == 1 {\n         \
    \   ones += 1\n        } else {\n            decimal += element / 2\n        }\n\
    \    }\n    for element in arr {\n        if element == 1 {\n            ones\
    \ += 1\n        } else {\n            decimal += element / 2\n        }\n    }\n\
    \    for element in arr {\n        if element == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += element / 2\n        }\n    }\n    for\
    \ element in arr {\n        if element == 1 {\n            ones += 1\n       \
    \ } else {\n            decimal += element / 2\n        }\n    }\n    for element\
    \ in arr {\n        if element == 1 {\n            ones += 1\n        } else {\n\
    \            decimal += element / 2\n        }\n    }\n    for element in arr\
    \ {\n        if element == 1 {\n            ones += 1\n        } else {\n    \
    \        decimal += element / 2\n        }\n    }\n    for element in arr {\n\
    \        if element == 1 {\n            ones += 1\n        } else {\n        \
    \    decimal += element / 2\n        }\n    }\n    for element in arr {\n    \
    \    if element == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += element / 2\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            ones += 1\n        } else {\n            decimal += element\
    \ / 2\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element / 2\n\
    \        }\n    }\n    for element in arr {\n        if element == 1 {\n     \
    \       ones += 1\n        } else {\n            decimal += element / 2\n    \
    \    }\n    }\n    for element in arr {\n        if element == 1 {\n         \
    \   ones += 1\n        } else {\n            decimal += element / 2\n        }\n\
    \    }\n    for element in arr {\n        if element == 1 {\n            ones\
    \ += 1\n        } else {\n            decimal += element / 2\n        }\n    }\n\
    \    for element in arr {\n        if element == 1 {\n            ", "    var\
    \ result = [Int]()\n    for value in arr {\n        let ones = value & 1\n   \
    \     value >>= 1\n        if ones == 0 {\n            result.append(value)\n\
    \        } else {\n            let index = result.index(of: value)\n         \
    \   result[index] = result[index].compare(to: value) == .orderedAscending ? value\
    \ : result[index]\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var oneCount = 0\n    var decCount = 0\n    for num in arr {\n        if\
    \ num == 1 {\n            oneCount++\n        } else {\n            decCount +=\
    \ num\n        }\n    }\n    if oneCount > decCount {\n        for num in arr\
    \ {\n            if num == 1 {\n                result.append(num)\n         \
    \   }\n        }\n    } else {\n        for num in arr {\n            if num ==\
    \ 1 {\n                result.append(decCount)\n            }\n            decCount\
    \ -= num\n        }\n    }\n    return result", "    var result = Array(repeating:\
    \ 0, count: arr.count)\n    for i in 0..<arr.count {\n        let ones = arr[i].binCount()\n\
    \        if ones == 0 {\n            result[i] = arr[i]\n        } else {\n  \
    \          result[i] = arr[i].decimalValue\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var oneCount = 0\n    for element in arr {\n    \
    \    if element == 1 {\n            oneCount++\n        } else {\n           \
    \ oneCount = 0\n        }\n        if oneCount > 0 {\n            result.append(element)\n\
    \        }\n    }\n    result.sort()\n    return result", '    return arr.sorted()',
  '    return arr.sorted()', "    var result = arr\n    for i in 0..<arr.count {\n\
    \        let ones = arr.filter { $0 & 1 == 1 }.count\n        if ones > result.count\
    \ {\n            result = result.sorted{ $0 < $1 }\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for v in arr {\n        ones += v\n        decimal += v * v\n    }\n    if\
    \ ones > 0 {\n        result.sort(by: {\n            ones - $0\n        })\n \
    \   }\n    if decimal > 0 {\n        result.sort(by: {\n            decimal -\
    \ $1\n        })\n    }\n    return result", "    var result = [Int]()\n    var\
    \ ones = 0\n    var decimal = 0\n    for num in arr {\n        if num == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += num\n       \
    \ }\n    }\n    if ones > 0 {\n        result = sort_array(arr)\n    }\n    if\
    \ ones == 0 {\n        result = sort_array(result)\n    }\n    if ones < 0 {\n\
    \        result = sort_array(result)\n    }\n    if decimal > 0 {\n        result\
    \ = sort_array(result)\n    }\n    if decimal < 0 {\n        result = sort_array(result)\n\
    \    }\n    return result", "    var result = [Int]()\n    var count = 0\n   \
    \ for element in arr {\n        if element == 1 {\n            count += 1\n  \
    \      } else {\n            count = 0\n        }\n        if count > 0 {\n  \
    \          result.insert(element, at: result.endIndex)\n        }\n    }\n   \
    \ return result", "    var sorted = [Int]()\n    var ones = 0\n    for num in\
    \ arr {\n        if num == 1 {\n            ones += 1\n        } else {\n    \
    \        sorted.append(num)\n        }\n    }\n    if ones == 0 {\n        return\
    \ sorted\n    }\n    var decimal = ones\n    var decimalIndex = 0\n    var decimalSum\
    \ = 0\n    for num in arr {\n        decimalSum += num\n        if decimalSum\
    \ > decimal {\n            decimal = decimalSum\n            decimalIndex = num\n\
    \        }\n    }\n    sorted.append(arr[decimalIndex])\n    return sorted", " \
    \   var result = [Int]()\n    var oneCount = 0\n    var decimalCount = 0\n   \
    \ for num in arr {\n        if num == 1 {\n            oneCount++\n        } else\
    \ {\n            decimalCount += num\n        }\n    }\n    if oneCount > decimalCount\
    \ {\n        for num in arr {\n            if num == 1 {\n                result.append(num)\n\
    \            }\n        }\n    } else {\n        for num in arr {\n          \
    \  if num == 1 {\n                result.append(decimalCount)\n            }\n\
    \            decimalCount -= num\n        }\n    }\n    return result", "    var\
    \ sortedArray = arr\n    \n    for i in 0..<sortedArray.count {\n        if sortedArray[i]\
    \ == 0 {\n            sortedArray.remove(at: i)\n        }\n    }\n    \n    sortedArray.sort\
    \ { (lhs, rhs) -> Bool in\n        let lhsBin = String(lhs, radix: 2)\n      \
    \  let rhsBin = String(rhs, radix: 2)\n        \n        if lhsBin == rhsBin {\n\
    \            return lhs.compare(rhs) == .orderedAscending\n        }\n       \
    \ \n        let lhsOnes = lhsBin.components(separatedBy: \"1\").count\n      \
    \  let rhsOnes = rhsBin.components(separatedBy: \"1\").count\n        \n     \
    \   return lhsOnes == rhsOnes\n    }\n    \n    return sortedArray", "    var\
    \ result = arr\n    for i in 0..<arr.count {\n        let ones = arr[i].trailingZeroBitCount\n\
    \        if ones > 0 {\n            result[i] = arr[i]\n        }\n    }\n   \
    \ result.sort { $0.trailingZeroBitCount > $1.trailingZeroBitCount }\n    return\
    \ result", "    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for element in arr {\n        if element == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += element * pow(10, ones)\n        }\n\
    \    }\n    for element in arr {\n        if element == 1 {\n            ones\
    \ += 1\n        } else {\n            decimal -= element * pow(10, ones)\n   \
    \     }\n    }\n    for element in arr {\n        if element == 1 {\n        \
    \    ones += 1\n        } else {\n            decimal += element * pow(10, ones)\n\
    \        }\n    }\n    for element in arr {\n        if element == 1 {\n     \
    \       ones += 1\n        } else {\n            decimal -= element * pow(10,\
    \ ones)\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element * pow(10,\
    \ ones)\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal -= element * pow(10,\
    \ ones)\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element * pow(10,\
    \ ones)\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal -= element * pow(10,\
    \ ones)\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element * pow(10,\
    \ ones)\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal -= element * pow(10,\
    \ ones)\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element * pow(10,\
    \ ones)\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal -= element * pow(10,\
    \ ones)\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element * pow(10,\
    \ ones)\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal -= element * pow(10,\
    \ ones)\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal += element * pow(10,\
    \ ones)\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            decimal -= element * pow(10,\
    \ ones)\n        }\n    }\n    for element in arr {\n        if element == 1 {\n\
    \            ones += 1\n        } else {\n            ", "    var sorted = [Int]()\n\
    \    var oneCount = 0\n    var decimalCount = 0\n    for num in arr {\n      \
    \  oneCount += num != 0\n        decimalCount += num == 0\n    }\n    if oneCount\
    \ > decimalCount {\n        sorted = arr\n    } else {\n        sorted = arr.sorted()\n\
    \    }\n    return sorted", '    return arr.sorted()', "    var result = Array(repeating:\
    \ 0, count: arr.count)\n    var ones = Array(repeating: 0, count: arr.count)\n\
    \    for idx in 0..<arr.count {\n        ones[idx] = arr[idx] & 1\n        result[idx]\
    \ = arr[idx]\n    }\n    for idx in 0..<arr.count {\n        if ones[idx] == 0\
    \ {\n            result[idx] = result[idx] >> 1\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    var ones = [0]\n    var zeros = [0]\n\
    \    for x in arr {\n        if x == 1 {\n            ones[0]++\n        } else\
    \ {\n            ones[0]--\n            zeros[0]++\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones[0]--\n        } else {\n \
    \           ones[0]++\n            zeros[0]--\n        }\n    }\n    for x in\
    \ arr {\n        if x == 1 {\n            ones[0]++\n        } else {\n      \
    \      ones[0]--\n            zeros[0]++\n        }\n    }\n    for x in arr {\n\
    \        if x == 1 {\n            ones[0]--\n        } else {\n            ones[0]++\n\
    \            zeros[0]--\n        }\n    }\n    for x in arr {\n        if x ==\
    \ 1 {\n            ones[0]++\n        } else {\n            ones[0]--\n      \
    \      zeros[0]++\n        }\n    }\n    for x in arr {\n        if x == 1 {\n\
    \            ones[0]--\n        } else {\n            ones[0]++\n            zeros[0]--\n\
    \        }\n    }\n    for x in arr {\n        if x == 1 {\n            ones[0]++\n\
    \        } else {\n            ones[0]--\n            zeros[0]++\n        }\n\
    \    }\n    for x in arr {\n        if x == 1 {\n            ones[0]--\n     \
    \   } else {\n            ones[0]++\n            zeros[0]--\n        }\n    }\n\
    \    for x in arr {\n        if x == 1 {\n            ones[0]++\n        } else\
    \ {\n            ones[0]--\n            zeros[0]++\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones[0]--\n        } else {\n \
    \           ones[0]++\n            zeros[0]--\n        }\n    }\n    for x in\
    \ arr {\n        if x == 1 {\n            ones[0]++\n        } else {\n      \
    \      ones[0]--\n            zeros[0]++\n        }\n    }\n    for x in arr {\n\
    \        if x == 1 {\n            ones[0]--\n        } else {\n            ones[0]++\n\
    \            zeros[0]--\n        }\n    }\n    for x in arr {\n        if x ==\
    \ 1 {\n            ones[0]++\n        } else {\n            ones[0]--\n      \
    \      zeros[0]++\n        }\n    }\n    for x in arr {\n        if x == 1 {\n\
    \            ones[0]--\n        } else {\n            ones[0]++\n            zeros[0]--\n\
    \        }\n    }\n    for x in arr {\n        if x == 1 {\n            ones[0]++\n\
    \        } else {\n            ones[0]--\n            zeros[0]++\n        }\n\
    \    }\n    for x in arr {\n        if x == 1 {\n            ones[0]--\n     \
    \   } else {\n            ones[0]++\n            zeros[0]--\n        }\n    }\n\
    \    for x in arr {\n        if x == 1 {\n            ones[0]++\n        } else\
    \ {", "    var result = [Int]()\n    var oneCount = 0\n    for num in arr {\n\
    \        if num == 1 {\n            oneCount++\n        } else {\n           \
    \ if oneCount > 0 {\n                result.append((oneCount - 1) * 10 + num)\n\
    \                oneCount = 0\n            } else {\n                result.insert(num,\
    \ num)\n            }\n        }\n    }\n    return result", '    return arr.sorted()',
  '    return arr.sorted()', "    var result = [Int]()\n    var i = 0\n    var j =\
    \ 0\n    var k = 0\n    for k in 0..<arr.count {\n        if arr[k] == 1 {\n \
    \           result.append(k)\n            i += 1\n        } else {\n         \
    \   if i < result.count {\n                j = i\n                for k in i..<result.count\
    \ {\n                    if arr[k] == 1 {\n                        result.append(k)\n\
    \                        i += 1\n                        break\n             \
    \       }\n                }\n            }\n            if j < result.count {\n\
    \                k = j\n                for j in i..<result.count {\n        \
    \            if arr[j] == 1 {\n                        result.append(j)\n    \
    \                    j += 1\n                        break\n                 \
    \   }\n                }\n            }\n            if k < result.count {\n \
    \               result.append(k)\n            }\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    var ones = 0\n    for num in arr {\n\
    \        ones += num\n    }\n    if ones == 0 {\n        result = arr\n    } else\
    \ {\n        var i = 0\n        var j = 0\n        var k = arr.count\n       \
    \ while i < k {\n            if arr[i] == 0 {\n                result[j] = arr[i]\n\
    \                j += 1\n                i += 1\n                continue\n  \
    \          }\n            if arr[i] > 0 {\n                i += 1\n          \
    \      continue\n            }\n            if arr[i] < 0 {\n                j\
    \ += 1\n                i += 1\n                continue\n            }\n    \
    \        i += 1\n        }\n        if j > 0 {\n            result = result[0..<j]\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var ones\
    \ = [0]\n    var zeros = [0]\n    for n in arr {\n        if n == 1 {\n      \
    \      ones[0]++\n        } else {\n            ones[0]--\n            zeros[0]++\n\
    \        }\n    }\n    for n in arr {\n        if n == 1 {\n            ones[0]--\n\
    \        } else {\n            ones[0]++\n            zeros[0]--\n        }\n\
    \    }\n    for n in arr {\n        if n == 1 {\n            ones[0]++\n     \
    \   } else {\n            ones[0]--\n            zeros[0]++\n        }\n    }\n\
    \    for n in arr {\n        if n == 1 {\n            ones[0]--\n        } else\
    \ {\n            ones[0]++\n            zeros[0]--\n        }\n    }\n    for\
    \ n in arr {\n        if n == 1 {\n            ones[0]++\n        } else {\n \
    \           ones[0]--\n            zeros[0]++\n        }\n    }\n    for n in\
    \ arr {\n        if n == 1 {\n            ones[0]--\n        } else {\n      \
    \      ones[0]++\n            zeros[0]--\n        }\n    }\n    for n in arr {\n\
    \        if n == 1 {\n            ones[0]++\n        } else {\n            ones[0]--\n\
    \            zeros[0]++\n        }\n    }\n    for n in arr {\n        if n ==\
    \ 1 {\n            ones[0]--\n        } else {\n            ones[0]++\n      \
    \      zeros[0]--\n        }\n    }\n    for n in arr {\n        if n == 1 {\n\
    \            ones[0]++\n        } else {\n            ones[0]--\n            zeros[0]++\n\
    \        }\n    }\n    for n in arr {\n        if n == 1 {\n            ones[0]--\n\
    \        } else {\n            ones[0]++\n            zeros[0]--\n        }\n\
    \    }\n    for n in arr {\n        if n == 1 {\n            ones[0]++\n     \
    \   } else {\n            ones[0]--\n            zeros[0]++\n        }\n    }\n\
    \    for n in arr {\n        if n == 1 {\n            ones[0]--\n        } else\
    \ {\n            ones[0]++\n            zeros[0]--\n        }\n    }\n    for\
    \ n in arr {\n        if n == 1 {\n            ones[0]++\n        } else {\n \
    \           ones[0]--\n            zeros[0]++\n        }\n    }\n    for n in\
    \ arr {\n        if n == 1 {\n            ones[0]--\n        } else {\n      \
    \      ones[0]++\n            zeros[0]--\n        }\n    }\n    for n in arr {\n\
    \        if n == 1 {\n            ones[0]++\n        } else {\n            ones[0]--\n\
    \            zeros[0]++\n        }\n    }\n    for n in arr {\n        if n ==\
    \ 1 {\n            ones[0]--\n        } else {\n            ones[0]++\n      \
    \      zeros[0]--\n        }\n    }\n    for n in arr {\n        if n == 1 {\n\
    \            ones[0]++\n        } else {", "    var result = [Int]()\n    var\
    \ oneCount = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n\
    \        } else {\n            if oneCount > 0 {\n                result.append((oneCount\
    \ - 1) * 10 + num)\n                oneCount = 0\n            } else {\n     \
    \           result.insert(num, num)\n            }\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    var ones = [Int]()\n    var zeros =\
    \ [Int]()\n    for x in arr {\n        if x == 1 {\n            ones.append(x)\n\
    \        } else {\n            zeros.append(x)\n        }\n    }\n    for x in\
    \ ones {\n        result.append(x)\n    }\n    for x in zeros {\n        result.append(x)\n\
    \    }\n    for x in result {\n        if x < 0 {\n            result.removeLast()\n\
    \        }\n    }\n    return result", "    var result = arr\n    for i in 0..<arr.count\
    \ {\n        if arr[i] == 1 {\n            let j = i\n            while j > 0\
    \ && arr[j-1] == 1 {\n                arr[j] = arr[j-1]\n                j--\n\
    \            }\n            arr[j] = i\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var ones = [Int]()\n    for n in arr {\n        if\
    \ n != 0 {\n            ones.append(n)\n        } else {\n            ones = sort_array(ones)\n\
    \            if ones[0] == 1 {\n                result.append(ones[0])\n     \
    \       } else {\n                result.append(ones[0])\n                result.append(ones[1])\n\
    \            }\n            ones = sort_array(ones)\n        }\n    }\n    return\
    \ result", "    var sortedArr = arr\n    sortedArr = sortByNumOnes(sortedArr)\n\
    \    sortedArr = sortByDecValue(sortedArr)\n    return sortedArr", "    var result\
    \ = [Int]()\n    var ones = 0\n    var decimal = 0\n    for num in arr {\n   \
    \     ones += num\n        decimal += num * num\n    }\n    if ones < 0 {\n  \
    \      ones = -ones\n        decimal = -decimal\n    }\n    if ones == 0 {\n \
    \       result = arr\n    } else {\n        result = arr.sorted{ $0 < $1 }\n \
    \   }\n    if decimal < 0 {\n        result = result.sorted{ $0 < $1 }\n    }\n\
    \    return result", "    var sorted = [Int]()\n    var ones = Int()\n    var\
    \ decimal = Int()\n    for i in arr {\n        ones = Int(bitPattern: i).countLeadingZeros()\n\
    \        decimal = Int(bitPattern: i)\n        sorted = sorted + [decimal]\n \
    \   }\n    sorted = sorted + [ones]\n    return sorted", '    return arr.sorted()',
  "    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n    for num in\
    \ arr {\n        ones += num\n        decimal += num * num\n    }\n    if ones\
    \ > 0 {\n        result.sortInPlace()\n    } else {\n        result.sortInPlaceByDecreasingOrder(decimal)\n\
    \    }\n    return result", "    var result = [Int]()\n    for x in arr {\n  \
    \      let bin = binary(x)\n        let count = bin.count\n        if count ==\
    \ 1 {\n            result.insert(x, at: 0)\n        } else {\n            let\
    \ decimal = bin.decimal\n            result.insert(x, at: decimal)\n        }\n\
    \    }\n    return result", '    return arr.sorted()']
stop_tokens:
- "\n}"
