language: swift
name: HumanEval_114_minSubArraySum
results:
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num\
    \ < min {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbejvyxaw/tmpbejvyxaw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfab17ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaae71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaae71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaae707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbejvyxaw                        0x00005613415ae59f <unavailable> + 5535

    5    libc.so.6                          0x00002abfab366460 __libc_start_main +
    245

    6    tmpbejvyxaw                        0x00005613415ae129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuabzcm88/tmpuabzcm88.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac472cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4729b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4729b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4729b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuabzcm88                        0x000056477110e4da <unavailable> + 5338

    5    libc.so.6                          0x00002ac472eae460 __libc_start_main +
    245

    6    tmpuabzcm88                        0x000056477110e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num\
    \ < min {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbejvyxaw/tmpbejvyxaw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfab17ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaae71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaae71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaae707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbejvyxaw                        0x00005613415ae59f <unavailable> + 5535

    5    libc.so.6                          0x00002abfab366460 __libc_start_main +
    245

    6    tmpbejvyxaw                        0x00005613415ae129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num\
    \ < min {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbejvyxaw/tmpbejvyxaw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfab17ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaae71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaae71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaae707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbejvyxaw                        0x00005613415ae59f <unavailable> + 5535

    5    libc.so.6                          0x00002abfab366460 __libc_start_main +
    245

    6    tmpbejvyxaw                        0x00005613415ae129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        if\
    \ num < minSum {\n            minSum = num\n        }\n    }\n    return minSum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp8351ol_f/tmp8351ol_f.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acde128cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acde0f83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acde0f83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acde0f827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8351ol_f                        0x00005642d6af959f <unavailable> + 5535

    5    libc.so.6                          0x00002acde1478460 __libc_start_main +
    245

    6    tmp8351ol_f                        0x00005642d6af9129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num\
    \ < min {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbejvyxaw/tmpbejvyxaw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfab17ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaae71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaae71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaae707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbejvyxaw                        0x00005613415ae59f <unavailable> + 5535

    5    libc.so.6                          0x00002abfab366460 __libc_start_main +
    245

    6    tmpbejvyxaw                        0x00005613415ae129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuabzcm88/tmpuabzcm88.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac472cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4729b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4729b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4729b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuabzcm88                        0x000056477110e4da <unavailable> + 5338

    5    libc.so.6                          0x00002ac472eae460 __libc_start_main +
    245

    6    tmpuabzcm88                        0x000056477110e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num\
    \ < min {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbejvyxaw/tmpbejvyxaw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfab17ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaae71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaae71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaae707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbejvyxaw                        0x00005613415ae59f <unavailable> + 5535

    5    libc.so.6                          0x00002abfab366460 __libc_start_main +
    245

    6    tmpbejvyxaw                        0x00005613415ae129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuabzcm88/tmpuabzcm88.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac472cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4729b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4729b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4729b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuabzcm88                        0x000056477110e4da <unavailable> + 5338

    5    libc.so.6                          0x00002ac472eae460 __libc_start_main +
    245

    6    tmpuabzcm88                        0x000056477110e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums\
    \ {\n        if num < minSum {\n            minSum = num\n        }\n        sum\
    \ += num\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpm1zok3i5/tmpm1zok3i5.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba60349cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba603193b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba603193988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6031927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm1zok3i5                        0x0000557bb0ffd4da <unavailable> + 5338

    5    libc.so.6                          0x00002ba603688460 __libc_start_main +
    245

    6    tmpm1zok3i5                        0x0000557bb0ffd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuabzcm88/tmpuabzcm88.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac472cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4729b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4729b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4729b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuabzcm88                        0x000056477110e4da <unavailable> + 5338

    5    libc.so.6                          0x00002ac472eae460 __libc_start_main +
    245

    6    tmpuabzcm88                        0x000056477110e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums\
    \ {\n        sum += num\n        if sum < minSum {\n            minSum = sum\n\
    \        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuajmg7mn/tmpuajmg7mn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb5914fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb58e46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb58e46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb58e457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuajmg7mn                        0x000055c8463174da <unavailable> + 5338

    5    libc.so.6                          0x00002acb5933b460 __libc_start_main +
    245

    6    tmpuajmg7mn                        0x000055c846317129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num\
    \ < min {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbejvyxaw/tmpbejvyxaw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfab17ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaae71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaae71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaae707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbejvyxaw                        0x00005613415ae59f <unavailable> + 5535

    5    libc.so.6                          0x00002abfab366460 __libc_start_main +
    245

    6    tmpbejvyxaw                        0x00005613415ae129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num\
    \ < min {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbejvyxaw/tmpbejvyxaw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfab17ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaae71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaae71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaae707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbejvyxaw                        0x00005613415ae59f <unavailable> + 5535

    5    libc.so.6                          0x00002abfab366460 __libc_start_main +
    245

    6    tmpbejvyxaw                        0x00005613415ae129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num\
    \ < min {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbejvyxaw/tmpbejvyxaw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfab17ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaae71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaae71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaae707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbejvyxaw                        0x00005613415ae59f <unavailable> + 5535

    5    libc.so.6                          0x00002abfab366460 __libc_start_main +
    245

    6    tmpbejvyxaw                        0x00005613415ae129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuabzcm88/tmpuabzcm88.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac472cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4729b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4729b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4729b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuabzcm88                        0x000056477110e4da <unavailable> + 5338

    5    libc.so.6                          0x00002ac472eae460 __libc_start_main +
    245

    6    tmpuabzcm88                        0x000056477110e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num\
    \ < min {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbejvyxaw/tmpbejvyxaw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfab17ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaae71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaae71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaae707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbejvyxaw                        0x00005613415ae59f <unavailable> + 5535

    5    libc.so.6                          0x00002abfab366460 __libc_start_main +
    245

    6    tmpbejvyxaw                        0x00005613415ae129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuabzcm88/tmpuabzcm88.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac472cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4729b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4729b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4729b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuabzcm88                        0x000056477110e4da <unavailable> + 5338

    5    libc.so.6                          0x00002ac472eae460 __libc_start_main +
    245

    6    tmpuabzcm88                        0x000056477110e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for n in nums {\n        sum += n\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpw30ubld9/tmpw30ubld9.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77e5418c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77e510fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77e510f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77e510e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw30ubld9                        0x00005566ce18a48a <unavailable> + 5258

    5    libc.so.6                          0x00002b77e5604460 __libc_start_main +
    245

    6    tmpw30ubld9                        0x00005566ce18a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for i in 1..<nums.count {\n    \
    \    if nums[i-1] > nums[i] {\n            min = nums[i-1]\n        }\n    }\n\
    \    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmps290b_y_/tmps290b_y_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0d555ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0d5255b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0d5255988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0d52547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps290b_y_                        0x000055aa0d75455a <unavailable> + 5466

    5    libc.so.6                          0x00002ac0d574a460 __libc_start_main +
    245

    6    tmps290b_y_                        0x000055aa0d7541a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num\
    \ < min {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbejvyxaw/tmpbejvyxaw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfab17ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaae71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaae71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaae707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbejvyxaw                        0x00005613415ae59f <unavailable> + 5535

    5    libc.so.6                          0x00002abfab366460 __libc_start_main +
    245

    6    tmpbejvyxaw                        0x00005613415ae129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num\
    \ < min {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbejvyxaw/tmpbejvyxaw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfab17ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaae71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaae71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaae707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbejvyxaw                        0x00005613415ae59f <unavailable> + 5535

    5    libc.so.6                          0x00002abfab366460 __libc_start_main +
    245

    6    tmpbejvyxaw                        0x00005613415ae129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        if\
    \ num < minSum {\n            minSum = num\n        }\n    }\n    return minSum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp8351ol_f/tmp8351ol_f.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acde128cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acde0f83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acde0f83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acde0f827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8351ol_f                        0x00005642d6af959f <unavailable> + 5535

    5    libc.so.6                          0x00002acde1478460 __libc_start_main +
    245

    6    tmp8351ol_f                        0x00005642d6af9129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num\
    \ < min {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbejvyxaw/tmpbejvyxaw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfab17ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaae71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaae71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaae707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbejvyxaw                        0x00005613415ae59f <unavailable> + 5535

    5    libc.so.6                          0x00002abfab366460 __libc_start_main +
    245

    6    tmpbejvyxaw                        0x00005613415ae129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuabzcm88/tmpuabzcm88.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac472cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4729b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4729b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4729b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuabzcm88                        0x000056477110e4da <unavailable> + 5338

    5    libc.so.6                          0x00002ac472eae460 __libc_start_main +
    245

    6    tmpuabzcm88                        0x000056477110e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = Int.max\n    for num in nums {\n        min =\
    \ min(num, min)\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp_91_60qh.swift:12:15: error: cannot call value of non-function\
    \ type 'Int'\n        min = min(num, min)\n              ^\n"
  stdout: ''
  timestamp: 1660014119
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums\
    \ {\n        sum += num\n        if sum < minSum {\n            minSum = sum\n\
    \        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuajmg7mn/tmpuajmg7mn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb5914fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb58e46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb58e46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb58e457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuajmg7mn                        0x000055c8463174da <unavailable> + 5338

    5    libc.so.6                          0x00002acb5933b460 __libc_start_main +
    245

    6    tmpuajmg7mn                        0x000055c846317129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuabzcm88/tmpuabzcm88.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac472cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4729b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4729b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4729b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuabzcm88                        0x000056477110e4da <unavailable> + 5338

    5    libc.so.6                          0x00002ac472eae460 __libc_start_main +
    245

    6    tmpuabzcm88                        0x000056477110e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num\
    \ < min {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbejvyxaw/tmpbejvyxaw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfab17ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaae71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaae71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaae707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbejvyxaw                        0x00005613415ae59f <unavailable> + 5535

    5    libc.so.6                          0x00002abfab366460 __libc_start_main +
    245

    6    tmpbejvyxaw                        0x00005613415ae129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuabzcm88/tmpuabzcm88.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac472cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4729b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4729b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4729b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuabzcm88                        0x000056477110e4da <unavailable> + 5338

    5    libc.so.6                          0x00002ac472eae460 __libc_start_main +
    245

    6    tmpuabzcm88                        0x000056477110e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuabzcm88/tmpuabzcm88.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac472cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4729b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4729b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4729b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuabzcm88                        0x000056477110e4da <unavailable> + 5338

    5    libc.so.6                          0x00002ac472eae460 __libc_start_main +
    245

    6    tmpuabzcm88                        0x000056477110e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: 1
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = Int.max\n    for i in nums.indices {\n      \
    \  if nums[i] != 0 {\n            min = min(nums[i], min)\n        }\n    }\n\
    \    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpz36jj5hp.swift:13:19: error: cannot call value of non-function\
    \ type 'Int'\n            min = min(nums[i], min)\n                  ^\n"
  stdout: ''
  timestamp: 1660014119
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuabzcm88/tmpuabzcm88.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac472cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4729b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4729b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4729b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuabzcm88                        0x000056477110e4da <unavailable> + 5338

    5    libc.so.6                          0x00002ac472eae460 __libc_start_main +
    245

    6    tmpuabzcm88                        0x000056477110e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums\
    \ {\n        sum += num\n        if sum < minSum {\n            minSum = sum\n\
    \        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuajmg7mn/tmpuajmg7mn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb5914fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb58e46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb58e46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb58e457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuajmg7mn                        0x000055c8463174da <unavailable> + 5338

    5    libc.so.6                          0x00002acb5933b460 __libc_start_main +
    245

    6    tmpuajmg7mn                        0x000055c846317129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuabzcm88/tmpuabzcm88.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac472cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4729b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4729b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4729b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuabzcm88                        0x000056477110e4da <unavailable> + 5338

    5    libc.so.6                          0x00002ac472eae460 __libc_start_main +
    245

    6    tmpuabzcm88                        0x000056477110e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuabzcm88/tmpuabzcm88.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac472cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4729b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4729b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4729b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuabzcm88                        0x000056477110e4da <unavailable> + 5338

    5    libc.so.6                          0x00002ac472eae460 __libc_start_main +
    245

    6    tmpuabzcm88                        0x000056477110e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums\
    \ {\n        sum += num\n        if sum < minSum {\n            minSum = sum\n\
    \        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuajmg7mn/tmpuajmg7mn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb5914fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb58e46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb58e46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb58e457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuajmg7mn                        0x000055c8463174da <unavailable> + 5338

    5    libc.so.6                          0x00002acb5933b460 __libc_start_main +
    245

    6    tmpuajmg7mn                        0x000055c846317129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num\
    \ < min {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbejvyxaw/tmpbejvyxaw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfab17ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaae71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaae71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaae707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbejvyxaw                        0x00005613415ae59f <unavailable> + 5535

    5    libc.so.6                          0x00002abfab366460 __libc_start_main +
    245

    6    tmpbejvyxaw                        0x00005613415ae129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuabzcm88/tmpuabzcm88.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac472cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4729b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4729b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4729b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuabzcm88                        0x000056477110e4da <unavailable> + 5338

    5    libc.so.6                          0x00002ac472eae460 __libc_start_main +
    245

    6    tmpuabzcm88                        0x000056477110e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num\
    \ < min {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbejvyxaw/tmpbejvyxaw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfab17ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaae71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaae71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaae707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbejvyxaw                        0x00005613415ae59f <unavailable> + 5535

    5    libc.so.6                          0x00002abfab366460 __libc_start_main +
    245

    6    tmpbejvyxaw                        0x00005613415ae129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums\
    \ {\n        sum += num\n        if sum < minSum {\n            minSum = sum\n\
    \        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuajmg7mn/tmpuajmg7mn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb5914fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb58e46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb58e46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb58e457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuajmg7mn                        0x000055c8463174da <unavailable> + 5338

    5    libc.so.6                          0x00002acb5933b460 __libc_start_main +
    245

    6    tmpuajmg7mn                        0x000055c846317129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num\
    \ < min {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbejvyxaw/tmpbejvyxaw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfab17ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaae71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaae71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaae707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbejvyxaw                        0x00005613415ae59f <unavailable> + 5535

    5    libc.so.6                          0x00002abfab366460 __libc_start_main +
    245

    6    tmpbejvyxaw                        0x00005613415ae129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        if\
    \ num < 0 {\n            return minSum\n        }\n        minSum = minSum + num\n\
    \    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp_si65xv_/tmp_si65xv_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abdc3528c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abdc321fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abdc321f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abdc321e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_si65xv_                        0x000055bc44ee44da <unavailable> + 5338

    5    libc.so.6                          0x00002abdc3714460 __libc_start_main +
    245

    6    tmp_si65xv_                        0x000055bc44ee4129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num\
    \ < min {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbejvyxaw/tmpbejvyxaw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfab17ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaae71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaae71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaae707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbejvyxaw                        0x00005613415ae59f <unavailable> + 5535

    5    libc.so.6                          0x00002abfab366460 __libc_start_main +
    245

    6    tmpbejvyxaw                        0x00005613415ae129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums\
    \ {\n        sum += num\n        if sum < minSum {\n            minSum = sum\n\
    \        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuajmg7mn/tmpuajmg7mn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb5914fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb58e46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb58e46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb58e457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuajmg7mn                        0x000055c8463174da <unavailable> + 5338

    5    libc.so.6                          0x00002acb5933b460 __libc_start_main +
    245

    6    tmpuajmg7mn                        0x000055c846317129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num\
    \ < min {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbejvyxaw/tmpbejvyxaw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfab17ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaae71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaae71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaae707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbejvyxaw                        0x00005613415ae59f <unavailable> + 5535

    5    libc.so.6                          0x00002abfab366460 __libc_start_main +
    245

    6    tmpbejvyxaw                        0x00005613415ae129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for n in nums {\n        sum += n\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpw30ubld9/tmpw30ubld9.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77e5418c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77e510fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77e510f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77e510e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw30ubld9                        0x00005566ce18a48a <unavailable> + 5258

    5    libc.so.6                          0x00002b77e5604460 __libc_start_main +
    245

    6    tmpw30ubld9                        0x00005566ce18a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums\
    \ {\n        sum += num\n        if sum < minSum {\n            minSum = sum\n\
    \        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuajmg7mn/tmpuajmg7mn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb5914fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb58e46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb58e46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb58e457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuajmg7mn                        0x000055c8463174da <unavailable> + 5338

    5    libc.so.6                          0x00002acb5933b460 __libc_start_main +
    245

    6    tmpuajmg7mn                        0x000055c846317129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums\
    \ {\n        sum += num\n        if sum < minSum {\n            minSum = sum\n\
    \        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuajmg7mn/tmpuajmg7mn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb5914fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb58e46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb58e46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb58e457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuajmg7mn                        0x000055c8463174da <unavailable> + 5338

    5    libc.so.6                          0x00002acb5933b460 __libc_start_main +
    245

    6    tmpuajmg7mn                        0x000055c846317129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num\
    \ < min {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbejvyxaw/tmpbejvyxaw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfab17ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaae71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaae71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaae707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbejvyxaw                        0x00005613415ae59f <unavailable> + 5535

    5    libc.so.6                          0x00002abfab366460 __libc_start_main +
    245

    6    tmpbejvyxaw                        0x00005613415ae129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for i in 1..<nums.count {\n \
    \       minSum = minSum + nums[i]\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpf81xijee/tmpf81xijee.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b7615bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b75e52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b75e52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b75e517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf81xijee                        0x000055865546255a <unavailable> + 5466

    5    libc.so.6                          0x00002b4b76347460 __libc_start_main +
    245

    6    tmpf81xijee                        0x00005586554621a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuabzcm88/tmpuabzcm88.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac472cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4729b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4729b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4729b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuabzcm88                        0x000056477110e4da <unavailable> + 5338

    5    libc.so.6                          0x00002ac472eae460 __libc_start_main +
    245

    6    tmpuabzcm88                        0x000056477110e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        if\
    \ num < minSum {\n            minSum = num\n        }\n    }\n    return minSum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp8351ol_f/tmp8351ol_f.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acde128cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acde0f83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acde0f83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acde0f827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8351ol_f                        0x00005642d6af959f <unavailable> + 5535

    5    libc.so.6                          0x00002acde1478460 __libc_start_main +
    245

    6    tmp8351ol_f                        0x00005642d6af9129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for n in nums {\n        sum += n\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpw30ubld9/tmpw30ubld9.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77e5418c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77e510fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77e510f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77e510e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw30ubld9                        0x00005566ce18a48a <unavailable> + 5258

    5    libc.so.6                          0x00002b77e5604460 __libc_start_main +
    245

    6    tmpw30ubld9                        0x00005566ce18a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num\
    \ < min {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbejvyxaw/tmpbejvyxaw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfab17ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaae71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaae71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaae707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbejvyxaw                        0x00005613415ae59f <unavailable> + 5535

    5    libc.so.6                          0x00002abfab366460 __libc_start_main +
    245

    6    tmpbejvyxaw                        0x00005613415ae129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for n in nums {\n        if n <\
    \ min {\n            min = n\n        }\n    }\n    return min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpz5nozp7f/tmpz5nozp7f.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e73d2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e73a26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e73a26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e73a257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz5nozp7f                        0x000055df978c259f <unavailable> + 5535

    5    libc.so.6                          0x00002b7e73f1b460 __libc_start_main +
    245

    6    tmpz5nozp7f                        0x000055df978c2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuabzcm88/tmpuabzcm88.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac472cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4729b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4729b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4729b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuabzcm88                        0x000056477110e4da <unavailable> + 5338

    5    libc.so.6                          0x00002ac472eae460 __libc_start_main +
    245

    6    tmpuabzcm88                        0x000056477110e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num\
    \ < min {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbejvyxaw/tmpbejvyxaw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfab17ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaae71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaae71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaae707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbejvyxaw                        0x00005613415ae59f <unavailable> + 5535

    5    libc.so.6                          0x00002abfab366460 __libc_start_main +
    245

    6    tmpbejvyxaw                        0x00005613415ae129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuabzcm88/tmpuabzcm88.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac472cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4729b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4729b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4729b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuabzcm88                        0x000056477110e4da <unavailable> + 5338

    5    libc.so.6                          0x00002ac472eae460 __libc_start_main +
    245

    6    tmpuabzcm88                        0x000056477110e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuabzcm88/tmpuabzcm88.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac472cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4729b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4729b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4729b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuabzcm88                        0x000056477110e4da <unavailable> + 5338

    5    libc.so.6                          0x00002ac472eae460 __libc_start_main +
    245

    6    tmpuabzcm88                        0x000056477110e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuabzcm88/tmpuabzcm88.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac472cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4729b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4729b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4729b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuabzcm88                        0x000056477110e4da <unavailable> + 5338

    5    libc.so.6                          0x00002ac472eae460 __libc_start_main +
    245

    6    tmpuabzcm88                        0x000056477110e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for i in 1..<nums.count {\n    \
    \    if nums[i-1] > nums[i] {\n            min = nums[i-1]\n        }\n    }\n\
    \    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmps290b_y_/tmps290b_y_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0d555ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0d5255b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0d5255988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0d52547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps290b_y_                        0x000055aa0d75455a <unavailable> + 5466

    5    libc.so.6                          0x00002ac0d574a460 __libc_start_main +
    245

    6    tmps290b_y_                        0x000055aa0d7541a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for i in 1..<nums.count {\n \
    \       minSum = minSum + nums[i]\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpf81xijee/tmpf81xijee.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b7615bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b75e52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b75e52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b75e517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf81xijee                        0x000055865546255a <unavailable> + 5466

    5    libc.so.6                          0x00002b4b76347460 __libc_start_main +
    245

    6    tmpf81xijee                        0x00005586554621a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num\
    \ < min {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbejvyxaw/tmpbejvyxaw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfab17ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaae71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaae71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaae707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbejvyxaw                        0x00005613415ae59f <unavailable> + 5535

    5    libc.so.6                          0x00002abfab366460 __libc_start_main +
    245

    6    tmpbejvyxaw                        0x00005613415ae129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for n in nums {\n        if n <\
    \ min {\n            min = n\n        }\n    }\n    return min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpz5nozp7f/tmpz5nozp7f.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e73d2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e73a26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e73a26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e73a257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz5nozp7f                        0x000055df978c259f <unavailable> + 5535

    5    libc.so.6                          0x00002b7e73f1b460 __libc_start_main +
    245

    6    tmpz5nozp7f                        0x000055df978c2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num\
    \ < min {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbejvyxaw/tmpbejvyxaw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfab17ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaae71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaae71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaae707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbejvyxaw                        0x00005613415ae59f <unavailable> + 5535

    5    libc.so.6                          0x00002abfab366460 __libc_start_main +
    245

    6    tmpbejvyxaw                        0x00005613415ae129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums\
    \ {\n        sum += num\n        if sum < minSum {\n            minSum = sum\n\
    \        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuajmg7mn/tmpuajmg7mn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb5914fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb58e46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb58e46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb58e457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuajmg7mn                        0x000055c8463174da <unavailable> + 5338

    5    libc.so.6                          0x00002acb5933b460 __libc_start_main +
    245

    6    tmpuajmg7mn                        0x000055c846317129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums\
    \ {\n        sum += num\n        if sum < minSum {\n            minSum = sum\n\
    \        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuajmg7mn/tmpuajmg7mn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb5914fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb58e46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb58e46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb58e457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuajmg7mn                        0x000055c8463174da <unavailable> + 5338

    5    libc.so.6                          0x00002acb5933b460 __libc_start_main +
    245

    6    tmpuajmg7mn                        0x000055c846317129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums\
    \ {\n        sum += num\n        if sum < minSum {\n            minSum = sum\n\
    \        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuajmg7mn/tmpuajmg7mn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb5914fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb58e46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb58e46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb58e457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuajmg7mn                        0x000055c8463174da <unavailable> + 5338

    5    libc.so.6                          0x00002acb5933b460 __libc_start_main +
    245

    6    tmpuajmg7mn                        0x000055c846317129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums\
    \ {\n        sum += num\n        if sum < minSum {\n            minSum = sum\n\
    \        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuajmg7mn/tmpuajmg7mn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb5914fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb58e46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb58e46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb58e457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuajmg7mn                        0x000055c8463174da <unavailable> + 5338

    5    libc.so.6                          0x00002acb5933b460 __libc_start_main +
    245

    6    tmpuajmg7mn                        0x000055c846317129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuabzcm88/tmpuabzcm88.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac472cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4729b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4729b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4729b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuabzcm88                        0x000056477110e4da <unavailable> + 5338

    5    libc.so.6                          0x00002ac472eae460 __libc_start_main +
    245

    6    tmpuabzcm88                        0x000056477110e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpuabzcm88/tmpuabzcm88.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac472cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4729b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4729b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4729b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuabzcm88                        0x000056477110e4da <unavailable> + 5338

    5    libc.so.6                          0x00002ac472eae460 __libc_start_main +
    245

    6    tmpuabzcm88                        0x000056477110e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num\
    \ < min {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbejvyxaw/tmpbejvyxaw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfab17ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaae71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaae71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaae707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbejvyxaw                        0x00005613415ae59f <unavailable> + 5535

    5    libc.so.6                          0x00002abfab366460 __libc_start_main +
    245

    6    tmpbejvyxaw                        0x00005613415ae129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for n in nums {\n        if n <\
    \ min {\n            min = n\n        }\n    }\n    return min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpz5nozp7f/tmpz5nozp7f.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e73d2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e73a26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e73a26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e73a257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz5nozp7f                        0x000055df978c259f <unavailable> + 5535

    5    libc.so.6                          0x00002b7e73f1b460 __libc_start_main +
    245

    6    tmpz5nozp7f                        0x000055df978c2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num\
    \ < min {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbejvyxaw/tmpbejvyxaw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfab17ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaae71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaae71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaae707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbejvyxaw                        0x00005613415ae59f <unavailable> + 5535

    5    libc.so.6                          0x00002abfab366460 __libc_start_main +
    245

    6    tmpbejvyxaw                        0x00005613415ae129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums\
    \ {\n        if num < minSum {\n            minSum = num\n        }\n        sum\
    \ += num\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpm1zok3i5/tmpm1zok3i5.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba60349cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba603193b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba603193988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6031927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm1zok3i5                        0x0000557bb0ffd4da <unavailable> + 5338

    5    libc.so.6                          0x00002ba603688460 __libc_start_main +
    245

    6    tmpm1zok3i5                        0x0000557bb0ffd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for n in nums {\n        if n <\
    \ min {\n            min = n\n        }\n    }\n    return min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpz5nozp7f/tmpz5nozp7f.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e73d2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e73a26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e73a26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e73a257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz5nozp7f                        0x000055df978c259f <unavailable> + 5535

    5    libc.so.6                          0x00002b7e73f1b460 __libc_start_main +
    245

    6    tmpz5nozp7f                        0x000055df978c2129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for n in nums {\n        sum += n\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpw30ubld9/tmpw30ubld9.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77e5418c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77e510fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77e510f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77e510e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw30ubld9                        0x00005566ce18a48a <unavailable> + 5258

    5    libc.so.6                          0x00002b77e5604460 __libc_start_main +
    245

    6    tmpw30ubld9                        0x00005566ce18a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum\
    \ = minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpgxs7_gah/tmpgxs7_gah.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadd875ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadd8455b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadd8455988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadd84547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxs7_gah                        0x00005610989d84da <unavailable> + 5338

    5    libc.so.6                          0x00002aadd894a460 __libc_start_main +
    245

    6    tmpgxs7_gah                        0x00005610989d8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpwcab2x6q/tmpwcab2x6q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9a0913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9a060ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9a060a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9a06097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcab2x6q                        0x0000562b7848148a <unavailable> + 5258

    5    libc.so.6                          0x00002ad9a0aff460 __libc_start_main +
    245

    6    tmpwcab2x6q                        0x0000562b784810d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014120
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4,\
    \ 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums:\
    \ [Int]) -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num\
    \ < min {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpbejvyxaw/tmpbejvyxaw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfab17ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaae71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaae71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaae707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbejvyxaw                        0x00005613415ae59f <unavailable> + 5535

    5    libc.so.6                          0x00002abfab366460 __libc_start_main +
    245

    6    tmpbejvyxaw                        0x00005613415ae129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014120
