language: swift
name: HumanEval_3_below_zero
results:
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    guard operations.count > 0 else\
    \ {\n        return true\n    }\n    var balance = operations[0]\n    for operation\
    \ in operations {\n        if balance < 0 {\n            return true\n       \
    \ }\n        balance -= operation\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpyt67b7b8/tmpyt67b7b8.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b569c405c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b569c0fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b569c0fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b569c0fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyt67b7b8                        0x000055be356124f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b569c5f1460 __libc_start_main +
    245

    6    tmpyt67b7b8                        0x000055be35612189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    guard operations.count > 0 else\
    \ {\n        return true\n    }\n    var balance = operations[0]\n    for operation\
    \ in operations.dropFirst() {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= operation\n    }\n    return balance < 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'tmpwr225waa/tmpwr225waa.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fc16fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fc13f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fc13f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fc13f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwr225waa                        0x0000561313af55e4 <unavailable> + 5604

    5    libc.so.6                          0x00002b5fc18ea460 __libc_start_main +
    245

    6    tmpwr225waa                        0x0000561313af5279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 1
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0)\n\
    \    for operation in operations {\n        balance -= operation\n        if balance\
    \ < 0 {\n            return true\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: SyntaxError
  stderr: "/tmp/tmpni5q93t2.swift:10:38: error: missing argument for parameter #2\
    \ in call\n    var balance = operations.reduce(0)\n                          \
    \           ^\n                                     , <#(Int, Int) throws -> Int#>\n\
    Swift.Sequence:2:28: note: 'reduce' declared here\n    @inlinable public func\
    \ reduce<Result>(_ initialResult: Result, _ nextPartialResult: (_ partialResult:\
    \ Result, Self.Element) throws -> Result) rethrows -> Result\n               \
    \            ^\n"
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    guard operations.count > 0 else\
    \ {\n        return true\n    }\n\n    var balance = operations[0]\n    for operation\
    \ in operations.dropFirst() {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= operation\n    }\n\n    return balance < 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'tmpedmkvk53/tmpedmkvk53.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b358295ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3582651b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3582651988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35826507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpedmkvk53                        0x000055ee6830b5e4 <unavailable> + 5604

    5    libc.so.6                          0x00002b3582b46460 __libc_start_main +
    245

    6    tmpedmkvk53                        0x000055ee6830b279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0)\
    \ { $0 + $1 }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpeg_ldew4/tmpeg_ldew4.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae445177c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae444e6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae444e6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae444e6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeg_ldew4                        0x000055b7a81914f8 <unavailable> + 5368

    5    libc.so.6                          0x00002ae445363460 __libc_start_main +
    245

    6    tmpeg_ldew4                        0x000055b7a8190fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 1
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3es4hja7.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    guard operations.count > 0 else\
    \ { return false }\n    var balance = operations[0]\n    for operation in operations.dropFirst()\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmprsoib35e/tmprsoib35e.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0131b85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b013187cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b013187c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b013187b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprsoib35e                        0x0000556ed73436bb <unavailable> + 5819

    5    libc.so.6                          0x00002b0131d71460 __libc_start_main +
    245

    6    tmprsoib35e                        0x0000556ed7343279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014202
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        balance -= operation\n        if balance\
    \ < 0 {\n            return true\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8456bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8453b6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac8453b6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac8453b613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac8453b5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac8451b5e83 <unavailable> + 188035

    6    tmp_5qcxkqc                        0x0000563f5a6369c2 <unavailable> + 6594

    7    tmp_5qcxkqc                        0x0000563f5a63641d <unavailable> + 5149

    8    libc.so.6                          0x00002ac8458ab460 __libc_start_main +
    245

    9    tmp_5qcxkqc                        0x0000563f5a636129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0)\
    \ { $0 + $1 }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpeg_ldew4/tmpeg_ldew4.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae445177c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae444e6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae444e6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae444e6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeg_ldew4                        0x000055b7a81914f8 <unavailable> + 5368

    5    libc.so.6                          0x00002ae445363460 __libc_start_main +
    245

    6    tmpeg_ldew4                        0x000055b7a8190fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    if operations.isEmpty {\n  \
    \      return true\n    }\n    var balance = operations[0]\n    for op in operations.dropFirst()\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpeyy7zy_g/tmpeyy7zy_g.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5dd067c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5dcd5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5dcd5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5dcd5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeyy7zy_g                        0x000055e5340045e4 <unavailable> + 5604

    5    libc.so.6                          0x00002ab5dd253460 __libc_start_main +
    245

    6    tmpeyy7zy_g                        0x000055e534004279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65bfcbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65bf9b2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65bf9b2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65bf9b213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65bf9b1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b65bf7b1e83 <unavailable> + 188035

    6    tmpxivnza2l                        0x0000559a23f459c2 <unavailable> + 6594

    7    tmpxivnza2l                        0x0000559a23f4541d <unavailable> + 5149

    8    libc.so.6                          0x00002b65bfea7460 __libc_start_main +
    245

    9    tmpxivnza2l                        0x0000559a23f45129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65bfcbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65bf9b2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65bf9b2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65bf9b213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65bf9b1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b65bf7b1e83 <unavailable> + 188035

    6    tmpxivnza2l                        0x0000559a23f459c2 <unavailable> + 6594

    7    tmpxivnza2l                        0x0000559a23f4541d <unavailable> + 5149

    8    libc.so.6                          0x00002b65bfea7460 __libc_start_main +
    245

    9    tmpxivnza2l                        0x0000559a23f45129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    guard operations.count > 0 else\
    \ {\n        return false\n    }\n\n    var balance = 0\n    for operation in\
    \ operations {\n        balance += operation\n    }\n\n    return balance < 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'tmp98nci1mg/tmp98nci1mg.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19a06d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19a03c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19a03c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19a03c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp98nci1mg                        0x000056099d994638 <unavailable> + 5688

    5    libc.so.6                          0x00002b19a08be460 __libc_start_main +
    245

    6    tmp98nci1mg                        0x000056099d994129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= op\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b676f73cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b676f433561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b676f433286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b676f43313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b676f432bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b676f232e83 <unavailable> + 188035

    6    tmpvyaiyjtb                        0x0000561fd25a99c2 <unavailable> + 6594

    7    tmpvyaiyjtb                        0x0000561fd25a941d <unavailable> + 5149

    8    libc.so.6                          0x00002b676f928460 __libc_start_main +
    245

    9    tmpvyaiyjtb                        0x0000561fd25a9129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65bfcbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65bf9b2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65bf9b2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65bf9b213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65bf9b1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b65bf7b1e83 <unavailable> + 188035

    6    tmpxivnza2l                        0x0000559a23f459c2 <unavailable> + 6594

    7    tmpxivnza2l                        0x0000559a23f4541d <unavailable> + 5149

    8    libc.so.6                          0x00002b65bfea7460 __libc_start_main +
    245

    9    tmpxivnza2l                        0x0000559a23f45129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65bfcbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65bf9b2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65bf9b2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65bf9b213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65bf9b1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b65bf7b1e83 <unavailable> + 188035

    6    tmpxivnza2l                        0x0000559a23f459c2 <unavailable> + 6594

    7    tmpxivnza2l                        0x0000559a23f4541d <unavailable> + 5149

    8    libc.so.6                          0x00002b65bfea7460 __libc_start_main +
    245

    9    tmpxivnza2l                        0x0000559a23f45129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0)\
    \ { $0 + $1 }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpeg_ldew4/tmpeg_ldew4.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae445177c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae444e6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae444e6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae444e6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeg_ldew4                        0x000055b7a81914f8 <unavailable> + 5368

    5    libc.so.6                          0x00002ae445363460 __libc_start_main +
    245

    6    tmpeg_ldew4                        0x000055b7a8190fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        balance += operation\n        if balance\
    \ < 0 {\n            return true\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad83c749c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad83c440561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad83c440286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad83c44013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad83c43fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad83c23fe83 <unavailable> + 188035

    6    tmpqxphrahp                        0x000055d452df99c2 <unavailable> + 6594

    7    tmpqxphrahp                        0x000055d452df941d <unavailable> + 5149

    8    libc.so.6                          0x00002ad83c935460 __libc_start_main +
    245

    9    tmpqxphrahp                        0x000055d452df9129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65bfcbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65bf9b2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65bf9b2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65bf9b213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65bf9b1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b65bf7b1e83 <unavailable> + 188035

    6    tmpxivnza2l                        0x0000559a23f459c2 <unavailable> + 6594

    7    tmpxivnza2l                        0x0000559a23f4541d <unavailable> + 5149

    8    libc.so.6                          0x00002b65bfea7460 __libc_start_main +
    245

    9    tmpxivnza2l                        0x0000559a23f45129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65bfcbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65bf9b2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65bf9b2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65bf9b213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65bf9b1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b65bf7b1e83 <unavailable> + 188035

    6    tmpxivnza2l                        0x0000559a23f459c2 <unavailable> + 6594

    7    tmpxivnza2l                        0x0000559a23f4541d <unavailable> + 5149

    8    libc.so.6                          0x00002b65bfea7460 __libc_start_main +
    245

    9    tmpxivnza2l                        0x0000559a23f45129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0)\
    \ { $0 + $1 }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpeg_ldew4/tmpeg_ldew4.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae445177c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae444e6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae444e6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae444e6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeg_ldew4                        0x000055b7a81914f8 <unavailable> + 5368

    5    libc.so.6                          0x00002ae445363460 __libc_start_main +
    245

    6    tmpeg_ldew4                        0x000055b7a8190fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n    }\n    return balance < 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'tmpke2_rt03/tmpke2_rt03.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b237ba01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b237b6f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b237b6f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b237b6f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpke2_rt03                        0x000055a7ecce75e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b237bbed460 __libc_start_main +
    245

    6    tmpke2_rt03                        0x000055a7ecce70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 1
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3es4hja7.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65bfcbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65bf9b2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65bf9b2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65bf9b213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65bf9b1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b65bf7b1e83 <unavailable> + 188035

    6    tmpxivnza2l                        0x0000559a23f459c2 <unavailable> + 6594

    7    tmpxivnza2l                        0x0000559a23f4541d <unavailable> + 5149

    8    libc.so.6                          0x00002b65bfea7460 __libc_start_main +
    245

    9    tmpxivnza2l                        0x0000559a23f45129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 1
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3es4hja7.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    guard operations.count > 0 else\
    \ {\n        return false\n    }\n    let balance = operations.reduce(0) { $0\
    \ + $1 }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpt556qmx3/tmpt556qmx3.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91fac85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91fa97cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91fa97c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91fa97b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt556qmx3                        0x00005650e52d6548 <unavailable> + 5448

    5    libc.so.6                          0x00002b91fae71460 __libc_start_main +
    245

    6    tmpt556qmx3                        0x00005650e52d6039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n    }\n    return balance < 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'tmpke2_rt03/tmpke2_rt03.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b237ba01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b237b6f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b237b6f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b237b6f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpke2_rt03                        0x000055a7ecce75e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b237bbed460 __libc_start_main +
    245

    6    tmpke2_rt03                        0x000055a7ecce70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    if operations.isEmpty {\n  \
    \      return true\n    }\n    let firstOperation = operations[0]\n    return\
    \ firstOperation < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpg_igprga/tmpg_igprga.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f22431c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f22128b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f22128988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f221277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_igprga                        0x00005642c90a83c4 <unavailable> + 5060

    5    libc.so.6                          0x00002b4f2261d460 __libc_start_main +
    245

    6    tmpg_igprga                        0x00005642c90a8059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0)\
    \ { $0 + $1 }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpeg_ldew4/tmpeg_ldew4.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae445177c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae444e6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae444e6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae444e6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeg_ldew4                        0x000055b7a81914f8 <unavailable> + 5368

    5    libc.so.6                          0x00002ae445363460 __libc_start_main +
    245

    6    tmpeg_ldew4                        0x000055b7a8190fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations.dropFirst() {\n        if balance < 0 {\n          \
    \  return true\n        }\n        balance -= op\n    }\n    return balance <\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(below_zero(operations: [] as\
    \ [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\n\
    assert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8952345c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b895203c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b895203c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b895203c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b895203bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8951e3be83 <unavailable> + 188035

    6    tmp7buiz5b5                        0x0000564ca9f7cacb <unavailable> + 6859

    7    tmp7buiz5b5                        0x0000564ca9f7c51d <unavailable> + 5405

    8    libc.so.6                          0x00002b8952531460 __libc_start_main +
    245

    9    tmp7buiz5b5                        0x0000564ca9f7c229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= op\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b676f73cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b676f433561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b676f433286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b676f43313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b676f432bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b676f232e83 <unavailable> + 188035

    6    tmpvyaiyjtb                        0x0000561fd25a99c2 <unavailable> + 6594

    7    tmpvyaiyjtb                        0x0000561fd25a941d <unavailable> + 5149

    8    libc.so.6                          0x00002b676f928460 __libc_start_main +
    245

    9    tmpvyaiyjtb                        0x0000561fd25a9129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 1
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3es4hja7.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    guard operations.count > 0 else\
    \ {\n        return true\n    }\n    var balance = operations[0]\n    for operation\
    \ in operations.dropFirst() {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= operation\n    }\n    return balance < 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'tmpwr225waa/tmpwr225waa.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fc16fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fc13f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fc13f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fc13f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwr225waa                        0x0000561313af55e4 <unavailable> + 5604

    5    libc.so.6                          0x00002b5fc18ea460 __libc_start_main +
    245

    6    tmpwr225waa                        0x0000561313af5279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations.dropFirst() {\n        if balance < 0 {\n   \
    \         return true\n        }\n        balance -= operation\n    }\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af6545e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6542d9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af6542d9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af6542d913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af6542d8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af6540d8e83 <unavailable> + 188035

    6    tmpepegvar_                        0x000055df73ee6acb <unavailable> + 6859

    7    tmpepegvar_                        0x000055df73ee651d <unavailable> + 5405

    8    libc.so.6                          0x00002af6547ce460 __libc_start_main +
    245

    9    tmpepegvar_                        0x000055df73ee6229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65bfcbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65bf9b2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65bf9b2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65bf9b213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65bf9b1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b65bf7b1e83 <unavailable> + 188035

    6    tmpxivnza2l                        0x0000559a23f459c2 <unavailable> + 6594

    7    tmpxivnza2l                        0x0000559a23f4541d <unavailable> + 5149

    8    libc.so.6                          0x00002b65bfea7460 __libc_start_main +
    245

    9    tmpxivnza2l                        0x0000559a23f45129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65bfcbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65bf9b2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65bf9b2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65bf9b213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65bf9b1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b65bf7b1e83 <unavailable> + 188035

    6    tmpxivnza2l                        0x0000559a23f459c2 <unavailable> + 6594

    7    tmpxivnza2l                        0x0000559a23f4541d <unavailable> + 5149

    8    libc.so.6                          0x00002b65bfea7460 __libc_start_main +
    245

    9    tmpxivnza2l                        0x0000559a23f45129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65bfcbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65bf9b2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65bf9b2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65bf9b213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65bf9b1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b65bf7b1e83 <unavailable> + 188035

    6    tmpxivnza2l                        0x0000559a23f459c2 <unavailable> + 6594

    7    tmpxivnza2l                        0x0000559a23f4541d <unavailable> + 5149

    8    libc.so.6                          0x00002b65bfea7460 __libc_start_main +
    245

    9    tmpxivnza2l                        0x0000559a23f45129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 1
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    if operations.isEmpty {\n  \
    \      return true\n    }\n    let balance = operations[0]\n    for operation\
    \ in operations.dropFirst() {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= operation\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: SyntaxError
  stderr: "/tmp/tmpwpj21vcy.swift:18:17: error: left side of mutating operator isn't\
    \ mutable: 'balance' is a 'let' constant\n        balance -= operation\n     \
    \   ~~~~~~~ ^\n/tmp/tmpwpj21vcy.swift:13:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let balance = operations[0]\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    guard operations.count > 0 else\
    \ {\n        return true\n    }\n    var balance = operations[0]\n    for operation\
    \ in operations.dropFirst() {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= operation\n    }\n    return balance < 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'tmpwr225waa/tmpwr225waa.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fc16fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fc13f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fc13f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fc13f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwr225waa                        0x0000561313af55e4 <unavailable> + 5604

    5    libc.so.6                          0x00002b5fc18ea460 __libc_start_main +
    245

    6    tmpwr225waa                        0x0000561313af5279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n    }\n    return balance < 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'tmpke2_rt03/tmpke2_rt03.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b237ba01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b237b6f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b237b6f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b237b6f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpke2_rt03                        0x000055a7ecce75e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b237bbed460 __libc_start_main +
    245

    6    tmpke2_rt03                        0x000055a7ecce70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    if operations.isEmpty {\n  \
    \      return true\n    }\n    var balance = operations[0]\n    for op in operations.dropFirst()\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpeyy7zy_g/tmpeyy7zy_g.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5dd067c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5dcd5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5dcd5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5dcd5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeyy7zy_g                        0x000055e5340045e4 <unavailable> + 5604

    5    libc.so.6                          0x00002ab5dd253460 __libc_start_main +
    245

    6    tmpeyy7zy_g                        0x000055e534004279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= op\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b676f73cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b676f433561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b676f433286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b676f43313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b676f432bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b676f232e83 <unavailable> + 188035

    6    tmpvyaiyjtb                        0x0000561fd25a99c2 <unavailable> + 6594

    7    tmpvyaiyjtb                        0x0000561fd25a941d <unavailable> + 5149

    8    libc.so.6                          0x00002b676f928460 __libc_start_main +
    245

    9    tmpvyaiyjtb                        0x0000561fd25a9129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0)\
    \ { $0 + $1 }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpeg_ldew4/tmpeg_ldew4.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae445177c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae444e6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae444e6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae444e6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeg_ldew4                        0x000055b7a81914f8 <unavailable> + 5368

    5    libc.so.6                          0x00002ae445363460 __libc_start_main +
    245

    6    tmpeg_ldew4                        0x000055b7a8190fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0)\
    \ { $0 + $1 }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpeg_ldew4/tmpeg_ldew4.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae445177c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae444e6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae444e6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae444e6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeg_ldew4                        0x000055b7a81914f8 <unavailable> + 5368

    5    libc.so.6                          0x00002ae445363460 __libc_start_main +
    245

    6    tmpeg_ldew4                        0x000055b7a8190fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= op\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b676f73cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b676f433561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b676f433286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b676f43313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b676f432bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b676f232e83 <unavailable> + 188035

    6    tmpvyaiyjtb                        0x0000561fd25a99c2 <unavailable> + 6594

    7    tmpvyaiyjtb                        0x0000561fd25a941d <unavailable> + 5149

    8    libc.so.6                          0x00002b676f928460 __libc_start_main +
    245

    9    tmpvyaiyjtb                        0x0000561fd25a9129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n    }\n    return balance < 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'tmpke2_rt03/tmpke2_rt03.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b237ba01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b237b6f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b237b6f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b237b6f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpke2_rt03                        0x000055a7ecce75e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b237bbed460 __libc_start_main +
    245

    6    tmpke2_rt03                        0x000055a7ecce70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 1
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3es4hja7.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 1
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3es4hja7.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0)\
    \ { $0 + $1 }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpeg_ldew4/tmpeg_ldew4.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae445177c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae444e6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae444e6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae444e6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeg_ldew4                        0x000055b7a81914f8 <unavailable> + 5368

    5    libc.so.6                          0x00002ae445363460 __libc_start_main +
    245

    6    tmpeg_ldew4                        0x000055b7a8190fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= op\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b676f73cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b676f433561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b676f433286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b676f43313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b676f432bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b676f232e83 <unavailable> + 188035

    6    tmpvyaiyjtb                        0x0000561fd25a99c2 <unavailable> + 6594

    7    tmpvyaiyjtb                        0x0000561fd25a941d <unavailable> + 5149

    8    libc.so.6                          0x00002b676f928460 __libc_start_main +
    245

    9    tmpvyaiyjtb                        0x0000561fd25a9129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0)\
    \ { $0 + $1 }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpeg_ldew4/tmpeg_ldew4.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae445177c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae444e6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae444e6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae444e6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeg_ldew4                        0x000055b7a81914f8 <unavailable> + 5368

    5    libc.so.6                          0x00002ae445363460 __libc_start_main +
    245

    6    tmpeg_ldew4                        0x000055b7a8190fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations.dropFirst() {\n        if balance < 0 {\n          \
    \  return true\n        }\n        balance -= op\n    }\n    return balance <\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(below_zero(operations: [] as\
    \ [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\n\
    assert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8952345c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b895203c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b895203c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b895203c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b895203bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8951e3be83 <unavailable> + 188035

    6    tmp7buiz5b5                        0x0000564ca9f7cacb <unavailable> + 6859

    7    tmp7buiz5b5                        0x0000564ca9f7c51d <unavailable> + 5405

    8    libc.so.6                          0x00002b8952531460 __libc_start_main +
    245

    9    tmp7buiz5b5                        0x0000564ca9f7c229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 1
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0)\
    \ { (acc, curr) in\n        acc += curr\n        return acc\n    }\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp8roepsnu.swift:11:13: error: left side of mutating operator isn't\
    \ mutable: 'acc' is a 'let' constant\n        acc += curr\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    guard operations.count > 0 else\
    \ {\n        return true\n    }\n\n    var balance = operations[0]\n    for operation\
    \ in operations.dropFirst() {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= operation\n    }\n\n    return balance < 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'tmpedmkvk53/tmpedmkvk53.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b358295ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3582651b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3582651988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35826507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpedmkvk53                        0x000055ee6830b5e4 <unavailable> + 5604

    5    libc.so.6                          0x00002b3582b46460 __libc_start_main +
    245

    6    tmpedmkvk53                        0x000055ee6830b279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    guard let first = operations.first\
    \ else {\n        return false\n    }\n    return operations.dropFirst().reduce(true)\
    \ { $0 && $1 < 0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmps0um73ch/tmps0um73ch.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9714597c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b971428eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b971428e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b971428d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps0um73ch                        0x0000560d8c64a6c8 <unavailable> + 5832

    5    libc.so.6                          0x00002b9714783460 __libc_start_main +
    245

    6    tmps0um73ch                        0x0000560d8c64a1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 1
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3es4hja7.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= op\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b676f73cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b676f433561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b676f433286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b676f43313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b676f432bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b676f232e83 <unavailable> + 188035

    6    tmpvyaiyjtb                        0x0000561fd25a99c2 <unavailable> + 6594

    7    tmpvyaiyjtb                        0x0000561fd25a941d <unavailable> + 5149

    8    libc.so.6                          0x00002b676f928460 __libc_start_main +
    245

    9    tmpvyaiyjtb                        0x0000561fd25a9129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65bfcbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65bf9b2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65bf9b2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65bf9b213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65bf9b1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b65bf7b1e83 <unavailable> + 188035

    6    tmpxivnza2l                        0x0000559a23f459c2 <unavailable> + 6594

    7    tmpxivnza2l                        0x0000559a23f4541d <unavailable> + 5149

    8    libc.so.6                          0x00002b65bfea7460 __libc_start_main +
    245

    9    tmpxivnza2l                        0x0000559a23f45129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    guard operations.count > 0 else\
    \ {\n        return true\n    }\n    var balance = operations[0]\n    for operation\
    \ in operations.dropFirst() {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= operation\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'tmprpxc9crv/tmprpxc9crv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c0b344c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c0b03bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c0b03b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c0b03a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprpxc9crv                        0x0000559356cf45e4 <unavailable> + 5604

    5    libc.so.6                          0x00002b3c0b530460 __libc_start_main +
    245

    6    tmprpxc9crv                        0x0000559356cf4279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n    }\n    return balance < 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'tmpke2_rt03/tmpke2_rt03.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b237ba01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b237b6f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b237b6f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b237b6f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpke2_rt03                        0x000055a7ecce75e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b237bbed460 __libc_start_main +
    245

    6    tmpke2_rt03                        0x000055a7ecce70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n    }\n    return balance < 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'tmpke2_rt03/tmpke2_rt03.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b237ba01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b237b6f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b237b6f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b237b6f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpke2_rt03                        0x000055a7ecce75e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b237bbed460 __libc_start_main +
    245

    6    tmpke2_rt03                        0x000055a7ecce70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    if operations.isEmpty {\n  \
    \      return true\n    }\n    var balance = operations[0]\n    for operation\
    \ in operations {\n        if balance < 0 {\n            return true\n       \
    \ }\n        balance -= operation\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmphkmridun/tmphkmridun.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2bb778c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2bb46fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2bb46f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2bb46e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphkmridun                        0x0000559552d924e4 <unavailable> + 5348

    5    libc.so.6                          0x00002ad2bb964460 __libc_start_main +
    245

    6    tmphkmridun                        0x0000559552d92179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        balance += op\n        if balance < 0 {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b90e02c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90dffbf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b90dffbf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b90dffbf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b90dffbebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b90dfdbee83 <unavailable> + 188035

    6    tmpehph_7rf                        0x0000560f0832d9c2 <unavailable> + 6594

    7    tmpehph_7rf                        0x0000560f0832d41d <unavailable> + 5149

    8    libc.so.6                          0x00002b90e04b4460 __libc_start_main +
    245

    9    tmpehph_7rf                        0x0000560f0832d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014202
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65bfcbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65bf9b2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65bf9b2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65bf9b213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65bf9b1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b65bf7b1e83 <unavailable> + 188035

    6    tmpxivnza2l                        0x0000559a23f459c2 <unavailable> + 6594

    7    tmpxivnza2l                        0x0000559a23f4541d <unavailable> + 5149

    8    libc.so.6                          0x00002b65bfea7460 __libc_start_main +
    245

    9    tmpxivnza2l                        0x0000559a23f45129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        balance += operation\n        if balance\
    \ < 0 {\n            return true\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad83c749c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad83c440561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad83c440286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad83c44013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad83c43fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad83c23fe83 <unavailable> + 188035

    6    tmpqxphrahp                        0x000055d452df99c2 <unavailable> + 6594

    7    tmpqxphrahp                        0x000055d452df941d <unavailable> + 5149

    8    libc.so.6                          0x00002ad83c935460 __libc_start_main +
    245

    9    tmpqxphrahp                        0x000055d452df9129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 1
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3es4hja7.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations.dropFirst() {\n        if balance < 0 {\n          \
    \  return true\n        }\n        balance -= op\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abef8dc6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abef8abd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abef8abd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abef8abd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abef8abcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abef88bce83 <unavailable> + 188035

    6    tmp4vvxkxe0                        0x0000555c82b68acb <unavailable> + 6859

    7    tmp4vvxkxe0                        0x0000555c82b6851d <unavailable> + 5405

    8    libc.so.6                          0x00002abef8fb2460 __libc_start_main +
    245

    9    tmp4vvxkxe0                        0x0000555c82b68229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014202
- exit_code: 1
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3es4hja7.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0)\
    \ { $0 + $1 }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpeg_ldew4/tmpeg_ldew4.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae445177c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae444e6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae444e6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae444e6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeg_ldew4                        0x000055b7a81914f8 <unavailable> + 5368

    5    libc.so.6                          0x00002ae445363460 __libc_start_main +
    245

    6    tmpeg_ldew4                        0x000055b7a8190fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    if operations.isEmpty {\n  \
    \      return true\n    }\n    var balance = operations[0]\n    for operation\
    \ in operations {\n        if balance < 0 {\n            return true\n       \
    \ }\n        balance -= operation\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmphkmridun/tmphkmridun.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2bb778c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2bb46fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2bb46f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2bb46e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphkmridun                        0x0000559552d924e4 <unavailable> + 5348

    5    libc.so.6                          0x00002ad2bb964460 __libc_start_main +
    245

    6    tmphkmridun                        0x0000559552d92179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n    }\n    return balance < 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'tmpke2_rt03/tmpke2_rt03.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b237ba01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b237b6f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b237b6f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b237b6f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpke2_rt03                        0x000055a7ecce75e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b237bbed460 __libc_start_main +
    245

    6    tmpke2_rt03                        0x000055a7ecce70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    if operations.isEmpty {\n  \
    \      return true\n    }\n    var balance = operations[0]\n    for operation\
    \ in operations.dropFirst() {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= operation\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'tmpd0tnnlbk/tmpd0tnnlbk.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adfdd389c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfdd080b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adfdd080988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adfdd07f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd0tnnlbk                        0x000055ed6c8295e4 <unavailable> + 5604

    5    libc.so.6                          0x00002adfdd575460 __libc_start_main +
    245

    6    tmpd0tnnlbk                        0x000055ed6c829279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014202
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 1
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3es4hja7.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= op\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b676f73cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b676f433561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b676f433286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b676f43313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b676f432bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b676f232e83 <unavailable> + 188035

    6    tmpvyaiyjtb                        0x0000561fd25a99c2 <unavailable> + 6594

    7    tmpvyaiyjtb                        0x0000561fd25a941d <unavailable> + 5149

    8    libc.so.6                          0x00002b676f928460 __libc_start_main +
    245

    9    tmpvyaiyjtb                        0x0000561fd25a9129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    if operations.isEmpty {\n  \
    \      return true\n    }\n    let firstOperation = operations[0]\n    return\
    \ firstOperation < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpg_igprga/tmpg_igprga.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f22431c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f22128b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f22128988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f221277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_igprga                        0x00005642c90a83c4 <unavailable> + 5060

    5    libc.so.6                          0x00002b4f2261d460 __libc_start_main +
    245

    6    tmpg_igprga                        0x00005642c90a8059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65bfcbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65bf9b2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65bf9b2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65bf9b213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65bf9b1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b65bf7b1e83 <unavailable> + 188035

    6    tmpxivnza2l                        0x0000559a23f459c2 <unavailable> + 6594

    7    tmpxivnza2l                        0x0000559a23f4541d <unavailable> + 5149

    8    libc.so.6                          0x00002b65bfea7460 __libc_start_main +
    245

    9    tmpxivnza2l                        0x0000559a23f45129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        balance += operation\n        if balance\
    \ < 0 {\n            return true\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad83c749c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad83c440561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad83c440286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad83c44013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad83c43fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad83c23fe83 <unavailable> + 188035

    6    tmpqxphrahp                        0x000055d452df99c2 <unavailable> + 6594

    7    tmpqxphrahp                        0x000055d452df941d <unavailable> + 5149

    8    libc.so.6                          0x00002ad83c935460 __libc_start_main +
    245

    9    tmpqxphrahp                        0x000055d452df9129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations.dropFirst() {\n        if balance < 0 {\n   \
    \         return true\n        }\n        balance -= operation\n    }\n    return\
    \ balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af6545e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6542d9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af6542d9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af6542d913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af6542d8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af6540d8e83 <unavailable> + 188035

    6    tmpepegvar_                        0x000055df73ee6acb <unavailable> + 6859

    7    tmpepegvar_                        0x000055df73ee651d <unavailable> + 5405

    8    libc.so.6                          0x00002af6547ce460 __libc_start_main +
    245

    9    tmpepegvar_                        0x000055df73ee6229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    if operations.isEmpty {\n  \
    \      return true\n    }\n    let firstOperation = operations[0]\n    return\
    \ firstOperation < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpg_igprga/tmpg_igprga.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f22431c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f22128b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f22128988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f221277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_igprga                        0x00005642c90a83c4 <unavailable> + 5060

    5    libc.so.6                          0x00002b4f2261d460 __libc_start_main +
    245

    6    tmpg_igprga                        0x00005642c90a8059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= op\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b676f73cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b676f433561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b676f433286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b676f43313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b676f432bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b676f232e83 <unavailable> + 188035

    6    tmpvyaiyjtb                        0x0000561fd25a99c2 <unavailable> + 6594

    7    tmpvyaiyjtb                        0x0000561fd25a941d <unavailable> + 5149

    8    libc.so.6                          0x00002b676f928460 __libc_start_main +
    245

    9    tmpvyaiyjtb                        0x0000561fd25a9129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 1
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3es4hja7.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 1
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3es4hja7.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        balance += operation\n        if balance\
    \ < 0 {\n            return true\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad83c749c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad83c440561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad83c440286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad83c44013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad83c43fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad83c23fe83 <unavailable> + 188035

    6    tmpqxphrahp                        0x000055d452df99c2 <unavailable> + 6594

    7    tmpqxphrahp                        0x000055d452df941d <unavailable> + 5149

    8    libc.so.6                          0x00002ad83c935460 __libc_start_main +
    245

    9    tmpqxphrahp                        0x000055d452df9129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0)\
    \ { $0 + $1 }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpeg_ldew4/tmpeg_ldew4.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae445177c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae444e6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae444e6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae444e6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeg_ldew4                        0x000055b7a81914f8 <unavailable> + 5368

    5    libc.so.6                          0x00002ae445363460 __libc_start_main +
    245

    6    tmpeg_ldew4                        0x000055b7a8190fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 1
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3es4hja7.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0)\
    \ { (acc, curr) in\n        return acc + curr\n    }\n    return balance < 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'tmpfj304jtb/tmpfj304jtb.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0847cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0844c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0844c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0844c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfj304jtb                        0x000055c96d89f4f8 <unavailable> + 5368

    5    libc.so.6                          0x00002ab0849b7460 __libc_start_main +
    245

    6    tmpfj304jtb                        0x000055c96d89efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014202
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0)\
    \ { $0 + $1 }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpeg_ldew4/tmpeg_ldew4.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae445177c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae444e6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae444e6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae444e6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeg_ldew4                        0x000055b7a81914f8 <unavailable> + 5368

    5    libc.so.6                          0x00002ae445363460 __libc_start_main +
    245

    6    tmpeg_ldew4                        0x000055b7a8190fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    guard operations.count > 0 else\
    \ {\n        return true\n    }\n    var balance = operations[0]\n    for operation\
    \ in operations {\n        if balance < 0 {\n            return true\n       \
    \ }\n        balance -= operation\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpyt67b7b8/tmpyt67b7b8.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b569c405c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b569c0fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b569c0fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b569c0fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyt67b7b8                        0x000055be356124f4 <unavailable> + 5364

    5    libc.so.6                          0x00002b569c5f1460 __libc_start_main +
    245

    6    tmpyt67b7b8                        0x000055be35612189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= op\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b676f73cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b676f433561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b676f433286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b676f43313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b676f432bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b676f232e83 <unavailable> + 188035

    6    tmpvyaiyjtb                        0x0000561fd25a99c2 <unavailable> + 6594

    7    tmpvyaiyjtb                        0x0000561fd25a941d <unavailable> + 5149

    8    libc.so.6                          0x00002b676f928460 __libc_start_main +
    245

    9    tmpvyaiyjtb                        0x0000561fd25a9129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations.dropFirst() {\n        if balance < 0 {\n          \
    \  return true\n        }\n        balance -= op\n    }\n    return balance <\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(below_zero(operations: [] as\
    \ [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\n\
    assert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8952345c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b895203c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b895203c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b895203c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b895203bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8951e3be83 <unavailable> + 188035

    6    tmp7buiz5b5                        0x0000564ca9f7cacb <unavailable> + 6859

    7    tmp7buiz5b5                        0x0000564ca9f7c51d <unavailable> + 5405

    8    libc.so.6                          0x00002b8952531460 __libc_start_main +
    245

    9    tmp7buiz5b5                        0x0000564ca9f7c229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65bfcbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65bf9b2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65bf9b2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65bf9b213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65bf9b1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b65bf7b1e83 <unavailable> + 188035

    6    tmpxivnza2l                        0x0000559a23f459c2 <unavailable> + 6594

    7    tmpxivnza2l                        0x0000559a23f4541d <unavailable> + 5149

    8    libc.so.6                          0x00002b65bfea7460 __libc_start_main +
    245

    9    tmpxivnza2l                        0x0000559a23f45129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n    }\n    return balance < 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'tmpke2_rt03/tmpke2_rt03.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b237ba01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b237b6f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b237b6f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b237b6f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpke2_rt03                        0x000055a7ecce75e8 <unavailable> + 5608

    5    libc.so.6                          0x00002b237bbed460 __libc_start_main +
    245

    6    tmpke2_rt03                        0x000055a7ecce70d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65bfcbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65bf9b2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65bf9b2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65bf9b213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65bf9b1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b65bf7b1e83 <unavailable> + 188035

    6    tmpxivnza2l                        0x0000559a23f459c2 <unavailable> + 6594

    7    tmpxivnza2l                        0x0000559a23f4541d <unavailable> + 5149

    8    libc.so.6                          0x00002b65bfea7460 __libc_start_main +
    245

    9    tmpxivnza2l                        0x0000559a23f45129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for op in operations {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= op\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b676f73cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b676f433561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b676f433286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b676f43313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b676f432bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b676f232e83 <unavailable> + 188035

    6    tmpvyaiyjtb                        0x0000561fd25a99c2 <unavailable> + 6594

    7    tmpvyaiyjtb                        0x0000561fd25a941d <unavailable> + 5149

    8    libc.so.6                          0x00002b676f928460 __libc_start_main +
    245

    9    tmpvyaiyjtb                        0x0000561fd25a9129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 1
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3es4hja7.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014201
- exit_code: 1
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3es4hja7.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    if operations.isEmpty {\n  \
    \      return true\n    }\n    let balance = operations.reduce(0) { $0 + $1 }\n\
    \    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpw_6s3g7f/tmpw_6s3g7f.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4abfa2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4abc99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4abc99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4abc987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_6s3g7f                        0x000055bdd4a583e4 <unavailable> + 5092

    5    libc.so.6                          0x00002ac4ac18e460 __libc_start_main +
    245

    6    tmpw_6s3g7f                        0x000055bdd4a58079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660014202
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 1
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3es4hja7.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65bfcbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65bf9b2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65bf9b2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65bf9b213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65bf9b1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b65bf7b1e83 <unavailable> + 188035

    6    tmpxivnza2l                        0x0000559a23f459c2 <unavailable> + 6594

    7    tmpxivnza2l                        0x0000559a23f4541d <unavailable> + 5149

    8    libc.so.6                          0x00002b65bfea7460 __libc_start_main +
    245

    9    tmpxivnza2l                        0x0000559a23f45129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 1
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0,\
    \ combine: +)\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp3es4hja7.swift:10:36: error: extraneous argument label 'combine:'\
    \ in call\n    var balance = operations.reduce(0, combine: +)\n              \
    \                     ^   ~~~~~~~~~\n                                       \n"
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: 1
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0)\n\
    \    for operation in operations {\n        balance += operation\n        if balance\
    \ < 0 {\n            return true\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: SyntaxError
  stderr: "/tmp/tmp4mm6atlo.swift:10:38: error: missing argument for parameter #2\
    \ in call\n    var balance = operations.reduce(0)\n                          \
    \           ^\n                                     , <#(Int, Int) throws -> Int#>\n\
    Swift.Sequence:2:28: note: 'reduce' declared here\n    @inlinable public func\
    \ reduce<Result>(_ initialResult: Result, _ nextPartialResult: (_ partialResult:\
    \ Result, Self.Element) throws -> Result) rethrows -> Result\n               \
    \            ^\n"
  stdout: ''
  timestamp: 1660014202
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations.reduce(0)\
    \ { $0 + $1 }\n    return balance < 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'tmpeg_ldew4/tmpeg_ldew4.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae445177c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae444e6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae444e6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae444e6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeg_ldew4                        0x000055b7a81914f8 <unavailable> + 5368

    5    libc.so.6                          0x00002ae445363460 __libc_start_main +
    245

    6    tmpeg_ldew4                        0x000055b7a8190fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    guard operations.count > 0 else\
    \ {\n        return true\n    }\n    var balance = operations[0]\n    for operation\
    \ in operations.dropFirst() {\n        if balance < 0 {\n            return true\n\
    \        }\n        balance -= operation\n    }\n    return balance < 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'tmpwr225waa/tmpwr225waa.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fc16fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fc13f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fc13f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fc13f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwr225waa                        0x0000561313af55e4 <unavailable> + 5604

    5    libc.so.6                          0x00002b5fc18ea460 __libc_start_main +
    245

    6    tmpwr225waa                        0x0000561313af5279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: -4
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = operations[0]\n\
    \    for operation in operations {\n        if balance < 0 {\n            return\
    \ true\n        }\n        balance -= operation\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(below_zero(operations: [] as [Int]) == false)\n\
    assert(below_zero(operations: [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5,\
    \ -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) ==\
    \ true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b65bfcbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65bf9b2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b65bf9b2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b65bf9b213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b65bf9b1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b65bf7b1e83 <unavailable> + 188035

    6    tmpxivnza2l                        0x0000559a23f459c2 <unavailable> + 6594

    7    tmpxivnza2l                        0x0000559a23f4541d <unavailable> + 5149

    8    libc.so.6                          0x00002b65bfea7460 __libc_start_main +
    245

    9    tmpxivnza2l                        0x0000559a23f45129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014201
- exit_code: 0
  program: "\n/// You're given an array of deposit and withdrawal operations on a\
    \ bank account that starts with\n/// zero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\n/// at that point function\
    \ should return true. Otherwise it should return false.\n/// >>> below_zero(operations:\
    \ [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\n\
    func below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for op\
    \ in operations {\n        balance += op\n        if balance < 0 {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014045
