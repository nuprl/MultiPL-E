name: HumanEval_47_median
language: swift
prompt: "\n/// Return median of elements in the array l.\n/// >>> median(l: [3, 1,\
  \ 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
  \ median(l: [Int]) -> Double {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
  \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
  \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
completions: ["    var l = l.sorted()\n    if l.count % 2 == 1 {\n        return l[(l.count\
    \ - 1) / 2]\n    }\n    return Double(l.count / 2)", "    var l = l\n    l.sort()\n\
    \    if l.count % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    } else {\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }",
  "    let n = l.count\n    if n < 1 {\n        return Double.nan\n    }\n    let\
    \ mid = n / 2\n    let left = l[0 ..< mid]\n    let right = l[mid..<n]\n    return\
    \ median(left, right) + median(right, left) / 2", "    let n = l.count\n    if\
    \ n < 1 {\n        return Double.nan\n    }\n    if n % 2 == 0 {\n        return\
    \ l.sorted()[n/2]\n    } else {\n        let mid = Double(l.count/2)\n       \
    \ return l.sorted()[mid]\n    }", "    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]\n    }", "    var l = l.sorted()\n\
    \    if l.count < 2 {\n        return l[0]\n    }\n    var mid = l.count / 2\n\
    \    var m1 = l[mid]\n    var m2 = l[mid-1]\n    if m2 < m1 {\n        return\
    \ m1\n    }\n    return m2", "    var l = l.sorted()\n    if l.count % 2 == 0\
    \ {\n        return Double(l.last!) / 2.0\n    }\n    return Double(l.first! +\
    \ l.last!) / 2.0", "    var n = l.count\n    if n < 1 {\n        return Double.nan\n\
    \    }\n    if n == 1 {\n        return l[0]\n    }\n    var mid = n / 2\n   \
    \ var left = l[0:mid]\n    var right = l[mid:n]\n    return median(left) + median(right)\
    \ / 2", "    var l = l.sorted()\n    if l.count <= 1 {\n        return l[0]\n\
    \    }\n    var mid = l.count / 2\n    return l[mid]", "    let n = l.count\n\
    \    if n < 2 {\n        return Double(l.first!)\n    }\n    let mid = n / 2\n\
    \    let left = l[..<mid]\n    let right = l[mid..<n]\n    return median(left)\
    \ + median(right) / 2.0", "    var l = l\n    l.sort()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[(l.count - 1)\
    \ / 2] + l[l.count / 2 - 1]", "    let n = l.count\n    if n < 2 {\n        return\
    \ Double(0)\n    }\n    let mid = n / 2\n    let left = l[..<mid]\n    let right\
    \ = l[mid..<n]\n    return Double(left.reduce(0.0, +) / Double(left.count) + right.reduce(0.0,\
    \ +) / Double(right.count))", "    var l = l.sorted()\n    if l.count % 2 == 0\
    \ {\n        return Double(l.last!) / 2.0\n    }\n    return Double(l.first! +\
    \ l.last!) / 2.0", "    var l = l\n    l.sort()\n    if l.count > 1 {\n      \
    \  return (l[0] + l[l.count - 1]) / 2\n    }\n    return l[0]", "    var l = l.sorted()\n\
    \    if l.count <= 1 {\n        return l[0]\n    }\n    var mid = l.count / 2\n\
    \    return Double(l.sorted()[mid])", '    return l.sorted().reduce(0.0, { $0
    + Double($1) })', "    let n = l.count\n    if n < 2 {\n        return Double(l.first!)\n\
    \    }\n    let mid = n / 2\n    let m1 = median(l[0..<mid])\n    let m2 = median(l[mid..<n])\n\
    \    return (m1 + m2) / 2.0", "    var l = l\n    l.sort()\n    if l.count > 1\
    \ {\n        return Double(l.last! + l.first!) / Double(l.count - 1)\n    }\n\
    \    return l.first!", "    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    return sorted[mid]", "    var n = l.count\n    if n < 2 {\n       \
    \ return Double(l.first!)\n    }\n    var mid = n / 2\n    var low = Double(l.first!)\n\
    \    var high = Double(l.last!)\n    var midVal = Double(l.first!)\n    var lowVal\
    \ = Double(l.first!)\n    var highVal = Double(l.last!)\n    for index in 0..<n\
    \ {\n        if index < mid {\n            lowVal = Double(l.first!)\n       \
    \     highVal = Double(l.last!)\n        } else {\n            lowVal = Double(l.first!)\n\
    \            midVal = Double(l.first!)\n            highVal = Double(l.last!)\n\
    \        }\n        if index < mid {\n            low = lowVal + (Double(l.first!)\
    \ - lowVal) * (Double(l.first!) - lowVal) / Double(n - 1)\n            high =\
    \ highVal + (Double(l.last!) - highVal) * (Double(l.last!) - highVal) / Double(n\
    \ - 1)\n        } else {\n            low = lowVal + (Double(l.first!) - lowVal)\
    \ * (Double(l.first!) - lowVal) / Double(n - 1)\n            mid = midVal + (Double(l.first!)\
    \ - midVal) * (Double(l.first!) - midVal) / Double(n - 1)\n            high =\
    \ highVal + (Double(l.last!) - highVal) * (Double(l.last!) - highVal) / Double(n\
    \ - 1)\n        }\n    }\n    return low + (high - low) / 2", "    var l = l.sorted()\n\
    \    if l.count < 2 {\n        return l[0]\n    }\n    var mid = l.count / 2\n\
    \    return Double(l.sorted()[mid])", "    var n = l.count\n    if n < 1 {\n \
    \       return Double.nan\n    }\n    if n == 1 {\n        return l[0]\n    }\n\
    \    if n % 2 == 0 {\n        return median(l[1..<(n / 2)])\n    }\n    return\
    \ median(l[(n / 2)..<n])", "    var l = l.sorted()\n    if l.count % 2 == 0 {\n\
    \        return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count\
    \ - 1) / 2] - l[(l.count - 2) / 2].0) / 2.0\n    }", "    var l = l.sorted()\n\
    \    if l.count <= 1 {\n        return l[0]\n    }\n    var mid = l.count / 2\n\
    \    return Double(l.sorted()[mid])", "    let n = l.count\n    if n < 2 {\n \
    \       return Double(l.first!)\n    }\n    let mid = n / 2\n    let left = l.prefix(mid)\n\
    \    let right = l.suffix(mid)\n    return median(left) + median(right) / 2.0",
  "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    } else {\n        return l[(l.count - 1) / 2] + l[(l.count -\
    \ 1) / 2 - 1]\n    }", "    var l = l.sorted()\n    if l.count % 2 == 1 {\n  \
    \      return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1) / 2] +\
    \ l[(l.count - 1) / 2 - 1]) / 2", "    var l = l.sorted()\n    if l.count % 2\
    \ == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count -\
    \ 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2.0", "    var l = l\n    l.sort()\n \
    \   if l.count > 1 {\n        return (l[0] + l[l.count - 1]) / 2.0\n    }\n  \
    \  return l[0]", "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return l[0]", "    var l = l\n    l.sort()\n\
    \    if l.count > 1 {\n        return Double(l.last! + l.first!) / Double(l.count\
    \ - 1)\n    }\n    return Double(l.first!)", "    var l = l\n    l.sort()\n  \
    \  if l.count > 1 {\n        return (l[0] + l[l.count - 1]) / 2\n    }\n    return\
    \ l[0]", '    return l.sorted().reduce(0.0, { $0 + Double($1) })', "    var l\
    \ = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count - 1)\
    \ / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count - 1) /\
    \ 2 - 1]) / 2\n    }", "    var l = l.sorted()\n    if l.count % 2 == 0 {\n  \
    \      return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1) / 2] +\
    \ l[(l.count - 1) / 2 - 1]) / 2", "    let n = l.count\n    let mid = n / 2\n\
    \    if n % 2 == 0 {\n        return l[mid]\n    } else {\n        let m1 = median(l.prefix(mid))\n\
    \        let m2 = median(l.suffix(mid))\n        return m1 + m2 - (m1 + m2) /\
    \ 2\n    }", "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ Double(l[l.count / 2])\n    }\n    return Double(0)", "    var l = l.sorted()\n\
    \    if l.count < 2 {\n        return l[0]\n    }\n    var mid = l.count / 2\n\
    \    return Double(l.sorted()[mid])", "    var l = l.sorted()\n    if l.count\
    \ % 2 == 0 {\n        return Double(l.last!) / 2.0\n    }\n    return Double(l.first!\
    \ + l.last!) / 2.0", "    var n = l.count\n    if n < 1 {\n        return Double.nan\n\
    \    }\n    if n == 1 {\n        return l[0]\n    }\n    if n % 2 == 0 {\n   \
    \     return median(l[1..<(n - 1)])\n    }\n    return median(l[(n - 1)..<n])",
  '    return l.sorted().reduce(0.0, { $0 + Double($1) })', "    var n = l.count\n\
    \    if n < 1 {\n        return 0\n    }\n    if n % 2 == 0 {\n        return\
    \ l[n/2]\n    }\n    var low = l[0]\n    var high = l[0]\n    for x in l[1..]\
    \ {\n        if x < low {\n            low = x\n        }\n        if x > high\
    \ {\n            high = x\n        }\n    }\n    return (high + low) / 2", " \
    \   var l = l.sorted()\n    if l.count <= 1 {\n        return l[0]\n    }\n  \
    \  var mid = l.count / 2\n    var m1 = l[mid]\n    var m2 = l[mid-1]\n    if m2\
    \ < m1 {\n        return m1\n    }\n    return m2", "    var l = l\n    l.sort()\n\
    \    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }",
  "    var l = l.sorted()\n    if l.count % 2 == 0 {\n        return Double(l[l.count\
    \ / 2 - 1] + l[l.count / 2]) / 2.0\n    }\n    return Double(l[l.count / 2] +\
    \ l[l.count / 2 - 1]) / 2.0", "    var l = l.sorted()\n    if l.count % 2 == 1\
    \ {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1) /\
    \ 2] - l[(l.count - 1) / 2 - 1] + l[(l.count - 1) / 2 + 1]) / 2.0", "    var l\
    \ = l.sorted()\n    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n\
    \    }\n    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2", " \
    \   var l = l.sorted()\n    if l.count < 2 {\n        return Double(l.first!)\n\
    \    }\n    var mid = l.count / 2\n    return Double(l[mid])", "    var l = l.sorted()\n\
    \    if l.count < 2 {\n        return l[0]\n    }\n    var mid = l.count / 2\n\
    \    return Double(l.sorted()[mid])", "    var l = l.sorted()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", "    var n =\
    \ l.count\n    if n < 1 {\n        return Double.nan\n    }\n    if n == 1 {\n\
    \        return l[0]\n    }\n    var m = Double.nan\n    for x in l {\n      \
    \  if Double.isNaN(m) || x > m {\n            m = x\n        }\n    }\n    return\
    \ m", "    let n = l.count\n    if n < 1 {\n        return 0\n    }\n    var m\
    \ = Double(0)\n    for x in l {\n        m += x\n    }\n    m /= Double(n)\n \
    \   return m", "    var l = l.sorted()\n    if l.count % 2 == 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return l[(l.count - 1) / 2] + l[l.count / 2\
    \ - 1]", "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return Double(l.count\
    \ / 2)\n    }\n    return l[0]", "    var l = l.sorted()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2", "    let n = l.count\n    if n < 1 {\n\
    \        return Double.nan\n    }\n    if n % 2 == 0 {\n        return l.sorted()[n/2]\n\
    \    }\n    let mid = Double(l.count/2)\n    return l.sorted()[mid]", "    var\
    \ l = l.sorted()\n    if l.count < 2 {\n        return l[0]\n    }\n    var mid\
    \ = l.count / 2\n    return Double(l.sorted()[mid])", "    var l = l\n    l.sort()\n\
    \    return l[(l.count - 1) / 2]", "    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", "    var l =\
    \ l\n    l.sort()\n    if l.count % 2 == 1 {\n        return l[(l.count - 1) /\
    \ 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2\
    \ - 1]) / 2\n    }", "    let n = l.count\n    if n < 2 {\n        return Double(l.first!)\n\
    \    }\n    let mid = n / 2\n    let left = l.prefix(mid)\n    let right = l.suffix(mid)\n\
    \    return median(left) + median(right) / 2.0", "    var l = l\n    l.sort()\n\
    \    if l.count > 1 {\n        return Double(l.last! + l.first!) / 2.0\n    }\n\
    \    return l.first!", "    let n = l.count\n    let middle = n / 2\n    if n\
    \ % 2 == 0 {\n        return l[middle]\n    } else {\n        return (l[middle]\
    \ + l[middle - 1]) / 2\n    }", "    var l = l\n    l.sort()\n    return l[(l.count\
    \ - 1) / 2]", "    let sorted = l.sorted()\n    if sorted.count < 2 {\n      \
    \  return Double(sorted[0])\n    }\n    return Double(sorted[(sorted.count - 1)\
    \ / 2]) + Double(sorted[sorted.count / 2 - 1]) / 2", "    var l = l\n    l.sort()\n\
    \    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2", "    var n = l.count\n\
    \    if n < 2 {\n        return Double(l.first!)\n    }\n    var mid = n / 2\n\
    \    var low = Double(l.first!)\n    var high = Double(l.last!)\n    if n % 2\
    \ == 0 {\n        return low + (high - low) / 2\n    }\n    return high - (high\
    \ - low) / 2", "    var n = l.count\n    if n < 1 {\n        return Double.nan\n\
    \    }\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    var mid = n/2\n\
    \    var left = l[:mid]\n    var right = l[mid:]\n    var m1 = median(left)\n\
    \    var m2 = median(right)\n    if m1 < m2 {\n        return m1\n    }\n    return\
    \ m2", "    let n = l.count\n    if n < 1 {\n        return Double.nan\n    }\n\
    \    if n == 1 {\n        return l[0]\n    }\n    let mid = n / 2\n    let left\
    \ = median(l[0..<mid])\n    let right = median(l[mid..<n])\n    return (left +\
    \ right) / 2", "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return\
    \ (l[0] + l[l.count - 1]) / 2\n    }\n    return l[0]", "    var l = l\n    l.sort()\n\
    \    if l.count % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return\
    \ Double(l.count / 2)", "    var l = l.sorted()\n    if l.count < 2 {\n      \
    \  return Double(l.first!)\n    }\n    var mid = l.count / 2\n    return Double(l[mid])",
  "    var l = l.sorted()\n    if l.count % 2 == 0 {\n        return Double(l.first!\
    \ + l.last!) / 2.0\n    }\n    return Double(l.first! + l.last!) / 2.0", '    return
    l.sorted().reduce(0.0, { $0 + Double($1) })', "    let n = l.count\n    if n <\
    \ 1 {\n        return Double.nan\n    }\n    if n % 2 == 0 {\n        return Double(l[n/2])\n\
    \    }\n    let mid = n / 2\n    return Double(l[mid]) + Double(l[mid-1]) / 2",
  "    var l = l.sorted()\n    if l.count % 2 == 1 {\n        return l[(l.count -\
    \ 1) / 2]\n    }\n    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1])\
    \ / 2", "    var l = l.sorted()\n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    }\n    return (l[l.count / 2 - 1] + l[l.count / 2]) / 2.0", " \
    \   var l = l.sorted()\n    if l.count < 2 {\n        return Double(l.first!)\n\
    \    }\n    var mid = l.count / 2\n    var a = Double(l.first!)\n    var b = Double(l.last!)\n\
    \    var c = Double(l.first!)\n    var d = Double(l.last!)\n    while mid > 0\
    \ {\n        if a > b {\n            swap(&a, &b)\n        }\n        if b > c\
    \ {\n            swap(&b, &c)\n        }\n        mid--\n    }\n    return a +\
    \ (b - c) / 2", '    return l.sorted().reduce(0.0, { $0 + Double($1) })', '    return
    l.sorted().reduce(0.0, { $0 + Double($1) })', "    let n = l.count\n    if n <\
    \ 1 {\n        return Double.nan\n    }\n    if n == 1 {\n        return l[0]\n\
    \    }\n    let mid = n / 2\n    let left = l[0 ..< mid]\n    let right = l[mid..<n]\n\
    \    let midVal = median(left)\n    let leftVal = median(right)\n    if leftVal\
    \ < midVal {\n        return leftVal\n    } else {\n        return midVal\n  \
    \  }", "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count\
    \ - 1) / 2 - 1]) / 2\n    }", "    var n = l.count\n    if n < 2 {\n        return\
    \ Double(l.first!)\n    }\n    var mid = n / 2\n    var left = l.subarray(0, mid)\n\
    \    var right = l.subarray(mid)\n    return median(left) + median(right) / 2.0",
  "    var l = l\n    l.sort()\n    if l.count > 0 {\n        return Double(l.last!)\
    \ / Double(l.count)\n    }\n    return Double(0)", "    var l = l.sorted()\n \
    \   if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return\
    \ l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]", "    var n = l.count\n   \
    \ if n < 2 {\n        return Double(0)\n    }\n    if n % 2 == 0 {\n        return\
    \ Double(l[n/2])\n    }\n    var low = Double(0)\n    var high = Double(0)\n \
    \   var mid = Double(0)\n    for x in l {\n        if x < low {\n            low\
    \ = x\n        }\n        if x > high {\n            high = x\n        }\n   \
    \     if x < mid {\n            mid = x\n        }\n    }\n    return Double(mid)",
  "    let n = l.count\n    if n < 1 {\n        return Double.nan\n    }\n    let\
    \ mid = n / 2\n    let leftMedian = median(l[0..<mid])\n    let rightMedian =\
    \ median(l[mid..<n])\n    return Double(leftMedian) + Double(rightMedian) / 2.0",
  "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return Double(l.last!\
    \ + l.first!) / Double(l.count - 1)\n    }\n    return l.first!", "    var l =\
    \ l\n    l.sort()\n    if l.count > 1 {\n        return Double(l.sortedLastIndex\
    \ { ($0 > l[($0 - 1) / 2]) })\n    } else {\n        return Double(l.sortedLastIndex\
    \ { ($0 > l[0]) })\n    }", "    var l = l.sorted()\n    if l.count % 2 == 0 {\n\
    \        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1) / 2]\
    \ + l[(l.count - 1) / 2 - 1]) / 2", "    var l = l.sorted()\n    if l.count %\
    \ 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2.0", "    var l = l.sorted()\n    if\
    \ l.count < 2 {\n        return Double(l.first!)\n    }\n    var mid = l.count\
    \ / 2\n    return Double(l[mid])", "    var l = l.sorted()\n    if l.count < 2\
    \ {\n        return l[0]\n    }\n    var mid = l.count / 2\n    var m1 = l[mid]\n\
    \    var m2 = l[mid-1]\n    if m1 < m2 {\n        return m1\n    }\n    return\
    \ m2", "    var l = l.sorted()\n    if l.count % 2 == 0 {\n        return l[(l.count\
    \ - 1) / 2]\n    }\n    return l[(l.count - 1) / 2] + l[l.count / 2 - 1]", " \
    \   var l = l.sorted()\n    if l.count % 2 == 0 {\n        return l[(l.count -\
    \ 1) / 2]\n    }\n    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1])\
    \ / 2", '    return l.sorted().reduce(0.0, { $0 + Double($1) })', "    var l =\
    \ l\n    l.sort()\n    return l[(l.count - 1) / 2]", "    let sorted = l.sorted()\n\
    \    if sorted.isEmpty {\n        return Double.nan\n    }\n    let mid = sorted.count\
    \ / 2\n    return Double(sorted[mid])", '    return l.sorted().reduce(0.0, { $0
    + Double($1) })', "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n  \
    \      return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count -\
    \ 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", "    var l = l.sorted()\n \
    \   if l.count % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2", "    var l = l\n   \
    \ l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n \
    \   } else {\n        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1])\
    \ / 2\n    }", '    return l.sorted().reduce(0.0, { $0 + Double($1) })', '    return
    l.sorted().reduce(0.0, { $0 + Double($1) })', "    var l = l.sorted()\n    if\
    \ l.count <= 1 {\n        return l[0]\n    }\n    var mid = l.count / 2\n    return\
    \ Double(l[mid]) + Double(l[mid-1]) / 2", "    var n = l.count\n    if n < 1 {\n\
    \        return 0\n    }\n    var m = Double(l.count / 2)\n    if n % 2 == 0 {\n\
    \        return l[m]\n    }\n    var lo = Double(0)\n    var hi = Double(0)\n\
    \    for x in l {\n        if x < lo {\n            lo = x\n        }\n      \
    \  if x > hi {\n            hi = x\n        }\n    }\n    return lo + (hi - lo)\
    \ / 2", "    var l = l.sorted()\n    if l.count <= 1 {\n        return l[0]\n\
    \    }\n    var mid = l.count / 2\n    if l.count % 2 == 0 {\n        return l[mid]\n\
    \    }\n    return Double(l[mid-1] + l[mid])/2", "    var l = l.sorted()\n   \
    \ if l.count < 2 {\n        return l[0]\n    }\n    var mid = l.count / 2\n  \
    \  return Double(l[mid]) + Double(l[mid-1]) / 2", "    var l = l\n    l.sort()\n\
    \    if l.count > 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return\
    \ 0", "    var l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return\
    \ l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count\
    \ - 1) / 2 - 1]) / 2\n    }", "    var l = l.sorted()\n    if l.count < 2 {\n\
    \        return l[0]\n    }\n    var mid = l.count / 2\n    return l[mid]", " \
    \   let n = l.count\n    if n < 1 {\n        return Double.nan\n    }\n    let\
    \ mid = n / 2\n    let left = l[0 ..< mid]\n    let right = l[mid..<n]\n    return\
    \ median(left, right) + median(right, left) / 2", "    var l = l.sorted()\n  \
    \  if l.count % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return\
    \ (l[(l.count - 1) / 2] - l[(l.count - 1) / 2 - 1] + l[(l.count - 1) / 2 + 1])\
    \ / 2.0", "    var n = l.count\n    if n < 2 {\n        return Double(0)\n   \
    \ }\n    var mid = n / 2\n    var left = l[mid..<n]\n    var right = l[mid..<n]\n\
    \    if n % 2 == 0 {\n        return median(left) + median(right)\n    }\n   \
    \ return median(left) - median(right)", "    var l = l\n    l.sort()\n    if l.count\
    \ % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2", "    var l = l.sorted()\n    if\
    \ l.count <= 1 {\n        return l[0]\n    }\n    var mid = l.count / 2\n    return\
    \ l[mid]", "    var n = l.count\n    if n < 1 {\n        return Double.nan\n \
    \   }\n    var m = Double.nan\n    var i = 0\n    var j = 0\n    var k = 0\n \
    \   var sum = 0\n    var sum2 = 0\n    var sum3 = 0\n    var sum4 = 0\n    var\
    \ sum5 = 0\n    var sum6 = 0\n    var sum7 = 0\n    var sum8 = 0\n    var sum9\
    \ = 0\n    var sum10 = 0\n    var sum11 = 0\n    var sum12 = 0\n    var sum13\
    \ = 0\n    var sum14 = 0\n    var sum15 = 0\n    var sum16 = 0\n    var sum17\
    \ = 0\n    var sum18 = 0\n    var sum19 = 0\n    var sum20 = 0\n    var sum21\
    \ = 0\n    var sum22 = 0\n    var sum23 = 0\n    var sum24 = 0\n    var sum25\
    \ = 0\n    var sum26 = 0\n    var sum27 = 0\n    var sum28 = 0\n    var sum29\
    \ = 0\n    var sum30 = 0\n    var sum31 = 0\n    var sum32 = 0\n    var sum33\
    \ = 0\n    var sum34 = 0\n    var sum35 = 0\n    var sum36 = 0\n    var sum37\
    \ = 0\n    var sum38 = 0\n    var sum39 = 0\n    var sum40 = 0\n    var sum41\
    \ = 0\n    var sum42 = 0\n    var sum43 = 0\n    var sum44 = 0\n    var sum45\
    \ = 0\n    var sum46 = 0\n    var sum47 = 0\n    var sum48 = 0\n    var sum49\
    \ = 0\n    var sum50 = 0\n    var sum51 = 0\n    var sum52 = 0\n    var sum53\
    \ = 0\n    var sum54 = 0\n    var sum55 = 0\n    var sum56 = 0\n    var sum57\
    \ = 0\n    var sum58 = 0\n    var sum59 = 0\n    var sum60 = 0\n    var sum61\
    \ = 0\n    var sum62 = 0\n    var sum63 = 0\n    var sum64 = 0\n    var sum65\
    \ = 0\n    var sum66 = 0\n    var sum67 = 0\n    var sum68 = 0\n    var sum69\
    \ = 0\n    var sum70 = 0\n    var sum71 = 0\n    var sum72 = 0\n    var sum73\
    \ = 0\n    var sum74 = 0\n    var sum75 = 0\n    var sum76 = 0\n    var sum77\
    \ = 0\n    var sum78 = 0\n    var sum79 = 0\n    var sum80 = 0\n    var sum81\
    \ = 0\n    var sum82 = 0\n    var sum83 = 0\n    var sum84 = 0\n    var sum85\
    \ = 0\n    var sum86 = 0\n    var sum87 = 0\n    var sum88 = 0\n    var sum89\
    \ = 0\n    var sum90 = 0\n    var sum91 = 0\n    var sum92 = 0\n    var sum93\
    \ = 0\n    var sum94 = 0\n    var sum95 = 0\n    var sum96 = 0\n", "    var l\
    \ = l.sorted()\n    if l.count % 2 == 0 {\n        return Double(l.first! + l.last!)\
    \ / 2.0\n    }\n    return Double(l.first! + l.last!) / 2.0", "    let n = l.count\n\
    \    if n < 1 {\n        return Double.nan\n    }\n    if n % 2 == 0 {\n     \
    \   return l.sorted()[n / 2]\n    }\n    let mid = n / 2\n    let left = l.sorted()[0..<mid]\n\
    \    let right = l.sorted()[mid..<n]\n    return Double(left[mid] + right[mid])\
    \ / 2", "    var l = l.sorted()\n    if l.count <= 1 {\n        return l[0]\n\
    \    }\n    var mid = l.count / 2\n    return l[mid]", "    let n = l.count\n\
    \    let mid = n / 2\n    if n < 2 {\n        return l[0]\n    }\n    if n ==\
    \ 1 {\n        return l[0]\n    }\n    if n == 2 {\n        return 0.5 * (l[0]\
    \ + l[1])\n    }\n    if n % 2 == 0 {\n        return median(l[mid..<n])\n   \
    \ } else {\n        return median(l[mid..<n - 1])\n    }", "    var l = l\n  \
    \  l.sort()\n    if l.count > 1 {\n        return Double(l.count / 2)\n    }\n\
    \    return l[0]", "    let sorted = l.sorted()\n    if sorted.count % 2 == 0\
    \ {\n        return sorted[(sorted.count - 1) / 2]\n    } else {\n        return\
    \ sorted[(sorted.count - 1) / 2] + sorted[(sorted.count - 1) / 2 - 1]\n    }",
  "    let n = l.count\n    let m = n / 2\n    if n % 2 == 0 {\n        return l[m]\n\
    \    } else {\n        return Double(l.sorted()[m])\n    }", "    var l = l.sorted()\n\
    \    if l.count % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2", "    var l = l.sorted()\n\
    \    if l.count <= 1 {\n        return l[0]\n    }\n    var mid = l.count / 2\n\
    \    var m1 = l[mid]\n    var m2 = l[mid-1]\n    if m1 < m2 {\n        return\
    \ m1\n    }\n    return m2", "    var l = l.sorted()\n    if l.count % 2 == 0\
    \ {\n        return l[(l.count - 1) / 2]\n    }\n    return Double(l.count / 2)",
  "    var n = l.count\n    if n < 1 {\n        return Double.nan\n    }\n    if n\
    \ % 2 == 0 {\n        return l.sorted()[n/2]\n    }\n    return Double(l.sorted()[(n\
    \ - 1)/2] + l.sorted()[(n + 1)/2])", "    var n = l.count\n    if n < 2 {\n  \
    \      return l[0]\n    }\n    var m = Double(l.count)\n    var sum = 0\n    for\
    \ x in l {\n        sum += x\n    }\n    var x = sum / Double(n)\n    for x in\
    \ l {\n        if x < m {\n            m = x\n        }\n    }\n    return m",
  "    var n = l.count\n    if n < 1 {\n        return 0\n    }\n    if n % 2 == 0\
    \ {\n        return l[n/2]\n    }\n    var mid = n/2\n    var left = l[:mid]\n\
    \    var right = l[mid:]\n    return median(left) + median(right)", "    var l\
    \ = l.sorted()\n    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n\
    \    } else {\n        return l[(l.count - 1) / 2] + l[l.count / 2]\n    }", " \
    \   var n = l.count\n    if n < 1 {\n        return 0\n    }\n    if n % 2 ==\
    \ 0 {\n        return l[n/2]\n    }\n    return (l[n/2-1] + l[n/2])/2", "    var\
    \ l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count -\
    \ 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count - 1)\
    \ / 2 - 1]) / 2\n    }", "    var l = l.sorted()\n    if l.count % 2 == 0 {\n\
    \        return l[(l.count - 1) / 2]\n    }\n    return l[(l.count - 1) / 2] +\
    \ l[l.count / 2 - 1]", "    var l = l.sorted()\n    if l.count < 2 {\n       \
    \ return l[0]\n    }\n    var mid = l.count / 2\n    return l[mid]", "    var\
    \ l = l\n    l.sort()\n    if l.count % 2 == 0 {\n        return l[(l.count -\
    \ 1) / 2]\n    } else {\n        return (l[(l.count - 1) / 2] + l[(l.count - 1)\
    \ / 2 - 1]) / 2\n    }", "    var l = l.sorted()\n    if l.count <= 1 {\n    \
    \    return l[0]\n    }\n    var mid = l.count / 2\n    return l[mid]", "    var\
    \ l = l.sorted()\n    if l.count % 2 == 1 {\n        return l[(l.count - 1) /\
    \ 2]\n    }\n    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2",
  "    var l = l.sorted()\n    if l.count % 2 == 1 {\n        return Double(l.last!)\
    \ / 2.0\n    }\n    return Double(l.last! + l.first!) / 2.0", "    var n = l.count\n\
    \    if n < 2 {\n        return Double(l.first!)\n    }\n    var m = Double(l.first!)\n\
    \    for x in l.dropFirst() {\n        if x < m {\n            m = x\n       \
    \ }\n    }\n    return m", "    var l = l.sorted()\n    if l.count <= 1 {\n  \
    \      return l[0]\n    }\n    var mid = l.count / 2\n    if l.count % 2 == 0\
    \ {\n        return l[mid]\n    }\n    return Double(l[mid-1] + l[mid])/2", " \
    \   var n = l.count\n    if n < 1 {\n        return 0\n    }\n    if n % 2 ==\
    \ 0 {\n        return l[n/2]\n    }\n    var low = l[0]\n    var high = l[0]\n\
    \    for x in 1..n {\n        if l[x] < low {\n            low = l[x]\n      \
    \  }\n        if l[x] > high {\n            high = l[x]\n        }\n    }\n  \
    \  return (high + low) / 2", "    var l = l\n    l.sort()\n    if l.count % 2\
    \ == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }", "    var l = l\n    l.sort()\n\
    \    if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }",
  '    return l.sorted().reduce(0.0, { $0 + Double($1) })', "    let n = l.count\n\
    \    let mid = n / 2\n    if n % 2 == 0 {\n        return l[mid]\n    } else {\n\
    \        return (l[mid] + l[mid-1]) / 2\n    }", "    let n = l.count\n    if\
    \ n < 1 {\n        return Double.nan\n    }\n    if n % 2 == 0 {\n        return\
    \ l.sorted()[n / 2].doubleValue\n    }\n    let mid = n / 2\n    let leftHalf\
    \ = l.sorted()[mid..<n]\n    let rightHalf = l.sorted()[mid..<n]\n    return Double(leftHalf).doubleValue\
    \ + Double(rightHalf).doubleValue / 2", "    let n = l.count\n    if n < 1 {\n\
    \        return Double.nan\n    }\n    let mid = n / 2\n    let left = l[..<mid]\n\
    \    let right = l[mid..<n]\n    return median(left, right) + median(right, left)\
    \ / 2", "    var l = l.sorted()\n    if l.count <= 1 {\n        return l[0]\n\
    \    }\n    var mid = l.count / 2\n    return Double(l.sorted()[mid])", "    let\
    \ n = l.count\n    let m = n / 2\n    if n % 2 == 1 {\n        return l[m]\n \
    \   }\n    let m1 = m - 1 // mid point of even numbers\n    let m2 = m + 1 //\
    \ mid point of odd numbers\n    if l[m1] > l[m2] {\n        return l[m1]\n   \
    \ } else {\n        return l[m2]\n    }", "    var l = l\n    l.sort()\n    if\
    \ l.count > 0 {\n        return Double(l.last!) / Double(l.count)\n    }\n   \
    \ return 0.0", "    var l = l.sorted()\n    if l.count % 2 == 1 {\n        return\
    \ l[(l.count - 1) / 2]\n    }\n    return l[(l.count - 1) / 2] + l[(l.count -\
    \ 1) / 2 - 1]", "    let n = l.count\n    let m = n / 2\n    if n % 2 == 0 {\n\
    \        return l[m]\n    } else {\n        return l[m - 1] + l[m]\n    }", " \
    \   let n = l.count\n    if n < 1 {\n        return Double.nan\n    }\n    if\
    \ n == 1 {\n        return l[0]\n    }\n    let mid = n / 2\n    let m1 = median(l[0..<mid])\n\
    \    let m2 = median(l[mid..<n])\n    let median = (m1 + m2) / 2\n    return median",
  "    var l = l\n    l.sort()\n    if l.count > 1 {\n        return Double(l.last!\
    \ + l.first!) / 2.0\n    }\n    return l.first!", "    var l = l.sorted()\n  \
    \  if l.count % 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return\
    \ l[(l.count - 1) / 2] + l[l.count / 2 - 1]", "    var l = l\n    l.sort()\n \
    \   if l.count % 2 == 1 {\n        return l[(l.count - 1) / 2]\n    } else {\n\
    \        return (l[(l.count - 1) / 2] - l[(l.count - 1) / 2 - 1]) / 2.0\n    }",
  "    var l = l.sorted()\n    if l.count % 2 == 0 {\n        return Double(l[l.count\
    \ / 2 - 1] + l[l.count / 2]) / 2.0\n    }\n    return Double(l[l.count / 2 - 1]\
    \ + l[l.count / 2 - 1]) / 2.0", "    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return Double(l.count / 2)\n    }\n    return l[0]", '    return
    l.sorted().reduce(0.0, { $0 + Double($1) })', "    var l = l.sorted()\n    if\
    \ l.count % 2 == 0 {\n        return Double(l[l.count / 2 - 1] + l[l.count / 2])\
    \ / 2\n    }\n    return Double(l[l.count / 2])", "    var l = l\n    l.sort()\n\
    \    return l[(l.count - 1) / 2]", "    var l = l\n    l.sort()\n    if l.count\
    \ > 1 {\n        return Double(l.count / 2)\n    }\n    return Double(l.first!)",
  "    var l = l.sorted()\n    if l.count < 2 {\n        return l[0]\n    }\n    var\
    \ mid = l.count / 2\n    if l[mid] > l[mid - 1] {\n        return median(l[mid..<l.count])\n\
    \    } else {\n        return median(l[mid..<l.count - 1])\n    }", '    return
    l.sorted().reduce(0.0, { $0 + Double($1) })', "    var n = l.count\n    if n <\
    \ 1 {\n        return Double(0)\n    }\n    var m = Double(0)\n    for x in l\
    \ {\n        m = (m + x) / 2\n    }\n    return m", "    let n = l.count\n   \
    \ if n < 1 {\n        return Double.nan\n    }\n    let mid = n / 2\n    let left\
    \ = l[..<mid]\n    let right = l[mid..<n]\n    let midVal = median(left)\n   \
    \ let leftVal = median(right)\n    if midVal < leftVal {\n        return midVal\n\
    \    } else {\n        return leftVal\n    }", "    let n = l.count\n    let mid\
    \ = n / 2\n    if n % 2 == 0 {\n        return l[mid]\n    } else {\n        return\
    \ (l[mid] + l[mid-1]) / 2\n    }"]
stop_tokens:
- "\n}"
