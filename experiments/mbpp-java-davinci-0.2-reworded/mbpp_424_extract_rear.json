{
  "name": "mbpp_424_extract_rear",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to extract only the rear index element of each string in the given pair.\n    public static ArrayList<String> extractRear(String test_tuple) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(extractRear(Pair.with(\"Mers\", \"for\", \"Vers\")).equals((new ArrayList<String>(Arrays.asList((String)\"s\", (String)\"r\", (String)\"s\")))));\n    assert(extractRear(Pair.with(\"Avenge\", \"for\", \"People\")).equals((new ArrayList<String>(Arrays.asList((String)\"e\", (String)\"r\", (String)\"e\")))));\n    assert(extractRear(Pair.with(\"Gotta\", \"get\", \"go\")).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"t\", (String)\"o\")))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] parts = test_tuple.split(\"\\\\)\");\n        for (int i = 0; i < parts.length; i++) {\n            String[] subparts = parts[i].split(\"\\\\(\");\n            if (subparts.length > 1) {\n                String[] subsubparts = subparts[1].split(\",\");\n                result.add(subsubparts[subsubparts.length - 1]);\n            }\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] tokens = test_tuple.split(\",\");\n        for (String token : tokens) {\n            result.add(token.substring(token.length() - 1));\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] test_tuple_split = test_tuple.split(\"\\\\)\\\\(\");\n        for (int i = 0; i < test_tuple_split.length; i++) {\n            String[] test_tuple_split_split = test_tuple_split[i].split(\",\");\n            result.add(test_tuple_split_split[test_tuple_split_split.length - 1]);\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] test_tuple_split = test_tuple.split(\"\\\\(\");\n        String[] test_tuple_split_2 = test_tuple_split[1].split(\"\\\\)\");\n        String[] test_tuple_split_3 = test_tuple_split_2[0].split(\",\");\n        for (int i = 0; i < test_tuple_split_3.length; i++) {\n            String[] test_tuple_split_4 = test_tuple_split_3[i].split(\"\\\\.\");\n            result.add(test_tuple_split_4[test_tuple_split_4.length - 1]);\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] split_tuple = test_tuple.split(\"\\\\)\");\n        for (String s : split_tuple) {\n            String[] split_string = s.split(\",\");\n            result.add(split_string[split_string.length - 1]);\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] arr = test_tuple.split(\"\\\\)\\\\(\");\n        for (int i = 0; i < arr.length; i++) {\n            String[] arr2 = arr[i].split(\",\");\n            result.add(arr2[arr2.length - 1]);\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] test_tuple_arr = test_tuple.split(\"\\\\s*,\\\\s*\");\n        for (String str : test_tuple_arr) {\n            String[] str_arr = str.split(\"\\\\s*\\\\|\\\\s*\");\n            result.add(str_arr[str_arr.length - 1]);\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] test_tuple_split = test_tuple.split(\"\\\\s*,\\\\s*\");\n        for (String s : test_tuple_split) {\n            String[] s_split = s.split(\"\\\\s*\\\\|\\\\s*\");\n            result.add(s_split[s_split.length - 1]);\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] test_tuple_split = test_tuple.split(\",\");\n        for (int i = 0; i < test_tuple_split.length; i++) {\n            String[] test_tuple_split_split = test_tuple_split[i].split(\" \");\n            result.add(test_tuple_split_split[test_tuple_split_split.length - 1]);\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] test_tuple_split = test_tuple.split(\"\\\\(\");\n        String[] test_tuple_split_2 = test_tuple_split[1].split(\"\\\\)\");\n        String[] test_tuple_split_3 = test_tuple_split_2[0].split(\",\");\n        for (int i = 0; i < test_tuple_split_3.length; i++) {\n            String[] test_tuple_split_4 = test_tuple_split_3[i].split(\"\\\"\");\n            result.add(test_tuple_split_4[1]);\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] split_tuple = test_tuple.split(\"\\\\),\\\\(\");\n        for (int i = 0; i < split_tuple.length; i++) {\n            String[] split_string = split_tuple[i].split(\",\");\n            result.add(split_string[split_string.length - 1]);\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] split_tuple = test_tuple.split(\"\\\\)\\\\(\");\n        for (int i = 0; i < split_tuple.length; i++) {\n            String[] split_string = split_tuple[i].split(\",\");\n            result.add(split_string[split_string.length - 1]);\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<>();\n        String[] split = test_tuple.split(\"\\\\)\");\n        for (int i = 0; i < split.length; i++) {\n            String[] split2 = split[i].split(\",\");\n            result.add(split2[split2.length - 1]);\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] split_tuple = test_tuple.split(\",\");\n        for (String s : split_tuple) {\n            String[] split_string = s.split(\" \");\n            result.add(split_string[split_string.length - 1]);\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] split_tuple = test_tuple.split(\",\");\n        for (String s : split_tuple) {\n            result.add(s.substring(s.length() - 1));\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] split_tuple = test_tuple.split(\"\\\\)\\\\(\");\n        for (String s : split_tuple) {\n            String[] split_string = s.split(\",\");\n            result.add(split_string[split_string.length - 1]);\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] split_tuple = test_tuple.split(\"\\\\)\");\n        for (int i = 0; i < split_tuple.length; i++) {\n            String[] split_string = split_tuple[i].split(\"\\\\(\");\n            if (split_string.length > 1) {\n                result.add(split_string[1]);\n            }\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] split_tuple = test_tuple.split(\"\\\\)\");\n        for (String s : split_tuple) {\n            String[] split_string = s.split(\",\");\n            result.add(split_string[split_string.length - 1]);\n        }\n        return result;",
    "        ArrayList<String> result = new ArrayList<String>();\n        String[] pairs = test_tuple.split(\" \");\n        for (String pair : pairs) {\n            String[] elements = pair.split(\",\");\n            result.add(elements[1]);\n        }\n        return result;",
    "        String[] test_tuple_arr = test_tuple.split(\"\\\\)\");\n        ArrayList<String> result = new ArrayList<String>();\n        for (int i = 0; i < test_tuple_arr.length; i++) {\n            String[] temp = test_tuple_arr[i].split(\",\");\n            result.add(temp[temp.length - 1]);\n        }\n        return result;"
  ]
}