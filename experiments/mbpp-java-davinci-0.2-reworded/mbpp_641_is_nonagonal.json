{
  "name": "mbpp_641_is_nonagonal",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the nth nonagonal number.\n    public static long isNonagonal(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(isNonagonal((10l)) == (325l));\n    assert(isNonagonal((15l)) == (750l));\n    assert(isNonagonal((18l)) == (1089l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return (n * (3 * n - 2)) / 2;",
    "        return n * (3 * n - 2);",
    "        long x = (long) Math.sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return x;\n        }\n        return -1;",
    "        return n * (3 * n - 2);",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 2)) / 2;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        long x = (long) Math.sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n) {\n            return (x - 1) / 2;\n        }\n        return -1;",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        return n * (3 * n - 2);",
    "        long x = (long) Math.sqrt(2 * n);\n        if (x * (x + 1) == 2 * n) {\n            return x;\n        }\n        return -1;",
    "        return n * (3 * n - 2);",
    "        return (n * (3 * n - 2)) / 2;",
    "        return (n * (3 * n - 2)) / 2;"
  ]
}