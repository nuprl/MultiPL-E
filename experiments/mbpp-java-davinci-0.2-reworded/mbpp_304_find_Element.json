{
  "name": "mbpp_304_find_Element",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to find element at a given index after number of rotations.\n    public static long findElement(ArrayList<Long> arr, ArrayList<ArrayList<Long>> ranges, long rotations, long index) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(findElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))), (new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)3l))))), (2l), (1l)) == (3l));\n    assert(findElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)2l))))), (1l), (2l)) == (3l));\n    assert(findElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)2l))))), (1l), (1l)) == (1l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = n - 1;\n        for (ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long r = range.get(1);\n            if (l <= index && index <= r) {\n                start = l;\n                end = r;\n            }\n        }\n        long newIndex = (index - start + mod) % n;\n        return arr.get((int) newIndex);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = index - mod;\n        if (start < 0) {\n            start = n + start;\n        }\n        long end = start + n;\n        for (ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long r = range.get(1);\n            long k = range.get(2);\n            if (l <= start && end <= r) {\n                start = (start + k) % n;\n                end = (end + k) % n;\n            }\n        }\n        return arr.get((int) start);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = n - 1;\n        long mid = 0;\n        long pivot = 0;\n        while (start <= end) {\n            mid = start + (end - start) / 2;\n            if (mid == 0 || arr.get((int)mid) < arr.get((int)(mid - 1))) {\n                pivot = mid;\n                break;\n            } else if (arr.get((int)mid) > arr.get(0)) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n        long realMid = (pivot + mod) % n;\n        long realIndex = (index + mod) % n;\n        if (realIndex < realMid) {\n            return arr.get((int)realIndex);\n        } else {\n            return arr.get((int)(realIndex - realMid + pivot));\n        }",
    "        // Write your code here\n        long n = arr.size();\n        long m = ranges.size();\n        long[] range = new long[(int)m];\n        long[] range_index = new long[(int)m];\n        long[] range_size = new long[(int)m];\n        long[] range_start = new long[(int)m];\n        long[] range_end = new long[(int)m];\n        long[] range_rotation = new long[(int)m];\n        long[] range_rotation_index = new long[(int)m];\n        long[] range_rotation_size = new long[(int)m];\n        long[] range_rotation_start = new long[(int)m];\n        long[] range_rotation_end = new long[(int)m];\n        long[] range_rotation_rotation = new long[(int)m];\n        long[] range_rotation_rotation_index = new long[(int)m];\n        long[] range_rotation_rotation_size = new long[(int)m];\n        long[] range_rotation_rotation_start = new long[(int)m];\n        long[] range_rotation_rotation_end = new long[(int)m];\n        long[] range_rotation_rotation_rotation = new long[(int)m];\n        long[] range_rotation_rotation_rotation_index = new long[(int)m];\n        long[] range_rotation_rotation_rotation_size = new long[(int)m];\n        long[] range_rotation_rotation_rotation_start = new long[(int)m];\n        long[] range_rotation_rotation_rotation_end = new long[(int)m];\n        long[] range_rotation_rotation_rotation_rotation = new long[(int)m];\n        long[] range_rotation_rotation_rotation_rotation_index = new long[(int)m];\n        long[] range_rotation_rotation_rotation_rotation_size = new long[(int)m];\n        long",
    "        // Write your code here\n        long size = arr.size();\n        long mod = rotations % size;\n        long start = index - mod;\n        if (start < 0) {\n            start = start + size;\n        }\n        long end = start + size - 1;\n        for (ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long r = range.get(1);\n            if (l <= start && r >= start) {\n                start = start + (r - l + 1);\n            }\n            if (l <= end && r >= end) {\n                end = end - (r - l + 1);\n            }\n        }\n        return arr.get((int) (start % size));",
    "        long size = arr.size();\n        long mod = rotations % size;\n        for (ArrayList<Long> range : ranges) {\n            long start = range.get(0);\n            long end = range.get(1);\n            long length = end - start + 1;\n            long mod2 = mod % length;\n            if (index >= start && index <= end) {\n                if (index + mod2 <= end) {\n                    index += mod2;\n                } else {\n                    index = start + (mod2 - (end - index) - 1);\n                }\n            }\n        }\n        return arr.get((int) ((index + mod) % size));",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = mod;\n        long end = mod + n;\n        long ans = 0;\n        for(int i = 0; i < ranges.size(); i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            if(l <= start && r >= end) {\n                ans = (ans + (r - l + 1) * arr.get((int)index)) % 1000000007;\n            }\n            else if(l <= start && r >= start) {\n                ans = (ans + (r - start + 1) * arr.get((int)index)) % 1000000007;\n            }\n            else if(l <= end && r >= end) {\n                ans = (ans + (end - l) * arr.get((int)index)) % 1000000007;\n            }\n            else if(l >= start && r <= end) {\n                ans = (ans + (r - l + 1) * arr.get((int)index)) % 1000000007;\n            }\n        }\n        return ans;",
    "        // Write your code here\n        long n = arr.size();\n        long[] prefixSum = new long[(int)n];\n        prefixSum[0] = arr.get(0);\n        for(int i = 1; i < n; i++) {\n            prefixSum[i] = prefixSum[i-1] + arr.get(i);\n        }\n        long sum = 0;\n        for(int i = 0; i < ranges.size(); i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            sum += prefixSum[(int)r] - prefixSum[(int)l] + arr.get(l);\n        }\n        long ans = (rotations * sum) % n;\n        long finalIndex = (index + ans) % n;\n        return arr.get((int)finalIndex);",
    "        // Write your code here\n        long n = arr.size();\n        long m = ranges.size();\n        long[] count = new long[(int)n];\n        for(int i=0;i<m;i++){\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            count[(int)l]++;\n            if(r+1<n)\n                count[(int)r+1]--;\n        }\n        for(int i=1;i<n;i++)\n            count[i]+=count[i-1];\n        long[] temp = new long[(int)n];\n        for(int i=0;i<n;i++)\n            temp[i] = arr.get(i);\n        for(int i=0;i<n;i++){\n            long new_index = (i+count[i])%n;\n            arr.set(new_index,temp[i]);\n        }\n        return arr.get((int)((index+rotations)%n));",
    "        for (ArrayList<Long> range : ranges) {\n            long start = range.get(0);\n            long end = range.get(1);\n            long temp = arr.get((int)start);\n            for (long i = start; i < end; i++) {\n                arr.set((int)i, arr.get((int)(i + 1)));\n            }\n            arr.set((int)end, temp);\n        }\n        return arr.get((int)((index + rotations) % arr.size()));",
    "        // Write your code here\n        // Return the element at index after rotations\n        long size = arr.size();\n        long newIndex = (index + rotations) % size;\n        for (ArrayList<Long> range : ranges) {\n            long start = range.get(0);\n            long end = range.get(1);\n            if (newIndex >= start && newIndex <= end) {\n                newIndex = (newIndex - start + end) % size;\n            }\n        }\n        return arr.get((int) newIndex);",
    "        // Write your code here\n        long n = arr.size();\n        long m = ranges.size();\n        long[] left = new long[m];\n        long[] right = new long[m];\n        for (int i = 0; i < m; i++) {\n            left[i] = ranges.get(i).get(0);\n            right[i] = ranges.get(i).get(1);\n        }\n        long[] new_left = new long[m];\n        long[] new_right = new long[m];\n        for (int i = 0; i < m; i++) {\n            new_left[i] = (left[i] + rotations) % n;\n            new_right[i] = (right[i] + rotations) % n;\n        }\n        long[] new_arr = new long[n];\n        for (int i = 0; i < m; i++) {\n            if (new_left[i] <= new_right[i]) {\n                for (int j = (int) new_left[i]; j <= new_right[i]; j++) {\n                    new_arr[j] = arr.get(i);\n                }\n            } else {\n                for (int j = (int) new_left[i]; j < n; j++) {\n                    new_arr[j] = arr.get(i);\n                }\n                for (int j = 0; j <= new_right[i]; j++) {\n                    new_arr[j] = arr.get(i);\n                }\n            }\n        }\n        return new_arr[(int) index];",
    "        // Write your code here\n        long n = arr.size();\n        long[] prefixSum = new long[(int)n];\n        prefixSum[0] = arr.get(0);\n        for(int i = 1; i < n; i++) {\n            prefixSum[i] = prefixSum[i - 1] + arr.get(i);\n        }\n        long totalSum = prefixSum[(int)n - 1];\n        long totalRotation = 0;\n        for(int i = 0; i < ranges.size(); i++) {\n            long start = ranges.get(i).get(0);\n            long end = ranges.get(i).get(1);\n            long sum = prefixSum[(int)end] - prefixSum[(int)start] + arr.get((int)start);\n            totalRotation += sum;\n        }\n        totalRotation = totalRotation % totalSum;\n        long rotation = rotations % totalSum;\n        totalRotation += rotation;\n        long ans = totalRotation % totalSum;\n        long result = ans % n;\n        return arr.get((int)result);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = 0;\n        for(ArrayList<Long> range : ranges) {\n            start = range.get(0);\n            end = range.get(1);\n            if(index >= start && index <= end) {\n                break;\n            }\n        }\n        long diff = end - start + 1;\n        long rot = mod % diff;\n        long newIndex = (index - start + rot) % diff;\n        return arr.get((int)(start + newIndex));",
    "        // Write your code here\n        for(int i = 0; i < rotations; i++) {\n            for(int j = 0; j < ranges.size(); j++) {\n                long start = ranges.get(j).get(0);\n                long end = ranges.get(j).get(1);\n                long temp = arr.get((int)start);\n                for(int k = (int)start; k < end; k++) {\n                    arr.set(k, arr.get(k+1));\n                }\n                arr.set((int)end, temp);\n            }\n        }\n        return arr.get((int)index);",
    "        // Write your code here\n        long n = arr.size();\n        long m = ranges.size();\n        long[] prefixSum = new long[(int)n];\n        long[] suffixSum = new long[(int)n];\n        long[] sum = new long[(int)n];\n        for(int i=0;i<n;i++) {\n            sum[i] = arr.get(i);\n        }\n        for(int i=0;i<m;i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            prefixSum[(int)l] += 1;\n            suffixSum[(int)r] += 1;\n        }\n        for(int i=1;i<n;i++) {\n            prefixSum[i] += prefixSum[i-1];\n        }\n        for(int i=n-2;i>=0;i--) {\n            suffixSum[i] += suffixSum[i+1];\n        }\n        for(int i=0;i<n;i++) {\n            sum[i] = sum[i]*(prefixSum[i]+suffixSum[i]);\n        }\n        for(int i=1;i<n;i++) {\n            sum[i] += sum[i-1];\n        }\n        long ans = 0;\n        for(int i=0;i<n;i++) {\n            long l = (i+1)%n;\n            long r = (i+rotations)%n;\n            if(l>r) {\n                ans += sum[n-1] - sum[r] + sum[l-1];\n            } else {\n                ans += sum[r] - sum[l-1];\n            }\n        }\n        return ans;",
    "        // Write your code here\n        for(int i=0;i<ranges.size();i++){\n            ArrayList<Long> range = ranges.get(i);\n            long start = range.get(0);\n            long end = range.get(1);\n            long temp = arr.get((int)start);\n            for(int j=(int)start;j<end;j++){\n                arr.set(j,arr.get(j+1));\n            }\n            arr.set((int)end,temp);\n        }\n        return arr.get((int)index);",
    "        long len = arr.size();\n        long mod = rotations % len;\n        long start = index - mod;\n        if (start < 0) {\n            start = len + start;\n        }\n        for (ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long r = range.get(1);\n            if (l <= start && start <= r) {\n                long diff = start - l;\n                start = r - diff;\n            }\n        }\n        return arr.get((int)start);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = 0;\n        for (ArrayList<Long> range : ranges) {\n            start = range.get(0);\n            end = range.get(1);\n            long diff = end - start + 1;\n            long modDiff = mod % diff;\n            long newStart = start + modDiff;\n            long newEnd = end + modDiff;\n            if (newStart > n) {\n                newStart = newStart - n;\n            }\n            if (newEnd > n) {\n                newEnd = newEnd - n;\n            }\n            if (newStart <= index && index <= newEnd) {\n                if (newStart <= newEnd) {\n                    return arr.get((int) (index - newStart));\n                } else {\n                    if (index <= newEnd) {\n                        return arr.get((int) (index - newStart));\n                    } else {\n                        return arr.get((int) (index - newStart + n));\n                    }\n                }\n            }\n        }\n        return -1;",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = mod;\n        long end = mod + n;\n        long ans = -1;\n        for(int i = 0; i < ranges.size(); i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            if(l >= start && l < end) {\n                if(r >= start && r < end) {\n                    if(index >= l && index <= r) {\n                        ans = i;\n                        break;\n                    }\n                } else {\n                    if(index >= l && index < end) {\n                        ans = i;\n                        break;\n                    }\n                }\n            } else if(r >= start && r < end) {\n                if(index >= start && index <= r) {\n                    ans = i;\n                    break;\n                }\n            }\n        }\n        return ans;",
    "        // Write your code here\n        int n = arr.size();\n        int m = ranges.size();\n        int[] l = new int[m];\n        int[] r = new int[m];\n        for (int i = 0; i < m; i++) {\n            l[i] = ranges.get(i).get(0).intValue();\n            r[i] = ranges.get(i).get(1).intValue();\n        }\n        long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = arr.get(i);\n        }\n        long[] b = new long[n];\n        for (int i = 0; i < n; i++) {\n            b[i] = a[i];\n        }\n        for (int i = 0; i < m; i++) {\n            for (int j = l[i]; j <= r[i]; j++) {\n                b[j] = a[r[i] - j + l[i]];\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            a[i] = b[i];\n        }\n        for (int i = 0; i < rotations % n; i++) {\n            long temp = a[0];\n            for (int j = 0; j < n - 1; j++) {\n                a[j] = a[j + 1];\n            }\n            a[n - 1] = temp;\n        }\n        return a[(int) index];",
    "        // Write your code here\n        long n = arr.size();\n        long m = ranges.size();\n        long[] prefix = new long[(int)n];\n        long[] suffix = new long[(int)n];\n        long[] sum = new long[(int)n];\n        long[] sum_prefix = new long[(int)n];\n        long[] sum_suffix = new long[(int)n];\n        for(int i=0;i<n;i++){\n            prefix[i] = (i+1)*arr.get(i);\n            suffix[i] = (n-i)*arr.get(i);\n            sum[i] = arr.get(i);\n        }\n        for(int i=1;i<n;i++){\n            prefix[i] += prefix[i-1];\n            suffix[i] += suffix[i-1];\n            sum[i] += sum[i-1];\n        }\n        for(int i=0;i<m;i++){\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            long k = ranges.get(i).get(2);\n            sum_prefix[(int)l] += k;\n            sum_suffix[(int)r] += k;\n        }\n        for(int i=1;i<n;i++){\n            sum_prefix[i] += sum_prefix[i-1];\n            sum_suffix[i] += sum_suffix[i-1];\n        }\n        for(int i=0;i<n;i++){\n            prefix[i] += sum_prefix[i];\n            suffix[i] += sum_suffix[n-i-1];\n            sum[i] += sum_prefix[i];\n        }\n        long[] prefix_sum = new long[(int)n];\n        long[] suffix_sum = new long[(int)n];\n        long[] sum_sum = new long[(int)n];\n        for(int i=0;i<n;i++){\n            prefix_sum[i] = prefix[",
    "        // Write your code here\n        long n = arr.size();\n        long rotations_ = rotations % n;\n        long index_ = index - rotations_;\n        if (index_ < 0) {\n            index_ += n;\n        }\n        return arr.get((int)index_);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = mod;\n        long end = mod + n;\n        long count = 0;\n        for(int i = 0; i < ranges.size(); i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            if(l <= start && r >= start) {\n                count += start - l;\n            }\n            if(l <= end && r >= end) {\n                count += r - end;\n            }\n            if(l > start && r < end) {\n                count += r - l;\n            }\n        }\n        long newIndex = (index + count) % n;\n        return arr.get((int)newIndex);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = index - mod;\n        if (start < 0) {\n            start = n + start;\n        }\n        long end = start + n - 1;\n        long sum = 0;\n        for (ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long r = range.get(1);\n            if (l > end || r < start) {\n                continue;\n            }\n            if (l <= start && r >= end) {\n                sum += range.get(2);\n            } else {\n                long s = Math.max(l, start);\n                long e = Math.min(r, end);\n                sum += range.get(2) * (e - s + 1);\n            }\n        }\n        return arr.get((int) (start + sum) % n);",
    "        // Write your code here\n        long n = arr.size();\n        long r = rotations % n;\n        long i = index - r;\n        if (i < 0) {\n            i += n;\n        }\n        return arr.get((int) i);",
    "        // Write your code here\n        long n = arr.size();\n        long r = rotations % n;\n        long i = index % n;\n        long j = (i + r) % n;\n        return arr.get((int)j);",
    "        // Write your code here\n        long size = arr.size();\n        long mod = rotations % size;\n        long start = index - mod;\n        long end = index + (size - mod);\n        long ans = 0;\n        for (ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long r = range.get(1);\n            long x = range.get(2);\n            if (l <= start && end <= r) {\n                ans += x;\n            }\n        }\n        return arr.get((int) ((index + ans) % size));",
    "        // Write your code here\n        long n = arr.size();\n        long m = ranges.size();\n        long[] prefixSum = new long[(int)n];\n        prefixSum[0] = arr.get(0);\n        for(int i=1;i<n;i++) {\n            prefixSum[i] = prefixSum[i-1] + arr.get(i);\n        }\n        long[] rangeSum = new long[(int)m];\n        for(int i=0;i<m;i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            if(l == 0) {\n                rangeSum[i] = prefixSum[(int)r];\n            } else {\n                rangeSum[i] = prefixSum[(int)r] - prefixSum[(int)l-1];\n            }\n        }\n        long[] rangeSumPrefixSum = new long[(int)m];\n        rangeSumPrefixSum[0] = rangeSum[0];\n        for(int i=1;i<m;i++) {\n            rangeSumPrefixSum[i] = rangeSumPrefixSum[i-1] + rangeSum[i];\n        }\n        long sum = 0;\n        for(int i=0;i<m;i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            if(l == 0) {\n                sum += rangeSumPrefixSum[(int)r];\n            } else {\n                sum += rangeSumPrefixSum[(int)r] - rangeSumPrefixSum[(int)l-1];\n            }\n        }\n        long rotationsPerRange = sum/m;\n        long rotationsLeft = rotations%m;\n        long rotationsPerElement = rotationsPerRange/n;\n        long rotationsLeftPerElement = rotationsLeft/n;\n        long[] rotationsPerElementArray = new long[(int)n];\n        for(int i=0;i<n;i++) {\n            rotationsPerElementArray[",
    "        // Write your code here\n        long n = arr.size();\n        long m = ranges.size();\n        long[] range_start = new long[(int)m];\n        long[] range_end = new long[(int)m];\n        long[] range_rotations = new long[(int)m];\n        for(int i=0;i<m;i++) {\n            range_start[i] = ranges.get(i).get(0);\n            range_end[i] = ranges.get(i).get(1);\n            range_rotations[i] = ranges.get(i).get(2);\n        }\n        long[] range_rotations_cumulative = new long[(int)m];\n        range_rotations_cumulative[0] = range_rotations[0];\n        for(int i=1;i<m;i++) {\n            range_rotations_cumulative[i] = range_rotations_cumulative[i-1] + range_rotations[i];\n        }\n        long[] range_rotations_cumulative_mod = new long[(int)m];\n        for(int i=0;i<m;i++) {\n            range_rotations_cumulative_mod[i] = range_rotations_cumulative[i] % n;\n        }\n        long[] range_rotations_cumulative_mod_reverse = new long[(int)m];\n        for(int i=0;i<m;i++) {\n            range_rotations_cumulative_mod_reverse[i] = n - range_rotations_cumulative_mod[i];\n        }\n        long[] range_rotations_cumulative_mod_reverse_cumulative = new long[(int)m];\n        range_rotations_cumulative_mod_reverse_cumulative[0] = range_rotations_cumulative_mod_reverse[0];\n        for(int i=1;i<m;i++) {\n            range_rotations_cumulative_mod_reverse_cumulative[i] = range_rotations_cumulative_mod_reverse_cumulative[i-1] + range_rotations_cumulative_mod",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = n - 1;\n        long mid = 0;\n        while (start <= end) {\n            mid = (start + end) / 2;\n            if (mid == index) {\n                break;\n            }\n            if (index < mid) {\n                if (index >= mid - mod) {\n                    end = mid - 1;\n                } else {\n                    start = mid + 1;\n                }\n            } else {\n                if (index <= mid + mod) {\n                    start = mid + 1;\n                } else {\n                    end = mid - 1;\n                }\n            }\n        }\n        return arr.get((int) mid);",
    "        // Write your code here\n        for (ArrayList<Long> range : ranges) {\n            long start = range.get(0);\n            long end = range.get(1);\n            long diff = end - start + 1;\n            long rotations_ = rotations % diff;\n            if (rotations_ > 0) {\n                Collections.rotate(arr.subList((int) start, (int) end + 1), (int) -rotations_);\n            }\n        }\n        return arr.get((int) index);",
    "        // Write your code here\n        long n = arr.size();\n        long k = rotations % n;\n        long start = (n - k) % n;\n        long end = (n - k - 1) % n;\n        long i = index;\n        while (i < start || i > end) {\n            i = (i + 1) % n;\n        }\n        return arr.get((int) i);",
    "        // Write your code here\n        long n = arr.size();\n        long[] arr1 = new long[arr.size()];\n        for(int i=0;i<arr.size();i++){\n            arr1[i] = arr.get(i);\n        }\n        for(int i=0;i<ranges.size();i++){\n            long start = ranges.get(i).get(0);\n            long end = ranges.get(i).get(1);\n            long k = ranges.get(i).get(2);\n            for(int j=0;j<k;j++){\n                long temp = arr1[(int)end];\n                for(int l=end;l>start;l--){\n                    arr1[l] = arr1[l-1];\n                }\n                arr1[(int)start] = temp;\n            }\n        }\n        return arr1[(int)((index+rotations)%n)];",
    "        // Write your code here\n        // Return the element at index after rotations\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = 0;\n        for(int i = 0; i < ranges.size(); i++) {\n            start = ranges.get(i).get(0);\n            end = ranges.get(i).get(1);\n            if(index >= start && index <= end) {\n                if(index + mod <= end) {\n                    return arr.get((int)(index + mod));\n                } else {\n                    return arr.get((int)(index + mod - n));\n                }\n            }\n        }\n        return arr.get((int)(index + mod));",
    "        // Write your code here\n        long n = arr.size();\n        long[] prefixSum = new long[(int)n];\n        prefixSum[0] = arr.get(0);\n        for(int i=1;i<n;i++) {\n            prefixSum[i] = prefixSum[i-1] + arr.get(i);\n        }\n        long sum = 0;\n        for(int i=0;i<ranges.size();i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            sum += prefixSum[(int)r] - prefixSum[(int)l] + arr.get(l);\n        }\n        long rot = rotations % sum;\n        long i = 0;\n        while(rot > 0) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            long currSum = prefixSum[(int)r] - prefixSum[(int)l] + arr.get(l);\n            if(rot >= currSum) {\n                rot -= currSum;\n                i++;\n            } else {\n                break;\n            }\n        }\n        long l = ranges.get(i).get(0);\n        long r = ranges.get(i).get(1);\n        long currSum = prefixSum[(int)r] - prefixSum[(int)l] + arr.get(l);\n        long diff = rot % currSum;\n        long ans = (l + diff) % n;\n        return arr.get((int)ans);",
    "        // Write your code here\n        // Return the element at index after rotations\n        long n = arr.size();\n        long r = rotations % n;\n        long i = index - r;\n        if (i < 0) {\n            i += n;\n        }\n        return arr.get((int) i);",
    "        // Write your code here\n        long mod = rotations % arr.size();\n        long newIndex = (index + mod) % arr.size();\n        for (ArrayList<Long> range : ranges) {\n            if (newIndex >= range.get(0) && newIndex <= range.get(1)) {\n                newIndex = (newIndex + range.get(2)) % arr.size();\n            }\n        }\n        return arr.get((int) newIndex);",
    "        long n = arr.size();\n        long m = ranges.size();\n        long[] prefixSum = new long[(int)n];\n        prefixSum[0] = arr.get(0);\n        for (int i = 1; i < n; i++) {\n            prefixSum[i] = prefixSum[i - 1] + arr.get(i);\n        }\n        long[] rangeSum = new long[(int)m];\n        for (int i = 0; i < m; i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            if (l == 0) {\n                rangeSum[i] = prefixSum[(int)r];\n            } else {\n                rangeSum[i] = prefixSum[(int)r] - prefixSum[(int)l - 1];\n            }\n        }\n        long[] rangeSumPrefixSum = new long[(int)m];\n        rangeSumPrefixSum[0] = rangeSum[0];\n        for (int i = 1; i < m; i++) {\n            rangeSumPrefixSum[i] = rangeSumPrefixSum[i - 1] + rangeSum[i];\n        }\n        long[] rangeSumPrefixSumPrefixSum = new long[(int)m];\n        rangeSumPrefixSumPrefixSum[0] = rangeSumPrefixSum[0];\n        for (int i = 1; i < m; i++) {\n            rangeSumPrefixSumPrefixSum[i] = rangeSumPrefixSumPrefixSum[i - 1] + rangeSumPrefixSum[i];\n        }\n        long[] rangeSumPrefixSumPrefixSumPrefixSum = new long[(int)m];\n        rangeSumPrefixSumPrefixSumPrefixSum[0] = rangeSumPrefixSumPrefixSum[0];\n        for (int i = 1; i < m; i++) {\n            rangeSumPrefixSumPrefixSumPrefixSum[i] = rangeSumPrefixSumPrefixSumPrefixSum[i - 1] + rangeSumPrefixSumPrefixSum[i];\n        }\n        long[] rangeSum",
    "        // Write your code here\n        for (int i = 0; i < rotations; i++) {\n            for (int j = 0; j < ranges.size(); j++) {\n                long start = ranges.get(j).get(0);\n                long end = ranges.get(j).get(1);\n                long temp = arr.get((int) start);\n                for (long k = start; k < end; k++) {\n                    arr.set((int) k, arr.get((int) (k + 1)));\n                }\n                arr.set((int) end, temp);\n            }\n        }\n        return arr.get((int) index);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = n - mod;\n        long end = n - 1;\n        long start1 = 0;\n        long end1 = mod - 1;\n        for (ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long r = range.get(1);\n            if (l >= start && r <= end) {\n                long diff = r - l + 1;\n                start += diff;\n                end += diff;\n            } else if (l <= end && r >= end) {\n                long diff = end - l + 1;\n                start += diff;\n                end += diff;\n            } else if (l <= end1 && r >= end1) {\n                long diff = end1 - l + 1;\n                start1 += diff;\n                end1 += diff;\n            } else if (l >= start1 && r <= end1) {\n                long diff = r - l + 1;\n                start1 += diff;\n                end1 += diff;\n            }\n        }\n        if (index >= start && index <= end) {\n            return arr.get((int) (index - start));\n        } else if (index >= start1 && index <= end1) {\n            return arr.get((int) (index - start1));\n        } else {\n            return arr.get((int) index);\n        }",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = n - 1;\n        long mid = 0;\n        while (start <= end) {\n            mid = (start + end) / 2;\n            if (mid == index) {\n                break;\n            }\n            if (mid < index) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n        long diff = mid - index;\n        if (diff < 0) {\n            diff = diff + n;\n        }\n        long newIndex = (n - diff + mod) % n;\n        return arr.get((int) newIndex);",
    "        for (int i = 0; i < rotations; i++) {\n            ArrayList<Long> range = ranges.get(i);\n            long start = range.get(0);\n            long end = range.get(1);\n            long temp = arr.get((int) start);\n            for (int j = (int) start; j < end; j++) {\n                arr.set(j, arr.get(j + 1));\n            }\n            arr.set((int) end, temp);\n        }\n        return arr.get((int) index);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = n - 1;\n        long mid = 0;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n        long l = 0;\n        long m = 0;\n        long temp = 0;\n        long count = 0;\n        long sum = 0;\n        long ans = 0;\n        for (i = 0; i < ranges.size(); i++) {\n            start = ranges.get((int) i).get(0);\n            end = ranges.get((int) i).get(1);\n            mid = (start + end) / 2;\n            if (start <= mid) {\n                for (j = start; j <= mid; j++) {\n                    arr.set((int) (j + mod) % (int) n, arr.get((int) j));\n                }\n            }\n            if (mid + 1 <= end) {\n                for (k = mid + 1; k <= end; k++) {\n                    arr.set((int) (k + mod) % (int) n, arr.get((int) k));\n                }\n            }\n        }\n        return arr.get((int) index);",
    "        // Write your code here\n        long n = arr.size();\n        long m = ranges.size();\n        long[] arr1 = new long[(int)n];\n        for(int i=0;i<n;i++){\n            arr1[i] = arr.get(i);\n        }\n        long[] arr2 = new long[(int)n];\n        for(int i=0;i<n;i++){\n            arr2[i] = arr.get(i);\n        }\n        for(int i=0;i<m;i++){\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            for(int j=0;j<n;j++){\n                if(j>=l-1 && j<=r-1){\n                    arr1[j] = arr1[j]^1;\n                }\n            }\n        }\n        for(int i=0;i<n;i++){\n            if(arr1[i]==1){\n                arr2[i] = arr2[i]^1;\n            }\n        }\n        long[] arr3 = new long[(int)n];\n        for(int i=0;i<n;i++){\n            arr3[i] = arr2[i];\n        }\n        for(int i=0;i<n;i++){\n            if(arr2[i]==1){\n                if(i==0){\n                    arr3[i] = arr2[i+1];\n                    arr3[i+1] = arr2[i];\n                }\n                else if(i==n-1){\n                    arr3[i] = arr2[i-1];\n                    arr3[i-1] = arr2[i];\n                }\n                else{\n                    arr3[i] = arr2[i-1];\n                    arr3[i-1] = arr2[i];\n                }\n            }\n        }\n        long[] arr4 = new long[(int)n];\n        for(int i=0;i<n;i++){\n           ",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = mod;\n        long end = n - mod;\n        long ans = 0;\n        if (index >= start && index < end) {\n            ans = arr.get((int) index - (int) mod);\n        } else {\n            ans = arr.get((int) index + (int) mod);\n        }\n        for (ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long r = range.get(1);\n            long x = range.get(2);\n            if (index >= l && index <= r) {\n                ans += x;\n            }\n        }\n        return ans;",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = mod;\n        long end = n - mod;\n        if (index < start) {\n            return arr.get((int) (index + end));\n        } else {\n            return arr.get((int) (index - start));\n        }",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        for (ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long r = range.get(1);\n            long k = range.get(2);\n            if (l <= index && index <= r) {\n                index = (index + k) % n;\n            }\n        }\n        index = (index + mod) % n;\n        return arr.get((int) index);",
    "        // Write your code here\n        int n = arr.size();\n        int m = ranges.size();\n        long[] prefix = new long[n];\n        long[] suffix = new long[n];\n        for(int i=0;i<m;i++) {\n            int l = ranges.get(i).get(0).intValue();\n            int r = ranges.get(i).get(1).intValue();\n            prefix[l]++;\n            if(r+1<n)\n                suffix[r+1]++;\n        }\n        for(int i=1;i<n;i++) {\n            prefix[i] += prefix[i-1];\n        }\n        for(int i=n-2;i>=0;i--) {\n            suffix[i] += suffix[i+1];\n        }\n        for(int i=0;i<n;i++) {\n            prefix[i] += suffix[i];\n        }\n        for(int i=0;i<n;i++) {\n            prefix[i] = prefix[i]%n;\n        }\n        for(int i=0;i<n;i++) {\n            arr.set(i, arr.get(i) + prefix[i]);\n        }\n        for(int i=0;i<n;i++) {\n            arr.set(i, arr.get(i)%n);\n        }\n        return arr.get((int)((index + rotations)%n));",
    "        // Write your code here\n        long[] arr1 = new long[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            arr1[i] = arr.get(i);\n        }\n        for (int i = 0; i < ranges.size(); i++) {\n            long[] arr2 = new long[ranges.get(i).size()];\n            for (int j = 0; j < ranges.get(i).size(); j++) {\n                arr2[j] = ranges.get(i).get(j);\n            }\n            rotate(arr1, arr2[0], arr2[1]);\n        }\n        return arr1[(int) index];",
    "        // Write your code here\n        for(ArrayList<Long> range : ranges) {\n            long start = range.get(0);\n            long end = range.get(1);\n            long diff = end - start + 1;\n            long rotationsInRange = rotations % diff;\n            long startIndex = start - 1;\n            long endIndex = end - 1;\n            long indexInRange = index - startIndex;\n            long newIndex = (indexInRange + rotationsInRange) % diff;\n            index = startIndex + newIndex;\n        }\n        return arr.get((int)index);",
    "        // Write your code here\n        for(int i = 0; i < rotations; i++) {\n            for(int j = 0; j < ranges.size(); j++) {\n                ArrayList<Long> range = ranges.get(j);\n                long start = range.get(0);\n                long end = range.get(1);\n                long temp = arr.get((int)start);\n                for(int k = (int)start; k < end; k++) {\n                    arr.set(k, arr.get(k+1));\n                }\n                arr.set((int)end, temp);\n            }\n        }\n        return arr.get((int)index);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = mod;\n        long end = n - mod;\n        if (index >= start && index < end) {\n            return arr.get((int) index);\n        } else if (index < start) {\n            return arr.get((int) (index + end));\n        } else {\n            return arr.get((int) (index - end));\n        }",
    "        // Write your code here\n        long size = arr.size();\n        long mod = rotations % size;\n        long newIndex = (index + mod) % size;\n        return arr.get((int)newIndex);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long newIndex = (index + mod) % n;\n        return arr.get((int) newIndex);",
    "        // Write your code here\n        long n = arr.size();\n        long rotations_ = rotations % n;\n        long index_ = index - rotations_;\n        if (index_ < 0) {\n            index_ += n;\n        }\n        return arr.get((int) index_);",
    "        // Write your code here\n        long n = arr.size();\n        long rotations_ = rotations % n;\n        long index_ = index - rotations_;\n        if (index_ < 0) {\n            index_ = index_ + n;\n        }\n        return arr.get((int) index_);",
    "        // Write your code here\n        long n = arr.size();\n        long[] prefixSum = new long[(int)n];\n        prefixSum[0] = arr.get(0);\n        for(int i=1;i<n;i++){\n            prefixSum[i] = prefixSum[i-1] + arr.get(i);\n        }\n        long[] suffixSum = new long[(int)n];\n        suffixSum[(int)n-1] = arr.get((int)n-1);\n        for(int i=(int)n-2;i>=0;i--){\n            suffixSum[i] = suffixSum[i+1] + arr.get(i);\n        }\n        long[] prefixSumRanges = new long[(int)n];\n        for(int i=0;i<n;i++){\n            prefixSumRanges[i] = prefixSum[(int)ranges.get(i).get(1)] - prefixSum[(int)ranges.get(i).get(0)];\n        }\n        long[] suffixSumRanges = new long[(int)n];\n        for(int i=0;i<n;i++){\n            suffixSumRanges[i] = suffixSum[(int)ranges.get(i).get(0)] - suffixSum[(int)ranges.get(i).get(1)];\n        }\n        long[] prefixSumRangesRotations = new long[(int)n];\n        for(int i=0;i<n;i++){\n            prefixSumRangesRotations[i] = prefixSumRanges[(int)rotations.get(i).get(1)] - prefixSumRanges[(int)rotations.get(i).get(0)];\n        }\n        long[] suffixSumRangesRotations = new long[(int)n];\n        for(int i=0;i<n;i++){\n            suffixSumRangesRotations[i] = suffixSumRanges[(int)rotations.get(i).get(0)] - suffixSumRanges[(int)rotations.get(i).get(1)];\n",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = 0;\n        for(int i = 0; i < ranges.size(); i++) {\n            start = ranges.get(i).get(0);\n            end = ranges.get(i).get(1);\n            if(index >= start && index <= end) {\n                break;\n            }\n        }\n        long diff = end - start + 1;\n        long mod1 = mod % diff;\n        long mod2 = mod1 + start;\n        long mod3 = mod2 - 1;\n        long mod4 = mod3 % n;\n        long mod5 = mod4 + 1;\n        long mod6 = mod5 - 1;\n        long mod7 = mod6 % n;\n        long mod8 = mod7 + 1;\n        long mod9 = mod8 - 1;\n        long mod10 = mod9 % n;\n        long mod11 = mod10 + 1;\n        long mod12 = mod11 - 1;\n        long mod13 = mod12 % n;\n        long mod14 = mod13 + 1;\n        long mod15 = mod14 - 1;\n        long mod16 = mod15 % n;\n        long mod17 = mod16 + 1;\n        long mod18 = mod17 - 1;\n        long mod19 = mod18 % n;\n        long mod20 = mod19 + 1;\n        long mod21 = mod20 - 1;\n        long mod22 = mod21 % n;\n        long mod23 = mod22 + 1;\n        long mod24 = mod23 - 1;\n        long mod25 = mod24 % n;\n        long mod26 = mod25 + 1;\n        long mod27 = mod26 - 1;\n        long mod28 = mod27 % n;\n        long mod29 = mod28 + 1;\n        long mod30 = mod29 - 1;\n        long mod31 = mod30 % n;\n        long mod32 = mod31 + 1;\n        long mod33 = mod32 - 1;\n        long mod34 = mod33 % n;\n        long mod35 = mod34 + 1;\n        long mod36 = mod35",
    "        // Write your code here\n        int n = arr.size();\n        int m = ranges.size();\n        long[] arr2 = new long[n];\n        for(int i = 0; i < n; i++) {\n            arr2[i] = arr.get(i);\n        }\n        for(int i = 0; i < m; i++) {\n            int l = ranges.get(i).get(0).intValue();\n            int r = ranges.get(i).get(1).intValue();\n            long temp = arr2[l];\n            for(int j = l; j < r; j++) {\n                arr2[j] = arr2[j+1];\n            }\n            arr2[r] = temp;\n        }\n        int i = 0;\n        while(i < rotations) {\n            long temp = arr2[0];\n            for(int j = 0; j < n-1; j++) {\n                arr2[j] = arr2[j+1];\n            }\n            arr2[n-1] = temp;\n            i++;\n        }\n        return arr2[(int)index];",
    "        // Write your code here\n        long n = arr.size();\n        long m = ranges.size();\n        long[] count = new long[n];\n        for (int i = 0; i < m; i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            count[(int) l]++;\n            if (r + 1 < n)\n                count[(int) (r + 1)]--;\n        }\n        for (int i = 1; i < n; i++)\n            count[i] += count[i - 1];\n        for (int i = 0; i < n; i++)\n            count[i] = count[i] % 2;\n        long[] temp = new long[n];\n        for (int i = 0; i < n; i++) {\n            if (count[i] == 0)\n                temp[i] = arr.get(i);\n            else\n                temp[i] = arr.get((int) (n - i - 1));\n        }\n        long[] res = new long[n];\n        for (int i = 0; i < n; i++)\n            res[(int) ((i + rotations) % n)] = temp[i];\n        return res[(int) index];",
    "        // Write your code here\n        long n = arr.size();\n        long m = ranges.size();\n        long[] prefix = new long[(int)n];\n        long[] suffix = new long[(int)n];\n        prefix[0] = 0;\n        suffix[(int)n-1] = 0;\n        for(int i = 1; i < n; i++) {\n            prefix[i] = prefix[i-1] + arr.get(i-1);\n        }\n        for(int i = (int)n-2; i >= 0; i--) {\n            suffix[i] = suffix[i+1] + arr.get(i+1);\n        }\n        long[] sum = new long[(int)n];\n        for(int i = 0; i < n; i++) {\n            sum[i] = prefix[i] + suffix[i];\n        }\n        long[] dp = new long[(int)n];\n        for(int i = 0; i < n; i++) {\n            dp[i] = sum[i];\n        }\n        for(int i = 0; i < m; i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            long x = ranges.get(i).get(2);\n            dp[(int)l-1] += x;\n            if(r < n) {\n                dp[(int)r] -= x;\n            }\n        }\n        for(int i = 1; i < n; i++) {\n            dp[i] += dp[i-1];\n        }\n        long[] ans = new long[(int)n];\n        for(int i = 0; i < n; i++) {\n            ans[i] = arr.get(i) + dp[i];\n        }\n        long[] finalAns = new long[(int)n];\n        for(int i = 0; i < n; i++) {\n            finalAns[(int)((i + rotations) % n)] = ans[i];\n        }\n        return finalAn",
    "        long n = arr.size();\n        long m = ranges.size();\n        long[] rangeStart = new long[(int)m];\n        long[] rangeEnd = new long[(int)m];\n        long[] rangeRotations = new long[(int)m];\n        for (int i = 0; i < m; i++) {\n            rangeStart[i] = ranges.get(i).get(0);\n            rangeEnd[i] = ranges.get(i).get(1);\n            rangeRotations[i] = ranges.get(i).get(2);\n        }\n        long[] rangeStartIndex = new long[(int)m];\n        long[] rangeEndIndex = new long[(int)m];\n        for (int i = 0; i < m; i++) {\n            rangeStartIndex[i] = rangeStart[i] - 1;\n            rangeEndIndex[i] = rangeEnd[i] - 1;\n        }\n        long[] rangeStartIndexRotated = new long[(int)m];\n        long[] rangeEndIndexRotated = new long[(int)m];\n        for (int i = 0; i < m; i++) {\n            rangeStartIndexRotated[i] = (rangeStartIndex[i] + rangeRotations[i]) % n;\n            rangeEndIndexRotated[i] = (rangeEndIndex[i] + rangeRotations[i]) % n;\n        }\n        long[] rangeStartIndexRotatedSorted = new long[(int)m];\n        long[] rangeEndIndexRotatedSorted = new long[(int)m];\n        for (int i = 0; i < m; i++) {\n            rangeStartIndexRotatedSorted[i] = rangeStartIndexRotated[i];\n            rangeEndIndexRotatedSorted[i] = rangeEndIndexRotated[i];\n        }\n        Arrays.sort(rangeStartIndexRotatedSorted);\n        Arrays.sort(rangeEndIndexRotatedSorted);\n        long[] rangeStartIndexRotatedSortedUnique = new long[(int)m];\n        long[] rangeEndIndexRotatedSortedUnique = new long[(int)m];\n        rangeStartIndex",
    "        // Write your code here\n        long size = arr.size();\n        long mod = rotations % size;\n        long newIndex = (index + mod) % size;\n        long element = arr.get((int)newIndex);\n        for (ArrayList<Long> range : ranges) {\n            long start = range.get(0);\n            long end = range.get(1);\n            long sum = range.get(2);\n            if (newIndex >= start && newIndex <= end) {\n                element += sum;\n            }\n        }\n        return element;",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long ans = 0;\n        for (int i = 0; i < ranges.size(); i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            long count = r - l + 1;\n            long rot = mod % count;\n            long start = l + rot;\n            long end = r + rot;\n            if (end > n) {\n                end = end - n;\n                ans += arr.get((int) end);\n                end = n;\n            }\n            for (long j = start; j <= end; j++) {\n                ans += arr.get((int) j);\n            }\n        }\n        return ans;",
    "        // Write your code here\n        long mod = rotations % arr.size();\n        long newIndex = (index + mod) % arr.size();\n        return arr.get((int) newIndex);",
    "        // Write your code here\n        int n = arr.size();\n        int m = ranges.size();\n        int[] count = new int[n];\n        for(int i=0;i<m;i++){\n            int l = ranges.get(i).get(0).intValue();\n            int r = ranges.get(i).get(1).intValue();\n            count[l]++;\n            if(r+1<n)\n                count[r+1]--;\n        }\n        for(int i=1;i<n;i++)\n            count[i]+=count[i-1];\n        int[] ans = new int[n];\n        for(int i=0;i<n;i++){\n            ans[(i+count[i])%n] = arr.get(i).intValue();\n        }\n        return ans[(int)((index+rotations)%n)];",
    "        for (int i = 0; i < rotations; i++) {\n            ArrayList<Long> range = ranges.get(i);\n            long start = range.get(0);\n            long end = range.get(1);\n            long temp = arr.get(start);\n            for (int j = start; j < end; j++) {\n                arr.set(j, arr.get(j + 1));\n            }\n            arr.set(end, temp);\n        }\n        return arr.get(index);",
    "        // Write your code here\n        long mod = rotations % arr.size();\n        long start = index - mod;\n        if (start < 0) {\n            start = arr.size() + start;\n        }\n        for (ArrayList<Long> range : ranges) {\n            long startRange = range.get(0);\n            long endRange = range.get(1);\n            if (startRange <= start && start <= endRange) {\n                start = endRange - (startRange - start);\n            }\n        }\n        return arr.get((int) start);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = mod;\n        long end = mod - 1;\n        if (end < 0) {\n            end = n - 1;\n        }\n        for (int i = 0; i < ranges.size(); i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            if (l <= start && r >= start) {\n                start = start - l;\n            }\n            if (l <= end && r >= end) {\n                end = end - l;\n            }\n        }\n        if (index >= start && index <= end) {\n            return arr.get((int) (index - start));\n        }\n        return arr.get((int) index);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = index - mod;\n        if (start < 0) {\n            start = n + start;\n        }\n        return arr.get((int)start);",
    "        // Write your code here\n        long n = arr.size();\n        long m = ranges.size();\n        long[] prefix = new long[(int) m];\n        for (int i = 0; i < m; i++) {\n            prefix[i] = ranges.get(i).get(1) - ranges.get(i).get(0) + 1;\n        }\n        for (int i = 1; i < m; i++) {\n            prefix[i] += prefix[i - 1];\n        }\n        long ans = rotations % n;\n        long l = 0, r = m - 1;\n        while (l <= r) {\n            long mid = (l + r) / 2;\n            if (prefix[(int) mid] <= ans) {\n                l = mid + 1;\n            } else {\n                r = mid - 1;\n            }\n        }\n        long idx = ans - prefix[(int) r];\n        return arr.get((int) ((ranges.get((int) r).get(0) + idx) % n));",
    "        long size = arr.size();\n        long mod = rotations % size;\n        for (ArrayList<Long> range : ranges) {\n            long start = range.get(0);\n            long end = range.get(1);\n            long diff = end - start + 1;\n            long modStart = (start + mod) % size;\n            long modEnd = (end + mod) % size;\n            if (modStart <= index && index <= modEnd) {\n                long modIndex = (index + mod) % size;\n                return arr.get((int)modIndex);\n            }\n        }\n        return -1;",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = 0;\n        for (ArrayList<Long> range : ranges) {\n            start = range.get(0);\n            end = range.get(1);\n            if (start <= index && index <= end) {\n                break;\n            }\n        }\n        long len = end - start + 1;\n        long mod1 = mod % len;\n        long newIndex = (index - start + mod1) % len + start;\n        return arr.get((int) newIndex);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = mod;\n        long end = mod + n;\n        long element = -1;\n        for (ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long r = range.get(1);\n            if (l <= start && r >= start) {\n                element = arr.get((int) (start + index));\n                break;\n            } else if (l <= end && r >= end) {\n                element = arr.get((int) (end + index));\n                break;\n            } else if (l >= start && r <= end) {\n                element = arr.get((int) (l + index));\n                break;\n            }\n        }\n        return element;",
    "        // Write your code here\n        long size = arr.size();\n        long mod = rotations % size;\n        long ans = 0;\n        for (ArrayList<Long> range : ranges) {\n            long start = range.get(0);\n            long end = range.get(1);\n            long count = 0;\n            if (start <= end) {\n                count = end - start + 1;\n            } else {\n                count = size - start + end + 1;\n            }\n            long newStart = (start + mod) % size;\n            long newEnd = (end + mod) % size;\n            if (newStart <= newEnd) {\n                if (index >= newStart && index <= newEnd) {\n                    ans += count;\n                }\n            } else {\n                if (index >= newStart || index <= newEnd) {\n                    ans += count;\n                }\n            }\n        }\n        return ans;",
    "        // Write your code here\n        long size = arr.size();\n        long mod = rotations % size;\n        long newIndex = (index + mod) % size;\n        return arr.get((int)newIndex);",
    "        // Write your code here\n        // Return the element at index after rotations\n        long n = arr.size();\n        for (int i = 0; i < ranges.size(); i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            long d = ranges.get(i).get(2);\n            long k = rotations % (n * d);\n            for (int j = 0; j < k; j++) {\n                long temp = arr.get((int) l);\n                arr.set((int) l, arr.get((int) r));\n                arr.set((int) r, temp);\n                l = (l + 1) % n;\n                r = (r + 1) % n;\n            }\n        }\n        return arr.get((int) index);",
    "        // Write your code here\n        long n = arr.size();\n        long r = rotations % n;\n        long i = index % n;\n        long j = (i + r) % n;\n        return arr.get((int)j);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = n - 1;\n        long mid = 0;\n        long ans = 0;\n        while (start <= end) {\n            mid = (start + end) / 2;\n            if (mid == index) {\n                ans = mid;\n                break;\n            } else if (mid > index) {\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        long newIndex = (ans + mod) % n;\n        return arr.get((int) newIndex);",
    "        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = 0;\n        for (ArrayList<Long> range : ranges) {\n            start = range.get(0);\n            end = range.get(1);\n            if (start <= index && index <= end) {\n                break;\n            }\n        }\n        long diff = end - start + 1;\n        long rot = mod % diff;\n        long newIndex = (index + rot) % n;\n        return arr.get((int)newIndex);",
    "        // Write your code here\n        for (int i = 0; i < rotations; i++) {\n            ArrayList<Long> range = ranges.get(i);\n            long start = range.get(0);\n            long end = range.get(1);\n            ArrayList<Long> temp = new ArrayList<Long>();\n            for (long j = start; j <= end; j++) {\n                temp.add(arr.get((int) j));\n            }\n            for (long j = start; j <= end; j++) {\n                arr.set((int) j, temp.get((int) (temp.size() - 1)));\n                temp.remove(temp.size() - 1);\n            }\n        }\n        return arr.get((int) index);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = mod;\n        long end = mod + n;\n        long ans = 0;\n        for(ArrayList<Long> range: ranges) {\n            long l = range.get(0);\n            long r = range.get(1);\n            if(l >= start && r <= end) {\n                ans += (r - l + 1) * arr.get((int)(l - start));\n            } else if(l < start && r >= start && r <= end) {\n                ans += (r - start + 1) * arr.get((int)(l - start));\n            } else if(l >= start && l <= end && r > end) {\n                ans += (end - l + 1) * arr.get((int)(l - start));\n            } else if(l < start && r > end) {\n                ans += (end - start + 1) * arr.get((int)(l - start));\n            }\n        }\n        return ans;",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = 0;\n        long count = 0;\n        for (int i = 0; i < ranges.size(); i++) {\n            start = ranges.get(i).get(0);\n            end = ranges.get(i).get(1);\n            count += end - start + 1;\n        }\n        long newIndex = (index + mod) % count;\n        long currIndex = 0;\n        for (int i = 0; i < ranges.size(); i++) {\n            start = ranges.get(i).get(0);\n            end = ranges.get(i).get(1);\n            if (newIndex >= currIndex && newIndex < currIndex + end - start + 1) {\n                return arr.get((int) (start + (newIndex - currIndex)));\n            }\n            currIndex += end - start + 1;\n        }\n        return -1;",
    "        // Write your code here\n        long n = arr.size();\n        long rot = rotations % n;\n        long i = index - rot;\n        if (i < 0) {\n            i = n + i;\n        }\n        for (ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long r = range.get(1);\n            long x = range.get(2);\n            if (l <= i && i <= r) {\n                i = i + x;\n                if (i >= n) {\n                    i = i - n;\n                }\n            }\n        }\n        return arr.get((int) i);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        for (ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long r = range.get(1);\n            long d = range.get(2);\n            long start = (l + mod) % n;\n            long end = (r + mod) % n;\n            if (start <= end) {\n                for (long i = start; i <= end; i++) {\n                    arr.set((int) i, arr.get((int) i) + d);\n                }\n            } else {\n                for (long i = start; i < n; i++) {\n                    arr.set((int) i, arr.get((int) i) + d);\n                }\n                for (long i = 0; i <= end; i++) {\n                    arr.set((int) i, arr.get((int) i) + d);\n                }\n            }\n        }\n        return arr.get((int) (index + mod) % n);",
    "        // Write your code here\n        long size = arr.size();\n        long rot = rotations % size;\n        long start = 0;\n        long end = 0;\n        for (ArrayList<Long> range : ranges) {\n            start = range.get(0);\n            end = range.get(1);\n            if (start <= index && end >= index) {\n                break;\n            }\n        }\n        long diff = end - start + 1;\n        long rot1 = rot % diff;\n        long newIndex = (index + rot1) % size;\n        return arr.get((int) newIndex);",
    "        // Write your code here\n        long n = arr.size();\n        long r = rotations % n;\n        long i = index - r;\n        if (i < 0) {\n            i += n;\n        }\n        return arr.get((int) i);",
    "        // Write your code here\n        long size = arr.size();\n        long mod = rotations % size;\n        long start = 0;\n        long end = 0;\n        for (ArrayList<Long> range : ranges) {\n            start = range.get(0);\n            end = range.get(1);\n            if (start <= index && end >= index) {\n                break;\n            }\n        }\n        long diff = end - start + 1;\n        long newIndex = (index + mod) % size;\n        if (newIndex >= start && newIndex <= end) {\n            return arr.get((int) newIndex);\n        }\n        long newStart = (start + mod) % size;\n        long newEnd = (end + mod) % size;\n        if (newStart <= newEnd) {\n            return arr.get((int) newIndex);\n        }\n        if (newIndex >= newStart) {\n            return arr.get((int) newIndex);\n        }\n        if (newIndex <= newEnd) {\n            return arr.get((int) newIndex);\n        }\n        return -1;",
    "        // Write your code here\n        int n = arr.size();\n        int m = ranges.size();\n        long[] prefix = new long[n];\n        for (int i = 0; i < m; i++) {\n            int l = ranges.get(i).get(0).intValue();\n            int r = ranges.get(i).get(1).intValue();\n            prefix[l]++;\n            if (r + 1 < n) {\n                prefix[r + 1]--;\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            prefix[i] += prefix[i - 1];\n        }\n        for (int i = 0; i < n; i++) {\n            prefix[i] = prefix[i] % n;\n        }\n        for (int i = 1; i < n; i++) {\n            prefix[i] += prefix[i - 1];\n        }\n        long ans = 0;\n        for (int i = 0; i < n; i++) {\n            ans += arr.get(i) * prefix[i];\n        }\n        long total = rotations * ans;\n        long rem = total % n;\n        return arr.get((int) ((index + rem) % n));",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = 0;\n        for (ArrayList<Long> range : ranges) {\n            start = range.get(0);\n            end = range.get(1);\n            if (start <= index && index <= end) {\n                break;\n            }\n        }\n        long len = end - start + 1;\n        long diff = mod % len;\n        long newIndex = (index - start + diff) % len + start;\n        return arr.get((int) newIndex);",
    "        // Write your code here\n        long n = arr.size();\n        long m = ranges.size();\n        long[] prefix = new long[(int)n];\n        prefix[0] = 0;\n        for(int i=0;i<m;i++){\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            prefix[(int)l]++;\n            if(r+1<n)\n                prefix[(int)r+1]--;\n        }\n        for(int i=1;i<n;i++){\n            prefix[i] += prefix[i-1];\n        }\n        for(int i=0;i<n;i++){\n            prefix[i] = prefix[i]%n;\n        }\n        long[] prefix2 = new long[(int)n];\n        prefix2[0] = prefix[0];\n        for(int i=1;i<n;i++){\n            prefix2[i] = prefix2[i-1] + prefix[i];\n        }\n        long[] prefix3 = new long[(int)n];\n        for(int i=0;i<n;i++){\n            prefix3[i] = prefix2[i]%n;\n        }\n        long[] prefix4 = new long[(int)n];\n        prefix4[0] = prefix3[0];\n        for(int i=1;i<n;i++){\n            prefix4[i] = prefix4[i-1] + prefix3[i];\n        }\n        long[] prefix5 = new long[(int)n];\n        for(int i=0;i<n;i++){\n            prefix5[i] = prefix4[i]%n;\n        }\n        long[] prefix6 = new long[(int)n];\n        prefix6[0] = prefix5[0];\n        for(int i=1;i<n;i++){\n            prefix6[i] = prefix6[i-1] + prefix5[i];\n        }\n        long[] prefix7 = new long[(int)n];",
    "        // Write your code here\n        // Return the element at index after rotations\n        long n = arr.size();\n        long r = rotations % n;\n        long i = index % n;\n        long j = (i + r) % n;\n        long k = (i + n - r) % n;\n        long l = (i + n) % n;\n        long m = (i + n + r) % n;\n        long o = (i + 2 * n - r) % n;\n        long p = (i + 2 * n) % n;\n        long q = (i + 2 * n + r) % n;\n        long s = (i + 3 * n - r) % n;\n        long t = (i + 3 * n) % n;\n        long u = (i + 3 * n + r) % n;\n        long v = (i + 4 * n - r) % n;\n        long w = (i + 4 * n) % n;\n        long x = (i + 4 * n + r) % n;\n        long y = (i + 5 * n - r) % n;\n        long z = (i + 5 * n) % n;\n        long aa = (i + 5 * n + r) % n;\n        long bb = (i + 6 * n - r) % n;\n        long cc = (i + 6 * n) % n;\n        long dd = (i + 6 * n + r) % n;\n        long ee = (i + 7 * n - r) % n;\n        long ff = (i + 7 * n) % n;\n        long gg = (i + 7 * n + r) % n;\n        long hh = (i + 8 * n - r) % n;\n        long ii = (i + 8 * n) % n;\n        long jj = (i + 8 * n + r) % n;\n        long kk = (i + 9 * n - r) % n;\n        long ll = (i + 9 * n) % n;\n        long mm = (i + 9 * n + r) % n;\n        long nn = (i + 10 *",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = mod;\n        long end = mod + n;\n        long count = 0;\n        for (int i = 0; i < ranges.size(); i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            if (l <= start && r >= start) {\n                count += start - l;\n            } else if (l <= end && r >= end) {\n                count += r - end + 1;\n            } else if (l > start && r < end) {\n                count += r - l + 1;\n            }\n        }\n        long ans = (index + count) % n;\n        return arr.get((int) ans);",
    "        // Write your code here\n        int n = arr.size();\n        int m = ranges.size();\n        long[] prefix = new long[n];\n        long[] suffix = new long[n];\n        for(int i = 0; i < m; i++) {\n            int l = ranges.get(i).get(0).intValue();\n            int r = ranges.get(i).get(1).intValue();\n            prefix[l] += 1;\n            suffix[r] += 1;\n        }\n        for(int i = 1; i < n; i++) {\n            prefix[i] += prefix[i - 1];\n        }\n        for(int i = n - 2; i >= 0; i--) {\n            suffix[i] += suffix[i + 1];\n        }\n        for(int i = 0; i < n; i++) {\n            prefix[i] += suffix[i];\n        }\n        for(int i = 0; i < n; i++) {\n            prefix[i] = prefix[i] % rotations;\n        }\n        for(int i = 0; i < n; i++) {\n            arr.set(i, arr.get(i) + prefix[i]);\n        }\n        return arr.get((int)index);",
    "        // Write your code here\n        int n = arr.size();\n        int m = ranges.size();\n        long[] prefixSum = new long[n];\n        long[] suffixSum = new long[n];\n        prefixSum[0] = arr.get(0);\n        suffixSum[n-1] = arr.get(n-1);\n        for(int i = 1; i < n; i++) {\n            prefixSum[i] = prefixSum[i-1] + arr.get(i);\n        }\n        for(int i = n-2; i >= 0; i--) {\n            suffixSum[i] = suffixSum[i+1] + arr.get(i);\n        }\n        long[] rangeSum = new long[m];\n        for(int i = 0; i < m; i++) {\n            int l = ranges.get(i).get(0).intValue();\n            int r = ranges.get(i).get(1).intValue();\n            if(l == 0) {\n                rangeSum[i] = prefixSum[r];\n            } else {\n                rangeSum[i] = prefixSum[r] - prefixSum[l-1];\n            }\n        }\n        long[] rangeSumPrefix = new long[m];\n        rangeSumPrefix[0] = rangeSum[0];\n        for(int i = 1; i < m; i++) {\n            rangeSumPrefix[i] = rangeSumPrefix[i-1] + rangeSum[i];\n        }\n        long[] rangeSumSuffix = new long[m];\n        rangeSumSuffix[m-1] = rangeSum[m-1];\n        for(int i = m-2; i >= 0; i--) {\n            rangeSumSuffix[i] = rangeSumSuffix[i+1] + rangeSum[i];\n        }\n        long[] rangeSumPrefixSuffix = new long[m];\n        for(int i = 0; i < m; i++) {\n            rangeSumPrefixSuffix[i] = rangeSumPrefix[i] + rangeSumSuffix[i];\n        }\n        long[] rangeSum",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = mod;\n        long end = mod + n;\n        long ans = 0;\n        for(int i = 0; i < ranges.size(); i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            if(l <= start && r >= end) {\n                ans += (r - l + 1) * arr.get((int)index);\n            } else if(l <= start && r < end) {\n                ans += (r - start + 1) * arr.get((int)index);\n            } else if(l > start && r >= end) {\n                ans += (end - l) * arr.get((int)index);\n            } else if(l > start && r < end) {\n                ans += (r - l + 1) * arr.get((int)index);\n            }\n        }\n        return ans;",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = mod;\n        long end = mod - 1;\n        if (end < 0) {\n            end = n - 1;\n        }\n        for (int i = 0; i < ranges.size(); i++) {\n            long rangeStart = ranges.get(i).get(0);\n            long rangeEnd = ranges.get(i).get(1);\n            if (rangeStart <= start && start <= rangeEnd) {\n                start = rangeEnd - (start - rangeStart);\n            }\n            if (rangeStart <= end && end <= rangeEnd) {\n                end = rangeEnd - (end - rangeStart);\n            }\n        }\n        long diff = end - start;\n        if (diff < 0) {\n            diff = n + diff;\n        }\n        long newIndex = index - diff;\n        if (newIndex < 0) {\n            newIndex = n + newIndex;\n        }\n        return arr.get((int) newIndex);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long newIndex = (index + mod) % n;\n        return arr.get((int) newIndex);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long ans = 0;\n        for (int i = 0; i < ranges.size(); i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            long k = ranges.get(i).get(2);\n            long x = (l + mod) % n;\n            long y = (r + mod) % n;\n            if (x <= y) {\n                for (long j = x; j <= y; j++) {\n                    arr.set((int) j, arr.get((int) j) + k);\n                }\n            } else {\n                for (long j = x; j < n; j++) {\n                    arr.set((int) j, arr.get((int) j) + k);\n                }\n                for (long j = 0; j <= y; j++) {\n                    arr.set((int) j, arr.get((int) j) + k);\n                }\n            }\n        }\n        ans = arr.get((int) index);\n        return ans;",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long result = 0;\n        for (ArrayList<Long> range : ranges) {\n            long start = range.get(0);\n            long end = range.get(1);\n            long count = 0;\n            if (start <= index && index <= end) {\n                count = (end - index + 1);\n            } else if (start <= index && index > end) {\n                count = (n - index + end + 1);\n            } else if (start > index && index <= end) {\n                count = (end - start + 1);\n            } else if (start > index && index > end) {\n                count = (n - start + end + 1);\n            }\n            result += (count * arr.get((int) ((index + mod) % n)));\n        }\n        return result;",
    "        // Write your code here\n        int n = arr.size();\n        int r = ranges.size();\n        long[] arr2 = new long[n];\n        for (int i = 0; i < n; i++) {\n            arr2[i] = arr.get(i);\n        }\n        for (int i = 0; i < r; i++) {\n            int l = ranges.get(i).get(0).intValue();\n            int rr = ranges.get(i).get(1).intValue();\n            int k = ranges.get(i).get(2).intValue();\n            reverse(arr2, l, rr);\n            reverse(arr2, l, l + k - 1);\n            reverse(arr2, l + k, rr);\n        }\n        return arr2[(int) (index % n)];",
    "        // Write your code here\n        long n = arr.size();\n        long r = rotations % n;\n        long i = index % n;\n        long j = (i + r) % n;\n        return arr.get((int)j);",
    "        // Write your code here\n        long len = arr.size();\n        long mod = rotations % len;\n        long start = index - mod;\n        long end = index + (len - mod);\n        long ans = 0;\n        for(ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long r = range.get(1);\n            if(l <= start && r >= end) {\n                ans += (end - start + 1) * range.get(2);\n            } else if(l > start && r < end) {\n                ans += (r - l + 1) * range.get(2);\n            } else if(l > start && l <= end && r > end) {\n                ans += (end - l + 1) * range.get(2);\n            } else if(r < end && r >= start && l < start) {\n                ans += (r - start + 1) * range.get(2);\n            }\n        }\n        return arr.get((int)((start + ans) % len));",
    "        // Write your code here\n        return 0;",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = 0;\n        for (ArrayList<Long> range : ranges) {\n            start = range.get(0);\n            end = range.get(1);\n            if (start <= index && index <= end) {\n                break;\n            }\n        }\n        long diff = end - start + 1;\n        long newIndex = index + mod;\n        if (newIndex > end) {\n            newIndex = (newIndex - end) % diff + start - 1;\n        }\n        return arr.get((int) newIndex);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = n - 1;\n        long mid = 0;\n        while (start <= end) {\n            mid = (start + end) / 2;\n            if (index == mid) {\n                break;\n            } else if (index < mid) {\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        long newIndex = (mid + mod) % n;\n        return arr.get((int) newIndex);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = n - 1;\n        for(int i = 0; i < ranges.size(); i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            if(l <= index && index <= r) {\n                start = l;\n                end = r;\n                break;\n            }\n        }\n        if(mod == 0) {\n            return arr.get((int)index);\n        }\n        long diff = end - start + 1;\n        long newIndex = (index - start + mod) % diff + start;\n        return arr.get((int)newIndex);",
    "        long n = arr.size();\n        long m = ranges.size();\n        long[] prefixSum = new long[(int)n];\n        prefixSum[0] = arr.get(0);\n        for(int i=1;i<n;i++) {\n            prefixSum[i] = prefixSum[i-1] + arr.get(i);\n        }\n        long[] rangeSum = new long[(int)m];\n        for(int i=0;i<m;i++) {\n            ArrayList<Long> range = ranges.get(i);\n            long l = range.get(0);\n            long r = range.get(1);\n            rangeSum[i] = prefixSum[(int)r] - prefixSum[(int)l] + arr.get(l);\n        }\n        long[] rangeSumPrefixSum = new long[(int)m];\n        rangeSumPrefixSum[0] = rangeSum[0];\n        for(int i=1;i<m;i++) {\n            rangeSumPrefixSum[i] = rangeSumPrefixSum[i-1] + rangeSum[i];\n        }\n        long[] rangeSumPrefixSumMod = new long[(int)m];\n        for(int i=0;i<m;i++) {\n            rangeSumPrefixSumMod[i] = rangeSumPrefixSum[i] % n;\n        }\n        long[] rangeSumPrefixSumModPrefixSum = new long[(int)m];\n        rangeSumPrefixSumModPrefixSum[0] = rangeSumPrefixSumMod[0];\n        for(int i=1;i<m;i++) {\n            rangeSumPrefixSumModPrefixSum[i] = rangeSumPrefixSumModPrefixSum[i-1] + rangeSumPrefixSumMod[i];\n        }\n        long[] rangeSumPrefixSumModPrefixSumMod = new long[(int)m];\n        for(int i=0;i<m;i++) {\n            rangeSumPrefixSumModPrefixSumMod[i] = rangeSumPrefixSumModPrefixSum[i] % n;\n        }\n        long",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = 0;\n        for(int i = 0; i < ranges.size(); i++) {\n            start = ranges.get(i).get(0);\n            end = ranges.get(i).get(1);\n            if(index >= start && index <= end) {\n                break;\n            }\n        }\n        long diff = end - start + 1;\n        long mod1 = mod % diff;\n        long newIndex = (start + mod1) % n;\n        return arr.get((int)newIndex);",
    "        // Write your code here\n        long n = arr.size();\n        long r = rotations % n;\n        long i = index - r;\n        if (i < 0) {\n            i = n + i;\n        }\n        return arr.get((int) i);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = n - 1;\n        long mid = 0;\n        while (start <= end) {\n            mid = (start + end) / 2;\n            if (mid == index) {\n                break;\n            }\n            if (mid > index) {\n                if (index + mod > mid) {\n                    end = mid - 1;\n                } else {\n                    start = mid + 1;\n                }\n            } else {\n                if (index + mod < mid) {\n                    start = mid + 1;\n                } else {\n                    end = mid - 1;\n                }\n            }\n        }\n        return arr.get((int) mid);",
    "        // Write your code here\n        // Return the element at index after rotations\n        long n = arr.size();\n        long rotations_ = rotations % n;\n        long index_ = index - rotations_;\n        if (index_ < 0) {\n            index_ += n;\n        }\n        for (ArrayList<Long> range : ranges) {\n            long start = range.get(0);\n            long end = range.get(1);\n            if (start <= index_ && index_ <= end) {\n                index_ = end - (index_ - start);\n            }\n        }\n        return arr.get((int) index_);",
    "        long n = arr.size();\n        long r = rotations % n;\n        long i = index - r;\n        if (i < 0) i += n;\n        return arr.get((int)i);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = n - 1;\n        long mid = 0;\n        long ans = 0;\n        while (start <= end) {\n            mid = (start + end) / 2;\n            if (mid == index) {\n                ans = mid;\n                break;\n            }\n            if (mid < index) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n        if (ans == 0) {\n            ans = end;\n        }\n        long newIndex = (ans + mod) % n;\n        return arr.get((int) newIndex);",
    "        // Write your code here\n        long n = arr.size();\n        long m = ranges.size();\n        long[] a = new long[(int)n];\n        for(int i = 0; i < n; i++) {\n            a[i] = arr.get(i);\n        }\n        long[] l = new long[(int)m];\n        long[] r = new long[(int)m];\n        for(int i = 0; i < m; i++) {\n            l[i] = ranges.get(i).get(0);\n            r[i] = ranges.get(i).get(1);\n        }\n        long[] p = new long[(int)m];\n        for(int i = 0; i < m; i++) {\n            p[i] = (r[i] - l[i] + 1) * (l[i] + r[i]) / 2;\n        }\n        long[] s = new long[(int)m];\n        for(int i = 0; i < m; i++) {\n            s[i] = p[i] % n;\n        }\n        long[] d = new long[(int)m];\n        for(int i = 0; i < m; i++) {\n            d[i] = (r[i] - l[i] + 1) % n;\n        }\n        long[] c = new long[(int)m];\n        for(int i = 0; i < m; i++) {\n            c[i] = (rotations - s[i]) / n;\n        }\n        long[] b = new long[(int)m];\n        for(int i = 0; i < m; i++) {\n            b[i] = (rotations - s[i]) % n;\n        }\n        long[] e = new long[(int)m];\n        for(int i = 0; i < m; i++) {\n            e[i] = (b[i] + d[i]) % n;\n        }\n        long[] f = new long[(int)m];\n        for(int i = 0; i < m; i++) {\n            f[i",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = index - mod;\n        long end = index - mod + ranges.size();\n        if (start < 0) {\n            start += n;\n            end += n;\n        }\n        for (int i = 0; i < ranges.size(); i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            if (start >= l && start <= r) {\n                long diff = r - start + 1;\n                start += diff;\n                end += diff;\n            }\n        }\n        if (start >= n) {\n            start -= n;\n            end -= n;\n        }\n        if (start <= index && end >= index) {\n            return arr.get((int) index);\n        } else {\n            return -1;\n        }",
    "        // Write your code here\n        // Return the element at index after rotations\n        long n = arr.size();\n        long r = rotations % n;\n        long i = index - r;\n        if (i < 0) {\n            i += n;\n        }\n        for (ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long r1 = range.get(1);\n            if (l <= i && i <= r1) {\n                i = (i - l) % (r1 - l + 1) + l;\n            }\n        }\n        return arr.get((int) i);",
    "        // Write your code here\n        long size = arr.size();\n        long mod = rotations % size;\n        long newIndex = (index + mod) % size;\n        return arr.get((int)newIndex);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = n-1;\n        for(ArrayList<Long> range : ranges){\n            long l = range.get(0);\n            long r = range.get(1);\n            if(l <= index && index <= r){\n                start = l;\n                end = r;\n            }\n        }\n        long newIndex = (index - start + mod) % (end - start + 1) + start;\n        return arr.get((int)newIndex);",
    "        // Write your code here\n        long size = arr.size();\n        long mod = rotations % size;\n        long start = 0;\n        long end = size - 1;\n        long mid = 0;\n        while (start <= end) {\n            mid = (start + end) / 2;\n            if (mid == index) {\n                break;\n            } else if (index < mid) {\n                end = mid - 1;\n            } else {\n                start = mid + 1;\n            }\n        }\n        long newIndex = (mid + mod) % size;\n        return arr.get((int) newIndex);",
    "        // Write your code here\n        for(int i = 0; i < rotations; i++) {\n            for(int j = 0; j < ranges.size(); j++) {\n                long start = ranges.get(j).get(0);\n                long end = ranges.get(j).get(1);\n                long temp = arr.get((int)start);\n                for(long k = start; k < end; k++) {\n                    arr.set((int)k, arr.get((int)k+1));\n                }\n                arr.set((int)end, temp);\n            }\n        }\n        return arr.get((int)index);",
    "        // Write your code here\n        for (int i = 0; i < rotations; i++) {\n            ArrayList<Long> range = ranges.get(i);\n            long start = range.get(0);\n            long end = range.get(1);\n            long temp = arr.get((int) start);\n            arr.set((int) start, arr.get((int) end));\n            arr.set((int) end, temp);\n        }\n        return arr.get((int) index);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long ans = 0;\n        for(ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long r = range.get(1);\n            long sum = 0;\n            if(l <= r) {\n                sum = arr.subList((int)l, (int)r+1).stream().mapToLong(Long::longValue).sum();\n            } else {\n                sum = arr.subList((int)l, (int)n).stream().mapToLong(Long::longValue).sum();\n                sum += arr.subList(0, (int)r+1).stream().mapToLong(Long::longValue).sum();\n            }\n            ans += sum;\n        }\n        return ans;",
    "        // Write your code here\n        long n = arr.size();\n        long m = ranges.size();\n        long[] prefix = new long[(int)m];\n        for(int i=0;i<m;i++) {\n            prefix[i] = ranges.get(i).get(1) - ranges.get(i).get(0) + 1;\n        }\n        for(int i=1;i<m;i++) {\n            prefix[i] += prefix[i-1];\n        }\n        long total = prefix[(int)m-1];\n        rotations = rotations % total;\n        long start = 0;\n        long end = m-1;\n        long mid = 0;\n        while(start <= end) {\n            mid = start + (end - start)/2;\n            if(prefix[(int)mid] == rotations) {\n                break;\n            }\n            else if(prefix[(int)mid] > rotations) {\n                end = mid - 1;\n            }\n            else {\n                start = mid + 1;\n            }\n        }\n        if(prefix[(int)mid] < rotations) {\n            mid++;\n        }\n        long left = rotations - (mid == 0 ? 0 : prefix[(int)mid-1]);\n        long right = ranges.get((int)mid).get(1) - ranges.get((int)mid).get(0) + 1 - left;\n        if(index < left) {\n            return arr.get((int)(ranges.get((int)mid).get(1) - left + index));\n        }\n        else {\n            return arr.get((int)(ranges.get((int)mid).get(0) + index - left));\n        }",
    "        // Write your code here\n        long n = arr.size();\n        long r = rotations % n;\n        long i = index - r;\n        if (i < 0) {\n            i = n + i;\n        }\n        return arr.get((int) i);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = n - 1;\n        for (ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long r = range.get(1);\n            if (l <= index && index <= r) {\n                start = l;\n                end = r;\n                break;\n            }\n        }\n        long diff = end - start + 1;\n        long mod2 = mod % diff;\n        long newIndex = (index - start + mod2) % diff + start;\n        return arr.get((int) newIndex);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = mod;\n        long end = mod + n;\n        for (ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long r = range.get(1);\n            if (l <= start && r >= start) {\n                start = l;\n            }\n            if (l <= end && r >= end) {\n                end = r;\n            }\n        }\n        long diff = end - start;\n        long ans = index + diff;\n        if (ans >= n) {\n            ans = ans % n;\n        }\n        return arr.get((int) ans);",
    "        // Write your code here\n        long[] arr1 = new long[arr.size()];\n        for(int i=0;i<arr.size();i++){\n            arr1[i] = arr.get(i);\n        }\n        for(int i=0;i<ranges.size();i++){\n            long start = ranges.get(i).get(0);\n            long end = ranges.get(i).get(1);\n            long temp = arr1[(int)start];\n            for(int j=(int)start;j<end;j++){\n                arr1[j] = arr1[j+1];\n            }\n            arr1[(int)end] = temp;\n        }\n        return arr1[(int)index];",
    "        for (ArrayList<Long> range : ranges) {\n            long start = range.get(0);\n            long end = range.get(1);\n            long temp = arr.get((int) start);\n            for (long i = start; i < end; i++) {\n                arr.set((int) i, arr.get((int) (i + 1)));\n            }\n            arr.set((int) end, temp);\n        }\n        return arr.get((int) ((index + rotations) % arr.size()));",
    "        // Write your code here\n        int n = arr.size();\n        int m = ranges.size();\n        long[] prefixSum = new long[n];\n        long[] suffixSum = new long[n];\n        long[] prefixProduct = new long[n];\n        long[] suffixProduct = new long[n];\n        prefixSum[0] = arr.get(0);\n        prefixProduct[0] = arr.get(0);\n        for (int i = 1; i < n; i++) {\n            prefixSum[i] = prefixSum[i - 1] + arr.get(i);\n            prefixProduct[i] = prefixProduct[i - 1] * arr.get(i);\n        }\n        suffixSum[n - 1] = arr.get(n - 1);\n        suffixProduct[n - 1] = arr.get(n - 1);\n        for (int i = n - 2; i >= 0; i--) {\n            suffixSum[i] = suffixSum[i + 1] + arr.get(i);\n            suffixProduct[i] = suffixProduct[i + 1] * arr.get(i);\n        }\n        long[] sum = new long[n];\n        long[] product = new long[n];\n        for (int i = 0; i < m; i++) {\n            int l = ranges.get(i).get(0).intValue();\n            int r = ranges.get(i).get(1).intValue();\n            if (l == 0) {\n                sum[r] = suffixSum[r + 1];\n                product[r] = suffixProduct[r + 1];\n            } else {\n                sum[r] = prefixSum[l - 1] + suffixSum[r + 1];\n                product[r] = prefixProduct[l - 1] * suffixProduct[r + 1];\n            }\n        }\n        long[] prefixSum2 = new long[n];\n        long[] prefixProduct2 = new long[n];\n        prefixSum2[0] = sum[0];\n        prefixProduct2[0] = product[0];\n        for (int i = 1; i < n; i++) {\n            prefixSum2[i] = prefixSum2",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = 0;\n        for (int i = 0; i < ranges.size(); i++) {\n            start = ranges.get(i).get(0);\n            end = ranges.get(i).get(1);\n            if (index >= start && index <= end) {\n                break;\n            }\n        }\n        long diff = end - start + 1;\n        long mod2 = mod % diff;\n        long newIndex = start + mod2;\n        if (newIndex > end) {\n            newIndex = newIndex - diff;\n        }\n        return arr.get((int) newIndex);",
    "        // Write your code here\n        long n = arr.size();\n        long m = ranges.size();\n        long[] a = new long[(int)n];\n        for(int i=0;i<n;i++)\n            a[i] = arr.get(i);\n        long[] l = new long[(int)m];\n        long[] r = new long[(int)m];\n        for(int i=0;i<m;i++){\n            l[i] = ranges.get(i).get(0);\n            r[i] = ranges.get(i).get(1);\n        }\n        long[] c = new long[(int)n];\n        for(int i=0;i<m;i++){\n            c[(int)l[i]]++;\n            c[(int)r[i]+1]--;\n        }\n        for(int i=1;i<n;i++)\n            c[i] += c[i-1];\n        long[] b = new long[(int)n];\n        for(int i=0;i<n;i++)\n            b[i] = a[i] + c[i];\n        long[] d = new long[(int)n];\n        for(int i=0;i<n;i++)\n            d[i] = b[i] % n;\n        long[] e = new long[(int)n];\n        for(int i=0;i<n;i++)\n            e[i] = d[i] + rotations;\n        long[] f = new long[(int)n];\n        for(int i=0;i<n;i++)\n            f[i] = e[i] % n;\n        long[] g = new long[(int)n];\n        for(int i=0;i<n;i++)\n            g[i] = f[i] + i;\n        long[] h = new long[(int)n];\n        for(int i=0;i<n;i++)\n            h[i] = g[i] % n;\n        return h[(int)index];",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = 0;\n        for (ArrayList<Long> range : ranges) {\n            start = range.get(0);\n            end = range.get(1);\n            if (start <= index && index <= end) {\n                break;\n            }\n        }\n        long diff = end - start + 1;\n        long rot = mod % diff;\n        long newIndex = (index - start + rot) % diff + start;\n        return arr.get((int) newIndex);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = 0;\n        for(ArrayList<Long> range : ranges) {\n            start = range.get(0);\n            end = range.get(1);\n            if(start <= index && index <= end) {\n                break;\n            }\n        }\n        long diff = end - start + 1;\n        long modDiff = mod % diff;\n        long newIndex = start + modDiff;\n        if(newIndex > end) {\n            newIndex = newIndex - diff;\n        }\n        return arr.get((int)newIndex);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = mod;\n        long end = mod + n;\n        long count = 0;\n        for (ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long r = range.get(1);\n            if (l <= start && r >= end) {\n                count += n;\n            } else if (l <= start && r >= start) {\n                count += r - start + 1;\n            } else if (l <= end && r >= end) {\n                count += end - l + 1;\n            } else if (l >= start && r <= end) {\n                count += r - l + 1;\n            }\n        }\n        long ans = (index + count) % n;\n        return arr.get((int) ans);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = 0;\n        for(int i = 0; i < ranges.size(); i++) {\n            start = ranges.get(i).get(0);\n            end = ranges.get(i).get(1);\n            if(start <= index && index <= end) {\n                break;\n            }\n        }\n        long range = end - start + 1;\n        long rot = mod % range;\n        long newIndex = (index - start + rot) % range + start;\n        return arr.get((int)newIndex);",
    "        // Write your code here\n        long mod = rotations % arr.size();\n        long newIndex = (index + mod) % arr.size();\n        for(int i = 0; i < ranges.size(); i++) {\n            if(ranges.get(i).get(0) <= newIndex && ranges.get(i).get(1) >= newIndex) {\n                newIndex = (newIndex + ranges.get(i).get(2)) % arr.size();\n            }\n        }\n        return arr.get((int)newIndex);",
    "        // Write your code here\n        int n = arr.size();\n        int m = ranges.size();\n        long[] a = new long[n];\n        for(int i=0;i<n;i++)\n            a[i] = arr.get(i);\n        int[] l = new int[m];\n        int[] r = new int[m];\n        for(int i=0;i<m;i++)\n        {\n            l[i] = ranges.get(i).get(0).intValue();\n            r[i] = ranges.get(i).get(1).intValue();\n        }\n        while(rotations>0)\n        {\n            for(int i=0;i<m;i++)\n            {\n                long temp = a[l[i]];\n                for(int j=l[i];j<r[i];j++)\n                    a[j] = a[j+1];\n                a[r[i]] = temp;\n            }\n            rotations--;\n        }\n        return a[(int)index];",
    "        // Write your code here\n        for (int i = 0; i < rotations; i++) {\n            for (int j = 0; j < ranges.size(); j++) {\n                long start = ranges.get(j).get(0);\n                long end = ranges.get(j).get(1);\n                ArrayList<Long> temp = new ArrayList<>();\n                for (long k = start; k <= end; k++) {\n                    temp.add(arr.get((int) k));\n                }\n                Collections.reverse(temp);\n                int t = 0;\n                for (long k = start; k <= end; k++) {\n                    arr.set((int) k, temp.get(t));\n                    t++;\n                }\n            }\n        }\n        return arr.get((int) index);",
    "        // Write your code here\n        long n = arr.size();\n        long m = ranges.size();\n        long[] range = new long[m];\n        long[] range2 = new long[m];\n        for (int i = 0; i < m; i++) {\n            range[i] = ranges.get(i).get(0);\n            range2[i] = ranges.get(i).get(1);\n        }\n        long[] rot = new long[m];\n        for (int i = 0; i < m; i++) {\n            rot[i] = rotations % (range2[i] - range[i] + 1);\n        }\n        long[] rot2 = new long[m];\n        for (int i = 0; i < m; i++) {\n            rot2[i] = rotations % (range2[i] - range[i] + 1);\n        }\n        long[] rot3 = new long[m];\n        for (int i = 0; i < m; i++) {\n            rot3[i] = rotations % (range2[i] - range[i] + 1);\n        }\n        long[] rot4 = new long[m];\n        for (int i = 0; i < m; i++) {\n            rot4[i] = rotations % (range2[i] - range[i] + 1);\n        }\n        long[] rot5 = new long[m];\n        for (int i = 0; i < m; i++) {\n            rot5[i] = rotations % (range2[i] - range[i] + 1);\n        }\n        long[] rot6 = new long[m];\n        for (int i = 0; i < m; i++) {\n            rot6[i] = rotations % (range2[i] - range[i] + 1);\n        }\n        long[] rot7 = new long[m];\n        for (int i = 0; i < m; i++) {\n            rot7[i] = rotations % (range2[i] - range[i] + 1);\n        }\n        long[] rot8 = new long[m];\n        for (int i = 0",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = n - 1;\n        for (ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long r = range.get(1);\n            if (l <= index && index <= r) {\n                start = l;\n                end = r;\n                break;\n            }\n        }\n        long diff = end - start + 1;\n        long mod2 = mod % diff;\n        long newIndex = (index - start + mod2) % diff + start;\n        return arr.get((int) newIndex);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = n - 1;\n        long mid = 0;\n        while (start <= end) {\n            mid = start + (end - start) / 2;\n            if (mid == index) {\n                break;\n            } else if (mid < index) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n        long newIndex = (mid + mod) % n;\n        return arr.get((int) newIndex);",
    "        // Write your code here\n        long n = arr.size();\n        long r = rotations % n;\n        long i = index % n;\n        long j = (i + r) % n;\n        return arr.get((int)j);",
    "        // Write your code here\n        // Return the element at index after rotations\n        long n = arr.size();\n        long m = ranges.size();\n        long i, j, k, l, r, x, y, z;\n        for (i = 0; i < m; i++) {\n            l = ranges.get((int) i).get(0);\n            r = ranges.get((int) i).get(1);\n            x = ranges.get((int) i).get(2);\n            for (j = l; j <= r; j++) {\n                arr.set((int) j, arr.get((int) j) + x);\n            }\n        }\n        for (i = 0; i < rotations; i++) {\n            x = arr.get((int) (n - 1));\n            for (j = n - 1; j > 0; j--) {\n                arr.set((int) j, arr.get((int) (j - 1)));\n            }\n            arr.set(0, x);\n        }\n        return arr.get((int) index);",
    "        // Write your code here\n        long mod = rotations % arr.size();\n        long start = 0;\n        long end = arr.size() - 1;\n        for (int i = 0; i < ranges.size(); i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            if (l <= index && index <= r) {\n                start = l;\n                end = r;\n                break;\n            }\n        }\n        long newIndex = (index - start + mod) % (end - start + 1) + start;\n        return arr.get((int) newIndex);",
    "        // Write your code here\n        long n = arr.size();\n        long r = rotations % n;\n        long i = index - r;\n        if (i < 0) {\n            i = n + i;\n        }\n        return arr.get((int) i);",
    "        // Write your code here\n        long n = arr.size();\n        long m = ranges.size();\n        long[] a = new long[(int)n];\n        for(int i=0;i<n;i++)\n            a[i] = arr.get(i);\n        long[][] r = new long[(int)m][2];\n        for(int i=0;i<m;i++){\n            r[i][0] = ranges.get(i).get(0);\n            r[i][1] = ranges.get(i).get(1);\n        }\n        long[] b = new long[(int)n];\n        for(int i=0;i<n;i++)\n            b[i] = a[i];\n        for(int i=0;i<m;i++){\n            for(int j=0;j<n;j++){\n                if(j>=r[i][0]-1 && j<=r[i][1]-1)\n                    b[j] = a[(int)r[i][1]-1-(j-(int)r[i][0])];\n            }\n            for(int j=0;j<n;j++)\n                a[j] = b[j];\n        }\n        return b[(int)index];",
    "        // Write your code here\n        long n = arr.size();\n        long m = ranges.size();\n        long[] prefixSum = new long[(int)n];\n        prefixSum[0] = arr.get(0);\n        for(int i = 1; i < n; i++) {\n            prefixSum[i] = prefixSum[i-1] + arr.get(i);\n        }\n        long[] prefixSum2 = new long[(int)n];\n        for(int i = 0; i < m; i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            prefixSum2[(int)l] += 1;\n            if(r + 1 < n) {\n                prefixSum2[(int)(r+1)] -= 1;\n            }\n        }\n        for(int i = 1; i < n; i++) {\n            prefixSum2[i] += prefixSum2[i-1];\n        }\n        long[] prefixSum3 = new long[(int)n];\n        for(int i = 0; i < n; i++) {\n            prefixSum3[i] = prefixSum[i] * prefixSum2[i];\n        }\n        long[] prefixSum4 = new long[(int)n];\n        prefixSum4[0] = prefixSum3[0];\n        for(int i = 1; i < n; i++) {\n            prefixSum4[i] = prefixSum4[i-1] + prefixSum3[i];\n        }\n        long[] prefixSum5 = new long[(int)n];\n        for(int i = 0; i < m; i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            prefixSum5[(int)l] += 1;\n            if(r + 1 < n) {\n                prefixSum5[(int)(r+1)] -= 1;\n            }\n        }\n        for(int i = 1; i < n; i++) {\n            prefixSum5[i] += prefixSum5[i-1];",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = 0;\n        for(int i = 0; i < ranges.size(); i++) {\n            start = ranges.get(i).get(0);\n            end = ranges.get(i).get(1);\n            if(index >= start && index <= end) {\n                if(index - start < mod) {\n                    index = index + (end - start + 1) - mod;\n                } else {\n                    index = index - mod;\n                }\n                break;\n            }\n        }\n        return arr.get((int)index);",
    "        // Write your code here\n        long size = arr.size();\n        long mod = rotations % size;\n        long start = 0;\n        long end = 0;\n        for (int i = 0; i < ranges.size(); i++) {\n            start = ranges.get(i).get(0);\n            end = ranges.get(i).get(1);\n            long diff = end - start;\n            long mod1 = mod % diff;\n            if (index >= start && index <= end) {\n                if (index + mod1 <= end) {\n                    index = index + mod1;\n                } else {\n                    index = (index + mod1) - diff;\n                }\n                break;\n            }\n        }\n        return arr.get((int) index);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = 0;\n        for(int i = 0; i < ranges.size(); i++) {\n            start = ranges.get(i).get(0);\n            end = ranges.get(i).get(1);\n            if(index >= start && index <= end) {\n                break;\n            }\n        }\n        long diff = end - start + 1;\n        long mod2 = mod % diff;\n        long newIndex = (index + mod2) % n;\n        return arr.get((int)newIndex);",
    "        // Write your code here\n        long size = arr.size();\n        long mod = rotations % size;\n        long start = 0;\n        long end = size - 1;\n        for (ArrayList<Long> range : ranges) {\n            start = range.get(0);\n            end = range.get(1);\n            long temp = arr.get((int) start);\n            for (long i = start; i < end; i++) {\n                arr.set((int) i, arr.get((int) (i + 1)));\n            }\n            arr.set((int) end, temp);\n        }\n        if (mod > 0) {\n            long temp = arr.get((int) start);\n            for (long i = start; i < end; i++) {\n                arr.set((int) i, arr.get((int) (i + 1)));\n            }\n            arr.set((int) end, temp);\n        }\n        return arr.get((int) index);",
    "        // Write your code here\n        // Return the element at index after rotations\n        long n = arr.size();\n        long r = rotations % n;\n        for (ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long k = range.get(1);\n            if (l <= index && index <= k) {\n                index = k - (index - l);\n            }\n        }\n        index = (index + r) % n;\n        return arr.get((int) index);",
    "        // Write your code here\n        // Return the element at index after rotations\n        long n = arr.size();\n        long r = rotations % n;\n        long i = index % n;\n        long j = (i + r) % n;\n        long k = (i + n - r) % n;\n        long ans = arr.get((int) j);\n        for (ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long u = range.get(1);\n            if (l <= k && k <= u) {\n                ans = range.get(2);\n                break;\n            }\n        }\n        return ans;",
    "        // Write your code here\n        long size = arr.size();\n        long mod = rotations % size;\n        long start = mod;\n        long end = mod + size - 1;\n        for (ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long r = range.get(1);\n            if (l <= start && r >= start) {\n                start = r + 1;\n            }\n            if (l <= end && r >= end) {\n                end = r;\n            }\n        }\n        long diff = end - start + 1;\n        long newIndex = index + diff;\n        if (newIndex >= size) {\n            newIndex = newIndex % size;\n        }\n        return arr.get((int) newIndex);",
    "        // Write your code here\n        for (int i = 0; i < rotations; i++) {\n            for (int j = 0; j < ranges.size(); j++) {\n                long start = ranges.get(j).get(0);\n                long end = ranges.get(j).get(1);\n                long temp = arr.get((int) start);\n                for (long k = start; k < end; k++) {\n                    arr.set((int) k, arr.get((int) (k + 1)));\n                }\n                arr.set((int) end, temp);\n            }\n        }\n        return arr.get((int) index);",
    "        long n = arr.size();\n        long m = ranges.size();\n        long[] prefix = new long[(int)m];\n        for (int i = 0; i < m; i++) {\n            prefix[i] = ranges.get(i).get(1) - ranges.get(i).get(0) + 1;\n            if (i > 0) {\n                prefix[i] += prefix[i - 1];\n            }\n        }\n        long total = prefix[(int)m - 1];\n        long rotations_ = rotations % total;\n        long left = 0;\n        long right = m - 1;\n        long mid = 0;\n        while (left <= right) {\n            mid = (left + right) / 2;\n            if (prefix[(int)mid] < rotations_) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        long start = ranges.get((int)mid).get(0);\n        long end = ranges.get((int)mid).get(1);\n        long rotations_left = rotations_;\n        if (mid > 0) {\n            rotations_left -= prefix[(int)mid - 1];\n        }\n        long start_ = start + rotations_left - 1;\n        long end_ = end + rotations_left - 1;\n        if (end_ >= n) {\n            end_ = end_ % n;\n        }\n        if (start_ >= n) {\n            start_ = start_ % n;\n        }\n        if (index >= start_ && index <= end_) {\n            return arr.get((int)index);\n        } else {\n            if (end_ < start_) {\n                if (index >= start_ || index <= end_) {\n                    return arr.get((int)index);\n                }\n            }\n        }\n        return -1;",
    "        // Write your code here\n        // Return the element at index after rotations\n        long n = arr.size();\n        long r = rotations % n;\n        long i = index % n;\n        long j = (i + r) % n;\n        long k = (i + n - r) % n;\n        long l = (i + n) % n;\n        long m = (i + n + r) % n;\n        long o = (i + 2 * n - r) % n;\n        long p = (i + 2 * n) % n;\n        long q = (i + 2 * n + r) % n;\n        long ans = arr.get((int)j);\n        for (ArrayList<Long> range : ranges) {\n            long a = range.get(0);\n            long b = range.get(1);\n            if (a <= i && i <= b) {\n                ans = arr.get((int)k);\n            }\n            if (a <= j && j <= b) {\n                ans = arr.get((int)l);\n            }\n            if (a <= k && k <= b) {\n                ans = arr.get((int)m);\n            }\n            if (a <= l && l <= b) {\n                ans = arr.get((int)o);\n            }\n            if (a <= m && m <= b) {\n                ans = arr.get((int)p);\n            }\n            if (a <= o && o <= b) {\n                ans = arr.get((int)q);\n            }\n            if (a <= p && p <= b) {\n                ans = arr.get((int)i);\n            }\n            if (a <= q && q <= b) {\n                ans = arr.get((int)j);\n            }\n        }\n        return ans;",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = mod;\n        long end = mod + n;\n        for (ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long r = range.get(1);\n            long k = range.get(2);\n            if (l <= start && r >= start) {\n                long diff = Math.min(r, end) - start;\n                long rot = k % n;\n                start += rot;\n                end += rot;\n                mod += rot;\n            } else if (l <= end && r >= end) {\n                long diff = end - Math.max(l, start);\n                long rot = k % n;\n                start += rot;\n                end += rot;\n                mod += rot;\n            }\n        }\n        return arr.get((int) ((index + mod) % n));",
    "        // Write your code here\n        int n = arr.size();\n        int m = ranges.size();\n        long[] prefixSum = new long[n];\n        long[] suffixSum = new long[n];\n        long[] sum = new long[n];\n        for (int i = 0; i < n; i++) {\n            sum[i] = arr.get(i);\n        }\n        for (int i = 0; i < m; i++) {\n            int l = ranges.get(i).get(0).intValue();\n            int r = ranges.get(i).get(1).intValue();\n            prefixSum[l] += 1;\n            suffixSum[r] += 1;\n        }\n        for (int i = 1; i < n; i++) {\n            prefixSum[i] += prefixSum[i - 1];\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            suffixSum[i] += suffixSum[i + 1];\n        }\n        for (int i = 0; i < n; i++) {\n            sum[i] += prefixSum[i] + suffixSum[i];\n        }\n        for (int i = 0; i < n; i++) {\n            sum[i] = sum[i] % n;\n        }\n        long[] ans = new long[n];\n        for (int i = 0; i < n; i++) {\n            ans[(int) ((i + sum[i]) % n)] = arr.get(i);\n        }\n        return ans[(int) ((index + rotations) % n)];",
    "        // Write your code here\n        long size = arr.size();\n        long mod = rotations%size;\n        long start = index - mod;\n        if(start < 0) {\n            start = size + start;\n        }\n        return arr.get((int)start);",
    "        // Write your code here\n        // Return the element at index after rotations\n        long n = arr.size();\n        for(int i = 0; i < ranges.size(); i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            long d = ranges.get(i).get(2);\n            for(int j = (int)l; j <= r; j++) {\n                arr.set(j, arr.get(j) + d);\n            }\n        }\n        long rot = rotations % n;\n        long ans = arr.get((int)((index + rot) % n));\n        return ans;",
    "        // Write your code here\n        long size = arr.size();\n        long mod = rotations % size;\n        long start = index - mod;\n        long end = index + (size - mod);\n        long sum = 0;\n        for (ArrayList<Long> range : ranges) {\n            long rangeStart = range.get(0);\n            long rangeEnd = range.get(1);\n            if (rangeStart > end || rangeEnd < start) {\n                continue;\n            }\n            long startIndex = Math.max(start, rangeStart);\n            long endIndex = Math.min(end, rangeEnd);\n            sum += (endIndex - startIndex + 1);\n        }\n        return sum;",
    "        int n = arr.size();\n        for (ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long r = range.get(1);\n            long d = range.get(2);\n            for (int i = (int)l; i <= r; i++) {\n                arr.set(i, arr.get(i) + d);\n            }\n        }\n        long rotations_ = rotations % n;\n        if (rotations_ > 0) {\n            Collections.rotate(arr, (int)rotations_);\n        }\n        return arr.get((int)index);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long ans = 0;\n        for (ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long r = range.get(1);\n            long k = range.get(2);\n            if (l <= index && index <= r) {\n                ans += k;\n            }\n        }\n        if (mod == 0) {\n            return arr.get((int)index);\n        }\n        if (mod > 0) {\n            if (index - mod >= 0) {\n                return arr.get((int)(index - mod));\n            } else {\n                return arr.get((int)(n - (mod - index)));\n            }\n        } else {\n            if (index + mod >= 0) {\n                return arr.get((int)(index + mod));\n            } else {\n                return arr.get((int)(n + (index + mod)));\n            }\n        }",
    "        // Write your code here\n        long n = arr.size();\n        long m = ranges.size();\n        long[] prefixSum = new long[(int)n];\n        prefixSum[0] = arr.get(0);\n        for(int i = 1; i < n; i++) {\n            prefixSum[i] = prefixSum[i - 1] + arr.get(i);\n        }\n        long[] prefixSumRanges = new long[(int)m];\n        for(int i = 0; i < m; i++) {\n            long start = ranges.get(i).get(0);\n            long end = ranges.get(i).get(1);\n            prefixSumRanges[i] = prefixSum[(int)end] - prefixSum[(int)start] + arr.get(i);\n        }\n        long[] prefixSumRanges2 = new long[(int)m];\n        prefixSumRanges2[0] = prefixSumRanges[0];\n        for(int i = 1; i < m; i++) {\n            prefixSumRanges2[i] = prefixSumRanges2[i - 1] + prefixSumRanges[i];\n        }\n        long[] prefixSumRanges3 = new long[(int)m];\n        prefixSumRanges3[0] = prefixSumRanges2[0];\n        for(int i = 1; i < m; i++) {\n            prefixSumRanges3[i] = prefixSumRanges3[i - 1] + prefixSumRanges2[i];\n        }\n        long[] prefixSumRanges4 = new long[(int)m];\n        prefixSumRanges4[0] = prefixSumRanges3[0];\n        for(int i = 1; i < m; i++) {\n            prefixSumRanges4[i] = prefixSumRanges4[i - 1] + prefixSumRanges3[i];\n        }\n        long[] prefixSumRanges5 = new long[(int)m];\n        prefixSumRanges5[0] = prefixSumRanges4[0];\n        for(int i = 1; i < m; i++) {\n            prefixSumRanges5[",
    "        // Write your code here\n        long size = arr.size();\n        long mod = rotations % size;\n        long start = index - mod;\n        if (start < 0) {\n            start = size + start;\n        }\n        for (int i = 0; i < ranges.size(); i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            if (start >= l && start <= r) {\n                long diff = r - l + 1;\n                long newStart = start + diff;\n                if (newStart >= size) {\n                    newStart = newStart - size;\n                }\n                start = newStart;\n            }\n        }\n        return arr.get((int) start);",
    "        for (int i = 0; i < ranges.size(); i++) {\n            long start = ranges.get(i).get(0);\n            long end = ranges.get(i).get(1);\n            long temp = arr.get((int) start);\n            for (int j = (int) start; j < end; j++) {\n                arr.set(j, arr.get(j + 1));\n            }\n            arr.set((int) end, temp);\n        }\n        return arr.get((int) index);",
    "        // Write your code here\n        for(int i=0;i<ranges.size();i++){\n            long start = ranges.get(i).get(0);\n            long end = ranges.get(i).get(1);\n            long temp = arr.get((int)start);\n            for(int j=(int)start;j<end;j++){\n                arr.set(j,arr.get(j+1));\n            }\n            arr.set((int)end,temp);\n        }\n        return arr.get((int)index);",
    "        // Write your code here\n        long n = arr.size();\n        long r = rotations % n;\n        long i = index;\n        for (ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long k = range.get(1);\n            if (i >= l && i <= k) {\n                i = l + k - i;\n            }\n        }\n        i = (i + r) % n;\n        return arr.get((int) i);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long ans = 0;\n        for (int i = 0; i < ranges.size(); i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            long x = ranges.get(i).get(2);\n            if (l <= index && index <= r) {\n                ans = x;\n                break;\n            }\n        }\n        long newIndex = (index + mod) % n;\n        return ans + arr.get((int) newIndex);",
    "        // Write your code here\n        int n = arr.size();\n        int m = ranges.size();\n        long[] prefix = new long[n];\n        for(int i = 0; i < m; i++) {\n            int l = ranges.get(i).get(0).intValue();\n            int r = ranges.get(i).get(1).intValue();\n            prefix[l]++;\n            if(r + 1 < n) {\n                prefix[r + 1]--;\n            }\n        }\n        for(int i = 1; i < n; i++) {\n            prefix[i] += prefix[i - 1];\n        }\n        for(int i = 0; i < n; i++) {\n            prefix[i] = prefix[i] % n;\n        }\n        for(int i = 1; i < n; i++) {\n            prefix[i] += prefix[i - 1];\n        }\n        for(int i = 0; i < n; i++) {\n            prefix[i] = prefix[i] % n;\n        }\n        long ans = 0;\n        for(int i = 0; i < n; i++) {\n            long x = (prefix[i] + rotations) % n;\n            ans += arr.get(i) * x;\n        }\n        return ans;",
    "        // Write your code here\n        long mod = rotations % arr.size();\n        for (int i = 0; i < ranges.size(); i++) {\n            long start = ranges.get(i).get(0);\n            long end = ranges.get(i).get(1);\n            long count = rotations / arr.size();\n            if (start <= index && index <= end) {\n                long diff = end - index;\n                long newIndex = start + (count - 1) * (end - start + 1) + diff;\n                return arr.get((int) (newIndex % arr.size()));\n            }\n        }\n        return arr.get((int) ((index - mod + arr.size()) % arr.size()));",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = (n - mod) % n;\n        long end = (start + n - 1) % n;\n        long count = 0;\n        for (int i = 0; i < ranges.size(); i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            if (l <= start && r >= start) {\n                count += (r - start + 1);\n            } else if (l <= end && r >= end) {\n                count += (end - l + 1);\n            } else if (l > start && r < end) {\n                count += (r - l + 1);\n            }\n        }\n        long ans = (index + count) % n;\n        return arr.get((int) ans);",
    "        // Write your code here\n        long n = arr.size();\n        long m = ranges.size();\n        long[] prefix = new long[(int)n];\n        long[] suffix = new long[(int)n];\n        for (int i = 0; i < n; i++) {\n            prefix[i] = arr.get(i);\n            suffix[i] = arr.get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            prefix[i] += prefix[i - 1];\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            suffix[i] += suffix[i + 1];\n        }\n        long[] dp = new long[(int)n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = prefix[i];\n        }\n        for (int i = 0; i < m; i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            dp[(int)l] += suffix[(int)l];\n            if (r + 1 < n) {\n                dp[(int)r + 1] -= prefix[(int)r];\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i] += dp[i - 1];\n        }\n        for (int i = 0; i < n; i++) {\n            dp[i] += arr.get(i);\n        }\n        for (int i = 0; i < n; i++) {\n            dp[i] = dp[i] % n;\n        }\n        long[] dp2 = new long[(int)n];\n        for (int i = 0; i < n; i++) {\n            dp2[i] = dp[i];\n        }\n        for (int i = 1; i < n; i++) {\n            dp2[i] += dp2[i - 1];\n        }\n        for (int i = 0; i < n;",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = 0;\n        for (ArrayList<Long> range : ranges) {\n            start = range.get(0);\n            end = range.get(1);\n            if (start <= index && index <= end) {\n                break;\n            }\n        }\n        long len = end - start + 1;\n        long mod1 = mod % len;\n        long newIndex = (index - start + mod1) % len + start;\n        return arr.get((int) newIndex);",
    "        // Write your code here\n        long n = arr.size();\n        long m = ranges.size();\n        for(int i = 0; i < m; i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            long d = ranges.get(i).get(2);\n            for(int j = 0; j < n; j++) {\n                if(j >= l && j <= r) {\n                    arr.set(j, arr.get(j) + d);\n                }\n            }\n        }\n        rotations = rotations % n;\n        index = index - rotations;\n        if(index < 0) {\n            index = n + index;\n        }\n        return arr.get((int)index);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long i = index - mod;\n        if(i < 0) {\n            i = n + i;\n        }\n        return arr.get((int)i);",
    "        // Write your code here\n        int n = arr.size();\n        int m = ranges.size();\n        for(int i = 0; i < m; i++) {\n            int l = ranges.get(i).get(0).intValue();\n            int r = ranges.get(i).get(1).intValue();\n            int d = ranges.get(i).get(2).intValue();\n            for(int j = l; j <= r; j++) {\n                arr.set(j, arr.get(j) + d);\n            }\n        }\n        int rot = (int) (rotations % n);\n        if(rot > 0) {\n            Collections.rotate(arr, rot);\n        }\n        return arr.get((int) index);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = mod;\n        long end = mod + n;\n        long i = index;\n        while (start < end) {\n            long mid = (start + end) / 2;\n            long midIndex = mid % n;\n            if (i == midIndex) {\n                return arr.get((int) midIndex);\n            } else if (i < midIndex) {\n                end = mid;\n            } else {\n                start = mid + 1;\n            }\n        }\n        return -1;",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long ans = 0;\n        for (int i = 0; i < ranges.size(); i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            long x = ranges.get(i).get(2);\n            long y = ranges.get(i).get(3);\n            long k = ranges.get(i).get(4);\n            long a = (l + mod) % n;\n            long b = (r + mod) % n;\n            if (a > b) {\n                long temp = a;\n                a = b;\n                b = temp;\n            }\n            if (a <= index && index <= b) {\n                long count = (b - a + 1) / k;\n                long sum = (x + y) * count;\n                long rem = (b - a + 1) % k;\n                for (int j = 0; j < rem; j++) {\n                    sum += arr.get((int) (a + j));\n                }\n                ans += sum;\n            }\n        }\n        return ans;",
    "        // Write your code here\n        for (ArrayList<Long> range : ranges) {\n            long start = range.get(0);\n            long end = range.get(1);\n            long temp = arr.get((int)start);\n            for (long i = start; i < end; i++) {\n                arr.set((int)i, arr.get((int)(i + 1)));\n            }\n            arr.set((int)end, temp);\n        }\n        return arr.get((int)((index + rotations) % arr.size()));",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = mod;\n        long end = mod + n;\n        long ans = 0;\n        for(ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long r = range.get(1);\n            if(l > r) {\n                long temp = l;\n                l = r;\n                r = temp;\n            }\n            if(l <= start && r >= end) {\n                ans += (r - l + 1) * arr.get((int)index);\n            } else if(l <= start && r < end) {\n                ans += (r - start + 1) * arr.get((int)index);\n            } else if(l > start && r >= end) {\n                ans += (end - l) * arr.get((int)index);\n            } else if(l > start && r < end) {\n                ans += (r - l + 1) * arr.get((int)index);\n            }\n        }\n        return ans;",
    "        // Write your code here\n        long n = arr.size();\n        long k = rotations % n;\n        long rotations_per_range = rotations / n;\n        long total_rotations = 0;\n        long start = 0;\n        long end = 0;\n        for (int i = 0; i < ranges.size(); i++) {\n            start = ranges.get(i).get(0);\n            end = ranges.get(i).get(1);\n            total_rotations += (end - start + 1) * rotations_per_range;\n        }\n        long total_rotations_left = rotations - total_rotations;\n        long start_index = 0;\n        long end_index = 0;\n        for (int i = 0; i < ranges.size(); i++) {\n            start = ranges.get(i).get(0);\n            end = ranges.get(i).get(1);\n            if (total_rotations_left <= (end - start + 1)) {\n                start_index = start;\n                end_index = end;\n                break;\n            } else {\n                total_rotations_left -= (end - start + 1);\n            }\n        }\n        long new_index = (start_index + total_rotations_left) % n;\n        long new_index_2 = (end_index + total_rotations_left) % n;\n        long new_index_3 = (index + k) % n;\n        return arr.get((int) new_index_3);",
    "        long n = arr.size();\n        long m = ranges.size();\n        long[] prefixSum = new long[(int)n];\n        prefixSum[0] = arr.get(0);\n        for(int i = 1; i < n; i++) {\n            prefixSum[i] = prefixSum[i-1] + arr.get(i);\n        }\n        long[] rangeSum = new long[(int)m];\n        for(int i = 0; i < m; i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            rangeSum[i] = prefixSum[(int)r] - prefixSum[(int)l] + arr.get(l);\n        }\n        long[] rangeSumPrefixSum = new long[(int)m];\n        rangeSumPrefixSum[0] = rangeSum[0];\n        for(int i = 1; i < m; i++) {\n            rangeSumPrefixSum[i] = rangeSumPrefixSum[i-1] + rangeSum[i];\n        }\n        long[] rangeSumPrefixSumPrefixSum = new long[(int)m];\n        rangeSumPrefixSumPrefixSum[0] = rangeSumPrefixSum[0];\n        for(int i = 1; i < m; i++) {\n            rangeSumPrefixSumPrefixSum[i] = rangeSumPrefixSumPrefixSum[i-1] + rangeSumPrefixSum[i];\n        }\n        long[] rangeSumPrefixSumPrefixSumPrefixSum = new long[(int)m];\n        rangeSumPrefixSumPrefixSumPrefixSum[0] = rangeSumPrefixSumPrefixSum[0];\n        for(int i = 1; i < m; i++) {\n            rangeSumPrefixSumPrefixSumPrefixSum[i] = rangeSumPrefixSumPrefixSumPrefixSum[i-1] + rangeSumPrefixSumPrefixSum[i];\n        }\n        long[] rangeSumPrefixSumPrefixSumPrefixSumPrefixSum = new long[(int)m];\n        rangeSumPrefixSum",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = n - 1;\n        for (ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long r = range.get(1);\n            if (l <= index && index <= r) {\n                start = l;\n                end = r;\n            }\n        }\n        long newIndex = index + mod;\n        if (newIndex > end) {\n            newIndex = start + (newIndex - end) - 1;\n        }\n        return arr.get((int) newIndex);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long newIndex = (index + mod) % n;\n        return arr.get((int)newIndex);",
    "        // Write your code here\n        long n = arr.size();\n        long m = ranges.size();\n        long[] count = new long[n];\n        for(int i = 0; i < m; i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            count[(int)l]++;\n            if(r + 1 < n) {\n                count[(int)(r + 1)]--;\n            }\n        }\n        for(int i = 1; i < n; i++) {\n            count[i] += count[i - 1];\n        }\n        for(int i = 0; i < n; i++) {\n            count[i] = count[i] % 2;\n        }\n        for(int i = 1; i < n; i++) {\n            count[i] += count[i - 1];\n        }\n        long[] newArr = new long[n];\n        for(int i = 0; i < n; i++) {\n            newArr[i] = arr.get((int)((i - count[i] + n) % n));\n        }\n        long[] newCount = new long[n];\n        for(int i = 0; i < m; i++) {\n            long l = ranges.get(i).get(0);\n            long r = ranges.get(i).get(1);\n            newCount[(int)l]++;\n            if(r + 1 < n) {\n                newCount[(int)(r + 1)]--;\n            }\n        }\n        for(int i = 1; i < n; i++) {\n            newCount[i] += newCount[i - 1];\n        }\n        for(int i = 0; i < n; i++) {\n            newCount[i] = newCount[i] % 2;\n        }\n        for(int i = 1; i < n; i++) {\n            newCount[i] += newCount[i - 1];\n        }\n        long[] finalArr = new long[n];\n        for(int i = 0; i < n; i++) {\n",
    "        // Write your code here\n        long size = arr.size();\n        long mod = rotations % size;\n        long start = index - mod;\n        long end = index + (size - mod);\n        long ans = 0;\n        for(ArrayList<Long> range : ranges) {\n            long l = range.get(0);\n            long r = range.get(1);\n            if(l <= start && end <= r) {\n                ans += arr.get((int)index);\n            }\n        }\n        return ans;",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = 0;\n        for (int i = 0; i < ranges.size(); i++) {\n            start = ranges.get(i).get(0);\n            end = ranges.get(i).get(1);\n            if (index >= start && index <= end) {\n                break;\n            }\n        }\n        long diff = index - start;\n        long newIndex = (start + mod + diff) % n;\n        return arr.get((int) newIndex);",
    "        // Write your code here\n        long mod = rotations % arr.size();\n        for(ArrayList<Long> range : ranges) {\n            long start = range.get(0);\n            long end = range.get(1);\n            long diff = end - start + 1;\n            long count = mod / diff;\n            long rem = mod % diff;\n            if(index >= start && index <= end) {\n                long newIndex = index + rem;\n                if(newIndex > end) {\n                    newIndex = newIndex - diff;\n                }\n                return arr.get((int)newIndex);\n            }\n        }\n        return arr.get((int)(index + mod) % arr.size());",
    "        // Write your code here\n        long n = arr.size();\n        long m = ranges.size();\n        long[] prefixSum = new long[(int) n];\n        prefixSum[0] = arr.get(0);\n        for (int i = 1; i < n; i++) {\n            prefixSum[i] = prefixSum[i - 1] + arr.get(i);\n        }\n        long[] suffixSum = new long[(int) n];\n        suffixSum[(int) n - 1] = arr.get((int) n - 1);\n        for (int i = (int) n - 2; i >= 0; i--) {\n            suffixSum[i] = suffixSum[i + 1] + arr.get(i);\n        }\n        long[] prefixSum2 = new long[(int) n];\n        prefixSum2[0] = arr.get(0);\n        for (int i = 1; i < n; i++) {\n            prefixSum2[i] = prefixSum2[i - 1] + arr.get(i) * i;\n        }\n        long[] suffixSum2 = new long[(int) n];\n        suffixSum2[(int) n - 1] = arr.get((int) n - 1) * (n - 1);\n        for (int i = (int) n - 2; i >= 0; i--) {\n            suffixSum2[i] = suffixSum2[i + 1] + arr.get(i) * i;\n        }\n        long[] prefixSum3 = new long[(int) n];\n        prefixSum3[0] = arr.get(0);\n        for (int i = 1; i < n; i++) {\n            prefixSum3[i] = prefixSum3[i - 1] + arr.get(i) * (n - i);\n        }\n        long[] suffixSum3 = new long[(int) n];\n        suffixSum3[(int) n - 1] = arr.get((int) n - 1) * (n - 1);\n        for (int i = (int) n - 2; i >= 0; i--) {\n            suffixSum3[i] =",
    "        long size = arr.size();\n        long rotations_ = rotations % size;\n        long index_ = index - rotations_;\n        if (index_ < 0) {\n            index_ += size;\n        }\n        return arr.get((int)index_);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = 0;\n        for(int i = 0; i < ranges.size(); i++) {\n            start = ranges.get(i).get(0);\n            end = ranges.get(i).get(1);\n            if(index >= start && index <= end) {\n                if(index - start < mod) {\n                    index = end - mod + index - start + 1;\n                } else {\n                    index = index - mod;\n                }\n            }\n        }\n        return arr.get((int)index);",
    "        // Write your code here\n        for (ArrayList<Long> range : ranges) {\n            long start = range.get(0);\n            long end = range.get(1);\n            long temp = arr.get((int) start);\n            for (long i = start; i < end; i++) {\n                arr.set((int) i, arr.get((int) (i + 1)));\n            }\n            arr.set((int) end, temp);\n        }\n        return arr.get((int) ((index + rotations) % arr.size()));",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long start = 0;\n        long end = 0;\n        long newIndex = 0;\n        for(int i = 0; i < ranges.size(); i++) {\n            start = ranges.get(i).get(0);\n            end = ranges.get(i).get(1);\n            if(index >= start && index <= end) {\n                newIndex = (index - start + mod) % (end - start + 1) + start;\n                break;\n            }\n        }\n        return arr.get((int)newIndex);",
    "        // Write your code here\n        long n = arr.size();\n        long mod = rotations % n;\n        long i = index - mod;\n        if (i < 0) {\n            i = n + i;\n        }\n        return arr.get((int) i);",
    "        long n = arr.size();\n        long mod = rotations % n;\n        long start = index - mod;\n        if (start < 0) {\n            start += n;\n        }\n        return arr.get((int)start);",
    "        // Write your code here\n        long n = arr.size();\n        long m = ranges.size();\n        long[] prefixSum = new long[(int)n];\n        long[] suffixSum = new long[(int)n];\n        long[] prefixSum2 = new long[(int)n];\n        long[] suffixSum2 = new long[(int)n];\n        long[] prefixSum3 = new long[(int)n];\n        long[] suffixSum3 = new long[(int)n];\n        long[] prefixSum4 = new long[(int)n];\n        long[] suffixSum4 = new long[(int)n];\n        long[] prefixSum5 = new long[(int)n];\n        long[] suffixSum5 = new long[(int)n];\n        long[] prefixSum6 = new long[(int)n];\n        long[] suffixSum6 = new long[(int)n];\n        long[] prefixSum7 = new long[(int)n];\n        long[] suffixSum7 = new long[(int)n];\n        long[] prefixSum8 = new long[(int)n];\n        long[] suffixSum8 = new long[(int)n];\n        long[] prefixSum9 = new long[(int)n];\n        long[] suffixSum9 = new long[(int)n];\n        long[] prefixSum10 = new long[(int)n];\n        long[] suffixSum10 = new long[(int)n];\n        long[] prefixSum11 = new long[(int)n];\n        long[] suffixSum11 = new long[(int)n];\n        long[] prefixSum12 = new long[(int)n];\n        long[] suffixSum12 = new long[(int)n];\n        long[] prefixSum13 = new long[(int)n];\n        long[] suffixSum13 = new long[(int)n];\n        long[] prefixSum14 = new long[(int)n];\n        long[] suffixSum14 = new long[(int)n];\n        long[] prefixSum15 = new long[(int)n];\n        long[] suffixSum15 = new long[(int)n];\n        long[] prefixSum16 = new"
  ]
}