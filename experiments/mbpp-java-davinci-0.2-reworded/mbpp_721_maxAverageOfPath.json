{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));\n    assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);",
    "        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);",
    "        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);",
    "        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);",
    "        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);",
    "        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);",
    "        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);",
    "        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i-1] + cost.get(0).get(i);\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n-1][n-1] / (2*n - 1);",
    "        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);",
    "        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);",
    "        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);",
    "        // Write your code here\n        // Return the maximum average of all paths\n        return 0;",
    "        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);",
    "        // Write your code here\n        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i-1] + cost.get(0).get(i);\n            dp[i][0] = dp[i-1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n-1][n-1] / (2.0f * n - 1);",
    "        // Write your code here\n        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for(int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);",
    "        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);",
    "        int n = cost.size();\n        long[][] dp = new long[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);",
    "        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);",
    "        int n = cost.size();\n        float[][] dp = new float[n][n];\n        dp[0][0] = cost.get(0).get(0);\n        for (int i = 1; i < n; i++) {\n            dp[0][i] = dp[0][i - 1] + cost.get(0).get(i);\n            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost.get(i).get(j);\n            }\n        }\n        return dp[n - 1][n - 1] / (2 * n - 1);",
    "        int n = cost.size();\n        long[][] dp = new long[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i][j] = cost.get(i).get(j);\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            dp[0][i] += dp[0][i - 1];\n            dp[i][0] += dp[i - 1][0];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] += Math.max(dp[i - 1][j], dp[i][j - 1]);\n            }\n        }\n        return (float) dp[n - 1][n - 1] / (2 * n - 1);"
  ]
}