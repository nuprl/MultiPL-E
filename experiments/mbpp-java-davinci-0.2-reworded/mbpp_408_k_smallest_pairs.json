{
  "name": "mbpp_408_k_smallest_pairs",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return Long.compare(p1.getValue0() + p1.getValue1(), p2.getValue0() + p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && pq.size() > 0) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            long sum1 = a.getValue0() + a.getValue1();\n            long sum2 = b.getValue0() + b.getValue1();\n            return Long.compare(sum1, sum2);\n        });\n        for (long num : nums1) {\n            pq.add(new Pair<>(num, nums2.get(0)));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(new ArrayList<>(Arrays.asList(pair.getValue0(), pair.getValue1())));\n            if (pair.getValue1() < nums2.get(nums2.size() - 1)) {\n                pq.add(new Pair<>(pair.getValue0(), pair.getValue1() + 1));\n            }\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<Long>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                result.add(pair);\n            }\n        }\n        result.sort(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0).compareTo(b.get(0));\n            }\n        });\n        return new ArrayList<ArrayList<Long>>(result.subList(0, (int)k));",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (long i = 0; i < nums1.size(); i++) {\n            for (long j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get((int)i), nums2.get((int)j)));\n            }\n        }\n        for (long i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> res = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return res;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            res.add(temp);\n            k--;\n        }\n        return res;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            @Override\n            public int compare(Pair<Long, Pair<Long, Long>> a, Pair<Long, Pair<Long, Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i) + nums2.get(j), Pair.with(nums1.get(i), nums2.get(j))));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.size() == 0) {\n                break;\n            }\n            Pair<Long, Pair<Long, Long>> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue1().getValue0());\n            temp.add(pair.getValue1().getValue1());\n            result.add(temp);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (Long n1 : nums1) {\n            for (Long n2 : nums2) {\n                pq.add(new Pair<Long, Long>(n1, n2));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) 0));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(nums1.get(p.getValue1().intValue()));\n            pair.add(nums2.get(p.getValue0().intValue()));\n            result.add(pair);\n            if (p.getValue0() < nums2.size() - 1) {\n                pq.add(new Pair<Long, Long>(nums1.get(p.getValue1().intValue()) + nums2.get(p.getValue0().intValue() + 1), p.getValue1()));\n            }\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return result;\n        PriorityQueue<ArrayList<Long>> q = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> o1, ArrayList<Long> o2) {\n                return o1.get(0) + o1.get(1) - o2.get(0) - o2.get(1) > 0 ? 1 : -1;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                q.add(temp);\n            }\n        }\n        while (k > 0 && !q.isEmpty()) {\n            result.add(q.poll());\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            long i = p.getValue1() / nums2.size();\n            long j = p.getValue1() % nums2.size();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int) i));\n            pair.add(nums2.get((int) j));\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<Long, Long>(num1, num2));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(k, new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue1() + a.getValue0() - b.getValue1() - b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.size() == 0) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.offer(new Pair<>(num1 + num2, num1));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue1());\n            pair.add(p.getValue0() - p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> res = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return res;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) i));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> curr = pq.poll();\n            long i = curr.getValue1();\n            long j = nums2.indexOf(curr.getValue0() - nums1.get((int) i));\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(nums1.get((int) i));\n            pair.add(nums2.get((int) j));\n            res.add(pair);\n            if (j == nums2.size() - 1) {\n                continue;\n            }\n            pq.add(new Pair<Long, Long>(nums1.get((int) i) + nums2.get((int) j + 1), i));\n            k--;\n        }\n        return res;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> queue = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> o1, ArrayList<Long> o2) {\n                return (int) (o1.get(0) + o1.get(1) - o2.get(0) - o2.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                queue.add(pair);\n            }\n        }\n        for (int i = 0; i < k && !queue.isEmpty(); i++) {\n            result.add(queue.poll());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return (int) (o1.getValue0() + o1.getValue1() - o2.getValue0() - o2.getValue1());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0) + a.get(1) < b.get(0) + b.get(1) ? -1 : 1;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> ans = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            long aSum = a.getValue0() + a.getValue1();\n            long bSum = b.getValue0() + b.getValue1();\n            return Long.compare(aSum, bSum);\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(p.getValue0());\n            temp.add(p.getValue1());\n            ans.add(temp);\n        }\n        return ans;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1 + num2, num1));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue1());\n            pair.add(p.getValue0() - p.getValue1());\n            result.add(pair);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<Long, Long>(num1 + num2, num1));\n            }\n        }\n        while (k > 0) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue1());\n            list.add(pair.getValue2());\n            result.add(list);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> p = pq.poll();\n            result.add(new ArrayList<Long>(Arrays.asList(nums1.get((int) (p.getValue1() / nums2.size())), nums2.get((int) (p.getValue1() % nums2.size())))));\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return Long.compare(p1.getValue0() + p1.getValue1(), p2.getValue0() + p2.getValue1());\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(new ArrayList<>(Arrays.asList(pair.getValue0(), pair.getValue1())));\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            long i = pair.getValue1() / nums2.size();\n            long j = pair.getValue1() % nums2.size();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(nums1.get((int) i));\n            temp.add(nums2.get((int) j));\n            result.add(temp);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> o1, ArrayList<Long> o2) {\n                return (int) (o1.get(0) + o1.get(1) - o2.get(0) - o2.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(new ArrayList<>(Arrays.asList(nums1.get((int) (pair.getValue2() / nums2.size())), nums2.get((int) (pair.getValue2() % nums2.size())))));\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> p = pq.poll();\n            long index = p.getValue2();\n            long row = index / nums2.size();\n            long col = index % nums2.size();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int) row));\n            pair.add(nums2.get((int) col));\n            result.add(pair);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> queue = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                queue.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (queue.isEmpty()) {\n                break;\n            }\n            result.add(queue.poll());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (long i : nums1) {\n            for (long j : nums2) {\n                pq.add(new Pair<Long, Long>(i, j));\n            }\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return Long.compare(p1.getValue0() + p1.getValue1(), p2.getValue0() + p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                Pair<Long, Long> p = new Pair<>(nums1.get(i), nums2.get(j));\n                pq.add(p);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), nums1.get(i)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(p.getValue1());\n            pair.add(p.getValue0() - p.getValue1());\n            result.add(pair);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(p.getValue0());\n            temp.add(p.getValue1());\n            result.add(temp);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            int i = (int) (p.getValue1() / nums2.size());\n            int j = (int) (p.getValue1() % nums2.size());\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get(i));\n            pair.add(nums2.get(j));\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Long n1 : nums1) {\n            for (Long n2 : nums2) {\n                pq.add(new Pair<>(n1 + n2, n1));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue1());\n            pair.add(p.getValue0() - p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue1().compareTo(o2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                queue.add(new Pair<>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !queue.isEmpty()) {\n            Pair<Long, Long> pair = queue.poll();\n            result.add(new ArrayList<>(Arrays.asList(nums1.get((int) (pair.getValue2() / nums2.size())), nums2.get((int) (pair.getValue2() % nums2.size())))));\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (Long num : nums1) {\n            pq.add(new Pair<>(num, nums2.get(0)));\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            if (pair.getValue1() < nums2.get(nums2.size() - 1)) {\n                int index = nums2.indexOf(pair.getValue1());\n                pq.add(new Pair<>(pair.getValue0(), nums2.get(index + 1)));\n            }\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && pq.size() > 0) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1 + num2, num1));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue1());\n            temp.add(pair.getValue0() - pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return result;\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            long sumA = a.getValue0() + a.getValue1();\n            long sumB = b.getValue0() + b.getValue1();\n            if (sumA < sumB) return -1;\n            if (sumA > sumB) return 1;\n            return 0;\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        int count = 0;\n        while (count < k && !pq.isEmpty()) {\n            result.add(pq.poll());\n            count++;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1 + num2, num1));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            Pair<Long, Long> pair = pq.poll();\n            if (pair == null) {\n                break;\n            }\n            ArrayList<Long> pairList = new ArrayList<>();\n            pairList.add(pair.getValue1());\n            pairList.add(pair.getValue0() - pair.getValue1());\n            result.add(pairList);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            return (int) (a.getValue1() + a.getValue2() - b.getValue1() - b.getValue2());\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), 0L));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(nums1.get(p.getValue1().intValue()));\n            pair.add(nums2.get(p.getValue0().intValue()));\n            result.add(pair);\n            k--;\n            if (p.getValue0() < nums2.size() - 1) {\n                pq.add(new Pair<Long, Long>(p.getValue0() + 1, p.getValue1()));\n            }\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return Long.compare(p1.getValue0() + p1.getValue1(), p2.getValue0() + p2.getValue1());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(new ArrayList<>(Arrays.asList(nums1.get((int) (p.getValue2() / nums2.size())), nums2.get((int) (p.getValue2() % nums2.size())))));\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), nums1.get(i)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue1());\n            temp.add(pair.getValue0() - pair.getValue1());\n            result.add(temp);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        ArrayList<Long> sums = new ArrayList<Long>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                sums.add(nums1.get(i) + nums2.get(j));\n            }\n        }\n        Collections.sort(sums);\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                long sum = nums1.get(i) + nums2.get(j);\n                if (sums.get(0) == sum) {\n                    ArrayList<Long> pair = new ArrayList<Long>();\n                    pair.add(nums1.get(i));\n                    pair.add(nums2.get(j));\n                    result.add(pair);\n                    sums.remove(0);\n                }\n            }\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        // We will use a priority queue to keep track of the smallest pairs.\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        // We will use a hash set to keep track of the pairs that we have already seen.\n        HashSet<Pair<Long, Long>> seen = new HashSet<Pair<Long, Long>>();\n        // We will add the first pair to the priority queue.\n        pq.add(new Pair<Long, Long>(nums1.get(0), nums2.get(0)));\n        // We will add the first pair to the hash set.\n        seen.add(new Pair<Long, Long>(nums1.get(0), nums2.get(0)));\n        // We will keep track of the number of pairs that we have added to the result.\n        long count = 0;\n        // We will keep looping until we have added k pairs to the result.\n        while (count < k) {\n            // We will get the pair with the smallest sum from the priority queue.\n            Pair<Long, Long> pair = pq.poll();\n            // We will add the pair to the result.\n            result.add(new ArrayList<Long>(Arrays.asList(pair.getValue0(), pair.getValue1())));\n            // We will increment the count.\n            count++;\n            // We will get the first element of the pair.\n            long first = pair.getValue0();\n            // We will get the second element of the pair.\n            long second = pair.getValue1();\n            // We will add the pair where the first element",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n            }\n        });\n        for (long i = 0; i < nums1.size(); i++) {\n            for (long j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get((int) i), nums2.get((int) j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return a.getValue1().compareTo(b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            queue.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) i));\n        }\n        while (k > 0 && !queue.isEmpty()) {\n            Pair<Long, Long> pair = queue.poll();\n            long index = pair.getValue1();\n            long sum = pair.getValue0();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(nums1.get((int) index));\n            list.add(nums2.get(0));\n            result.add(list);\n            if (index + 1 < nums2.size()) {\n                queue.add(new Pair<Long, Long>(sum - nums2.get(0) + nums2.get((int) index + 1), index));\n            }\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>((a, b) -> {\n            return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                pq.add(temp);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.size() == 0) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return Long.compare(p1.getValue0() + p1.getValue1(), p2.getValue0() + p2.getValue1());\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0)\n            return res;\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(p.getValue0());\n            temp.add(p.getValue1());\n            res.add(temp);\n            k--;\n        }\n        return res;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i) + nums2.get(j), i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            long index = p.getValue1();\n            long i = index / nums2.size();\n            long j = index % nums2.size();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int) i));\n            pair.add(nums2.get((int) j));\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> heap = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                heap.add(new Pair<>(num1 + num2, num1));\n            }\n        }\n        while (k-- > 0) {\n            if (heap.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = heap.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue1());\n            temp.add(pair.getValue0() - pair.getValue1());\n            result.add(temp);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Pair<Long, Long>> pairs = new ArrayList<>();\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pairs.add(new Pair<>(num1, num2));\n            }\n        }\n        Collections.sort(pairs, new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0()) + p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < k; i++) {\n            result.add(new ArrayList<>(Arrays.asList(pairs.get(i).getValue0(), pairs.get(i).getValue1())));\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0).compareTo(b.get(0));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i) + nums2.get(j));\n                pair.add((long) i);\n                pair.add((long) j);\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            ArrayList<Long> pair = pq.poll();\n            ArrayList<Long> newPair = new ArrayList<>();\n            newPair.add(nums1.get(pair.get(1).intValue()));\n            newPair.add(nums2.get(pair.get(2).intValue()));\n            result.add(newPair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                long sum1 = p1.getValue0() + p1.getValue1();\n                long sum2 = p2.getValue0() + p2.getValue1();\n                if (sum1 < sum2) {\n                    return -1;\n                } else if (sum1 > sum2) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                long sum1 = p1.getValue0() + p1.getValue1();\n                long sum2 = p2.getValue0() + p2.getValue1();\n                if (sum1 < sum2) {\n                    return -1;\n                } else if (sum1 > sum2) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (long n1 : nums1) {\n            for (long n2 : nums2) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(n1);\n                pair.add(n2);\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(new ArrayList<Long>(Arrays.asList(pair.getValue0(), pair.getValue1())));\n            if (pair.getValue1() != nums2.get(nums2.size() - 1)) {\n                int index = nums2.indexOf(pair.getValue1());\n                pq.add(new Pair<Long, Long>(pair.getValue0(), nums2.get(index + 1)));\n            }\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        ArrayList<Long> pair = new ArrayList<Long>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                result.add(pair);\n                pair = new ArrayList<Long>();\n            }\n        }\n        Collections.sort(result, new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> o1, ArrayList<Long> o2) {\n                return o1.get(0).compareTo(o2.get(0));\n            }\n        });\n        ArrayList<ArrayList<Long>> result2 = new ArrayList<ArrayList<Long>>();\n        for (int i = 0; i < k; i++) {\n            result2.add(result.get(i));\n        }\n        return result2;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                queue.add(new Pair<>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !queue.isEmpty()) {\n            Pair<Long, Long> pair = queue.poll();\n            result.add(new ArrayList<>(Arrays.asList(nums1.get((int) (pair.getValue1() / nums2.size())), nums2.get((int) (pair.getValue1() % nums2.size())))));\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Long num : nums1) {\n            pq.add(Pair.with(num, nums2.get(0)));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            int index = nums2.indexOf(p.getValue1());\n            if (index < nums2.size() - 1) {\n                pq.add(Pair.with(p.getValue0(), nums2.get(index + 1)));\n            }\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> queue = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> o1, ArrayList<Long> o2) {\n                return (int)(o1.get(0) + o1.get(1) - o2.get(0) - o2.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                queue.add(pair);\n            }\n        }\n        for (int i = 0; i < k && !queue.isEmpty(); i++) {\n            result.add(queue.poll());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) i));\n        }\n        while (result.size() < k && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            long i = pair.getValue1();\n            long j = nums2.indexOf(pair.getValue0() - nums1.get(i));\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(nums1.get(i));\n            list.add(nums2.get(j));\n            result.add(list);\n            if (j < nums2.size() - 1) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j + 1), i));\n            }\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue1().compareTo(o2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        HashSet<Long> visited = new HashSet<>();\n        while (k-- > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            long index = pair.getValue1();\n            if (visited.contains(index)) {\n                continue;\n            }\n            visited.add(index);\n            long i = index / nums2.size();\n            long j = index % nums2.size();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(nums1.get((int) i));\n            list.add(nums2.get((int) j));\n            result.add(list);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return res;\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            res.add(pq.poll());\n        }\n        return res;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) 0));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(nums1.get((int) p.getValue1()));\n            pair.add(nums2.get((int) p.getValue0() - (int) nums1.get((int) p.getValue1())));\n            result.add(pair);\n            if (p.getValue0() < nums1.size() - 1) {\n                pq.add(new Pair<Long, Long>(nums1.get((int) p.getValue1() + 1) + nums2.get((int) p.getValue0()), p.getValue1() + 1));\n            }\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            long i = p.getValue1() / nums2.size();\n            long j = p.getValue1() % nums2.size();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int) i));\n            pair.add(nums2.get((int) j));\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            if (pair.getValue1() < nums2.get(nums2.size() - 1)) {\n                pq.add(new Pair<Long, Long>(pair.getValue0(), pair.getValue1() + 1));\n            }\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return res;\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int) (a.getValue1() + a.getValue2() - b.getValue1() - b.getValue2()));\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<>(nums1.get(i), nums2.get(0)));\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            res.add(new ArrayList<>(Arrays.asList(pair.getValue0(), pair.getValue1())));\n            if (pair.getValue1() < nums2.get(nums2.size() - 1)) {\n                pq.add(new Pair<>(pair.getValue0(), pair.getValue1() + 1));\n            }\n        }\n        return res;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<Long, Long>(num1, num2));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue1() + a.getValue2() - b.getValue1() - b.getValue2());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(new ArrayList<Long>(Arrays.asList(nums1.get((int) (pair.getValue1() / nums2.size())), nums2.get((int) (pair.getValue1() % nums2.size())))));\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            long sum1 = a.getValue0() + a.getValue1();\n            long sum2 = b.getValue0() + b.getValue1();\n            if (sum1 < sum2) {\n                return -1;\n            } else if (sum1 > sum2) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue1().compareTo(o2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(nums1.get((int) (pair.getValue2() / nums2.size())));\n            list.add(nums2.get((int) (pair.getValue2() % nums2.size())));\n            result.add(list);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Long num : nums1) {\n            pq.add(new Pair<Long, Long>(num + nums2.get(0), 0L));\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(new ArrayList<Long>(Arrays.asList(pair.getValue0() - nums2.get(pair.getValue1().intValue()), nums2.get(pair.getValue1().intValue()))));\n            if (pair.getValue1() < nums2.size() - 1) {\n                pq.add(new Pair<Long, Long>(pair.getValue0() - nums2.get(pair.getValue1().intValue()) + nums2.get(pair.getValue1().intValue() + 1), pair.getValue1() + 1));\n            }\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            if (pair.getValue1() < nums2.get(nums2.size() - 1)) {\n                pq.add(new Pair<Long, Long>(pair.getValue0(), pair.getValue1() + 1));\n            }\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            long i = p.getValue1() / nums2.size();\n            long j = p.getValue1() % nums2.size();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(nums1.get((int) i));\n            pair.add(nums2.get((int) j));\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return (int)(o1.getValue0() + o1.getValue1() - o2.getValue0() - o2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            long aSum = a.getValue0() + a.getValue1();\n            long bSum = b.getValue0() + b.getValue1();\n            if (aSum < bSum) {\n                return -1;\n            } else if (aSum > bSum) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        while (k > 0 && pq.size() > 0) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> heap = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                heap.add(pair);\n            }\n        }\n        while (k > 0 && !heap.isEmpty()) {\n            result.add(heap.poll());\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            if (a.getValue0() + a.getValue1() > b.getValue0() + b.getValue1()) {\n                return 1;\n            } else if (a.getValue0() + a.getValue1() < b.getValue0() + b.getValue1()) {\n                return -1;\n            } else {\n                return 0;\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) 0));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(nums1.get((int) p.getValue1()));\n            pair.add(nums2.get((int) p.getValue0() - (int) pair.get(0)));\n            result.add(pair);\n            if (p.getValue0() < nums1.size() - 1) {\n                pq.add(new Pair<Long, Long>(nums1.get((int) p.getValue1() + 1) + nums2.get((int) p.getValue0()), p.getValue1() + 1));\n            }\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            long sum1 = a.getValue0() + a.getValue1();\n            long sum2 = b.getValue0() + b.getValue1();\n            return Long.compare(sum1, sum2);\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<Long, Long>(num1, num2));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue1() + a.getValue2() - b.getValue1() - b.getValue2());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            if (p.getValue1() != nums2.get(nums2.size() - 1)) {\n                pq.add(new Pair<Long, Long>(p.getValue0(), p.getValue1() + 1));\n            }\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue1().compareTo(o2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) + nums2.get(j), nums1.get(i)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(p.getValue1());\n            temp.add(p.getValue0());\n            result.add(temp);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return Long.compare(o1.getValue0() + o1.getValue1(), o2.getValue0() + o2.getValue1());\n            }\n        });\n        for (long num1 : nums1) {\n            for (long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int) (p.getValue2() / nums2.size())));\n            pair.add(nums2.get((int) (p.getValue2() % nums2.size())));\n            result.add(pair);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) 0));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(nums1.get((int) p.getValue1()));\n            pair.add(nums2.get((int) p.getValue0() - (int) pair.get(0)));\n            result.add(pair);\n            if (p.getValue0() < nums1.size() - 1) {\n                pq.add(new Pair<Long, Long>(nums1.get((int) p.getValue1() + 1) + nums2.get((int) p.getValue0()), p.getValue1() + 1));\n            }\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) 0));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get(p.getValue1().intValue()));\n            pair.add(nums2.get(p.getValue0().intValue()));\n            result.add(pair);\n            if (p.getValue0() < nums2.size() - 1) {\n                pq.add(new Pair<Long, Long>(nums1.get(p.getValue1().intValue()) + nums2.get(p.getValue0().intValue() + 1), p.getValue1()));\n            }\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return res;\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue0() + a.getValue1() - (b.getValue0() + b.getValue1()));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            res.add(pair);\n        }\n        return res;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (long i : nums1) {\n            for (long j : nums2) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(i);\n                temp.add(j);\n                pq.add(temp);\n            }\n        }\n        while (k-- > 0) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) return result;\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue1().compareTo(o2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                queue.add(new Pair<>(nums1.get(i) + nums2.get(j), nums1.get(i)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (queue.isEmpty()) break;\n            Pair<Long, Long> pair = queue.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue1());\n            list.add(pair.getValue0() - pair.getValue1());\n            result.add(list);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && pq.size() > 0) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(nums1.get((int) (p.getValue2() / nums2.size())));\n            pair.add(nums2.get((int) (p.getValue2() % nums2.size())));\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0) + a.get(1) - b.get(0) - b.get(1) > 0 ? 1 : -1;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            result.add(pq.poll());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            int i = (int) (p.getValue1() / nums2.size());\n            int j = (int) (p.getValue1() % nums2.size());\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get(i));\n            pair.add(nums2.get(j));\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (long i = 0; i < nums1.size(); i++) {\n            for (long j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get((int) i), nums2.get((int) j)));\n            }\n        }\n        for (long i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), nums1.get(i)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue1());\n            pair.add(p.getValue0() - p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i) + nums2.get(j), i * nums2.size() + j));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = pq.poll();\n            long index = pair.getValue1();\n            long num1 = nums1.get((int) (index / nums2.size()));\n            long num2 = nums2.get((int) (index % nums2.size()));\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(num1);\n            list.add(num2);\n            result.add(list);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return a.getValue1().compareTo(b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            k--;\n            if (pair.getValue1() < nums2.get(nums2.size() - 1)) {\n                int index = nums2.indexOf(pair.getValue1());\n                pq.add(new Pair<Long, Long>(pair.getValue0(), nums2.get(index + 1)));\n            }\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue0() + a.getValue1() - (b.getValue0() + b.getValue1()));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1 + num2, num1));\n            }\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue1());\n            list.add(pair.getValue0() - pair.getValue1());\n            result.add(list);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue1().compareTo(o2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(nums1.get((int) (pair.getValue2() / nums2.size())));\n            temp.add(nums2.get((int) (pair.getValue2() % nums2.size())));\n            result.add(temp);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return res;\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> (int)(a.getValue1() + a.getValue0() - b.getValue1() - b.getValue0()));\n        pq.add(new Pair<>(nums1.get(0), nums2.get(0)));\n        HashSet<Pair<Long, Long>> visited = new HashSet<>();\n        visited.add(new Pair<>(nums1.get(0), nums2.get(0)));\n        while (res.size() < k && !pq.isEmpty()) {\n            Pair<Long, Long> cur = pq.poll();\n            res.add(new ArrayList<>(Arrays.asList(cur.getValue0(), cur.getValue1())));\n            long i = cur.getValue0();\n            long j = cur.getValue1();\n            if (i + 1 < nums1.size() && !visited.contains(new Pair<>(i + 1, j))) {\n                pq.add(new Pair<>(i + 1, j));\n                visited.add(new Pair<>(i + 1, j));\n            }\n            if (j + 1 < nums2.size() && !visited.contains(new Pair<>(i, j + 1))) {\n                pq.add(new Pair<>(i, j + 1));\n                visited.add(new Pair<>(i, j + 1));\n            }\n        }\n        return res;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) 0));\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(new ArrayList<Long>(Arrays.asList(pair.getValue0() - nums2.get((int) pair.getValue1()), nums2.get((int) pair.getValue1()))));\n            if (pair.getValue1() == nums2.size() - 1) {\n                continue;\n            }\n            pq.add(new Pair<Long, Long>(pair.getValue0() - nums2.get((int) pair.getValue1()) + nums2.get((int) pair.getValue1() + 1), pair.getValue1() + 1));\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            long sumA = a.getValue0() + a.getValue1();\n            long sumB = b.getValue0() + b.getValue1();\n            return Long.compare(sumA, sumB);\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> pairList = new ArrayList<>();\n            pairList.add(pair.getValue0());\n            pairList.add(pair.getValue1());\n            result.add(pairList);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> ans = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i) + nums2.get(j), nums1.get(i)));\n            }\n        }\n        while (!pq.isEmpty() && k-- > 0) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue1());\n            pair.add(p.getValue0() - p.getValue1());\n            ans.add(pair);\n        }\n        return ans;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>((a, b) -> {\n            long sum1 = a.get(0) + a.get(1);\n            long sum2 = b.get(0) + b.get(1);\n            if (sum1 == sum2) {\n                return 0;\n            }\n            return sum1 < sum2 ? -1 : 1;\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            long index = pair.getValue1();\n            result.add(new ArrayList<>(Arrays.asList(nums1.get((int) (index / nums2.size())), nums2.get((int) (index % nums2.size())))));\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            long i = p.getValue1() / nums2.size();\n            long j = p.getValue1() % nums2.size();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int) i));\n            pair.add(nums2.get((int) j));\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int)(p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int)(p1.getValue1() + p1.getValue0()) - (int)(p2.getValue1() + p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            queue.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        for (int i = 0; i < k && !queue.isEmpty(); i++) {\n            Pair<Long, Long> pair = queue.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            if (pair.getValue1() < nums2.get(nums2.size() - 1)) {\n                queue.add(new Pair<Long, Long>(pair.getValue0(), pair.getValue1() + 1));\n            }\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(new ArrayList<Long>(Arrays.asList(p.getValue0(), p.getValue1())));\n            if (p.getValue1() < nums2.get(nums2.size() - 1)) {\n                int index = nums2.indexOf(p.getValue1());\n                pq.add(new Pair<Long, Long>(p.getValue0(), nums2.get(index + 1)));\n            }\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue1().compareTo(o2.getValue1());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1 + num2, num1 * num2));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                queue.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !queue.isEmpty()) {\n            Pair<Long, Long> pair = queue.poll();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                queue.add(new Pair<>(num1 + num2, num1));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            Pair<Long, Long> pair = queue.poll();\n            if (pair == null) {\n                break;\n            }\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue1());\n            list.add(pair.getValue0() - pair.getValue1());\n            result.add(list);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return res;\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> tmp = new ArrayList<>();\n            tmp.add(p.getValue0());\n            tmp.add(p.getValue1());\n            res.add(tmp);\n            k--;\n        }\n        return res;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                result.add(pair);\n            }\n        }\n        Collections.sort(result, new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> pair1, ArrayList<Long> pair2) {\n                return (int) (pair1.get(0) + pair1.get(1) - pair2.get(0) - pair2.get(1));\n            }\n        });\n        return new ArrayList<ArrayList<Long>>(result.subList(0, (int) k));",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int)(p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int)(a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            result.add(pq.poll());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return res;\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i) + nums2.get(j), i * nums2.size() + j));\n            }\n        }\n        Set<Long> set = new HashSet<>();\n        while (res.size() < k && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            if (set.contains(pair.getValue1())) continue;\n            set.add(pair.getValue1());\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(nums1.get((int) (pair.getValue1() / nums2.size())));\n            list.add(nums2.get((int) (pair.getValue1() % nums2.size())));\n            res.add(list);\n        }\n        return res;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1, num2));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0).compareTo(b.get(0));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i) + nums2.get(j));\n                temp.add((long)i);\n                temp.add((long)j);\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            ArrayList<Long> temp = pq.poll();\n            ArrayList<Long> temp2 = new ArrayList<>();\n            temp2.add(nums1.get(temp.get(1).intValue()));\n            temp2.add(nums2.get(temp.get(2).intValue()));\n            result.add(temp2);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(Pair.with(num1 + num2, num1));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(new ArrayList<>(Arrays.asList(pair.getValue1(), pair.getValue0() - pair.getValue1())));\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int)(p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            result.add(new ArrayList<Long>(Arrays.asList(p.getValue0(), p.getValue1())));\n            if (p.getValue1() != nums2.get(nums2.size() - 1)) {\n                int index = nums2.indexOf(p.getValue1());\n                pq.add(new Pair<Long, Long>(p.getValue0(), nums2.get(index + 1)));\n            }\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue1() + a.getValue0(), b.getValue1() + b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(0)));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            if (pair.getValue1() < nums2.get(nums2.size() - 1)) {\n                int index = nums2.indexOf(pair.getValue1());\n                pq.add(new Pair<Long, Long>(pair.getValue0(), nums2.get(index + 1)));\n            }\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue1() + a.getValue0() - b.getValue1() - b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<>(nums1.get(i), nums2.get(0)));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            if (pair.getValue1() < nums2.get(nums2.size() - 1)) {\n                pq.add(new Pair<>(pair.getValue0(), pair.getValue1() + 1));\n            }\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return result;\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return (int) (o1.getValue0() + o1.getValue1() - o2.getValue0() - o2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k-- > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(Pair.with(nums1.get(i) + nums2.get(0), i));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get(p.getValue1().intValue()));\n            pair.add(nums2.get(0));\n            result.add(pair);\n            if (p.getValue1() == nums1.size() - 1) {\n                continue;\n            }\n            pq.add(Pair.with(nums1.get(p.getValue1().intValue() + 1) + nums2.get(0), p.getValue1() + 1));\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) i));\n        }\n        for (int i = 0; i < k && i < nums1.size() * nums2.size(); i++) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(nums1.get(p.getValue1().intValue()));\n            pair.add(nums2.get(0));\n            result.add(pair);\n            if (p.getValue1() == nums1.size() - 1) {\n                continue;\n            }\n            pq.add(new Pair<Long, Long>(nums1.get(p.getValue1().intValue() + 1) + nums2.get(0), p.getValue1() + 1));\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return (int)(o1.getValue0() + o1.getValue1() - o2.getValue0() - o2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> o1, Pair<Long, Long> o2) {\n                return o1.getValue0().compareTo(o2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                queue.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !queue.isEmpty()) {\n            Pair<Long, Long> pair = queue.poll();\n            result.add(new ArrayList<Long>(Arrays.asList(nums1.get((int) (pair.getValue1() / nums2.size())), nums2.get((int) (pair.getValue1() % nums2.size())))));\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> maxHeap = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p2.getValue0() + p2.getValue1() - (p1.getValue0() + p1.getValue1()));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                maxHeap.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !maxHeap.isEmpty()) {\n            Pair<Long, Long> pair = maxHeap.poll();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return result;\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.offer(pair);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) break;\n            result.add(pq.poll());\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> res = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return res;\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long)i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            long i = p.getValue1() / nums2.size();\n            long j = p.getValue1() % nums2.size();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int)i));\n            pair.add(nums2.get((int)j));\n            res.add(pair);\n            k--;\n        }\n        return res;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return a.getValue1().compareTo(b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                queue.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !queue.isEmpty()) {\n            Pair<Long, Long> pair = queue.poll();\n            long index = pair.getValue2();\n            result.add(new ArrayList<Long>(Arrays.asList(nums1.get((int) (index / nums2.size())), nums2.get((int) (index % nums2.size())))));\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return Long.compare(p1.getValue0() + p1.getValue1(), p2.getValue0() + p2.getValue1());\n            }\n        });\n        for (long i = 0; i < nums1.size(); i++) {\n            for (long j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get((int) i), nums2.get((int) j)));\n            }\n        }\n        for (long i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            int i = (int) (p.getValue1() / nums2.size());\n            int j = (int) (p.getValue1() % nums2.size());\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get(i));\n            pair.add(nums2.get(j));\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), nums1.get(i)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue1());\n            pair.add(p.getValue0() - p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (!pq.isEmpty() && k > 0) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int) (p.getValue1() / nums2.size())));\n            pair.add(nums2.get((int) (p.getValue1() % nums2.size())));\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) + nums2.get(j), i * nums2.size() + j));\n            }\n        }\n        long count = 0;\n        while (count < k && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            long index = pair.getValue2();\n            long i = index / nums2.size();\n            long j = index % nums2.size();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(nums1.get((int) i));\n            temp.add(nums2.get((int) j));\n            result.add(temp);\n            count++;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<Long, Long>(num1 + num2, num1));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue1());\n            temp.add(pair.getValue0() - pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                pq.add(temp);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> queue = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return a.getValue1().compareTo(b.getValue1());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                queue.add(new Pair<Long, Long>(num1, num2));\n            }\n        }\n        while (k > 0 && queue.size() > 0) {\n            Pair<Long, Long> pair = queue.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<>(num1 + num2, num1 * num2));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n            k--;\n        }\n        return result;"
  ]
}