{
  "name": "mbpp_408_k_smallest_pairs",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));\n    assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return Long.compare(p1.getValue0() + p1.getValue1(), p2.getValue0() + p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && pq.size() > 0) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>((a, b) -> {\n            long sum1 = a.getValue0() + a.getValue1();\n            long sum2 = b.getValue0() + b.getValue1();\n            return Long.compare(sum1, sum2);\n        });\n        for (long num : nums1) {\n            pq.add(new Pair<>(num, nums2.get(0)));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            result.add(new ArrayList<>(Arrays.asList(pair.getValue0(), pair.getValue1())));\n            if (pair.getValue1() < nums2.get(nums2.size() - 1)) {\n                pq.add(new Pair<>(pair.getValue0(), pair.getValue1() + 1));\n            }\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<Long>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                result.add(pair);\n            }\n        }\n        result.sort(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return a.get(0).compareTo(b.get(0));\n            }\n        });\n        return new ArrayList<ArrayList<Long>>(result.subList(0, (int)k));",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (long i = 0; i < nums1.size(); i++) {\n            for (long j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get((int)i), nums2.get((int)j)));\n            }\n        }\n        for (long i = 0; i < k && !pq.isEmpty(); i++) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return (int) (a.get(0) + a.get(1) - b.get(0) - b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> res = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return res;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            res.add(temp);\n            k--;\n        }\n        return res;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0 || k == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return (int) (p1.getValue0() + p1.getValue1() - p2.getValue0() - p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Pair<Long, Long>>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Pair<Long, Long>>>() {\n            @Override\n            public int compare(Pair<Long, Pair<Long, Long>> a, Pair<Long, Pair<Long, Long>> b) {\n                return a.getValue0().compareTo(b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(Pair.with(nums1.get(i) + nums2.get(j), Pair.with(nums1.get(i), nums2.get(j))));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.size() == 0) {\n                break;\n            }\n            Pair<Long, Pair<Long, Long>> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue1().getValue0());\n            temp.add(pair.getValue1().getValue1());\n            result.add(temp);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> list = new ArrayList<Long>();\n            list.add(pair.getValue0());\n            list.add(pair.getValue1());\n            result.add(list);\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (Long n1 : nums1) {\n            for (Long n2 : nums2) {\n                pq.add(new Pair<Long, Long>(n1, n2));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue0().compareTo(p2.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            pq.add(new Pair<Long, Long>(nums1.get(i) + nums2.get(0), (long) 0));\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<Long>();\n            pair.add(nums1.get(p.getValue1().intValue()));\n            pair.add(nums2.get(p.getValue0().intValue()));\n            result.add(pair);\n            if (p.getValue0() < nums2.size() - 1) {\n                pq.add(new Pair<Long, Long>(nums1.get(p.getValue1().intValue()) + nums2.get(p.getValue0().intValue() + 1), p.getValue1()));\n            }\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) return result;\n        PriorityQueue<ArrayList<Long>> q = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> o1, ArrayList<Long> o2) {\n                return o1.get(0) + o1.get(1) - o2.get(0) - o2.get(1) > 0 ? 1 : -1;\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> temp = new ArrayList<>();\n                temp.add(nums1.get(i));\n                temp.add(nums2.get(j));\n                q.add(temp);\n            }\n        }\n        while (k > 0 && !q.isEmpty()) {\n            result.add(q.poll());\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int) (a.getValue0() + a.getValue1() - b.getValue0() - b.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(p.getValue0());\n            pair.add(p.getValue1());\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<ArrayList<Long>> pq = new PriorityQueue<>(new Comparator<ArrayList<Long>>() {\n            @Override\n            public int compare(ArrayList<Long> a, ArrayList<Long> b) {\n                return Long.compare(a.get(0) + a.get(1), b.get(0) + b.get(1));\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                ArrayList<Long> pair = new ArrayList<>();\n                pair.add(nums1.get(i));\n                pair.add(nums2.get(j));\n                pq.add(pair);\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            result.add(pq.poll());\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> p1, Pair<Long, Long> p2) {\n                return p1.getValue1().compareTo(p2.getValue1());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<>(nums1.get(i) + nums2.get(j), (long) i * nums2.size() + j));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> p = pq.poll();\n            long i = p.getValue1() / nums2.size();\n            long j = p.getValue1() % nums2.size();\n            ArrayList<Long> pair = new ArrayList<>();\n            pair.add(nums1.get((int) i));\n            pair.add(nums2.get((int) j));\n            result.add(pair);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<ArrayList<Long>>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<Pair<Long, Long>>(new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return Long.compare(a.getValue0() + a.getValue1(), b.getValue0() + b.getValue1());\n            }\n        });\n        for (Long num1 : nums1) {\n            for (Long num2 : nums2) {\n                pq.add(new Pair<Long, Long>(num1, num2));\n            }\n        }\n        while (k > 0 && !pq.isEmpty()) {\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<Long>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n            k--;\n        }\n        return result;",
    "        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        PriorityQueue<Pair<Long, Long>> pq = new PriorityQueue<>(k, new Comparator<Pair<Long, Long>>() {\n            @Override\n            public int compare(Pair<Long, Long> a, Pair<Long, Long> b) {\n                return (int)(a.getValue1() + a.getValue0() - b.getValue1() - b.getValue0());\n            }\n        });\n        for (int i = 0; i < nums1.size(); i++) {\n            for (int j = 0; j < nums2.size(); j++) {\n                pq.add(new Pair<Long, Long>(nums1.get(i), nums2.get(j)));\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (pq.isEmpty()) {\n                break;\n            }\n            Pair<Long, Long> pair = pq.poll();\n            ArrayList<Long> temp = new ArrayList<>();\n            temp.add(pair.getValue0());\n            temp.add(pair.getValue1());\n            result.add(temp);\n        }\n        return result;"
  ]
}