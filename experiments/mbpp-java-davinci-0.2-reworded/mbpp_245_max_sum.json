{
  "name": "mbpp_245_max_sum",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long maxSum(ArrayList<Long> arr) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));\n    assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Write your code here\n        long[] dp1 = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp1[0] = arr.get(0);\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            dp1[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp1[i] = Math.max(dp1[i], dp1[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, dp1[i] + dp2[i] - arr.get(i));\n        }\n        return ans;",
    "        long[] maxSum = new long[arr.size()];\n        long[] maxSumRev = new long[arr.size()];\n        maxSum[0] = arr.get(0);\n        maxSumRev[0] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            maxSumRev[i] = arr.get(arr.size() - 1 - i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j) && maxSum[i] < maxSum[j] + arr.get(i)) {\n                    maxSum[i] = maxSum[j] + arr.get(i);\n                }\n                if (arr.get(arr.size() - 1 - i) > arr.get(arr.size() - 1 - j) && maxSumRev[i] < maxSumRev[j] + arr.get(arr.size() - 1 - i)) {\n                    maxSumRev[i] = maxSumRev[j] + arr.get(arr.size() - 1 - i);\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (max < maxSum[i] + maxSumRev[arr.size() - 1 - i] - arr.get(i)) {\n                max = maxSum[i] + maxSumRev[arr.size() - 1 - i] - arr.get(i);\n            }\n        }\n        return max;",
    "        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;",
    "        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;",
    "        long[] maxSum = new long[arr.size()];\n        long[] maxSumRev = new long[arr.size()];\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            maxSumRev[i] = arr.get(i);\n        }\n        for (int i = 1; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j) && maxSum[i] < maxSum[j] + arr.get(i)) {\n                    maxSum[i] = maxSum[j] + arr.get(i);\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j) && maxSumRev[i] < maxSumRev[j] + arr.get(i)) {\n                    maxSumRev[i] = maxSumRev[j] + arr.get(i);\n                }\n            }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, maxSum[i] + maxSumRev[i] - arr.get(i));\n        }\n        return max;",
    "        long[] dp = new long[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n        }\n        for (int i = 1; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long max = dp[0];\n        for (int i = 1; i < dp.length; i++) {\n            max = Math.max(max, dp[i]);\n        }\n        return max;",
    "        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, inc[i] + dec[i] - arr.get(i));\n        }\n        return ans;",
    "        int n = arr.size();\n        long[] inc = new long[n];\n        long[] dec = new long[n];\n        inc[0] = arr.get(0);\n        dec[n - 1] = arr.get(n - 1);\n        for (int i = 1; i < n; i++) {\n            inc[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    inc[i] = Math.max(inc[i], inc[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            dec[i] = arr.get(i);\n            for (int j = n - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j)) {\n                    dec[i] = Math.max(dec[i], dec[j] + arr.get(i));\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < n; i++) {\n            max = Math.max(max, inc[i] + dec[i] - arr.get(i));\n        }\n        return max;",
    "        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp[0] = arr.get(0);\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = Math.max(dp[i - 1] + arr.get(i), arr.get(i));\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = Math.max(dp2[i + 1] + arr.get(i), arr.get(i));\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i] + dp2[i] - arr.get(i));\n        }\n        return max;",
    "        // Write your code here\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long max = Long.MIN_VALUE;\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    max = Math.max(max, dp[j]);\n                }\n            }\n            dp[i] = max + arr.get(i);\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < dp.length; i++) {\n            max = Math.max(max, dp[i]);\n        }\n        return max;",
    "        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        return Arrays.stream(dp).max().getAsLong();",
    "        long[] dp = new long[arr.size()];\n        Arrays.fill(dp, 0);\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i]);\n        }\n        return max;",
    "        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp[0] = arr.get(0);\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, dp[i] + dp2[i] - arr.get(i));\n        }\n        return ans;",
    "        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp[0] = arr.get(0);\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = Math.max(dp[i - 1] + arr.get(i), arr.get(i));\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = Math.max(dp2[i + 1] + arr.get(i), arr.get(i));\n        }\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i]);\n            max = Math.max(max, dp2[i]);\n        }\n        for (int i = 1; i < arr.size() - 1; i++) {\n            max = Math.max(max, dp[i - 1] + dp2[i + 1]);\n        }\n        return max;",
    "        long[] inc = new long[arr.size()];\n        long[] dec = new long[arr.size()];\n        inc[0] = arr.get(0);\n        dec[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            inc[i] = Math.max(inc[i - 1], arr.get(i));\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dec[i] = Math.max(dec[i + 1], arr.get(i));\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, inc[i] + dec[i] - arr.get(i));\n        }\n        return ans;",
    "        long[] dp = new long[arr.size()];\n        long[] dp2 = new long[arr.size()];\n        dp[0] = arr.get(0);\n        dp2[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            dp2[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(j) < arr.get(i)) {\n                    dp2[i] = Math.max(dp2[i], dp2[j] + arr.get(i));\n                }\n            }\n        }\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i] + dp2[i] - arr.get(i));\n        }\n        return max;",
    "        long[] dp = new long[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n        }\n        for (int i = 1; i < arr.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long max = dp[0];\n        for (int i = 1; i < arr.size(); i++) {\n            max = Math.max(max, dp[i]);\n        }\n        return max;",
    "        // Write your code here\n        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            ans = Math.max(ans, dp[i]);\n        }\n        return ans;",
    "        long[] dp = new long[arr.size()];\n        dp[0] = arr.get(0);\n        for(int i = 1; i < arr.size(); i++) {\n            dp[i] = arr.get(i);\n            for(int j = 0; j < i; j++) {\n                if(arr.get(j) < arr.get(i)) {\n                    dp[i] = Math.max(dp[i], dp[j] + arr.get(i));\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for(int i = 0; i < arr.size(); i++) {\n            max = Math.max(max, dp[i]);\n        }\n        return max;",
    "        long[] maxSum = new long[arr.size()];\n        long[] maxSumReverse = new long[arr.size()];\n        maxSum[0] = arr.get(0);\n        maxSumReverse[arr.size() - 1] = arr.get(arr.size() - 1);\n        for (int i = 1; i < arr.size(); i++) {\n            maxSum[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) > arr.get(j) && maxSum[i] < maxSum[j] + arr.get(i)) {\n                    maxSum[i] = maxSum[j] + arr.get(i);\n                }\n            }\n        }\n        for (int i = arr.size() - 2; i >= 0; i--) {\n            maxSumReverse[i] = arr.get(i);\n            for (int j = arr.size() - 1; j > i; j--) {\n                if (arr.get(i) > arr.get(j) && maxSumReverse[i] < maxSumReverse[j] + arr.get(i)) {\n                    maxSumReverse[i] = maxSumReverse[j] + arr.get(i);\n                }\n            }\n        }\n        long max = maxSum[0] + maxSumReverse[0] - arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (max < maxSum[i] + maxSumReverse[i] - arr.get(i)) {\n                max = maxSum[i] + maxSumReverse[i] - arr.get(i);\n            }\n        }\n        return max;"
  ]
}