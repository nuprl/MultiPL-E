{
  "name": "mbpp_611_max_of_nth",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                max = Math.max(max, list.get((int) N));\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpa_udddy4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp9dtgl2hx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                if (list.get((int)N) > max) {\n                    max = list.get((int)N);\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpcfaogfvc.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp9jmzel5k.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpisyu6xvi.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (ArrayList<Long> list : test_list) {\n            if (list.get((int) N) > max) {\n                max = list.get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpdmkiok7o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp_911mq40.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for(ArrayList<Long> row : test_list) {\n            if(row.get((int)N) > max) {\n                max = row.get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpoml8pb3f.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp0mfekyf4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpojrteyjr.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                max = Math.max(max, list.get((int) N));\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpa_udddy4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpz6d6dyli.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp9dtgl2hx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                max = Math.max(max, list.get((int) N));\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpzoknfbmp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            if (row.size() > N) {\n                max = Math.max(max, row.get((int)N));\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpf859wq96.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream()\n            .map(x -> x.get((int) N))\n            .max(Long::compareTo)\n            .get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp9q31aoxm.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmphygec9w8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp9dtgl2hx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++){\n            if(test_list.get(i).get((int)N) > max){\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpjd1uimo6.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp7uh3pvim.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            if (row.get((int) N) > max) {\n                max = row.get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpb19o8lze.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpisyu6xvi.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                if (list.get((int) N) > max) {\n                    max = list.get((int) N);\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpzb9wy4m7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                if (list.get((int)N) > max) {\n                    max = list.get((int)N);\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpcfaogfvc.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int) N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmp2b1jk0s1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> list : test_list) {\n            if (list.get((int) N) > max) {\n                max = list.get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmp8odq2td2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            if (row.get((int) N) > max) {\n                max = row.get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpb19o8lze.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpisyu6xvi.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        long max = 0;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                if (list.get((int)N) > max) {\n                    max = list.get((int)N);\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpdam3o07f.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                if (list.get((int) N) > max) {\n                    max = list.get((int) N);\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpl_4twjts.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpmepu8iu4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().mapToLong(x -> x.get((int)N)).max().getAsLong();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpfcqwh3vu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (ArrayList<Long> list : test_list) {\n            if (list.get((int) N) > max) {\n                max = list.get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpzdtghmvr.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            if (row.size() > N) {\n                max = Math.max(max, row.get((int)N));\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpf859wq96.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream()\n            .map(x -> x.get((int) N))\n            .max(Long::compareTo)\n            .get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp9q31aoxm.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp0mfekyf4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = Long.MIN_VALUE;\n        for(ArrayList<Long> row : test_list) {\n            if(row.get((int)N) > max) {\n                max = row.get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmp07cc1w93.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++){\n            if(test_list.get(i).get((int)N) > max){\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmphll6jeof.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp9dtgl2hx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp_911mq40.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmphygec9w8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> sublist : test_list) {\n            if (sublist.size() > N) {\n                max = Math.max(max, sublist.get((int) N));\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpl_r6l_p2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            if (row.get((int) N) > max) {\n                max = row.get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpb19o8lze.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                if (list.get((int)N) > max) {\n                    max = list.get((int)N);\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpcfaogfvc.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpisyu6xvi.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmp72xlldpz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            if (row.get((int)N) > max) {\n                max = row.get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpagu1hubc.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                max = Math.max(max, list.get((int) N));\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmp1lnfoao8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            if (row.size() > N) {\n                max = Math.max(max, row.get((int)N));\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpf859wq96.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp9dtgl2hx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (ArrayList<Long> list : test_list) {\n            if (list.get((int) N) > max) {\n                max = list.get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpzdtghmvr.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp7uh3pvim.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp9dtgl2hx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp9dtgl2hx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp_911mq40.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp0mfekyf4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpc2p5kbxp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        long max = 0;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                if (list.get((int) N) > max) {\n                    max = list.get((int) N);\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpejrm10ho.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        long max = -1;\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpsom2sdzf.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmphygec9w8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            if (row.get((int) N) > max) {\n                max = row.get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpt6srqwr5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmp72xlldpz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            if (row.size() > N) {\n                max = Math.max(max, row.get((int) N));\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpclx7qnjs.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            if (row.get((int)N) > max) {\n                max = row.get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpdt26uv9p.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp9dtgl2hx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++){\n            if(test_list.get(i).get((int)N) > max){\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmphll6jeof.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                max = Math.max(max, list.get((int) N));\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpn1nd9zx8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++){\n            if(test_list.get(i).get((int)N) > max){\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmphll6jeof.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (ArrayList<Long> list : test_list) {\n            if (list.get((int)N) > max) {\n                max = list.get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpimvj25kf.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            if (row.get((int) N) > max) {\n                max = row.get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpb19o8lze.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp_911mq40.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                max = Math.max(max, list.get((int)N));\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmp7jlfczkz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Your code here\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++){\n            if(test_list.get(i).get((int)N) > max){\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpe7gvz5do.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                max = Math.max(max, list.get((int) N));\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpa_udddy4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp9jmzel5k.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                max = Math.max(max, list.get((int)N));\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmp7jlfczkz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (ArrayList<Long> row : test_list) {\n            if (row.get((int) N) > max) {\n                max = row.get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpa98gxzju.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            if (row.get((int)N) > max) {\n                max = row.get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpagu1hubc.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp_911mq40.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpmepu8iu4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> list : test_list) {\n            if (list.get((int) N) > max) {\n                max = list.get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpwso9tlp4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpisyu6xvi.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp_911mq40.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> sublist : test_list) {\n            if (sublist.size() > N) {\n                max = Math.max(max, sublist.get((int) N));\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpdzobu_11.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                max = Math.max(max, list.get((int) N));\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpkrkdy8el.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmphygec9w8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp_911mq40.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> list : test_list) {\n            if (list.get((int) N) > max) {\n                max = list.get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpfazjqohj.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                max = Math.max(max, list.get((int) N));\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpa_udddy4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpifcw49l2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for(ArrayList<Long> list : test_list) {\n            if(list.get((int)N) > max) {\n                max = list.get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpjn_3gyjp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            if (row.get((int)N) > max) {\n                max = row.get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpagu1hubc.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp9jmzel5k.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpvw2lcjfw.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> list : test_list) {\n            if (list.get((int)N) > max) {\n                max = list.get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmper7uenvx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp9dtgl2hx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp9dtgl2hx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int) N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmp2b1jk0s1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = Long.MIN_VALUE;\n        for(ArrayList<Long> row : test_list) {\n            if(row.size() > N) {\n                max = Math.max(max, row.get((int)N));\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpx23plcbd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().mapToLong(x -> x.get((int)N)).max().getAsLong();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpfcqwh3vu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpifcw49l2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmp72xlldpz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp9dtgl2hx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            if (row.get((int)N) > max) {\n                max = row.get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmppaqovnkx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            if (row.size() > N) {\n                max = Math.max(max, row.get((int) N));\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmp79jkt75z.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for(ArrayList<Long> list : test_list) {\n            if(list.size() > N) {\n                if(list.get((int)N) > max) {\n                    max = list.get((int)N);\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpsyydq14_.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpvw2lcjfw.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp_911mq40.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Your code here\n        long max = 0;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                if (list.get((int) N) > max) {\n                    max = list.get((int) N);\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpn8bwnzdd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream()\n            .map(x -> x.get((int)N))\n            .max(Comparator.naturalOrder())\n            .get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpqxuapge5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().mapToLong(x -> x.get((int)N)).max().getAsLong();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpfcqwh3vu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (ArrayList<Long> list : test_list) {\n            if (list.get((int)N) > max) {\n                max = list.get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpimvj25kf.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        long max = Long.MIN_VALUE;\n        for(ArrayList<Long> list : test_list) {\n            if(list.get((int)N) > max) {\n                max = list.get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpjing0ni3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (ArrayList<Long> row : test_list) {\n            if (row.get(N) > max) {\n                max = row.get(N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmp3ak3acb9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp3ak3acb9.java:13: error: incompatible types: possible lossy conversion from long to int\n            if (row.get(N) > max) {\n                        ^\n/tmp/tmp3ak3acb9.java:14: error: incompatible types: possible lossy conversion from long to int\n                max = row.get(N);\n                              ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmp33mx3ra5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                if (list.get((int) N) > max) {\n                    max = list.get((int) N);\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpl_4twjts.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                if (list.get((int)N) > max) {\n                    max = list.get((int)N);\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpsq2qyog2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                if (list.get((int) N) > max) {\n                    max = list.get((int) N);\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpzb9wy4m7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            max = Math.max(max, row.get((int) N));\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmprqdg7ugp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            if (row.size() > N) {\n                max = Math.max(max, row.get((int) N));\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmp79jkt75z.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp_911mq40.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp_911mq40.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpiu51aswx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmp72xlldpz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Your code here.\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123408,
      "stdout": "",
      "stderr": "/tmp/tmpm3s_xdr9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp0mfekyf4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            if (row.get((int) N) > max) {\n                max = row.get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpb19o8lze.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp9dtgl2hx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Your code goes here\n        return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123408,
      "stdout": "",
      "stderr": "/tmp/tmp1bbqb6q3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> list : test_list) {\n            if (list.get((int) N) > max) {\n                max = list.get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpfazjqohj.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                if (list.get((int)N) > max) {\n                    max = list.get((int)N);\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpcfaogfvc.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = -1;\n        for (ArrayList<Long> row : test_list) {\n            if (row.get((int)N) > max) {\n                max = row.get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123408,
      "stdout": "",
      "stderr": "/tmp/tmp7o1ceiby.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            if (row.get((int)N) > max) {\n                max = row.get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpagu1hubc.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmp72xlldpz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp9dtgl2hx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpvw2lcjfw.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        return test_list.stream().map(x -> x.get((int) N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123408,
      "stdout": "",
      "stderr": "/tmp/tmp8vus0id6.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpisyu6xvi.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmp72xlldpz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (ArrayList<Long> row : test_list) {\n            if (row.size() > N) {\n                if (row.get((int) N) > max) {\n                    max = row.get((int) N);\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123408,
      "stdout": "",
      "stderr": "/tmp/tmpi1a8g53i.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp9dtgl2hx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> list : test_list) {\n            if (list.get((int) N) > max) {\n                max = list.get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpfazjqohj.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp9dtgl2hx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpvw2lcjfw.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                max = Math.max(max, list.get((int)N));\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmp7jlfczkz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int) N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmp2b1jk0s1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                max = Math.max(max, list.get((int)N));\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmp7jlfczkz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp9dtgl2hx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        return test_list.stream()\n            .map(x -> x.get((int) N))\n            .max(Comparator.naturalOrder())\n            .get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123408,
      "stdout": "",
      "stderr": "/tmp/tmpvp9ddvmj.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                if (list.get((int) N) > max) {\n                    max = list.get((int) N);\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123408,
      "stdout": "",
      "stderr": "/tmp/tmphqjsalr5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (ArrayList<Long> row : test_list) {\n            if (row.size() > N) {\n                if (row.get((int)N) > max) {\n                    max = row.get((int)N);\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123408,
      "stdout": "",
      "stderr": "/tmp/tmpv6ymo3fg.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpisyu6xvi.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int) N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmp2b1jk0s1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = test_list.get(0).get((int)N);\n        for(int i = 1; i < test_list.size(); i++) {\n            if(test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123408,
      "stdout": "",
      "stderr": "/tmp/tmpunjaghym.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123408,
      "stdout": "",
      "stderr": "/tmp/tmpn0xh381b.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        return test_list.stream().map(x -> x.get((int) N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123408,
      "stdout": "",
      "stderr": "/tmp/tmp8vus0id6.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmp72xlldpz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp9dtgl2hx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                max = Math.max(max, list.get((int) N));\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpkrkdy8el.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp_911mq40.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            if (row.size() > N) {\n                max = Math.max(max, row.get((int) N));\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpclx7qnjs.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp0mfekyf4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp9dtgl2hx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpiu51aswx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmp33mx3ra5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp0mfekyf4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            if (row.size() > N) {\n                max = Math.max(max, row.get((int)N));\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123408,
      "stdout": "",
      "stderr": "/tmp/tmpo0zs0geu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                if (list.get((int) N) > max) {\n                    max = list.get((int) N);\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpzb9wy4m7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp9dtgl2hx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp_911mq40.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (ArrayList<Long> row : test_list) {\n            if (row.size() > N) {\n                if (row.get((int) N) > max) {\n                    max = row.get((int) N);\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123408,
      "stdout": "",
      "stderr": "/tmp/tmpi1a8g53i.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> i : test_list) {\n            if (i.get((int) N) > max) {\n                max = i.get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123408,
      "stdout": "",
      "stderr": "/tmp/tmpkcvypout.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp9dtgl2hx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp0mfekyf4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().map(x -> x.get((int)N)).max(Long::compare).get();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp9dtgl2hx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            if (row.get((int) N) > max) {\n                max = row.get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpt6srqwr5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpmepu8iu4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> list : test_list) {\n            if (list.get((int)N) > max) {\n                max = list.get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmper7uenvx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (ArrayList<Long> list : test_list) {\n            if (list.get((int)N) > max) {\n                max = list.get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpimvj25kf.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                if (list.get((int)N) > max) {\n                    max = list.get((int)N);\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpcfaogfvc.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (ArrayList<Long> list : test_list) {\n            if (list.get((int)N) > max) {\n                max = list.get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123408,
      "stdout": "",
      "stderr": "/tmp/tmp76fgwpx0.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            if (row.get((int)N) > max) {\n                max = row.get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpdt26uv9p.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp_911mq40.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp_911mq40.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        return test_list.stream().mapToLong(x -> x.get((int)N)).max().getAsLong();\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpfcqwh3vu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Your code here\n        long max = 0;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                if (list.get((int) N) > max) {\n                    max = list.get((int) N);\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpn8bwnzdd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpvw2lcjfw.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            if (row.get((int)N) > max) {\n                max = row.get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpagu1hubc.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                if (list.get((int)N) > max) {\n                    max = list.get((int)N);\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpcfaogfvc.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123408,
      "stdout": "",
      "stderr": "/tmp/tmp8vly37od.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (ArrayList<Long> row : test_list) {\n            if (row.get((int) N) > max) {\n                max = row.get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpa98gxzju.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int) N) > max) {\n                max = test_list.get(i).get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpvw2lcjfw.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here.\n        long max = 0;\n        for(int i = 0; i < test_list.size(); i++) {\n            if(test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmpmepu8iu4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> list : test_list) {\n            if (list.get((int) N) > max) {\n                max = list.get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123407,
      "stdout": "",
      "stderr": "/tmp/tmpwso9tlp4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmp7uh3pvim.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                if (list.get((int)N) > max) {\n                    max = list.get((int)N);\n                }\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123408,
      "stdout": "",
      "stderr": "/tmp/tmpk0g4c_mw.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i).get((int)N) > max) {\n                max = test_list.get(i).get((int)N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1666123406,
      "stdout": "",
      "stderr": "/tmp/tmp72xlldpz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (ArrayList<Long> list : test_list) {\n            if (list.get((int) N) > max) {\n                max = list.get((int) N);\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpdmkiok7o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> row : test_list) {\n            if (row.size() > N) {\n                max = Math.max(max, row.get((int)N));\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpf859wq96.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function which given a matrix represented as an array array list of array lists returns the max of the n'th column.\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = Long.MIN_VALUE;\n        for (ArrayList<Long> list : test_list) {\n            if (list.size() > N) {\n                max = Math.max(max, list.get((int) N));\n            }\n        }\n        return max;\n    }\n    public static void main(String[] args) {\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));\n    assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));\n    }\n\n}\n",
      "timestamp": 1665510312,
      "stdout": "",
      "stderr": "/tmp/tmpzoknfbmp.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}