{
  "name": "mbpp_267_square_Sum",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    public static long squareSum(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_267_square_Sum.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return IntStream.rangeClosed(1, (int)n).map(x -> x * x).sum();",
    "        return IntStream.rangeClosed(1, (int) n).map(i -> i * i).sum();",
    "        // Your code here\n        return 0;",
    "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            sum += i * i;\n        }\n        return sum;",
    "        // Write your code here\n        long sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += Math.pow(2 * i - 1, 2);\n        }\n        return sum;",
    "        return n * n * n;",
    "        return 0;",
    "        return 0;",
    "        return n*n*n;",
    "        return 0;",
    "        long sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i * i;\n        }\n        return sum;",
    "        return 0;",
    "        return IntStream.rangeClosed(1, (int)n).map(i -> i * i).sum();",
    "        return 0;",
    "        return IntStream.range(0, (int) n)\n            .map(i -> (i * 2) + 1)\n            .map(i -> i * i)\n            .sum();",
    "        return n * n * n;",
    "        return IntStream.range(1, (int)n).map(x -> x*x).sum();",
    "        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            sum += i * i;\n        }\n        return sum;",
    "        long sum = 0;\n        for(int i = 1; i <= n; i++) {\n            sum += (2 * i - 1) * (2 * i - 1);\n        }\n        return sum;",
    "        return 0;"
  ]
}