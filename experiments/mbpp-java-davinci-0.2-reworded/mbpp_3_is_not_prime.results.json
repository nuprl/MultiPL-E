{
  "name": "mbpp_3_is_not_prime",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        if (n <= 3) return false;\n        if (n % 2 == 0 || n % 3 == 0) return true;\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) {\n            return true;\n        }\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) {\n            return true;\n        }\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        if (n == 2) return false;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) {\n            return true;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186348,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvhk1t93g.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) {\n            return true;\n        }\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) {\n            return true;\n        }\n        for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186350,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186350,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186350,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        // Write your code here.\n        if (n == 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186350,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) {\n            return true;\n        }\n        for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) {\n            return true;\n        }\n        if (n == 2) {\n            return false;\n        }\n        if (n % 2 == 0) {\n            return true;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186351,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186351,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) {\n            return true;\n        }\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) {\n            return true;\n        }\n        if (n == 2) {\n            return false;\n        }\n        if (n % 2 == 0) {\n            return true;\n        }\n        for (long i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186351,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        if (n <= 3) return false;\n        if (n % 2 == 0 || n % 3 == 0) return true;\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) {\n            return true;\n        }\n        if (n <= 3) {\n            return false;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return true;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) {\n            return true;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        // Write your code here.\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186352,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8oj2gpa_.java:16)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        if (n <= 3) return false;\n        if (n % 2 == 0 || n % 3 == 0) return true;\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) {\n            return true;\n        }\n        if (n <= 3) {\n            return false;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return true;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2 || n == 3) return false;\n        if (n % 2 == 0 || n % 3 == 0) return true;\n        long sqrtN = (long)Math.sqrt(n)+1;\n        for (long i = 6L; i <= sqrtN; i += 6) {\n            if (n % (i-1) == 0 || n % (i+1) == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186348,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvhk1t93g.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        // Your code here\n        if (n < 2) {\n            return true;\n        }\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) {\n            return true;\n        }\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186350,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        if (n <= 3) return false;\n        if (n % 2 == 0 || n % 3 == 0) return true;\n        for (long i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) {\n            return true;\n        }\n        if (n <= 3) {\n            return false;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return true;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) {\n            return true;\n        }\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) {\n            return true;\n        }\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186355,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) {\n            return true;\n        }\n        if (n <= 3) {\n            return false;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return true;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) {\n            return true;\n        }\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186355,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        // Write your code here.\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186352,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8oj2gpa_.java:16)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 2) {\n            return false;\n        }\n        if (n % 2 == 0) {\n            return true;\n        }\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186355,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186348,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvhk1t93g.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186350,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) {\n            return true;\n        }\n        if (n <= 3) {\n            return false;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return true;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186350,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186348,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvhk1t93g.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186356,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        // Write your code here.\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186352,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8oj2gpa_.java:16)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186350,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186348,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvhk1t93g.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186356,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        // Write your code here.\n        if (n <= 1) {\n            return true;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186356,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        // Write your code here\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186357,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd069sefz.java:16)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) {\n            return true;\n        }\n        if (n == 2) {\n            return false;\n        }\n        if (n % 2 == 0) {\n            return true;\n        }\n        for (long i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        // Write your code here.\n        if (n == 1) {\n            return true;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        if (n <= 3) return false;\n        if (n % 2 == 0 || n % 3 == 0) return true;\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186357,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        if (n <= 3) return false;\n        if (n % 2 == 0 || n % 3 == 0) return true;\n        for (long i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) {\n            return true;\n        }\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186355,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2 || n == 3) return false;\n        if (n % 2 == 0 || n % 3 == 0) return true;\n        long sqrtN = (long) Math.sqrt(n) + 1;\n        for (long i = 6L; i <= sqrtN; i += 6) {\n            if (n % (i - 1) == 0 || n % (i + 1) == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186358,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186348,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvhk1t93g.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186350,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1)\n            return true;\n        if (n <= 3)\n            return false;\n        if (n % 2 == 0 || n % 3 == 0)\n            return true;\n        for (int i = 5; i * i <= n; i = i + 6)\n            if (n % i == 0 || n % (i + 2) == 0)\n                return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186358,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) {\n            return true;\n        }\n        if (n == 2) {\n            return false;\n        }\n        if (n % 2 == 0) {\n            return true;\n        }\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186358,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) {\n            return true;\n        }\n        if (n == 2) {\n            return false;\n        }\n        if (n % 2 == 0) {\n            return true;\n        }\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186358,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2 || n == 3) return false;\n        if (n % 2 == 0 || n % 3 == 0) return true;\n        long sqrtN = (long) Math.sqrt(n) + 1;\n        for (long i = 6L; i <= sqrtN; i += 6) {\n            if (n % (i - 1) == 0 || n % (i + 1) == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186358,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        if (n <= 3) return false;\n        if (n % 2 == 0 || n % 3 == 0) return true;\n        for (long i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186356,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) {\n            return true;\n        }\n        for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) {\n            return true;\n        }\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186350,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186348,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvhk1t93g.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        if (n <= 3) return false;\n        if (n % 2 == 0 || n % 3 == 0) return true;\n        for (long i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186354,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186359,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186359,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        if (n <= 3) return false;\n        if (n % 2 == 0 || n % 3 == 0) return true;\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186356,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) {\n            return true;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186360,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) {\n            return true;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) {\n            return true;\n        }\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 2 || n == 3) {\n            return false;\n        }\n        if (n % 2 == 0) {\n            return true;\n        }\n        for (int i = 3; i < Math.sqrt(n) + 1; i += 2) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186360,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186350,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) {\n            return true;\n        }\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186350,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 2 || n == 3) {\n            return false;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return true;\n        }\n        long sqrtN = (long) Math.sqrt(n) + 1;\n        for (long i = 6L; i <= sqrtN; i += 6) {\n            if (n % (i - 1) == 0 || n % (i + 1) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186360,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        if (n <= 3) return false;\n        if (n % 2 == 0 || n % 3 == 0) return true;\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186351,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) {\n            return true;\n        }\n        if (n == 2) {\n            return false;\n        }\n        if (n % 2 == 0) {\n            return true;\n        }\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186360,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186348,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvhk1t93g.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) {\n            return true;\n        }\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186360,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186348,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvhk1t93g.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) {\n            return true;\n        }\n        for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) {\n            return true;\n        }\n        if (n == 2) {\n            return false;\n        }\n        if (n % 2 == 0) {\n            return true;\n        }\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186360,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) {\n            return true;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186350,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) {\n            return true;\n        }\n        if (n == 2) {\n            return false;\n        }\n        if (n % 2 == 0) {\n            return true;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186361,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) {\n            return true;\n        }\n        for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186361,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) {\n            return true;\n        }\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186348,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvhk1t93g.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186356,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) {\n            return true;\n        }\n        if (n == 2) {\n            return false;\n        }\n        if (n % 2 == 0) {\n            return true;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186351,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        if (n == 2) return false;\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186361,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) {\n            return true;\n        }\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186353,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) {\n            return true;\n        }\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186348,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvhk1t93g.java:15)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (long i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n <= 1) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        long sqrt = (long) Math.sqrt(n);\n        for (long i = 3; i <= sqrt; i += 2) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186362,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) {\n            return true;\n        }\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186355,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n < 2) return true;\n        if (n == 2) return false;\n        if (n % 2 == 0) return true;\n        for (int i = 3; i * i <= n; i += 2)\n            if (n % i == 0) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to identify non-prime numbers.\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0) return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1667186362,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}