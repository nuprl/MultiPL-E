{
  "name": "mbpp_279_is_num_decagonal",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the nth decagonal number.\n    public static long isNumDecagonal(long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(isNumDecagonal((3l)) == (27l));\n    assert(isNumDecagonal((7l)) == (175l));\n    assert(isNumDecagonal((10l)) == (370l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // n = (3*n^2 - n)/2\n        // n^2 - 3n + 2n = 0\n        // n(n - 3) + 2n = 0\n        // n(n - 3 + 2) = 0\n        // n(n - 1) = 0\n        // n = 0 or n = 1\n        // n = 0 is not a decagonal number\n        // n = 1 is a decagonal number\n        // n = 1 is the first decagonal number\n        // n = 2 is the second decagonal number\n        // n = 3 is the third decagonal number\n        // n = 4 is the fourth decagonal number\n        // n = 5 is the fifth decagonal number\n        // n = 6 is the sixth decagonal number\n        // n = 7 is the seventh decagonal number\n        // n = 8 is the eighth decagonal number\n        // n = 9 is the ninth decagonal number\n        // n = 10 is the tenth decagonal number\n        // n = 11 is the eleventh decagonal number\n        // n = 12 is the twelfth decagonal number\n        // n = 13 is the thirteenth decagonal number\n        // n = 14 is the fourteenth decagonal number\n        // n = 15 is the fifteenth decagonal number\n        // n = 16 is the sixteenth decagonal number\n        // n = 17 is the seventeenth decagonal number\n        // n = 18 is the eighteenth decagonal number\n        // n = 19 is the nineteenth decagonal number\n        // n = 20 is the twentieth decagonal number\n        // n = 21 is the twenty-first decagonal number\n        // n = 22 is the twenty-second decagonal number\n        // n = 23 is the twenty-third decagonal number\n        // n = 24 is the twenty-fourth decagonal number\n        // n = 25 is the twenty-fifth decagonal number\n        // n = 26 is the twenty-sixth decagonal number\n        // n = 27 is the twenty-seventh decagonal number\n        // n = 28 is the twenty-eighth decagonal number\n        // n = 29 is the twenty-ninth decagonal number\n        // n = 30 is the thirtieth decagonal number\n        // n = 31 is the thirty-first decagonal number\n        // n = 32",
    "        long a = n * (3 * n - 2);\n        if (a % 2 == 0) {\n            return a / 2;\n        }\n        return -1;",
    "        double x = (Math.sqrt(1 + 4 * 2 * n) - 1) / 2;\n        if (x == (int) x) {\n            return (long) x;\n        }\n        return -1;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long num = n * (3 * n - 2);\n        return num;",
    "        long a = (long) Math.sqrt(1 + 4 * 2 * n);\n        if (a * a == 1 + 4 * 2 * n) {\n            return a;\n        }\n        return -1;",
    "        long a = (long) Math.sqrt(1 + 4 * 3 * 2 * n);\n        if (a * a == 1 + 4 * 3 * 2 * n) {\n            return a;\n        }\n        return -1;",
    "        long num = (long) (3 * n * n - n) / 2;\n        return num;",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // n^2 = (2n + 1)/3\n        // n = sqrt((2n + 1)/3)\n        double sqrt = Math.sqrt((2*n + 1)/3);\n        if (sqrt == (int)sqrt) {\n            return n;\n        }\n        return -1;",
    "        // n = (3 * n^2 - n) / 2\n        long a = 3;\n        long b = -1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (long) ((-b + Math.sqrt(d)) / (2 * a));\n        long x2 = (long) ((-b - Math.sqrt(d)) / (2 * a));\n        if (x1 * x1 * a + x1 * b + c == 0) {\n            return x1;\n        }\n        if (x2 * x2 * a + x2 * b + c == 0) {\n            return x2;\n        }\n        return -1;",
    "        // n = (3*n^2 - n)/2\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n        // n^2 = (2*n + 1)/3\n       ",
    "        long x = (long) Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        long num = n * (3 * n - 2);\n        return num;",
    "        long a = (long) Math.sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        // n = (3 * n^2 - n) / 2\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - n - 2n / 3 = 0\n        // n^2 - 3n / 3 = 2n / 3\n        // n^2 - 3n = 2n\n        // n^2 - 5n = 0\n        // n(n - 5) = 0\n        // n = 0, n = 5\n        // n = 5\n        // n = (3 * 5^2 - 5) / 2\n        // n = (3 * 25 - 5) / 2\n        // n = 70 / 2\n        // n = 35\n        return (3 * n * n - n) / 2;",
    "        long nthDecagonal = 0;\n        long i = 1;\n        while (nthDecagonal < n) {\n            nthDecagonal = (i * (3 * i - 1)) / 2;\n            i++;\n        }\n        if (nthDecagonal == n) {\n            return 1;\n        }\n        return 0;",
    "        // Write your code here\n        return 0;",
    "        long x = (long)Math.sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return -1;",
    "        // Your code here\n        long num = 0;\n        for (long i = 1; i <= n; i++) {\n            num += i * 10;\n        }\n        return num;"
  ]
}