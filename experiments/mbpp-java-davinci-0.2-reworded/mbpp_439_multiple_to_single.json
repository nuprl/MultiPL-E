{
  "name": "mbpp_439_multiple_to_single",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to join an array array list of multiple integers into a single integer.\n    public static long multipleToSingle(ArrayList<Long> L) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(multipleToSingle((new ArrayList<Long>(Arrays.asList((long)11l, (long)33l, (long)50l)))) == (113350l));\n    assert(multipleToSingle((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (-123456l));\n    assert(multipleToSingle((new ArrayList<Long>(Arrays.asList((long)10l, (long)15l, (long)20l, (long)25l)))) == (10152025l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long result = 0;\n        for (int i = 0; i < L.size(); i++) {\n            result = result * 10 + L.get(i);\n        }\n        return result;",
    "        long res = 0;\n        for (long i : L) {\n            res = res * 10 + i;\n        }\n        return res;",
    "        long result = 0;\n        for (long i : L) {\n            result = result * 10 + i;\n        }\n        return result;",
    "        long result = 0;\n        for (int i = 0; i < L.size(); i++) {\n            result = result * 10 + L.get(i);\n        }\n        return result;",
    "        long result = 0;\n        for (int i = 0; i < L.size(); i++) {\n            result = result * 10 + L.get(i);\n        }\n        return result;",
    "        long result = 0;\n        for (long l : L) {\n            result = result * 10 + l;\n        }\n        return result;",
    "        long result = 0;\n        for (int i = 0; i < L.size(); i++) {\n            result = result * 10 + L.get(i);\n        }\n        return result;",
    "        StringBuilder sb = new StringBuilder();\n        for (long l : L) {\n            sb.append(l);\n        }\n        return Long.parseLong(sb.toString());",
    "        long sum = 0;\n        for (int i = 0; i < L.size(); i++) {\n            sum += L.get(i);\n            sum *= 10;\n        }\n        return sum / 10;",
    "        long result = 0;\n        for (long i : L) {\n            result = result * 10 + i;\n        }\n        return result;",
    "        long sum = 0;\n        for (long i : L) {\n            sum = sum * 10 + i;\n        }\n        return sum;",
    "        long result = 0;\n        for (int i = 0; i < L.size(); i++) {\n            result = result * 10 + L.get(i);\n        }\n        return result;",
    "        long result = 0;\n        for (int i = 0; i < L.size(); i++) {\n            result = result * 10 + L.get(i);\n        }\n        return result;",
    "        StringBuilder sb = new StringBuilder();\n        for (long l : L) {\n            sb.append(l);\n        }\n        return Long.parseLong(sb.toString());",
    "        long res = 0;\n        for (int i = 0; i < L.size(); i++) {\n            res = res * 10 + L.get(i);\n        }\n        return res;",
    "        long result = 0;\n        for (long l : L) {\n            result = result * 10 + l;\n        }\n        return result;",
    "        long result = 0;\n        for (int i = 0; i < L.size(); i++) {\n            result = result * 10 + L.get(i);\n        }\n        return result;",
    "        long result = 0;\n        for (int i = 0; i < L.size(); i++) {\n            result = result * 10 + L.get(i);\n        }\n        return result;",
    "        StringBuilder sb = new StringBuilder();\n        for (long l : L) {\n            sb.append(l);\n        }\n        return Long.parseLong(sb.toString());",
    "        long res = 0;\n        for (long i : L) {\n            res = res * 10 + i;\n        }\n        return res;"
  ]
}