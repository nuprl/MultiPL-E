{
  "name": "mbpp_141_pancake_sort",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to sort an array array list of elements.\n    public static ArrayList<Long> pancakeSort(ArrayList<Long> nums) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(pancakeSort((new ArrayList<Long>(Arrays.asList((long)15l, (long)79l, (long)25l, (long)38l, (long)69l)))).equals((new ArrayList<Long>(Arrays.asList((long)15l, (long)25l, (long)38l, (long)69l, (long)79l)))));\n    assert(pancakeSort((new ArrayList<Long>(Arrays.asList((long)98l, (long)12l, (long)54l, (long)36l, (long)85l)))).equals((new ArrayList<Long>(Arrays.asList((long)12l, (long)36l, (long)54l, (long)85l, (long)98l)))));\n    assert(pancakeSort((new ArrayList<Long>(Arrays.asList((long)41l, (long)42l, (long)32l, (long)12l, (long)23l)))).equals((new ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)32l, (long)41l, (long)42l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Write your code here.\n        int n = nums.size();\n        ArrayList<Long> ans = new ArrayList<>();\n        for (int i = n; i > 0; i--) {\n            int max = 0;\n            for (int j = 0; j < i; j++) {\n                if (nums.get(j) > nums.get(max)) {\n                    max = j;\n                }\n            }\n            if (max != i - 1) {\n                if (max != 0) {\n                    ans.add((long) max + 1);\n                    reverse(nums, max);\n                }\n                ans.add((long) i);\n                reverse(nums, i - 1);\n            }\n        }\n        return ans;",
    "        ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            int maxIndex = i;\n            for (int j = 0; j <= i; j++) {\n                if (nums.get(j) > nums.get(maxIndex)) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                flip(nums, maxIndex);\n                flip(nums, i);\n            }\n        }\n        return nums;",
    "        ArrayList<Long> result = new ArrayList<>();\n        int n = nums.size();\n        for (int i = n; i > 0; i--) {\n            int maxIndex = findMax(nums, i);\n            if (maxIndex != i - 1) {\n                flip(nums, maxIndex);\n                flip(nums, i - 1);\n                result.add((long)maxIndex + 1);\n                result.add((long)i);\n            }\n        }\n        return result;",
    "        ArrayList<Long> sorted = new ArrayList<Long>();\n        for (int i = 0; i < nums.size(); i++) {\n            sorted.add(i, nums.get(i));\n        }\n        Collections.sort(sorted);\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < nums.size(); i++) {\n            int index = nums.indexOf(sorted.get(i));\n            if (index == 0) {\n                result.add(index + 1L);\n                nums.remove(index);\n            } else {\n                result.add(index + 1L);\n                result.add(nums.size() - i);\n                nums = reverse(nums, index);\n                nums = reverse(nums, nums.size() - i - 1);\n            }\n        }\n        return result;",
    "        // Write your code here\n        return nums;",
    "        // Write your code here\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            int maxIndex = findMaxIndex(nums, i);\n            if (maxIndex == i) {\n                continue;\n            }\n            if (maxIndex != 0) {\n                result.add((long) maxIndex + 1);\n                flip(nums, maxIndex);\n            }\n            result.add((long) i + 1);\n            flip(nums, i);\n        }\n        return result;",
    "        // Write your code here.\n        ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            sorted.add(nums.get(i));\n        }\n        Collections.sort(sorted);\n        ArrayList<Long> result = new ArrayList<>();\n        while (nums.size() > 0) {\n            int index = nums.indexOf(sorted.get(0));\n            if (index == 0) {\n                result.add((long) nums.size());\n                nums.remove(0);\n                sorted.remove(0);\n            } else {\n                result.add((long) index + 1);\n                ArrayList<Long> temp = new ArrayList<>();\n                for (int i = index; i >= 0; i--) {\n                    temp.add(nums.get(i));\n                }\n                for (int i = 0; i <= index; i++) {\n                    nums.set(i, temp.get(index - i));\n                }\n                result.add((long) nums.size());\n                temp = new ArrayList<>();\n                for (int i = nums.size() - 1; i >= 0; i--) {\n                    temp.add(nums.get(i));\n                }\n                for (int i = 0; i < nums.size(); i++) {\n                    nums.set(i, temp.get(i));\n                }\n                nums.remove(0);\n                sorted.remove(0);\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        int n = nums.size();\n        for (int i = 0; i < n; i++) {\n            int maxIndex = findMaxIndex(nums, n - i);\n            if (maxIndex == n - i - 1)\n                continue;\n            if (maxIndex != 0) {\n                result.add((long) maxIndex + 1);\n                flip(nums, maxIndex);\n            }\n            result.add((long) n - i);\n            flip(nums, n - i - 1);\n        }\n        return result;",
    "        ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            sorted.add(i + 1L);\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n        while (!nums.equals(sorted)) {\n            int max = 0;\n            for (int i = 0; i < nums.size(); i++) {\n                if (nums.get(i) > nums.get(max)) {\n                    max = i;\n                }\n            }\n            if (max != nums.size() - 1) {\n                if (max != 0) {\n                    ans.add((long) max + 1);\n                    reverse(nums, max);\n                }\n                ans.add((long) nums.size());\n                reverse(nums, nums.size() - 1);\n            } else {\n                ans.add((long) nums.size());\n                reverse(nums, nums.size() - 1);\n            }\n        }\n        return ans;",
    "        int n = nums.size();\n        for (int i = n; i > 0; i--) {\n            int max = findMax(nums, i);\n            if (max != i - 1) {\n                flip(nums, max);\n                flip(nums, i - 1);\n            }\n        }\n        return nums;",
    "        ArrayList<Long> result = new ArrayList<>();\n        int n = nums.size();\n        for (int i = n; i > 0; i--) {\n            int index = nums.indexOf(new Long(i));\n            if (index == i - 1) {\n                continue;\n            }\n            if (index != 0) {\n                result.add(new Long(index + 1));\n                reverse(nums, index + 1);\n            }\n            result.add(new Long(i));\n            reverse(nums, i);\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        for (int i = nums.size() - 1; i > 0; i--) {\n            int maxIndex = 0;\n            for (int j = 0; j <= i; j++) {\n                if (nums.get(j) > nums.get(maxIndex)) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                if (maxIndex != 0) {\n                    result.add((long) maxIndex + 1);\n                    Collections.reverse(nums.subList(0, maxIndex + 1));\n                }\n                result.add((long) i + 1);\n                Collections.reverse(nums.subList(0, i + 1));\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            int maxIndex = i;\n            for (int j = 0; j <= i; j++) {\n                if (nums.get(j) > nums.get(maxIndex)) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                result.add((long) maxIndex + 1);\n                result.add((long) i + 1);\n                Collections.reverse(nums.subList(0, maxIndex + 1));\n                Collections.reverse(nums.subList(0, i + 1));\n            }\n        }\n        return result;",
    "        ArrayList<Long> sorted = new ArrayList<Long>(nums);\n        Collections.sort(sorted);\n        ArrayList<Long> flips = new ArrayList<Long>();\n        while(!nums.equals(sorted)) {\n            int maxIndex = nums.indexOf(Collections.max(nums));\n            if(maxIndex != nums.size() - 1) {\n                flip(nums, maxIndex);\n                flips.add((long)maxIndex + 1);\n            }\n            flip(nums, nums.size() - 1);\n            flips.add((long)nums.size());\n        }\n        return flips;",
    "        int n = nums.size();\n        ArrayList<Long> ans = new ArrayList<>();\n        for (int i = n; i > 0; i--) {\n            int index = nums.indexOf((long)i);\n            if (index == i - 1) continue;\n            if (index != 0) {\n                ans.add((long)index + 1);\n                Collections.reverse(nums.subList(0, index + 1));\n            }\n            ans.add((long)i);\n            Collections.reverse(nums.subList(0, i));\n        }\n        return ans;",
    "        // Write your code here\n        int n = nums.size();\n        for (int i = n; i > 0; i--) {\n            int max = 0;\n            for (int j = 0; j < i; j++) {\n                if (nums.get(j) > nums.get(max)) {\n                    max = j;\n                }\n            }\n            if (max != i - 1) {\n                flip(nums, max);\n                flip(nums, i - 1);\n            }\n        }\n        return nums;",
    "        ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            int maxIndex = i;\n            for (int j = 0; j <= i; j++) {\n                if (nums.get(j) > nums.get(maxIndex)) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                flip(nums, maxIndex);\n                flip(nums, i);\n            }\n            sorted.add(nums.get(i));\n        }\n        return sorted;",
    "        ArrayList<Long> sorted = new ArrayList<Long>();\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            long max = Collections.max(nums);\n            int index = nums.indexOf(max);\n            if (index != i) {\n                if (index != 0) {\n                    Collections.reverse(nums.subList(0, index + 1));\n                    sorted.add((long) index + 1);\n                }\n                Collections.reverse(nums.subList(0, i + 1));\n                sorted.add((long) i + 1);\n            }\n        }\n        return sorted;",
    "        // Write your code here.\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = nums.size() - 1; i > 0; i--) {\n            int maxIndex = i;\n            for (int j = 0; j < i; j++) {\n                if (nums.get(j) > nums.get(maxIndex)) {\n                    maxIndex = j;\n                }\n            }\n            if (maxIndex != i) {\n                flip(nums, maxIndex);\n                flip(nums, i);\n                result.add((long) maxIndex + 1);\n                result.add((long) i + 1);\n            }\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        int n = nums.size();\n        for (int i = 0; i < n; i++) {\n            int maxIndex = findMaxIndex(nums, n - i);\n            if (maxIndex == n - i - 1) {\n                continue;\n            }\n            if (maxIndex > 0) {\n                result.add((long) maxIndex + 1);\n                flip(nums, maxIndex);\n            }\n            result.add((long) n - i);\n            flip(nums, n - i - 1);\n        }\n        return result;"
  ]
}