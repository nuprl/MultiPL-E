{
  "name": "mbpp_237_check_occurences",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> hm = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(hm.containsKey(i)) {\n                hm.put(i,hm.get(i) + 1);\n            }\n            else {\n                hm.put(i,(long)1);\n            }\n        }\n        return hm;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpduxmbfor.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpduxmbfor.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpduxmbfor.java:23: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpduxmbfor.java:24: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsmu0f0mu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsmu0f0mu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            }\n            else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmprqq_7hwh.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmprqq_7hwh.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmprqq_7hwh.java:23: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmprqq_7hwh.java:24: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsmu0f0mu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsmu0f0mu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long x : test_list) {\n            if (occurences.containsKey(x)) {\n                occurences.put(x, occurences.get(x) + 1);\n            } else {\n                occurences.put(x, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1ou4d5rd.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1ou4d5rd.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1ou4d5rd.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1ou4d5rd.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpwoppflk9.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpwoppflk9.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpwoppflk9.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpwoppflk9.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpf5x2rr7d.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpf5x2rr7d.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpf5x2rr7d.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpf5x2rr7d.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsmu0f0mu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsmu0f0mu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long num : test_list) {\n            if (occurences.containsKey(num)) {\n                occurences.put(num, occurences.get(num) + 1);\n            } else {\n                occurences.put(num, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpgka2c79n.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpgka2c79n.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpgka2c79n.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpgka2c79n.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for(int i=0;i<test_list.size();i++) {\n            if(result.containsKey(test_list.get(i))) {\n                result.put(test_list.get(i),result.get(test_list.get(i))+1);\n            }\n            else {\n                result.put(test_list.get(i),1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp0hwp88xp.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp0hwp88xp.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp0hwp88xp.java:23: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp0hwp88xp.java:24: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsmu0f0mu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsmu0f0mu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsmu0f0mu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsmu0f0mu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(map.containsKey(i)) {\n                map.put(i,map.get(i)+1);\n            }\n            else {\n                map.put(i,1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp152e7m7q.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp152e7m7q.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp152e7m7q.java:23: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp152e7m7q.java:24: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpfmj1q3s0.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpfmj1q3s0.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpfmj1q3s0.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpfmj1q3s0.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsmu0f0mu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsmu0f0mu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsmu0f0mu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsmu0f0mu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1afcs0_a.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1afcs0_a.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i,result.get(i)+1);\n            } else {\n                result.put(i,1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1jx3vqvq.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1jx3vqvq.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1jx3vqvq.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1jx3vqvq.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(result.containsKey(i)) {\n                result.put(i,result.get(i)+1);\n            } else {\n                result.put(i,1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpkha1j6tc.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpkha1j6tc.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpkha1j6tc.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpkha1j6tc.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i,map.get(i)+1);\n            } else {\n                map.put(i,1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmp6er9q1kd.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp6er9q1kd.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp6er9q1kd.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp6er9q1kd.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsmu0f0mu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsmu0f0mu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i: test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmprp1jxmle.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmprp1jxmle.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmprp1jxmle.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmprp1jxmle.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpauzkxw17.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpauzkxw17.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpauzkxw17.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpauzkxw17.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> test_map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (test_map.containsKey(i)) {\n                Long count = test_map.get(i);\n                test_map.put(i,count+1);\n            } else {\n                test_map.put(i,1L);\n            }\n        }\n        return test_map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpi_k21lp4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpi_k21lp4.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpi_k21lp4.java:23: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpi_k21lp4.java:24: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (result.containsKey(test_list.get(i))) {\n                result.put(test_list.get(i), result.get(test_list.get(i)) + 1);\n            } else {\n                result.put(test_list.get(i), 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpg9iee7ze.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpg9iee7ze.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpg9iee7ze.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpg9iee7ze.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1afcs0_a.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1afcs0_a.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i,result.get(i)+1);\n            } else {\n                result.put(i,1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1jx3vqvq.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1jx3vqvq.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1jx3vqvq.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1jx3vqvq.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, (long) 1);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmplxbwlx_3.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmplxbwlx_3.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmplxbwlx_3.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmplxbwlx_3.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1afcs0_a.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1afcs0_a.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1afcs0_a.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1afcs0_a.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpauzkxw17.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpauzkxw17.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpauzkxw17.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpauzkxw17.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long num : test_list) {\n            if (occurences.containsKey(num)) {\n                occurences.put(num, occurences.get(num) + 1);\n            } else {\n                occurences.put(num, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpgka2c79n.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpgka2c79n.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpgka2c79n.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpgka2c79n.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpwoppflk9.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpwoppflk9.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpwoppflk9.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpwoppflk9.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1afcs0_a.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1afcs0_a.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (Long i: test_list) {\n            if (result.containsKey(i)) {\n                result.put(i,result.get(i)+1);\n            } else {\n                result.put(i,1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpyiffwqrw.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpyiffwqrw.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpyiffwqrw.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpyiffwqrw.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for(Long i : test_list) {\n            if(result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            }\n            else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpxtc49k2r.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpxtc49k2r.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpxtc49k2r.java:23: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpxtc49k2r.java:24: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> test_map = new HashMap<Long,Long>();\n        for (int i=0; i<test_list.size(); i++) {\n            if (test_map.containsKey(test_list.get(i))) {\n                test_map.put(test_list.get(i), test_map.get(test_list.get(i))+1);\n            } else {\n                test_map.put(test_list.get(i), 1L);\n            }\n        }\n        return test_map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmp3ncii47b.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp3ncii47b.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp3ncii47b.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp3ncii47b.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpc8_kww_b.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpc8_kww_b.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpc8_kww_b.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpc8_kww_b.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1afcs0_a.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1afcs0_a.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmp31lfmz9s.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp31lfmz9s.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp31lfmz9s.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp31lfmz9s.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long num : test_list) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmplmtxvsvf.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmplmtxvsvf.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmplmtxvsvf.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmplmtxvsvf.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpfmj1q3s0.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpfmj1q3s0.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpfmj1q3s0.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpfmj1q3s0.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i,result.get(i)+1);\n            } else {\n                result.put(i,1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1jx3vqvq.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1jx3vqvq.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1jx3vqvq.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1jx3vqvq.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> hm = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (hm.containsKey(i)) {\n                hm.put(i, hm.get(i) + 1);\n            } else {\n                hm.put(i, 1L);\n            }\n        }\n        return hm;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmp1_5jeyiq.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1_5jeyiq.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1_5jeyiq.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1_5jeyiq.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1afcs0_a.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1afcs0_a.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<>();\n        for(Long i : test_list) {\n            if(map.containsKey(i)) {\n                map.put(i,map.get(i)+1);\n            }\n            else {\n                map.put(i,1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmp4fgvg750.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4fgvg750.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4fgvg750.java:23: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4fgvg750.java:24: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            }\n            else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpz_7o1fs3.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpz_7o1fs3.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpz_7o1fs3.java:23: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpz_7o1fs3.java:24: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsmu0f0mu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsmu0f0mu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsmu0f0mu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsmu0f0mu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1afcs0_a.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1afcs0_a.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpf5x2rr7d.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpf5x2rr7d.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpf5x2rr7d.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpf5x2rr7d.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i,result.get(i)+1);\n            } else {\n                result.put(i,1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1jx3vqvq.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1jx3vqvq.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1jx3vqvq.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1jx3vqvq.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long num : test_list) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmplmtxvsvf.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmplmtxvsvf.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmplmtxvsvf.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmplmtxvsvf.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<>();\n        for(Long num: test_list) {\n            if(occurences.containsKey(num)) {\n                occurences.put(num, occurences.get(num) + 1);\n            } else {\n                occurences.put(num, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpzobrpwlx.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpzobrpwlx.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpzobrpwlx.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpzobrpwlx.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpauzkxw17.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpauzkxw17.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpauzkxw17.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpauzkxw17.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurances = new HashMap<Long,Long>();\n        for (Long element : test_list) {\n            if (occurances.containsKey(element)) {\n                occurances.put(element, occurances.get(element) + 1);\n            } else {\n                occurances.put(element, 1L);\n            }\n        }\n        return occurances;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmp8jdpdosv.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp8jdpdosv.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp8jdpdosv.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp8jdpdosv.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsmu0f0mu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsmu0f0mu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsmu0f0mu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsmu0f0mu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i,result.get(i)+1);\n            } else {\n                result.put(i,1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1jx3vqvq.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1jx3vqvq.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1jx3vqvq.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1jx3vqvq.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (long i : test_list) {\n            if (occurences.containsKey(i)) {\n                long count = occurences.get(i);\n                occurences.put(i, count + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpy_5qu4bp.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpy_5qu4bp.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpy_5qu4bp.java:23: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpy_5qu4bp.java:24: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1afcs0_a.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1afcs0_a.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for(int i=0;i<test_list.size();i++) {\n            if(result.containsKey(test_list.get(i))) {\n                result.put(test_list.get(i),result.get(test_list.get(i))+1);\n            }\n            else {\n                result.put(test_list.get(i),1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmp_ufwv2pa.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp_ufwv2pa.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp_ufwv2pa.java:23: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp_ufwv2pa.java:24: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for(Long i: test_list) {\n            if(result.containsKey(i)) {\n                result.put(i,result.get(i)+1);\n            } else {\n                result.put(i,1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmp8jaoq21v.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp8jaoq21v.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp8jaoq21v.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp8jaoq21v.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsmu0f0mu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsmu0f0mu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<>();\n        for(Long i: test_list) {\n            if(map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpbelfmzim.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpbelfmzim.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpbelfmzim.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpbelfmzim.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1afcs0_a.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1afcs0_a.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<>();\n        for(Long i : test_list) {\n            if(map.containsKey(i)) {\n                map.put(i,map.get(i)+1);\n            }\n            else {\n                map.put(i,1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmp4fgvg750.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4fgvg750.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4fgvg750.java:23: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4fgvg750.java:24: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(map.containsKey(i)) {\n                map.put(i,map.get(i)+1);\n            }\n            else {\n                map.put(i,1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp152e7m7q.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp152e7m7q.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp152e7m7q.java:23: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp152e7m7q.java:24: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1afcs0_a.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1afcs0_a.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1afcs0_a.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1afcs0_a.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i,result.get(i)+1);\n            } else {\n                result.put(i,1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1jx3vqvq.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1jx3vqvq.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1jx3vqvq.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1jx3vqvq.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsmu0f0mu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsmu0f0mu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1afcs0_a.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1afcs0_a.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpfmj1q3s0.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpfmj1q3s0.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpfmj1q3s0.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpfmj1q3s0.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpwoppflk9.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpwoppflk9.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpwoppflk9.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpwoppflk9.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsmu0f0mu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsmu0f0mu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpauzkxw17.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpauzkxw17.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpauzkxw17.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpauzkxw17.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1afcs0_a.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1afcs0_a.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1afcs0_a.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1afcs0_a.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1afcs0_a.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1afcs0_a.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsmu0f0mu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsmu0f0mu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for(Long i: test_list) {\n            if(result.containsKey(i)) {\n                result.put(i,result.get(i)+1);\n            }\n            else {\n                result.put(i,1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpamj7onhj.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpamj7onhj.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpamj7onhj.java:23: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpamj7onhj.java:24: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsmu0f0mu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsmu0f0mu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1afcs0_a.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1afcs0_a.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpauzkxw17.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpauzkxw17.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpauzkxw17.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpauzkxw17.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1afcs0_a.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1afcs0_a.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1afcs0_a.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1afcs0_a.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<>();\n        for(Long i : test_list) {\n            if(map.containsKey(i)) {\n                map.put(i,map.get(i)+1);\n            }\n            else {\n                map.put(i,1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmp4fgvg750.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4fgvg750.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4fgvg750.java:23: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4fgvg750.java:24: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsmu0f0mu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsmu0f0mu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i,result.get(i)+1);\n            } else {\n                result.put(i,1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1jx3vqvq.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1jx3vqvq.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1jx3vqvq.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1jx3vqvq.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> test_map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (test_map.containsKey(i)) {\n                test_map.put(i, test_map.get(i) + 1);\n            } else {\n                test_map.put(i, 1L);\n            }\n        }\n        return test_map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmp7a1h1c1d.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp7a1h1c1d.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp7a1h1c1d.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp7a1h1c1d.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1afcs0_a.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1afcs0_a.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(map.containsKey(i)) {\n                map.put(i,map.get(i)+1);\n            } else {\n                map.put(i,1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmp7pwl50ca.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp7pwl50ca.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp7pwl50ca.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp7pwl50ca.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpwoppflk9.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpwoppflk9.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpwoppflk9.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpwoppflk9.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for(Long i : test_list) {\n            if(result.containsKey(i)) {\n                result.put(i,result.get(i)+1);\n            } else {\n                result.put(i,1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmp3xhceyx_.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp3xhceyx_.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp3xhceyx_.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp3xhceyx_.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (result.containsKey(test_list.get(i))) {\n                result.put(test_list.get(i), result.get(test_list.get(i)) + 1);\n            } else {\n                result.put(test_list.get(i), 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpg9iee7ze.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpg9iee7ze.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpg9iee7ze.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpg9iee7ze.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i,result.get(i)+1);\n            }\n            else {\n                result.put(i,1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpoiz0xe53.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpoiz0xe53.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpoiz0xe53.java:23: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpoiz0xe53.java:24: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1afcs0_a.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1afcs0_a.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsmu0f0mu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsmu0f0mu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<>();\n        for(Long i : test_list) {\n            if(map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpm79ne7aw.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpm79ne7aw.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpm79ne7aw.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpm79ne7aw.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsmu0f0mu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsmu0f0mu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(map.containsKey(i)) {\n                map.put(i,map.get(i)+1);\n            }\n            else {\n                map.put(i,1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp152e7m7q.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp152e7m7q.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp152e7m7q.java:23: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp152e7m7q.java:24: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i,map.get(i)+1);\n            } else {\n                map.put(i,1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpdcqcussw.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpdcqcussw.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpdcqcussw.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpdcqcussw.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long element : test_list) {\n            if (occurences.containsKey(element)) {\n                occurences.put(element, occurences.get(element) + 1);\n            } else {\n                occurences.put(element, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpg1j26u5w.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpg1j26u5w.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpg1j26u5w.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpg1j26u5w.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsmu0f0mu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsmu0f0mu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpwoppflk9.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpwoppflk9.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpwoppflk9.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpwoppflk9.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<>();\n        for(Long i : test_list) {\n            if(occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpvvhcbc92.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpvvhcbc92.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpvvhcbc92.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpvvhcbc92.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpwoppflk9.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpwoppflk9.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpwoppflk9.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpwoppflk9.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsmu0f0mu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsmu0f0mu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsmu0f0mu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsmu0f0mu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1afcs0_a.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1afcs0_a.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long num : test_list) {\n            if (occurences.containsKey(num)) {\n                occurences.put(num, occurences.get(num) + 1);\n            } else {\n                occurences.put(num, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpgka2c79n.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpgka2c79n.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpgka2c79n.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpgka2c79n.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (result.containsKey(test_list.get(i))) {\n                result.put(test_list.get(i), result.get(test_list.get(i)) + 1);\n            } else {\n                result.put(test_list.get(i), 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpg9iee7ze.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpg9iee7ze.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpg9iee7ze.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpg9iee7ze.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpwoppflk9.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpwoppflk9.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpwoppflk9.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpwoppflk9.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsmu0f0mu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsmu0f0mu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (result.containsKey(test_list.get(i))) {\n                result.put(test_list.get(i), result.get(test_list.get(i)) + 1);\n            } else {\n                result.put(test_list.get(i), 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpg9iee7ze.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpg9iee7ze.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpg9iee7ze.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpg9iee7ze.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for(Long i: test_list) {\n            if(result.containsKey(i)) {\n                result.put(i,result.get(i)+1);\n            }\n            else {\n                result.put(i,1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmph0qoafxk.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmph0qoafxk.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmph0qoafxk.java:23: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmph0qoafxk.java:24: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpf5x2rr7d.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpf5x2rr7d.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpf5x2rr7d.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpf5x2rr7d.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i,result.get(i)+1);\n            } else {\n                result.put(i,1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1jx3vqvq.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1jx3vqvq.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1jx3vqvq.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1jx3vqvq.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(occurences.containsKey(i)) {\n                occurences.put(i,occurences.get(i)+1);\n            }\n            else {\n                occurences.put(i,1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpjamnpilb.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpjamnpilb.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpjamnpilb.java:23: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpjamnpilb.java:24: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpc8_kww_b.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpc8_kww_b.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpc8_kww_b.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpc8_kww_b.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpf5x2rr7d.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpf5x2rr7d.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpf5x2rr7d.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpf5x2rr7d.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(result.containsKey(i)) {\n                result.put(i,result.get(i)+1);\n            } else {\n                result.put(i,1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpkha1j6tc.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpkha1j6tc.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpkha1j6tc.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpkha1j6tc.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1afcs0_a.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1afcs0_a.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsmu0f0mu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsmu0f0mu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<>();\n        for(Long i : test_list) {\n            if(map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpm79ne7aw.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpm79ne7aw.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpm79ne7aw.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpm79ne7aw.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, (long)1);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmp5xp8kjfa.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp5xp8kjfa.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp5xp8kjfa.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp5xp8kjfa.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i,map.get(i)+1);\n            } else {\n                map.put(i,1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpdcqcussw.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpdcqcussw.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpdcqcussw.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpdcqcussw.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpf5x2rr7d.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpf5x2rr7d.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpf5x2rr7d.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpf5x2rr7d.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsmu0f0mu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsmu0f0mu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpwoppflk9.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpwoppflk9.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpwoppflk9.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpwoppflk9.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1afcs0_a.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1afcs0_a.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<>();\n        for(Long i: test_list) {\n            if(map.containsKey(i)) {\n                map.put(i, map.get(i)+1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpglbp9b0t.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpglbp9b0t.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpglbp9b0t.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpglbp9b0t.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for(Long i : test_list) {\n            if(result.containsKey(i)) {\n                result.put(i,result.get(i)+1);\n            } else {\n                result.put(i,1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmp3xhceyx_.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp3xhceyx_.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp3xhceyx_.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp3xhceyx_.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (map.containsKey(test_list.get(i))) {\n                map.put(test_list.get(i), map.get(test_list.get(i)) + 1);\n            } else {\n                map.put(test_list.get(i), 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpfcvun4z7.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpfcvun4z7.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpfcvun4z7.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpfcvun4z7.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(result.containsKey(i)) {\n                result.put(i,result.get(i)+1);\n            }\n            else {\n                result.put(i,1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpiodw7pkv.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpiodw7pkv.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpiodw7pkv.java:23: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpiodw7pkv.java:24: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpauzkxw17.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpauzkxw17.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpauzkxw17.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpauzkxw17.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1afcs0_a.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1afcs0_a.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpwoppflk9.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpwoppflk9.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpwoppflk9.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpwoppflk9.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for(int i = 0; i < test_list.size(); i++) {\n            if(result.containsKey(test_list.get(i))) {\n                result.put(test_list.get(i), result.get(test_list.get(i)) + 1);\n            } else {\n                result.put(test_list.get(i), 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmp6kd0o0zr.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp6kd0o0zr.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (int i = 0; i < test_list.size(); i++) {\n            if (result.containsKey(test_list.get(i))) {\n                result.put(test_list.get(i), result.get(test_list.get(i)) + 1);\n            } else {\n                result.put(test_list.get(i), 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpg9iee7ze.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpg9iee7ze.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpg9iee7ze.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpg9iee7ze.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<>();\n        for(Long i : test_list) {\n            if(map.containsKey(i)) {\n                map.put(i,map.get(i)+1);\n            }\n            else {\n                map.put(i,1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmp4fgvg750.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp4fgvg750.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp4fgvg750.java:23: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp4fgvg750.java:24: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpf5x2rr7d.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpf5x2rr7d.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpf5x2rr7d.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpf5x2rr7d.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<>();\n        for(Long i : test_list) {\n            if(map.containsKey(i)) {\n                map.put(i,map.get(i)+1);\n            } else {\n                map.put(i,1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpjlbnyfgm.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpjlbnyfgm.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpjlbnyfgm.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpjlbnyfgm.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i,map.get(i)+1);\n            } else {\n                map.put(i,1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpdcqcussw.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpdcqcussw.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpdcqcussw.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpdcqcussw.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for(Long i: test_list) {\n            if(map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, (long)1);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpis2gg1mx.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpis2gg1mx.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpf5x2rr7d.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpf5x2rr7d.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpf5x2rr7d.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpf5x2rr7d.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for(Long i : test_list) {\n            if(result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            }\n            else {\n                result.put(i, (long)1);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmp79tkgkdc.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp79tkgkdc.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i,result.get(i)+1);\n            } else {\n                result.put(i,1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1jx3vqvq.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1jx3vqvq.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1jx3vqvq.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1jx3vqvq.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1afcs0_a.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1afcs0_a.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> hm = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(hm.containsKey(i)) {\n                hm.put(i, hm.get(i) + 1);\n            } else {\n                hm.put(i, 1L);\n            }\n        }\n        return hm;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmp2_1qhx75.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp2_1qhx75.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp2_1qhx75.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp2_1qhx75.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpwoppflk9.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpwoppflk9.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpwoppflk9.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpwoppflk9.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp1afcs0_a.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmp1afcs0_a.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp1afcs0_a.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpc8_kww_b.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpc8_kww_b.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpc8_kww_b.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpc8_kww_b.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsmu0f0mu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsmu0f0mu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (result.containsKey(i)) {\n                result.put(i, result.get(i) + 1);\n            } else {\n                result.put(i, 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpq5rub9vu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpq5rub9vu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpq5rub9vu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for(Long i : test_list) {\n            if(map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1L);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmpc8_kww_b.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpc8_kww_b.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpc8_kww_b.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpc8_kww_b.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        for(int i = 0; i < test_list.size(); i++) {\n            if(result.containsKey(test_list.get(i))) {\n                result.put(test_list.get(i), result.get(test_list.get(i)) + 1);\n            } else {\n                result.put(test_list.get(i), 1L);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "/tmp/tmp6kd0o0zr.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmp6kd0o0zr.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                              ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.\n    public static HashMap<Long,Long> checkOccurences(ArrayList<Long> test_list) {\n        HashMap<Long,Long> occurences = new HashMap<Long,Long>();\n        for (Long i : test_list) {\n            if (occurences.containsKey(i)) {\n                occurences.put(i, occurences.get(i) + 1);\n            } else {\n                occurences.put(i, 1L);\n            }\n        }\n        return occurences;\n    }\n    public static void main(String[] args) {\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Long,Long>((4l, 7l), 1l)))));\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Long,Long>((16l, 23l), 1l)))));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                            ^\n/tmp/tmpsmu0f0mu.java:22: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                 ^\n/tmp/tmpsmu0f0mu.java:22: error: ';' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Long,Long>((3l, 6l), 1l)))));\n                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmpsmu0f0mu.java:23: error: ')' expected\n    assert(checkOccurences((new ArrayList<Long>(Arrays.asList((Pair<Long, Long>)Pair.with(",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}