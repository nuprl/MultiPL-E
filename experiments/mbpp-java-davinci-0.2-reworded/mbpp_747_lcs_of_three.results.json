{
  "name": "mbpp_747_lcs_of_three",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length(), n = Y.length(), o = Z.length();\n        int[][][] dp = new int[m+1][n+1][o+1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        dp[i][j][k] = dp[i-1][j-1][k-1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i-1][j][k], Math.max(dp[i][j-1][k], dp[i][j][k-1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1))\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        long[][][] L = new long[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189208,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(L[i - 1][j][k], Math.max(L[i][j - 1][k], L[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m+1][n+1][o+1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        dp[i][j][k] = dp[i-1][j-1][k-1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(Math.max(dp[i-1][j][k], dp[i][j-1][k]), dp[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189208,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1))\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1))\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i - 1][j][k], Math.max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1))\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(L[i - 1][j][k], Math.max(L[i][j - 1][k], L[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1))\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    }\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    }\n                    else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189208,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for(int i = 0; i <= m; i++) {\n            for(int j = 0; j <= n; j++) {\n                for(int k = 0; k <= o; k++) {\n                    if(i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if(X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(L[i-1][j][k], Math.max(L[i][j-1][k], L[i][j][k-1]));\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189209,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length(), n = Y.length(), o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(L[i-1][j][k], Math.max(L[i][j-1][k], L[i][j][k-1]));\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189209,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1))\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189209,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1))\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    else\n                        L[i][j][k] = Math.max(L[i - 1][j][k], Math.max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189209,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189209,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i - 1][j][k], Math.max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1))\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1))\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0||k==0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1)==Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189209,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1))\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length(), n = Y.length(), o = Z.length();\n        int[][][] dp = new int[m+1][n+1][o+1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        dp[i][j][k] = dp[i-1][j-1][k-1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i-1][j][k], Math.max(dp[i][j-1][k], dp[i][j][k-1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(L[i - 1][j][k], Math.max(L[i][j - 1][k], L[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m+1][n+1][o+1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        dp[i][j][k] = dp[i-1][j-1][k-1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i-1][j][k], Math.max(dp[i][j-1][k], dp[i][j][k-1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length(), n = Y.length(), o = Z.length();\n        int[][][] dp = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i - 1][j][k], Math.max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1))\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1))\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length(), n = Y.length(), o = Z.length();\n        int[][][] dp = new int[m+1][n+1][o+1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        dp[i][j][k] = dp[i-1][j-1][k-1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i-1][j][k], Math.max(dp[i][j-1][k], dp[i][j][k-1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(L[i - 1][j][k], Math.max(L[i][j - 1][k], L[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(L[i - 1][j][k], Math.max(L[i][j - 1][k], L[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1))\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m+1][n+1][o+1];\n        for(int i = 0; i <= m; i++) {\n            for(int j = 0; j <= n; j++) {\n                for(int k = 0; k <= o; k++) {\n                    if(i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if(X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        dp[i][j][k] = dp[i-1][j-1][k-1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(Math.max(dp[i-1][j][k], dp[i][j-1][k]), dp[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1))\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1))\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i - 1][j][k], Math.max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i - 1][j][k], Math.max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i - 1][j][k], Math.max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length(), n = Y.length(), o = Z.length();\n        int[][][] dp = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i - 1][j][k], Math.max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1))\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m+1][n+1][o+1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        dp[i][j][k] = dp[i-1][j-1][k-1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i-1][j][k], Math.max(dp[i][j-1][k], dp[i][j][k-1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length(), n = Y.length(), o = Z.length();\n        int[][][] dp = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i - 1][j][k], Math.max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1))\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189209,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(L[i - 1][j][k], Math.max(L[i][j - 1][k], L[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length(), n = Y.length(), o = Z.length();\n        int[][][] dp = new int[m+1][n+1][o+1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        dp[i][j][k] = dp[i-1][j-1][k-1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i-1][j][k], Math.max(dp[i][j-1][k], dp[i][j][k-1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(L[i - 1][j][k], Math.max(L[i][j - 1][k], L[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m+1][n+1][o+1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        dp[i][j][k] = dp[i-1][j-1][k-1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i-1][j][k], Math.max(dp[i][j-1][k], dp[i][j][k-1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1))\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1))\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m+1][n+1][o+1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        dp[i][j][k] = 1 + dp[i-1][j-1][k-1];\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i-1][j][k], Math.max(dp[i][j-1][k], dp[i][j][k-1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i - 1][j][k], Math.max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m+1][n+1][o+1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        dp[i][j][k] = dp[i-1][j-1][k-1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i-1][j][k], Math.max(dp[i][j-1][k], dp[i][j][k-1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(L[i - 1][j][k], Math.max(L[i][j - 1][k], L[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(L[i - 1][j][k], Math.max(L[i][j - 1][k], L[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i - 1][j][k], Math.max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189209,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i - 1][j][k], Math.max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length(), n = Y.length(), o = Z.length();\n        int[][][] dp = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i - 1][j][k], Math.max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length(), n = Y.length(), o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for(int i = 0; i <= m; i++) {\n            for(int j = 0; j <= n; j++) {\n                for(int k = 0; k <= o; k++) {\n                    if(i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if(X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(L[i-1][j][k], Math.max(L[i][j-1][k], L[i][j][k-1]));\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189211,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for(int i = 0; i <= m; i++) {\n            for(int j = 0; j <= n; j++) {\n                for(int k = 0; k <= o; k++) {\n                    if(i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if(X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(L[i-1][j][k], Math.max(L[i][j-1][k], L[i][j][k-1]));\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189209,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i - 1][j][k], Math.max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length(), n = Y.length(), o = Z.length();\n        int[][][] dp = new int[m+1][n+1][o+1];\n        for(int i = 0; i <= m; i++) {\n            for(int j = 0; j <= n; j++) {\n                for(int k = 0; k <= o; k++) {\n                    if(i == 0 || j == 0 || k == 0) dp[i][j][k] = 0;\n                    else if(X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) dp[i][j][k] = dp[i-1][j-1][k-1] + 1;\n                    else dp[i][j][k] = Math.max(Math.max(dp[i-1][j][k], dp[i][j-1][k]), dp[i][j][k-1]);\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1))\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(L[i-1][j][k], Math.max(L[i][j-1][k], L[i][j][k-1]));\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int[][][] dp = new int[X.length() + 1][Y.length() + 1][Z.length() + 1];\n        for (int i = 0; i < X.length(); i++) {\n            for (int j = 0; j < Y.length(); j++) {\n                for (int k = 0; k < Z.length(); k++) {\n                    if (X.charAt(i) == Y.charAt(j) && X.charAt(i) == Z.charAt(k)) {\n                        dp[i + 1][j + 1][k + 1] = dp[i][j][k] + 1;\n                    } else {\n                        dp[i + 1][j + 1][k + 1] = Math.max(dp[i][j + 1][k + 1], Math.max(dp[i + 1][j][k + 1], dp[i + 1][j + 1][k]));\n                    }\n                }\n            }\n        }\n        return dp[X.length()][Y.length()][Z.length()];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i - 1][j][k], Math.max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i - 1][j][k], Math.max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m+1][n+1][o+1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        dp[i][j][k] = dp[i-1][j-1][k-1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(Math.max(dp[i-1][j][k], dp[i][j-1][k]), dp[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189208,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0||k==0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1)==Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]),L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1))\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(L[i - 1][j][k], Math.max(L[i][j - 1][k], L[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m+1][n+1][o+1];\n        for(int i = 0; i <= m; i++) {\n            for(int j = 0; j <= n; j++) {\n                for(int k = 0; k <= o; k++) {\n                    if(i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if(X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        dp[i][j][k] = dp[i-1][j-1][k-1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i-1][j][k], Math.max(dp[i][j-1][k], dp[i][j][k-1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189213,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i - 1][j][k], Math.max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0||k==0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1)==Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]),L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length(), n = Y.length(), o = Z.length();\n        int[][][] dp = new int[m+1][n+1][o+1];\n        for(int i = 0; i <= m; i++) {\n            for(int j = 0; j <= n; j++) {\n                for(int k = 0; k <= o; k++) {\n                    if(i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if(X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        dp[i][j][k] = dp[i-1][j-1][k-1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i-1][j][k], Math.max(dp[i][j-1][k], dp[i][j][k-1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189213,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1))\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for(int i=0; i<=m; i++) {\n            for(int j=0; j<=n; j++) {\n                for(int k=0; k<=o; k++) {\n                    if(i==0 || j==0 || k==0) {\n                        L[i][j][k] = 0;\n                    } else if(X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(L[i-1][j][k], Math.max(L[i][j-1][k], L[i][j][k-1]));\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189213,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(Math.max(dp[i - 1][j][k], dp[i][j - 1][k]), dp[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m+1][n+1][o+1];\n        for(int i = 0; i <= m; i++) {\n            for(int j = 0; j <= n; j++) {\n                for(int k = 0; k <= o; k++) {\n                    if(i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    }\n                    else if(X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        dp[i][j][k] = dp[i-1][j-1][k-1] + 1;\n                    }\n                    else {\n                        dp[i][j][k] = Math.max(dp[i-1][j][k], Math.max(dp[i][j-1][k], dp[i][j][k-1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189209,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m+1][n+1][o+1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        dp[i][j][k] = dp[i-1][j-1][k-1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i-1][j][k], Math.max(dp[i][j-1][k], dp[i][j][k-1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m+1][n+1][o+1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        dp[i][j][k] = dp[i-1][j-1][k-1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i-1][j][k], Math.max(dp[i][j-1][k], dp[i][j][k-1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1))\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length(), n = Y.length(), o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        long[][][] dp = new long[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i - 1][j][k], Math.max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189215,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        dp[i][j][k] = 0;\n                    else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1))\n                        dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                    else\n                        dp[i][j][k] = Math.max(Math.max(dp[i - 1][j][k], dp[i][j - 1][k]), dp[i][j][k - 1]);\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189215,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m+1][n+1][o+1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        dp[i][j][k] = dp[i-1][j-1][k-1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i-1][j][k], Math.max(dp[i][j-1][k], dp[i][j][k-1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189210,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1))\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        dp[i][j][k] = Math.max(dp[i - 1][j][k], Math.max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189209,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(L[i - 1][j][k], Math.max(L[i][j - 1][k], L[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1))\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0)\n                        L[i][j][k] = 0;\n                    else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1))\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    else\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        long[][][] L = new long[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(L[i - 1][j][k], Math.max(L[i][j - 1][k], L[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189215,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m+1][n+1][o+1];\n        for (int i=0; i<=m; i++) {\n            for (int j=0; j<=n; j++) {\n                for (int k=0; k<=o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        L[i][j][k] = L[i-1][j-1][k-1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(Math.max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]);\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189206,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] L = new int[m + 1][n + 1][o + 1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i][j][k] = 0;\n                    } else if (X.charAt(i - 1) == Y.charAt(j - 1) && X.charAt(i - 1) == Z.charAt(k - 1)) {\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                    } else {\n                        L[i][j][k] = Math.max(L[i - 1][j][k], Math.max(L[i][j - 1][k], L[i][j][k - 1]));\n                    }\n                }\n            }\n        }\n        return L[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int m = X.length();\n        int n = Y.length();\n        int o = Z.length();\n        int[][][] dp = new int[m+1][n+1][o+1];\n        for(int i = 0; i <= m; i++) {\n            for(int j = 0; j <= n; j++) {\n                for(int k = 0; k <= o; k++) {\n                    if(i == 0 || j == 0 || k == 0) {\n                        dp[i][j][k] = 0;\n                    }\n                    else if(X.charAt(i-1) == Y.charAt(j-1) && X.charAt(i-1) == Z.charAt(k-1)) {\n                        dp[i][j][k] = dp[i-1][j-1][k-1] + 1;\n                    }\n                    else {\n                        dp[i][j][k] = Math.max(dp[i-1][j][k], Math.max(dp[i][j-1][k], dp[i][j][k-1]));\n                    }\n                }\n            }\n        }\n        return dp[m][n][o];\n    }\n    public static void main(String[] args) {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n",
      "timestamp": 1667189214,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}