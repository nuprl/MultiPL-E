{
  "name": "mbpp_446_count_Occurrence",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a javathon function to count the occurence of all elements of array list in a pair.\n    public static long countOccurrence(Object tup, Object lst) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_446_count_Occurrence.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(countOccurrence(Pair.with(\"a\", \"a\", \"c\", \"b\", \"d\"), (new Object(Arrays.asList((String)\"a\", (String)\"b\")))) == (3l));\n    assert(countOccurrence(Pair.with(1l, 2l, 3l, 1l, 4l, 6l, 7l, 1l, 4l), (new Object(Arrays.asList((long)1l, (long)4l, (long)7l)))) == (6l));\n    assert(countOccurrence(Pair.with(1l, 2l, 3l, 4l, 5l, 6l), (new Object(Arrays.asList((long)1l, (long)2l)))) == (2l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return ((List)lst).stream().filter(x -> x.equals(tup)).count();",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long count = 0;\n        for (Object obj : (List) lst) {\n            if (obj.equals(tup)) {\n                count++;\n            }\n        }\n        return count;",
    "        return ((List<Object>)lst).stream().filter(x -> x.equals(tup)).count();",
    "        return ((List<Object>)lst).stream().filter(x -> x.equals(tup)).count();",
    "        // Write your code here.\n        return 0;",
    "        return ((List<Object>)lst).stream().filter(x -> x.equals(tup)).count();",
    "        long count = 0;\n        if (tup instanceof Pair) {\n            Pair<Object, Object> pair = (Pair<Object, Object>) tup;\n            if (lst instanceof List) {\n                List<Object> list = (List<Object>) lst;\n                for (Object obj : list) {\n                    if (obj instanceof Pair) {\n                        Pair<Object, Object> pair2 = (Pair<Object, Object>) obj;\n                        if (pair.getValue0().equals(pair2.getValue0()) && pair.getValue1().equals(pair2.getValue1())) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object o : (List) lst) {\n            if (o.equals(tup)) {\n                count++;\n            }\n        }\n        return count;",
    "        return ((List) lst).stream().filter(x -> x.equals(tup)).count();",
    "        return ((List) lst).stream().filter(x -> x.equals(tup)).count();",
    "        long count = 0;\n        for (Object x : (List) lst) {\n            if (x.equals(tup)) {\n                count++;\n            }\n        }\n        return count;",
    "        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        long count = 0;\n        if (tup instanceof Pair) {\n            Pair<Object, Object> pair = (Pair<Object, Object>) tup;\n            if (lst instanceof List) {\n                List<Object> list = (List<Object>) lst;\n                for (Object obj : list) {\n                    if (obj.equals(pair.getValue0()) || obj.equals(pair.getValue1())) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object i : (List) lst) {\n            if (i.equals(tup)) {\n                count++;\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (Object i : (List) lst) {\n            if (i.equals(tup)) {\n                count++;\n            }\n        }\n        return count;",
    "        return ((List<Object>)lst).stream().filter(x -> x.equals(tup)).count();",
    "        return ((List)lst).stream().filter(x -> x.equals(tup)).count();",
    "        return ((List) lst).stream().filter(x -> x.equals(tup)).count();",
    "        return ((List<Object>)lst).stream().filter(x -> x.equals(tup)).count();",
    "        return ((List) lst).stream().filter(x -> x.equals(tup)).count();",
    "        return ((List<Object>) lst).stream().filter(x -> x.equals(tup)).count();"
  ]
}