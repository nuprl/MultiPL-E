{
  "name": "mbpp_4_heap_queue_largest",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to find the n largest integers from a given array list of numbers, returned in descending order.\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));\n    assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (long num : nums) {\n            pq.add(num);\n        }\n        ArrayList<Long> res = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            res.add(pq.poll());\n        }\n        return res;",
    "        // Create a max heap\n        PriorityQueue<Long> heap = new PriorityQueue<>(Collections.reverseOrder());\n        // Add all numbers to the heap\n        for (long num : nums) {\n            heap.add(num);\n        }\n        // Create a new list to store the largest numbers\n        ArrayList<Long> largest = new ArrayList<>();\n        // Pop the largest numbers from the heap and add them to the list\n        for (int i = 0; i < n; i++) {\n            largest.add(heap.poll());\n        }\n        return largest;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (int i = 0; i < nums.size(); i++) {\n            heap.add(nums.get(i));\n        }\n        for (int i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;",
    "        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;",
    "        PriorityQueue<Long> pq = new PriorityQueue<Long>(nums.size(), Collections.reverseOrder());\n        for (long num : nums) {\n            pq.add(num);\n        }\n        ArrayList<Long> ret = new ArrayList<Long>();\n        for (long i = 0; i < n; i++) {\n            ret.add(pq.poll());\n        }\n        return ret;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;",
    "        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (heap.size() > 0) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long i = 0; i < n; i++) {\n            heap.add(nums.get((int) i));\n        }\n        for (long i = n; i < nums.size(); i++) {\n            if (nums.get((int) i) > heap.peek()) {\n                heap.poll();\n                heap.add(nums.get((int) i));\n            }\n        }\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        return result;",
    "        PriorityQueue<Long> pq = new PriorityQueue<>(nums.size(), Collections.reverseOrder());\n        for (Long num : nums) {\n            pq.add(num);\n        }\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(pq.poll());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        while (!pq.isEmpty()) {\n            result.add(pq.poll());\n        }\n        Collections.reverse(result);\n        return result;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;",
    "        ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long> heap = new PriorityQueue<>();\n        for (long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;",
    "        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        ArrayList<Long> ans = new ArrayList<Long>();\n        while (pq.size() > 0) {\n            ans.add(pq.poll());\n        }\n        Collections.reverse(ans);\n        return ans;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (long num : nums) {\n            heap.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;",
    "        PriorityQueue<Long> heap = new PriorityQueue<Long>();\n        for (Long num : nums) {\n            heap.add(num);\n            if (heap.size() > n) {\n                heap.poll();\n            }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        while (!heap.isEmpty()) {\n            result.add(heap.poll());\n        }\n        Collections.reverse(result);\n        return result;",
    "        PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (long num : nums) {\n            pq.add(num);\n            if (pq.size() > n) {\n                pq.poll();\n            }\n        }\n        ArrayList<Long> res = new ArrayList<>();\n        while (!pq.isEmpty()) {\n            res.add(pq.poll());\n        }\n        Collections.reverse(res);\n        return res;",
    "        ArrayList<Long> result = new ArrayList<Long>();\n        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (long num : nums) {\n            pq.add(num);\n        }\n        for (long i = 0; i < n; i++) {\n            result.add(pq.poll());\n        }\n        return result;",
    "        PriorityQueue<Long> heap = new PriorityQueue<Long>(nums.size(), Collections.reverseOrder());\n        for (Long num : nums) {\n            heap.add(num);\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i = 0; i < n; i++) {\n            result.add(heap.poll());\n        }\n        return result;",
    "        PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        for (long num : nums) {\n            pq.add(num);\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (long i = 0; i < n; i++) {\n            result.add(pq.poll());\n        }\n        return result;"
  ]
}