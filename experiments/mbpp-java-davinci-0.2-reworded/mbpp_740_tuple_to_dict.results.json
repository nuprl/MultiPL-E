{
  "name": "mbpp_740_tuple_to_dict",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[(int)test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            test_arr[i] = i;\n        }\n        for (int i = 0; i < test_tup; i+=2) {\n            dict.put(test_arr[i],test_arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "/tmp/tmpfjuppma7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpfjuppma7.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpfjuppma7.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpfjuppma7.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpikasf8ez.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpikasf8ez.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n                              ^\n/tmp/tmpikasf8ez.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n                                                    ^\n/tmp/tmpikasf8ez.java:16: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikasf8ez.java:17: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikasf8ez.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        test_dict.put(test_arr[0], test_arr[1]);\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpefdn_i3n.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpefdn_i3n.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmpefdn_i3n.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmpefdn_i3n.java:19: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpefdn_i3n.java:20: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpefdn_i3n.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        // Write your code here\n        HashMap<Long,Long> hm = new HashMap<Long,Long>();\n        long[] arr = new long[(int)test_tup];\n        for(int i = 0; i < test_tup; i++) {\n            arr[i] = i;\n        }\n        for(int i = 0; i < test_tup; i+=2) {\n            hm.put(arr[i],arr[i+1]);\n        }\n        return hm;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmp297pp3sd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp297pp3sd.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp297pp3sd.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp297pp3sd.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i % 2 == 0) {\n                test_dict.put(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpzsdpkrh7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpzsdpkrh7.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmpzsdpkrh7.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmpzsdpkrh7.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpzsdpkrh7.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpzsdpkrh7.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup;\n        test_arr[1] = test_tup;\n        for (int i = 0; i < test_arr.length; i++) {\n            dict.put(test_arr[i], test_arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmp2tqy5ajl.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2tqy5ajl.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2tqy5ajl.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2tqy5ajl.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for (int i = 0; i < arr.length; i++) {\n            if (i == arr.length - 1) {\n                dict.put(arr[i], null);\n            } else {\n                dict.put(arr[i], arr[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpm_q9cpr8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpm_q9cpr8.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmpm_q9cpr8.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmpm_q9cpr8.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpm_q9cpr8.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpm_q9cpr8.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup;\n        arr[1] = test_tup;\n        for(int i = 0; i < arr.length; i++) {\n            dict.put(arr[i], arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpt7l0jy28.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpt7l0jy28.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpt7l0jy28.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpt7l0jy28.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i == test_arr.length - 1) {\n                test_dict.put(test_arr[i], test_arr[0]);\n            } else {\n                test_dict.put(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmp62q1_lir.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp62q1_lir.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmp62q1_lir.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmp62q1_lir.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62q1_lir.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62q1_lir.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_tup_arr = new long[(int)test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            test_tup_arr[i] = i;\n        }\n        for (int i = 0; i < test_tup; i+=2) {\n            dict.put(test_tup_arr[i], test_tup_arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpa5nrul0a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpa5nrul0a.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpa5nrul0a.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpa5nrul0a.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for(int i = 0; i < arr.length; i++) {\n            if(i == arr.length - 1) {\n                dict.put(arr[i], arr[0]);\n            } else {\n                dict.put(arr[i], arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmp40zp6k3t.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp40zp6k3t.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmp40zp6k3t.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmp40zp6k3t.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp40zp6k3t.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp40zp6k3t.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        for(int i = 0; i < test_tup.size(); i += 2) {\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmph1wl9_01.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmph1wl9_01.java:12: error: long cannot be dereferenced\n        for(int i = 0; i < test_tup.size(); i += 2) {\n                                   ^\n/tmp/tmph1wl9_01.java:13: error: long cannot be dereferenced\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n                                  ^\n/tmp/tmph1wl9_01.java:13: error: long cannot be dereferenced\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n                                                        ^\n/tmp/tmph1wl9_01.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmph1wl9_01.java:19: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmph1wl9_01.java:20: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] tup = new long[2];\n        tup[0] = test_tup;\n        tup[1] = test_tup + 1;\n        dict.put(tup[0], tup[1]);\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpcvb5co63.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpcvb5co63.java:19: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpcvb5co63.java:20: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpcvb5co63.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> res = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for (int i = 0; i < arr.length; i++) {\n            if (i % 2 == 0) {\n                res.put(arr[i], arr[i + 1]);\n            }\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpn6j5fri8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpn6j5fri8.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmpn6j5fri8.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmpn6j5fri8.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpn6j5fri8.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpn6j5fri8.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> res = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup / 1000000000;\n        arr[1] = test_tup % 1000000000;\n        for (int i = 0; i < arr.length; i++) {\n            res.put(arr[i], arr[(i+1)%arr.length]);\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpqa7e5iph.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpqa7e5iph.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpqa7e5iph.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpqa7e5iph.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpikasf8ez.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpikasf8ez.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n                              ^\n/tmp/tmpikasf8ez.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n                                                    ^\n/tmp/tmpikasf8ez.java:16: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikasf8ez.java:17: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikasf8ez.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        for (int i = 0; i < test_tup.getSize(); i++) {\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpi6rxiznq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpi6rxiznq.java:12: error: long cannot be dereferenced\n        for (int i = 0; i < test_tup.getSize(); i++) {\n                                    ^\n/tmp/tmpi6rxiznq.java:13: error: long cannot be dereferenced\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n                                  ^\n/tmp/tmpi6rxiznq.java:13: error: long cannot be dereferenced\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n                                                        ^\n/tmp/tmpi6rxiznq.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpi6rxiznq.java:19: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpi6rxiznq.java:20: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i == test_arr.length - 1) {\n                test_dict.put(test_arr[i], test_arr[0]);\n            } else {\n                test_dict.put(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmp62q1_lir.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp62q1_lir.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmp62q1_lir.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmp62q1_lir.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62q1_lir.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62q1_lir.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[(int)test_tup];\n        for(int i = 0; i < test_tup; i++) {\n            test_arr[i] = i;\n        }\n        for(int i = 0; i < test_tup; i+=2) {\n            if(i+1 < test_tup) {\n                dict.put(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmp11up18c7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp11up18c7.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp11up18c7.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp11up18c7.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<>();\n        long[] test_arr = new long[test_tup.length];\n        for (int i = 0; i < test_tup.length; i++) {\n            test_arr[i] = test_tup.getValue(i);\n        }\n        for (int i = 0; i < test_arr.length; i += 2) {\n            dict.put(test_arr[i], test_arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpzh0lfqup.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpzh0lfqup.java:12: error: long cannot be dereferenced\n        long[] test_arr = new long[test_tup.length];\n                                           ^\n/tmp/tmpzh0lfqup.java:13: error: long cannot be dereferenced\n        for (int i = 0; i < test_tup.length; i++) {\n                                    ^\n/tmp/tmpzh0lfqup.java:14: error: long cannot be dereferenced\n            test_arr[i] = test_tup.getValue(i);\n                                  ^\n/tmp/tmpzh0lfqup.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpzh0lfqup.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpzh0lfqup.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i == test_arr.length - 1) {\n                test_dict.put(test_arr[i], test_arr[0]);\n            } else {\n                test_dict.put(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmp62q1_lir.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp62q1_lir.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmp62q1_lir.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmp62q1_lir.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62q1_lir.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62q1_lir.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[test_tup.length()];\n        for (int i = 0; i < test_tup.length(); i++) {\n            test_arr[i] = test_tup.getValue(i);\n        }\n        for (int i = 0; i < test_arr.length; i += 2) {\n            dict.put(test_arr[i], test_arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmprrjawaaz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmprrjawaaz.java:12: error: long cannot be dereferenced\n        long[] test_arr = new long[test_tup.length()];\n                                           ^\n/tmp/tmprrjawaaz.java:13: error: long cannot be dereferenced\n        for (int i = 0; i < test_tup.length(); i++) {\n                                    ^\n/tmp/tmprrjawaaz.java:14: error: long cannot be dereferenced\n            test_arr[i] = test_tup.getValue(i);\n                                  ^\n/tmp/tmprrjawaaz.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmprrjawaaz.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmprrjawaaz.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_tup_arr = new long[(int)test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            test_tup_arr[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            if (i % 2 == 0) {\n                dict.put(test_tup_arr[i], test_tup_arr[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpz17mdyug.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpz17mdyug.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpz17mdyug.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpz17mdyug.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i % 2 == 0) {\n                test_dict.put(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpt5s__ll4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpt5s__ll4.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmpt5s__ll4.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmpt5s__ll4.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpt5s__ll4.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpt5s__ll4.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i == test_arr.length - 1) {\n                test_dict.put(test_arr[i], test_arr[0]);\n            } else {\n                test_dict.put(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp62gum9ma.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp62gum9ma.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmp62gum9ma.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmp62gum9ma.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62gum9ma.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62gum9ma.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        for(int i=0;i<test_tup.length;i+=2)\n        {\n            map.put(test_tup[i],test_tup[i+1]);\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmptplpfbi2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmptplpfbi2.java:15: error: long cannot be dereferenced\n        for(int i=0;i<test_tup.length;i+=2)\n                              ^\n/tmp/tmptplpfbi2.java:17: error: array required, but long found\n            map.put(test_tup[i],test_tup[i+1]);\n                            ^\n/tmp/tmptplpfbi2.java:17: error: array required, but long found\n            map.put(test_tup[i],test_tup[i+1]);\n                                        ^\n/tmp/tmptplpfbi2.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmptplpfbi2.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmptplpfbi2.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i % 2 == 0) {\n                test_dict.put(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpt5s__ll4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpt5s__ll4.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmpt5s__ll4.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmpt5s__ll4.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpt5s__ll4.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpt5s__ll4.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue(0);\n        test_arr[1] = test_tup.getValue(1);\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i == test_arr.length - 1) {\n                test_dict.put(test_arr[i], test_arr[0]);\n            } else {\n                test_dict.put(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpaemppfda.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpaemppfda.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue(0);\n                              ^\n/tmp/tmpaemppfda.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue(1);\n                              ^\n/tmp/tmpaemppfda.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpaemppfda.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpaemppfda.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue(0);\n        test_arr[1] = test_tup.getValue(1);\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i+1 < test_arr.length) {\n                test_dict.put(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpbwwx5c2l.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpbwwx5c2l.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue(0);\n                              ^\n/tmp/tmpbwwx5c2l.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue(1);\n                              ^\n/tmp/tmpbwwx5c2l.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpbwwx5c2l.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpbwwx5c2l.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        // Your code here\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpc4kisffo.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpc4kisffo.java:16: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpc4kisffo.java:17: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpc4kisffo.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        long[] test_tup_arr = new long[(int)test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            test_tup_arr[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            if (i % 2 == 0) {\n                map.put(test_tup_arr[i], test_tup_arr[i+1]);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpdp4fp7l6.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpdp4fp7l6.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpdp4fp7l6.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpdp4fp7l6.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        test_dict.put(test_tup.getValue0(),test_tup.getValue1());\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp3nj_yjoc.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp3nj_yjoc.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(),test_tup.getValue1());\n                              ^\n/tmp/tmp3nj_yjoc.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(),test_tup.getValue1());\n                                                   ^\n/tmp/tmp3nj_yjoc.java:16: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp3nj_yjoc.java:17: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp3nj_yjoc.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i == test_arr.length - 1) {\n                test_dict.put(test_arr[i], test_arr[0]);\n            } else {\n                test_dict.put(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp62gum9ma.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp62gum9ma.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmp62gum9ma.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmp62gum9ma.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62gum9ma.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62gum9ma.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for (int i = 0; i < arr.length; i++) {\n            if (i % 2 == 0) {\n                dict.put(arr[i], arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp5u_t1dtx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp5u_t1dtx.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmp5u_t1dtx.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmp5u_t1dtx.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5u_t1dtx.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5u_t1dtx.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[(int)test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            test_arr[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            if (i % 2 == 0) {\n                dict.put(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp_rm_q934.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_rm_q934.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_rm_q934.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_rm_q934.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[(int)test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            test_arr[i] = i;\n        }\n        for (int i = 0; i < test_tup; i+=2) {\n            dict.put(test_arr[i], test_arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp0h4ehy3z.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp0h4ehy3z.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp0h4ehy3z.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp0h4ehy3z.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i += 2) {\n            test_dict.put(test_arr[i], test_arr[i + 1]);\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpiqeruy_k.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqeruy_k.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmpiqeruy_k.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmpiqeruy_k.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpiqeruy_k.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpiqeruy_k.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for (int i = 0; i < arr.length; i++) {\n            dict.put(arr[i], arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp_t7fp5ko.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_t7fp5ko.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmp_t7fp5ko.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmp_t7fp5ko.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_t7fp5ko.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_t7fp5ko.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[(int)test_tup];\n        for(int i = 0; i < test_tup; i++) {\n            test_arr[i] = i;\n        }\n        for(int i = 0; i < test_tup; i++) {\n            if(i == test_tup - 1) {\n                dict.put(test_arr[i], test_arr[0]);\n            } else {\n                dict.put(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpgl_i54d4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpgl_i54d4.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpgl_i54d4.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpgl_i54d4.java:28: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue(0);\n        test_arr[1] = test_tup.getValue(1);\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i == test_arr.length - 1) {\n                test_dict.put(test_arr[i], test_arr[0]);\n            } else {\n                test_dict.put(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpdnd0n4vd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpdnd0n4vd.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue(0);\n                              ^\n/tmp/tmpdnd0n4vd.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue(1);\n                              ^\n/tmp/tmpdnd0n4vd.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpdnd0n4vd.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpdnd0n4vd.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for(int i = 0; i < arr.length; i++) {\n            if(i == arr.length - 1) {\n                dict.put(arr[i], arr[0]);\n            } else {\n                dict.put(arr[i], arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmp40zp6k3t.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp40zp6k3t.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmp40zp6k3t.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmp40zp6k3t.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp40zp6k3t.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp40zp6k3t.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpikasf8ez.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpikasf8ez.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n                              ^\n/tmp/tmpikasf8ez.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n                                                    ^\n/tmp/tmpikasf8ez.java:16: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikasf8ez.java:17: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikasf8ez.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i == test_arr.length - 1) {\n                test_dict.put(test_arr[i], test_arr[0]);\n            } else {\n                test_dict.put(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp62gum9ma.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp62gum9ma.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmp62gum9ma.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmp62gum9ma.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62gum9ma.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62gum9ma.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue(0);\n        test_arr[1] = test_tup.getValue(1);\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i == test_arr.length - 1) {\n                test_dict.put(test_arr[i], test_arr[0]);\n            } else {\n                test_dict.put(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpdnd0n4vd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpdnd0n4vd.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue(0);\n                              ^\n/tmp/tmpdnd0n4vd.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue(1);\n                              ^\n/tmp/tmpdnd0n4vd.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpdnd0n4vd.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpdnd0n4vd.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue(0);\n        arr[1] = test_tup.getValue(1);\n        for (int i = 0; i < arr.length; i++) {\n            dict.put(arr[i], arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmppcc8ilgy.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmppcc8ilgy.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue(0);\n                         ^\n/tmp/tmppcc8ilgy.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue(1);\n                         ^\n/tmp/tmppcc8ilgy.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmppcc8ilgy.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmppcc8ilgy.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> hm = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for (int i = 0; i < arr.length; i++) {\n            if (i == arr.length - 1) {\n                hm.put(arr[i], arr[0]);\n            } else {\n                hm.put(arr[i], arr[i + 1]);\n            }\n        }\n        return hm;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpcnjptv68.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpcnjptv68.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmpcnjptv68.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmpcnjptv68.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpcnjptv68.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpcnjptv68.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            test_dict.put(test_arr[i], test_arr[i+1]);\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpa1fhwgwn.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpa1fhwgwn.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmpa1fhwgwn.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmpa1fhwgwn.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpa1fhwgwn.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpa1fhwgwn.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        for (int i = 0; i < test_tup.getSize(); i++) {\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpi6rxiznq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpi6rxiznq.java:12: error: long cannot be dereferenced\n        for (int i = 0; i < test_tup.getSize(); i++) {\n                                    ^\n/tmp/tmpi6rxiznq.java:13: error: long cannot be dereferenced\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n                                  ^\n/tmp/tmpi6rxiznq.java:13: error: long cannot be dereferenced\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n                                                        ^\n/tmp/tmpi6rxiznq.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpi6rxiznq.java:19: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpi6rxiznq.java:20: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        for (int i = 0; i < test_tup.length; i++) {\n            dict.put(test_tup[i], test_tup[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpor0lltin.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpor0lltin.java:12: error: long cannot be dereferenced\n        for (int i = 0; i < test_tup.length; i++) {\n                                    ^\n/tmp/tmpor0lltin.java:13: error: array required, but long found\n            dict.put(test_tup[i], test_tup[i+1]);\n                             ^\n/tmp/tmpor0lltin.java:13: error: array required, but long found\n            dict.put(test_tup[i], test_tup[i+1]);\n                                          ^\n/tmp/tmpor0lltin.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpor0lltin.java:19: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpor0lltin.java:20: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i+1 < test_arr.length) {\n                test_dict.put(test_arr[i],test_arr[i+1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmph3rbli_k.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmph3rbli_k.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmph3rbli_k.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmph3rbli_k.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmph3rbli_k.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmph3rbli_k.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        // test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n        // test_dict.put(test_tup.getValue2(), test_tup.getValue3());\n        // test_dict.put(test_tup.getValue4(), test_tup.getValue5());\n        // test_dict.put(test_tup.getValue6(), test_tup.getValue7());\n        // test_dict.put(test_tup.getValue8(), test_tup.getValue9());\n        // test_dict.put(test_tup.getValue10(), test_tup.getValue11());\n        // test_dict.put(test_tup.getValue12(), test_tup.getValue13());\n        // test_dict.put(test_tup.getValue14(), test_tup.getValue15());\n        // test_dict.put(test_tup.getValue16(), test_tup.getValue17());\n        // test_dict.put(test_tup.getValue18(), test_tup.getValue19());\n        // test_dict.put(test_tup.getValue20(), test_tup.getValue21());\n        // test_dict.put(test_tup.getValue22(), test_tup.getValue23());\n        // test_dict.put(test_tup.getValue24(), test_tup.getValue25());\n        // test_dict.put(test_tup.getValue26(), test_tup.getValue27());\n        // test_dict.put(test_tup.getValue28(), test_tup.getValue29());\n        // test_dict.put(test_tup.getValue30(), test_tup.getValue31());\n        // test_dict.put(test_tup.getValue32(), test_tup.getValue33());\n        // test_dict.put(test_tup.getValue34(), test_tup.getValue35());\n        // test\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp7p0ob7st.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp7p0ob7st.java:33: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp7p0ob7st.java:34: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp7p0ob7st.java:35: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        for(int i = 0; i < test_tup.length; i+=2) {\n            dict.put(test_tup[i], test_tup[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122717,
      "stdout": "",
      "stderr": "/tmp/tmp_dl9li6n.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_dl9li6n.java:12: error: long cannot be dereferenced\n        for(int i = 0; i < test_tup.length; i+=2) {\n                                   ^\n/tmp/tmp_dl9li6n.java:13: error: array required, but long found\n            dict.put(test_tup[i], test_tup[i+1]);\n                             ^\n/tmp/tmp_dl9li6n.java:13: error: array required, but long found\n            dict.put(test_tup[i], test_tup[i+1]);\n                                          ^\n/tmp/tmp_dl9li6n.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_dl9li6n.java:19: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_dl9li6n.java:20: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for(int i = 0; i < test_arr.length; i++) {\n            if(i == test_arr.length - 1) {\n                test_dict.put(test_arr[i], test_arr[0]);\n            } else {\n                test_dict.put(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122717,
      "stdout": "",
      "stderr": "/tmp/tmpj4_kg6ju.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpj4_kg6ju.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmpj4_kg6ju.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmpj4_kg6ju.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpj4_kg6ju.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpj4_kg6ju.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for (int i = 0; i < arr.length; i++) {\n            if (i == arr.length - 1) {\n                map.put(arr[i], null);\n            } else {\n                map.put(arr[i], arr[i + 1]);\n            }\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122717,
      "stdout": "",
      "stderr": "/tmp/tmpu59qh3az.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpu59qh3az.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmpu59qh3az.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmpu59qh3az.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu59qh3az.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu59qh3az.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i % 2 == 0) {\n                test_dict.put(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpt5s__ll4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpt5s__ll4.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmpt5s__ll4.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmpt5s__ll4.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpt5s__ll4.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpt5s__ll4.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[(int)test_tup];\n        for(int i = 0; i < test_tup; i++) {\n            test_arr[i] = i;\n        }\n        for(int i = 0; i < test_tup; i++) {\n            if(i % 2 == 0) {\n                dict.put(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122717,
      "stdout": "",
      "stderr": "/tmp/tmpxooabir4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxooabir4.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpxooabir4.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpxooabir4.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for (int i = 0; i < arr.length; i++) {\n            dict.put(arr[i], arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp_t7fp5ko.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_t7fp5ko.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmp_t7fp5ko.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmp_t7fp5ko.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_t7fp5ko.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_t7fp5ko.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for (int i = 0; i < arr.length; i++) {\n            if (i == arr.length - 1) {\n                dict.put(arr[i], arr[0]);\n            } else {\n                dict.put(arr[i], arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122717,
      "stdout": "",
      "stderr": "/tmp/tmpitg_ts_w.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpitg_ts_w.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmpitg_ts_w.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmpitg_ts_w.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpitg_ts_w.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpitg_ts_w.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for(int i=0;i<arr.length;i++) {\n            if(i+1<arr.length) {\n                dict.put(arr[i],arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122717,
      "stdout": "",
      "stderr": "/tmp/tmp8uy2kle1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp8uy2kle1.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmp8uy2kle1.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmp8uy2kle1.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp8uy2kle1.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp8uy2kle1.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> hmap = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for(int i = 0; i < arr.length; i++) {\n            if(i == arr.length - 1) {\n                hmap.put(arr[i], arr[0]);\n            } else {\n                hmap.put(arr[i], arr[i+1]);\n            }\n        }\n        return hmap;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122717,
      "stdout": "",
      "stderr": "/tmp/tmpfa1sr83v.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpfa1sr83v.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmpfa1sr83v.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmpfa1sr83v.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpfa1sr83v.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpfa1sr83v.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i % 2 == 0) {\n                test_dict.put(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpzsdpkrh7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpzsdpkrh7.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmpzsdpkrh7.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmpzsdpkrh7.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpzsdpkrh7.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpzsdpkrh7.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        // Your code here\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpc4kisffo.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpc4kisffo.java:16: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpc4kisffo.java:17: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpc4kisffo.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            test_dict.put(test_arr[i], test_arr[i+1]);\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpa1fhwgwn.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpa1fhwgwn.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmpa1fhwgwn.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmpa1fhwgwn.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpa1fhwgwn.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpa1fhwgwn.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup / 100000000;\n        arr[1] = test_tup % 100000000;\n        for (int i = 0; i < arr.length; i++) {\n            dict.put(arr[i], arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122717,
      "stdout": "",
      "stderr": "/tmp/tmpqc1os4iq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpqc1os4iq.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpqc1os4iq.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpqc1os4iq.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[(int)test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            test_arr[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            if (i == test_tup - 1) {\n                dict.put(test_arr[i], test_arr[0]);\n            } else {\n                dict.put(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122717,
      "stdout": "",
      "stderr": "/tmp/tmputskd3q1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmputskd3q1.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmputskd3q1.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmputskd3q1.java:28: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> hm = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for(int i=0; i<arr.length; i+=2) {\n            hm.put(arr[i], arr[i+1]);\n        }\n        return hm;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122717,
      "stdout": "",
      "stderr": "/tmp/tmpady4sg3u.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpady4sg3u.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmpady4sg3u.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmpady4sg3u.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpady4sg3u.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpady4sg3u.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for (int i = 0; i < arr.length; i++) {\n            if (i % 2 == 0) {\n                dict.put(arr[i], arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp5u_t1dtx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp5u_t1dtx.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmp5u_t1dtx.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmp5u_t1dtx.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5u_t1dtx.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5u_t1dtx.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup;\n        test_arr[1] = test_tup + 1;\n        test_dict.put(test_arr[0], test_arr[1]);\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122717,
      "stdout": "",
      "stderr": "/tmp/tmpxrifop77.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxrifop77.java:19: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpxrifop77.java:20: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpxrifop77.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122717,
      "stdout": "",
      "stderr": "/tmp/tmphhp02vb_.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmphhp02vb_.java:15: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmphhp02vb_.java:16: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmphhp02vb_.java:17: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        // Write your code here\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122717,
      "stdout": "",
      "stderr": "/tmp/tmpv4v93e1q.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpv4v93e1q.java:16: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpv4v93e1q.java:17: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpv4v93e1q.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i % 2 == 0) {\n                test_dict.put(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpt5s__ll4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpt5s__ll4.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmpt5s__ll4.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmpt5s__ll4.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpt5s__ll4.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpt5s__ll4.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[(int)test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            test_arr[i] = i;\n        }\n        for (int i = 0; i < test_tup; i+=2) {\n            test_dict.put(test_arr[i], test_arr[i+1]);\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122717,
      "stdout": "",
      "stderr": "/tmp/tmpnvaht4dm.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpnvaht4dm.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpnvaht4dm.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpnvaht4dm.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup/10;\n        arr[1] = test_tup%10;\n        dict.put(arr[0],arr[1]);\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122718,
      "stdout": "",
      "stderr": "/tmp/tmp9zgsd057.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp9zgsd057.java:19: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp9zgsd057.java:20: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp9zgsd057.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for(int i=0;i<arr.length;i++) {\n            dict.put(arr[i],arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122717,
      "stdout": "",
      "stderr": "/tmp/tmpus84n62g.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpus84n62g.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmpus84n62g.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmpus84n62g.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpus84n62g.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpus84n62g.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i == test_arr.length - 1) {\n                test_dict.put(test_arr[i], test_arr[0]);\n            } else {\n                test_dict.put(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp62gum9ma.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp62gum9ma.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmp62gum9ma.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmp62gum9ma.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62gum9ma.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62gum9ma.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i == test_arr.length - 1) {\n                test_dict.put(test_arr[i], test_arr[0]);\n            } else {\n                test_dict.put(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp62gum9ma.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp62gum9ma.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmp62gum9ma.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmp62gum9ma.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62gum9ma.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62gum9ma.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i += 2) {\n            test_dict.put(test_arr[i], test_arr[i + 1]);\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpiqeruy_k.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpiqeruy_k.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmpiqeruy_k.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmpiqeruy_k.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpiqeruy_k.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpiqeruy_k.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpikasf8ez.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpikasf8ez.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n                              ^\n/tmp/tmpikasf8ez.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n                                                    ^\n/tmp/tmpikasf8ez.java:16: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikasf8ez.java:17: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikasf8ez.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for(int i = 0; i < arr.length; i++) {\n            dict.put(arr[i], arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122718,
      "stdout": "",
      "stderr": "/tmp/tmprzhuihrf.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmprzhuihrf.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmprzhuihrf.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmprzhuihrf.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmprzhuihrf.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmprzhuihrf.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        for(int i = 0; i < test_tup.size(); i++) {\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122718,
      "stdout": "",
      "stderr": "/tmp/tmp9h0eby85.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp9h0eby85.java:12: error: long cannot be dereferenced\n        for(int i = 0; i < test_tup.size(); i++) {\n                                   ^\n/tmp/tmp9h0eby85.java:13: error: long cannot be dereferenced\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n                                  ^\n/tmp/tmp9h0eby85.java:13: error: long cannot be dereferenced\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n                                                        ^\n/tmp/tmp9h0eby85.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp9h0eby85.java:19: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp9h0eby85.java:20: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpikasf8ez.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpikasf8ez.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n                              ^\n/tmp/tmpikasf8ez.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n                                                    ^\n/tmp/tmpikasf8ez.java:16: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikasf8ez.java:17: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikasf8ez.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        for (int i = 0; i < test_tup.getSize(); i+=2) {\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122718,
      "stdout": "",
      "stderr": "/tmp/tmp75dpd_95.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp75dpd_95.java:12: error: long cannot be dereferenced\n        for (int i = 0; i < test_tup.getSize(); i+=2) {\n                                    ^\n/tmp/tmp75dpd_95.java:13: error: long cannot be dereferenced\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n                                  ^\n/tmp/tmp75dpd_95.java:13: error: long cannot be dereferenced\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n                                                        ^\n/tmp/tmp75dpd_95.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp75dpd_95.java:19: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp75dpd_95.java:20: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] tup = new long[2];\n        tup[0] = test_tup / 1000000;\n        tup[1] = test_tup % 1000000;\n        for (int i = 0; i < tup.length; i++) {\n            dict.put(tup[i], tup[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122718,
      "stdout": "",
      "stderr": "/tmp/tmpbsjquyep.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpbsjquyep.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpbsjquyep.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpbsjquyep.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup;\n        test_arr[1] = test_tup + 1;\n        for (int i = 0; i < test_arr.length; i++) {\n            dict.put(test_arr[i], test_arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122718,
      "stdout": "",
      "stderr": "/tmp/tmpeh4elde_.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpeh4elde_.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpeh4elde_.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpeh4elde_.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        for (int i = 0; i < test_tup.getSize(); i++) {\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpi6rxiznq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpi6rxiznq.java:12: error: long cannot be dereferenced\n        for (int i = 0; i < test_tup.getSize(); i++) {\n                                    ^\n/tmp/tmpi6rxiznq.java:13: error: long cannot be dereferenced\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n                                  ^\n/tmp/tmpi6rxiznq.java:13: error: long cannot be dereferenced\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n                                                        ^\n/tmp/tmpi6rxiznq.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpi6rxiznq.java:19: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpi6rxiznq.java:20: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[(int)test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            test_arr[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            if (i % 2 == 0) {\n                test_dict.put(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122718,
      "stdout": "",
      "stderr": "/tmp/tmpgi9qxxk1.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpgi9qxxk1.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpgi9qxxk1.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpgi9qxxk1.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for (int i = 0; i < arr.length; i+=2) {\n            dict.put(arr[i], arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122718,
      "stdout": "",
      "stderr": "/tmp/tmpyuukpg9y.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpyuukpg9y.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmpyuukpg9y.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmpyuukpg9y.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpyuukpg9y.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpyuukpg9y.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i % 2 == 0) {\n                test_dict.put(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpzsdpkrh7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpzsdpkrh7.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmpzsdpkrh7.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmpzsdpkrh7.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpzsdpkrh7.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpzsdpkrh7.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i += 2) {\n            test_dict.put(test_arr[i], test_arr[i+1]);\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "/tmp/tmps7jegnwy.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmps7jegnwy.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmps7jegnwy.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmps7jegnwy.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmps7jegnwy.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmps7jegnwy.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[(int)test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            arr[i] = i;\n        }\n        for (int i = 0; i < test_tup; i += 2) {\n            dict.put(arr[i], arr[i + 1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "/tmp/tmpmh8sw7xd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpmh8sw7xd.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpmh8sw7xd.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpmh8sw7xd.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] tup = new long[2];\n        tup[0] = test_tup / 1000000000;\n        tup[1] = test_tup % 1000000000;\n        for (int i = 0; i < tup.length; i++) {\n            if (i == tup.length - 1) {\n                dict.put(tup[i], tup[0]);\n            } else {\n                dict.put(tup[i], tup[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "/tmp/tmpz3np4w41.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpz3np4w41.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpz3np4w41.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpz3np4w41.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpikasf8ez.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpikasf8ez.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n                              ^\n/tmp/tmpikasf8ez.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n                                                    ^\n/tmp/tmpikasf8ez.java:16: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikasf8ez.java:17: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikasf8ez.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            test_dict.put(test_arr[i], test_arr[i+1]);\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpa1fhwgwn.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpa1fhwgwn.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmpa1fhwgwn.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmpa1fhwgwn.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpa1fhwgwn.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpa1fhwgwn.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i == test_arr.length - 1) {\n                test_dict.put(test_arr[i], test_arr[0]);\n            } else {\n                test_dict.put(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmp62q1_lir.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp62q1_lir.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmp62q1_lir.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmp62q1_lir.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62q1_lir.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62q1_lir.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for(int i = 0; i < test_arr.length; i++) {\n            if(i % 2 == 0) {\n                test_dict.put(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "/tmp/tmpo72eki_a.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpo72eki_a.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmpo72eki_a.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmpo72eki_a.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpo72eki_a.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpo72eki_a.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        for(int i = 0; i < test_tup.size(); i++) {\n            dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "/tmp/tmpd2l5hvs8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpd2l5hvs8.java:12: error: long cannot be dereferenced\n        for(int i = 0; i < test_tup.size(); i++) {\n                                   ^\n/tmp/tmpd2l5hvs8.java:13: error: long cannot be dereferenced\n            dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n                             ^\n/tmp/tmpd2l5hvs8.java:13: error: long cannot be dereferenced\n            dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n                                                   ^\n/tmp/tmpd2l5hvs8.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpd2l5hvs8.java:19: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpd2l5hvs8.java:20: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for (int i = 0; i < arr.length; i++) {\n            dict.put(arr[i], arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "/tmp/tmpw7glf17t.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpw7glf17t.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmpw7glf17t.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmpw7glf17t.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpw7glf17t.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpw7glf17t.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[(int)test_tup];\n        for(int i = 0; i < test_tup; i++) {\n            arr[i] = i;\n        }\n        for(int i = 0; i < test_tup; i+=2) {\n            dict.put(arr[i], arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "/tmp/tmp1gh5gqpu.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp1gh5gqpu.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp1gh5gqpu.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp1gh5gqpu.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup;\n        test_arr[1] = test_tup + 1;\n        test_dict.put(test_arr[0], test_arr[1]);\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122717,
      "stdout": "",
      "stderr": "/tmp/tmpxrifop77.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxrifop77.java:19: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpxrifop77.java:20: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpxrifop77.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i == test_arr.length - 1) {\n                test_dict.put(test_arr[i], test_arr[0]);\n            } else {\n                test_dict.put(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp62gum9ma.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp62gum9ma.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmp62gum9ma.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmp62gum9ma.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62gum9ma.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62gum9ma.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] tup = new long[2];\n        tup[0] = test_tup;\n        tup[1] = test_tup;\n        for (int i = 0; i < tup.length; i++) {\n            if (i % 2 == 0) {\n                dict.put(tup[i], tup[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "/tmp/tmpsbqbexmd.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpsbqbexmd.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpsbqbexmd.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpsbqbexmd.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] tup = new long[2];\n        tup[0] = test_tup;\n        tup[1] = test_tup + 1;\n        dict.put(tup[0], tup[1]);\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpcvb5co63.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpcvb5co63.java:19: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpcvb5co63.java:20: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpcvb5co63.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        for (int i = 0; i < test_tup.getSize(); i++) {\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpi6rxiznq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpi6rxiznq.java:12: error: long cannot be dereferenced\n        for (int i = 0; i < test_tup.getSize(); i++) {\n                                    ^\n/tmp/tmpi6rxiznq.java:13: error: long cannot be dereferenced\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n                                  ^\n/tmp/tmpi6rxiznq.java:13: error: long cannot be dereferenced\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n                                                        ^\n/tmp/tmpi6rxiznq.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpi6rxiznq.java:19: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpi6rxiznq.java:20: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue(0);\n        test_arr[1] = test_tup.getValue(1);\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i % 2 == 0) {\n                test_dict.put(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "/tmp/tmprujzkcf8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmprujzkcf8.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue(0);\n                              ^\n/tmp/tmprujzkcf8.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue(1);\n                              ^\n/tmp/tmprujzkcf8.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmprujzkcf8.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmprujzkcf8.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> hm = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for(int i = 0; i < arr.length; i++) {\n            if(i % 2 == 0) {\n                hm.put(arr[i], arr[i+1]);\n            }\n        }\n        return hm;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "/tmp/tmpizks3kpo.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpizks3kpo.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmpizks3kpo.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmpizks3kpo.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpizks3kpo.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpizks3kpo.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for (int i = 0; i < arr.length; i++) {\n            dict.put(arr[i],arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "/tmp/tmpn0vhzvoj.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpn0vhzvoj.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmpn0vhzvoj.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmpn0vhzvoj.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpn0vhzvoj.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpn0vhzvoj.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup / 1000000;\n        arr[1] = test_tup % 1000000;\n        for (int i = 0; i < arr.length; i++) {\n            dict.put(arr[i], arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "/tmp/tmp_hfz0jwz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_hfz0jwz.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_hfz0jwz.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_hfz0jwz.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for (int i = 0; i < arr.length; i++) {\n            if (i + 1 < arr.length) {\n                dict.put(arr[i], arr[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "/tmp/tmp5j4ao6bt.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp5j4ao6bt.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmp5j4ao6bt.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmp5j4ao6bt.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5j4ao6bt.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5j4ao6bt.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for(int i = 0; i < test_arr.length; i += 2) {\n            test_dict.put(test_arr[i], test_arr[i+1]);\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "/tmp/tmpf3o4cb4h.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpf3o4cb4h.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmpf3o4cb4h.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmpf3o4cb4h.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpf3o4cb4h.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpf3o4cb4h.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpikasf8ez.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpikasf8ez.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n                              ^\n/tmp/tmpikasf8ez.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n                                                    ^\n/tmp/tmpikasf8ez.java:16: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikasf8ez.java:17: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikasf8ez.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for (int i = 0; i < arr.length; i++) {\n            if (i + 1 < arr.length) {\n                dict.put(arr[i], arr[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "/tmp/tmp5j4ao6bt.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp5j4ao6bt.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmp5j4ao6bt.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmp5j4ao6bt.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5j4ao6bt.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5j4ao6bt.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> hm = new HashMap<Long,Long>();\n        long[] arr = new long[(int)test_tup];\n        for(int i=0;i<test_tup;i++) {\n            arr[i] = i;\n        }\n        for(int i=0;i<test_tup;i+=2) {\n            hm.put(arr[i],arr[i+1]);\n        }\n        return hm;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "/tmp/tmprsyrdt7o.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmprsyrdt7o.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmprsyrdt7o.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmprsyrdt7o.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[(int)test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            test_arr[i] = i;\n        }\n        for (int i = 0; i < test_tup; i += 2) {\n            dict.put(test_arr[i], test_arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "/tmp/tmpkj_7t811.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpkj_7t811.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpkj_7t811.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpkj_7t811.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for(int i = 0; i < test_arr.length; i+=2) {\n            test_dict.put(test_arr[i], test_arr[i+1]);\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "/tmp/tmp00_vagnz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp00_vagnz.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmp00_vagnz.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmp00_vagnz.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp00_vagnz.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp00_vagnz.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for (int i = 0; i < arr.length; i+=2) {\n            dict.put(arr[i], arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122718,
      "stdout": "",
      "stderr": "/tmp/tmpyuukpg9y.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpyuukpg9y.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmpyuukpg9y.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmpyuukpg9y.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpyuukpg9y.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpyuukpg9y.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for(int i = 0; i < arr.length; i++) {\n            if(i % 2 == 0) {\n                dict.put(arr[i], arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "/tmp/tmp7vah1j__.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp7vah1j__.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmp7vah1j__.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmp7vah1j__.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp7vah1j__.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp7vah1j__.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for (int i = 0; i < arr.length; i++) {\n            if (i == arr.length - 1) {\n                dict.put(arr[i], null);\n            } else {\n                dict.put(arr[i], arr[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpm_q9cpr8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpm_q9cpr8.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmpm_q9cpr8.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmpm_q9cpr8.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpm_q9cpr8.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpm_q9cpr8.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for (int i = 0; i < arr.length; i++) {\n            if (i % 2 == 0) {\n                dict.put(arr[i], arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp5u_t1dtx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp5u_t1dtx.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmp5u_t1dtx.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmp5u_t1dtx.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5u_t1dtx.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5u_t1dtx.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpikasf8ez.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpikasf8ez.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n                              ^\n/tmp/tmpikasf8ez.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n                                                    ^\n/tmp/tmpikasf8ez.java:16: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikasf8ez.java:17: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikasf8ez.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_tup_arr = new long[2];\n        test_tup_arr[0] = test_tup.getValue(0);\n        test_tup_arr[1] = test_tup.getValue(1);\n        for (int i = 0; i < test_tup_arr.length; i++) {\n            if (i == test_tup_arr.length - 1) {\n                dict.put(test_tup_arr[i], test_tup_arr[0]);\n            } else {\n                dict.put(test_tup_arr[i], test_tup_arr[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "/tmp/tmpr1mxxwgt.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpr1mxxwgt.java:13: error: long cannot be dereferenced\n        test_tup_arr[0] = test_tup.getValue(0);\n                                  ^\n/tmp/tmpr1mxxwgt.java:14: error: long cannot be dereferenced\n        test_tup_arr[1] = test_tup.getValue(1);\n                                  ^\n/tmp/tmpr1mxxwgt.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpr1mxxwgt.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpr1mxxwgt.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> hm = new HashMap<Long,Long>();\n        long[] arr = new long[(int)test_tup];\n        for(int i = 0; i < test_tup; i++) {\n            arr[i] = i;\n        }\n        for(int i = 0; i < test_tup; i+=2) {\n            hm.put(arr[i], arr[i+1]);\n        }\n        return hm;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "/tmp/tmpwrocr_he.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpwrocr_he.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpwrocr_he.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpwrocr_he.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[(int)test_tup];\n        for(int i=0;i<test_tup;i++){\n            arr[i] = i;\n        }\n        for(int i=0;i<test_tup-1;i++){\n            dict.put(arr[i],arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "/tmp/tmpzg4k6nv0.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpzg4k6nv0.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpzg4k6nv0.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpzg4k6nv0.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup;\n        test_arr[1] = test_tup;\n        for (int i = 0; i < test_arr.length; i++) {\n            dict.put(test_arr[i], test_arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmp2tqy5ajl.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2tqy5ajl.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2tqy5ajl.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2tqy5ajl.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        test_dict.put(test_tup.getValue0(),test_tup.getValue1());\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp3nj_yjoc.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp3nj_yjoc.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(),test_tup.getValue1());\n                              ^\n/tmp/tmp3nj_yjoc.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(),test_tup.getValue1());\n                                                   ^\n/tmp/tmp3nj_yjoc.java:16: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp3nj_yjoc.java:17: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp3nj_yjoc.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i % 2 == 0) {\n                test_dict.put(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpt5s__ll4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpt5s__ll4.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmpt5s__ll4.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmpt5s__ll4.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpt5s__ll4.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpt5s__ll4.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] tup = new long[2];\n        tup[0] = test_tup;\n        tup[1] = test_tup+1;\n        dict.put(tup[0],tup[1]);\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "/tmp/tmpuql9cj31.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpuql9cj31.java:19: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpuql9cj31.java:20: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpuql9cj31.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[(int)test_tup];\n        for(int i = 0; i < test_tup; i++) {\n            test_arr[i] = i;\n        }\n        for(int i = 0; i < test_tup; i++) {\n            if(i == test_tup - 1) {\n                dict.put(test_arr[i], test_arr[0]);\n            } else {\n                dict.put(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "/tmp/tmpx1gjkc98.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpx1gjkc98.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpx1gjkc98.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpx1gjkc98.java:28: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> hm = new HashMap<Long,Long>();\n        // Write your code here\n        return hm;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpd91ahpe7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpd91ahpe7.java:16: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpd91ahpe7.java:17: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpd91ahpe7.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup / 100;\n        test_arr[1] = test_tup % 100;\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i % 2 == 0) {\n                test_dict.put(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmphohf9dfb.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmphohf9dfb.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmphohf9dfb.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmphohf9dfb.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_tup_arr = new long[2];\n        test_tup_arr[0] = test_tup.getValue(0);\n        test_tup_arr[1] = test_tup.getValue(1);\n        for (int i = 0; i < test_tup_arr.length; i++) {\n            if (i % 2 == 0) {\n                test_dict.put(test_tup_arr[i], test_tup_arr[i + 1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpksbkl9fv.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpksbkl9fv.java:13: error: long cannot be dereferenced\n        test_tup_arr[0] = test_tup.getValue(0);\n                                  ^\n/tmp/tmpksbkl9fv.java:14: error: long cannot be dereferenced\n        test_tup_arr[1] = test_tup.getValue(1);\n                                  ^\n/tmp/tmpksbkl9fv.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpksbkl9fv.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpksbkl9fv.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_tup_arr = new long[2];\n        test_tup_arr[0] = test_tup.getValue0();\n        test_tup_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_tup_arr.length; i++) {\n            if (i+1 < test_tup_arr.length) {\n                dict.put(test_tup_arr[i], test_tup_arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmp6jj2wc5e.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp6jj2wc5e.java:13: error: long cannot be dereferenced\n        test_tup_arr[0] = test_tup.getValue0();\n                                  ^\n/tmp/tmp6jj2wc5e.java:14: error: long cannot be dereferenced\n        test_tup_arr[1] = test_tup.getValue1();\n                                  ^\n/tmp/tmp6jj2wc5e.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp6jj2wc5e.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp6jj2wc5e.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        // Write your code here\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        long first = test_tup;\n        long second = test_tup;\n        while(first != 0) {\n            long temp = first % 10;\n            first = first / 10;\n            second = second / 10;\n            long temp2 = second % 10;\n            map.put(temp, temp2);\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpc7ieo_k3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpc7ieo_k3.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpc7ieo_k3.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpc7ieo_k3.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup / 100;\n        test_arr[1] = test_tup % 100;\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i == test_arr.length - 1) {\n                test_dict.put(test_arr[i], test_arr[0]);\n            } else {\n                test_dict.put(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpwrg5l_aw.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpwrg5l_aw.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpwrg5l_aw.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpwrg5l_aw.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr = test_tup.toArray();\n        for (int i = 0; i < test_arr.length; i++) {\n            test_dict.put(test_arr[i], test_arr[i+1]);\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpxwe6e65c.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpxwe6e65c.java:13: error: long cannot be dereferenced\n        test_arr = test_tup.toArray();\n                           ^\n/tmp/tmpxwe6e65c.java:20: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpxwe6e65c.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpxwe6e65c.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n5 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[(int)test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            test_arr[i] = i;\n        }\n        for (int i = 0; i < test_tup; i+=2) {\n            dict.put(test_arr[i], test_arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp0h4ehy3z.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp0h4ehy3z.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp0h4ehy3z.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp0h4ehy3z.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_tup_arr = new long[2];\n        test_tup_arr[0] = test_tup.getValue(0);\n        test_tup_arr[1] = test_tup.getValue(1);\n        for (int i = 0; i < test_tup_arr.length; i++) {\n            if (i % 2 == 0) {\n                dict.put(test_tup_arr[i], test_tup_arr[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmp7r3jokas.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp7r3jokas.java:13: error: long cannot be dereferenced\n        test_tup_arr[0] = test_tup.getValue(0);\n                                  ^\n/tmp/tmp7r3jokas.java:14: error: long cannot be dereferenced\n        test_tup_arr[1] = test_tup.getValue(1);\n                                  ^\n/tmp/tmp7r3jokas.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp7r3jokas.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp7r3jokas.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup / 100;\n        test_arr[1] = test_tup % 100;\n        for (int i = 0; i < test_arr.length; i++) {\n            dict.put(test_arr[i], test_arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpn5zpeqae.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpn5zpeqae.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpn5zpeqae.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpn5zpeqae.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpikasf8ez.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpikasf8ez.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n                              ^\n/tmp/tmpikasf8ez.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n                                                    ^\n/tmp/tmpikasf8ez.java:16: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikasf8ez.java:17: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikasf8ez.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[(int)test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            arr[i] = i;\n        }\n        for (int i = 0; i < test_tup; i+=2) {\n            dict.put(arr[i], arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpea9rwei7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpea9rwei7.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpea9rwei7.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpea9rwei7.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i == test_arr.length - 1) {\n                test_dict.put(test_arr[i], test_arr[0]);\n            } else {\n                test_dict.put(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp62gum9ma.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp62gum9ma.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmp62gum9ma.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmp62gum9ma.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62gum9ma.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62gum9ma.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[(int)test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            test_arr[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            if (i % 2 == 0) {\n                dict.put(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp_rm_q934.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_rm_q934.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_rm_q934.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_rm_q934.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup;\n        arr[1] = test_tup;\n        for (int i = 0; i < arr.length; i++) {\n            dict.put(arr[i], arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpyalff7ur.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpyalff7ur.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpyalff7ur.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpyalff7ur.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        test_dict.put(test_tup.getValue0(),test_tup.getValue1());\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp3nj_yjoc.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp3nj_yjoc.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(),test_tup.getValue1());\n                              ^\n/tmp/tmp3nj_yjoc.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(),test_tup.getValue1());\n                                                   ^\n/tmp/tmp3nj_yjoc.java:16: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp3nj_yjoc.java:17: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp3nj_yjoc.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpikasf8ez.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpikasf8ez.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n                              ^\n/tmp/tmpikasf8ez.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n                                                    ^\n/tmp/tmpikasf8ez.java:16: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikasf8ez.java:17: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikasf8ez.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> res = new HashMap<Long,Long>();\n        for (int i = 0; i < test_tup.getSize(); i++) {\n            res.put(test_tup.getValue(i), test_tup.getValue(i + 1));\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmptoywqcr5.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmptoywqcr5.java:12: error: long cannot be dereferenced\n        for (int i = 0; i < test_tup.getSize(); i++) {\n                                    ^\n/tmp/tmptoywqcr5.java:13: error: long cannot be dereferenced\n            res.put(test_tup.getValue(i), test_tup.getValue(i + 1));\n                            ^\n/tmp/tmptoywqcr5.java:13: error: long cannot be dereferenced\n            res.put(test_tup.getValue(i), test_tup.getValue(i + 1));\n                                                  ^\n/tmp/tmptoywqcr5.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmptoywqcr5.java:19: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmptoywqcr5.java:20: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        for (int i = 0; i < test_tup.length; i++) {\n            test_dict.put(test_tup[i], test_tup[i+1]);\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmp1j1a6xsz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp1j1a6xsz.java:12: error: long cannot be dereferenced\n        for (int i = 0; i < test_tup.length; i++) {\n                                    ^\n/tmp/tmp1j1a6xsz.java:13: error: array required, but long found\n            test_dict.put(test_tup[i], test_tup[i+1]);\n                                  ^\n/tmp/tmp1j1a6xsz.java:13: error: array required, but long found\n            test_dict.put(test_tup[i], test_tup[i+1]);\n                                               ^\n/tmp/tmp1j1a6xsz.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp1j1a6xsz.java:19: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp1j1a6xsz.java:20: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[(int)test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            test_arr[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            if (i % 2 == 0) {\n                dict.put(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp_rm_q934.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_rm_q934.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_rm_q934.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_rm_q934.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for(int i = 0; i < arr.length; i++) {\n            if(i % 2 == 0) {\n                dict.put(arr[i], arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "/tmp/tmp7vah1j__.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp7vah1j__.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmp7vah1j__.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmp7vah1j__.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp7vah1j__.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp7vah1j__.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_tup_arr = new long[(int)test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            test_tup_arr[i] = i;\n        }\n        for (int i = 0; i < test_tup_arr.length; i+=2) {\n            dict.put(test_tup_arr[i], test_tup_arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmprwvewgo4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmprwvewgo4.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmprwvewgo4.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmprwvewgo4.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i % 2 == 0) {\n                test_dict.put(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpzsdpkrh7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpzsdpkrh7.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmpzsdpkrh7.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmpzsdpkrh7.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpzsdpkrh7.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpzsdpkrh7.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup/10000000000L;\n        arr[1] = test_tup%10000000000L;\n        for(int i=0;i<arr.length;i++) {\n            long key = arr[i]/100000000L;\n            long val = arr[i]%100000000L;\n            dict.put(key,val);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmp1bcer13u.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp1bcer13u.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp1bcer13u.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp1bcer13u.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        // Your code here\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpc4kisffo.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpc4kisffo.java:16: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpc4kisffo.java:17: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpc4kisffo.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        for (int i = 0; i < test_tup.getSize() - 1; i++) {\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i + 1));\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpr1mhepct.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpr1mhepct.java:12: error: long cannot be dereferenced\n        for (int i = 0; i < test_tup.getSize() - 1; i++) {\n                                    ^\n/tmp/tmpr1mhepct.java:13: error: long cannot be dereferenced\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i + 1));\n                                  ^\n/tmp/tmpr1mhepct.java:13: error: long cannot be dereferenced\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i + 1));\n                                                        ^\n/tmp/tmpr1mhepct.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpr1mhepct.java:19: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpr1mhepct.java:20: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        // Write your code here\n        // To print results to the standard output you can use System.out.println()\n        // Example: System.out.println(\"Hello world!\");\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for(int i=0;i<arr.length;i+=2){\n            result.put(arr[i],arr[i+1]);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpob_9koih.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpob_9koih.java:16: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmpob_9koih.java:17: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmpob_9koih.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpob_9koih.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpob_9koih.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_tup_arr = new long[2];\n        test_tup_arr[0] = test_tup.getValue(0);\n        test_tup_arr[1] = test_tup.getValue(1);\n        for(int i = 0; i < test_tup_arr.length; i++) {\n            if(i+1 < test_tup_arr.length) {\n                dict.put(test_tup_arr[i], test_tup_arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpu0ohoik8.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpu0ohoik8.java:13: error: long cannot be dereferenced\n        test_tup_arr[0] = test_tup.getValue(0);\n                                  ^\n/tmp/tmpu0ohoik8.java:14: error: long cannot be dereferenced\n        test_tup_arr[1] = test_tup.getValue(1);\n                                  ^\n/tmp/tmpu0ohoik8.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu0ohoik8.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpu0ohoik8.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i == test_arr.length - 1) {\n                test_dict.put(test_arr[i], test_arr[0]);\n            } else {\n                test_dict.put(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp62gum9ma.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp62gum9ma.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmp62gum9ma.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmp62gum9ma.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62gum9ma.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62gum9ma.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i % 2 == 0) {\n                test_dict.put(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpzsdpkrh7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpzsdpkrh7.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmpzsdpkrh7.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmpzsdpkrh7.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpzsdpkrh7.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpzsdpkrh7.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpikasf8ez.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpikasf8ez.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n                              ^\n/tmp/tmpikasf8ez.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n                                                    ^\n/tmp/tmpikasf8ez.java:16: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikasf8ez.java:17: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikasf8ez.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i == test_arr.length - 1) {\n                test_dict.put(test_arr[i], test_arr[0]);\n            } else {\n                test_dict.put(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp62gum9ma.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp62gum9ma.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmp62gum9ma.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmp62gum9ma.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62gum9ma.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62gum9ma.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[(int)test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            arr[i] = i;\n        }\n        for (int i = 0; i < test_tup; i+=2) {\n            dict.put(arr[i], arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpea9rwei7.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpea9rwei7.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpea9rwei7.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpea9rwei7.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_tup_arr = new long[2];\n        test_tup_arr[0] = test_tup.getValue0();\n        test_tup_arr[1] = test_tup.getValue1();\n        for(int i = 0; i < test_tup_arr.length; i++) {\n            if(i == test_tup_arr.length - 1) {\n                dict.put(test_tup_arr[i], test_tup_arr[0]);\n            } else {\n                dict.put(test_tup_arr[i], test_tup_arr[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmprfnj6ase.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmprfnj6ase.java:13: error: long cannot be dereferenced\n        test_tup_arr[0] = test_tup.getValue0();\n                                  ^\n/tmp/tmprfnj6ase.java:14: error: long cannot be dereferenced\n        test_tup_arr[1] = test_tup.getValue1();\n                                  ^\n/tmp/tmprfnj6ase.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmprfnj6ase.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmprfnj6ase.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for(int i = 0; i < test_arr.length; i+=2) {\n            test_dict.put(test_arr[i], test_arr[i+1]);\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "/tmp/tmp00_vagnz.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp00_vagnz.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmp00_vagnz.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmp00_vagnz.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp00_vagnz.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp00_vagnz.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[test_tup.length()];\n        for (int i = 0; i < test_tup.length(); i++) {\n            test_arr[i] = test_tup.getValue(i);\n        }\n        for (int i = 0; i < test_arr.length; i+=2) {\n            dict.put(test_arr[i], test_arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpb3ne9n89.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpb3ne9n89.java:12: error: long cannot be dereferenced\n        long[] test_arr = new long[test_tup.length()];\n                                           ^\n/tmp/tmpb3ne9n89.java:13: error: long cannot be dereferenced\n        for (int i = 0; i < test_tup.length(); i++) {\n                                    ^\n/tmp/tmpb3ne9n89.java:14: error: long cannot be dereferenced\n            test_arr[i] = test_tup.getValue(i);\n                                  ^\n/tmp/tmpb3ne9n89.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpb3ne9n89.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpb3ne9n89.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpikasf8ez.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpikasf8ez.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n                              ^\n/tmp/tmpikasf8ez.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n                                                    ^\n/tmp/tmpikasf8ez.java:16: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikasf8ez.java:17: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikasf8ez.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpikasf8ez.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpikasf8ez.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n                              ^\n/tmp/tmpikasf8ez.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n                                                    ^\n/tmp/tmpikasf8ez.java:16: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikasf8ez.java:17: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikasf8ez.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for (int i = 0; i < arr.length; i++) {\n            dict.put(arr[i], arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp_t7fp5ko.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_t7fp5ko.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmp_t7fp5ko.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmp_t7fp5ko.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_t7fp5ko.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_t7fp5ko.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i % 2 == 0) {\n                test_dict.put(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpt5s__ll4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpt5s__ll4.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmpt5s__ll4.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmpt5s__ll4.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpt5s__ll4.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpt5s__ll4.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for (int i = 0; i < arr.length; i++) {\n            if (i % 2 == 0) {\n                dict.put(arr[i], arr[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmp99du6_hh.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp99du6_hh.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmp99du6_hh.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmp99du6_hh.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp99du6_hh.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp99du6_hh.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[(int)test_tup];\n        for(int i = 0; i < test_tup; i++) {\n            test_arr[i] = i;\n        }\n        for(int i = 0; i < test_tup; i+=2) {\n            test_dict.put(test_arr[i],test_arr[i+1]);\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpuxketj8l.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpuxketj8l.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpuxketj8l.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpuxketj8l.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        long[] test_tup_arr = new long[2];\n        test_tup_arr[0] = test_tup.getValue0();\n        test_tup_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_tup_arr.length; i++) {\n            if (i == test_tup_arr.length - 1) {\n                result.put(test_tup_arr[i], test_tup_arr[0]);\n            } else {\n                result.put(test_tup_arr[i], test_tup_arr[i+1]);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "/tmp/tmpih3iz9j4.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpih3iz9j4.java:13: error: long cannot be dereferenced\n        test_tup_arr[0] = test_tup.getValue0();\n                                  ^\n/tmp/tmpih3iz9j4.java:14: error: long cannot be dereferenced\n        test_tup_arr[1] = test_tup.getValue1();\n                                  ^\n/tmp/tmpih3iz9j4.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpih3iz9j4.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpih3iz9j4.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] tup = new long[2];\n        tup[0] = test_tup/10;\n        tup[1] = test_tup%10;\n        for (int i = 0; i < tup.length; i++) {\n            if (i == tup.length-1) {\n                dict.put(tup[i], tup[0]);\n            } else {\n                dict.put(tup[i], tup[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122724,
      "stdout": "",
      "stderr": "/tmp/tmp2mb9xkgq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2mb9xkgq.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2mb9xkgq.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2mb9xkgq.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for (int i = 0; i < arr.length; i++) {\n            dict.put(arr[i], arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp_t7fp5ko.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_t7fp5ko.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmp_t7fp5ko.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmp_t7fp5ko.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_t7fp5ko.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_t7fp5ko.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpikasf8ez.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpikasf8ez.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n                              ^\n/tmp/tmpikasf8ez.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(), test_tup.getValue1());\n                                                    ^\n/tmp/tmpikasf8ez.java:16: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikasf8ez.java:17: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpikasf8ez.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for(int i = 0; i < arr.length; i+=2) {\n            dict.put(arr[i],arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122724,
      "stdout": "",
      "stderr": "/tmp/tmpz7cbazcc.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpz7cbazcc.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmpz7cbazcc.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmpz7cbazcc.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpz7cbazcc.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpz7cbazcc.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        for (int i = 0; i < test_tup.length; i++) {\n            dict.put(test_tup[i], test_tup[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpor0lltin.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpor0lltin.java:12: error: long cannot be dereferenced\n        for (int i = 0; i < test_tup.length; i++) {\n                                    ^\n/tmp/tmpor0lltin.java:13: error: array required, but long found\n            dict.put(test_tup[i], test_tup[i+1]);\n                             ^\n/tmp/tmpor0lltin.java:13: error: array required, but long found\n            dict.put(test_tup[i], test_tup[i+1]);\n                                          ^\n/tmp/tmpor0lltin.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpor0lltin.java:19: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpor0lltin.java:20: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for (int i = 0; i < arr.length; i++) {\n            dict.put(arr[i], arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp_t7fp5ko.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_t7fp5ko.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmp_t7fp5ko.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmp_t7fp5ko.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_t7fp5ko.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_t7fp5ko.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        long[] arr = new long[(int)test_tup];\n        for(int i = 0; i < test_tup; i++) {\n            arr[i] = i;\n        }\n        for(int i = 0; i < test_tup; i+=2) {\n            map.put(arr[i],arr[i+1]);\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122724,
      "stdout": "",
      "stderr": "/tmp/tmpow9clnxa.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpow9clnxa.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpow9clnxa.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpow9clnxa.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup;\n        test_arr[1] = test_tup;\n        for (int i = 0; i < test_arr.length; i++) {\n            dict.put(test_arr[i], test_arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmp2tqy5ajl.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp2tqy5ajl.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2tqy5ajl.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp2tqy5ajl.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> map = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for(int i=0; i<arr.length; i++) {\n            map.put(arr[i],arr[i+1]);\n        }\n        return map;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122724,
      "stdout": "",
      "stderr": "/tmp/tmp5h24_dau.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp5h24_dau.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmp5h24_dau.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmp5h24_dau.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5h24_dau.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5h24_dau.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i == test_arr.length - 1) {\n                test_dict.put(test_arr[i], test_arr[0]);\n            } else {\n                test_dict.put(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp62gum9ma.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp62gum9ma.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmp62gum9ma.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmp62gum9ma.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62gum9ma.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62gum9ma.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test = new long[2];\n        test[0] = test_tup;\n        test[1] = test_tup + 1;\n        for (long i = 0; i < test.length; i++) {\n            dict.put(i, test[(int) i]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122724,
      "stdout": "",
      "stderr": "/tmp/tmpodtpy0_3.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpodtpy0_3.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpodtpy0_3.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpodtpy0_3.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup;\n        arr[1] = test_tup;\n        dict.put(arr[0],arr[1]);\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122724,
      "stdout": "",
      "stderr": "/tmp/tmp28mdz4w9.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp28mdz4w9.java:19: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp28mdz4w9.java:20: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp28mdz4w9.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        test_dict.put(test_tup.getValue0(),test_tup.getValue1());\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp3nj_yjoc.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp3nj_yjoc.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(),test_tup.getValue1());\n                              ^\n/tmp/tmp3nj_yjoc.java:12: error: long cannot be dereferenced\n        test_dict.put(test_tup.getValue0(),test_tup.getValue1());\n                                                   ^\n/tmp/tmp3nj_yjoc.java:16: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp3nj_yjoc.java:17: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp3nj_yjoc.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        // Write your code here\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122724,
      "stdout": "",
      "stderr": "/tmp/tmp5fhtxerj.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp5fhtxerj.java:16: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5fhtxerj.java:17: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp5fhtxerj.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue(0);\n        arr[1] = test_tup.getValue(1);\n        for(int i = 0; i < arr.length; i+=2) {\n            dict.put(arr[i], arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122724,
      "stdout": "",
      "stderr": "/tmp/tmphvx5paqx.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmphvx5paqx.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue(0);\n                         ^\n/tmp/tmphvx5paqx.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue(1);\n                         ^\n/tmp/tmphvx5paqx.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmphvx5paqx.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmphvx5paqx.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for(int i = 0; i < arr.length; i++) {\n            if(i+1 < arr.length) {\n                dict.put(arr[i], arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122724,
      "stdout": "",
      "stderr": "/tmp/tmp7yi1rvir.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp7yi1rvir.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmp7yi1rvir.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmp7yi1rvir.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp7yi1rvir.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp7yi1rvir.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        for (int i = 0; i < test_tup.getSize(); i++) {\n            dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122724,
      "stdout": "",
      "stderr": "/tmp/tmpdz7vt27d.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpdz7vt27d.java:12: error: long cannot be dereferenced\n        for (int i = 0; i < test_tup.getSize(); i++) {\n                                    ^\n/tmp/tmpdz7vt27d.java:13: error: long cannot be dereferenced\n            dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n                             ^\n/tmp/tmpdz7vt27d.java:13: error: long cannot be dereferenced\n            dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n                                                   ^\n/tmp/tmpdz7vt27d.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpdz7vt27d.java:19: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpdz7vt27d.java:20: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        dict.put(test_tup.getValue0(), test_tup.getValue1());\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122724,
      "stdout": "",
      "stderr": "/tmp/tmpj5sfe9o6.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpj5sfe9o6.java:12: error: long cannot be dereferenced\n        dict.put(test_tup.getValue0(), test_tup.getValue1());\n                         ^\n/tmp/tmpj5sfe9o6.java:12: error: long cannot be dereferenced\n        dict.put(test_tup.getValue0(), test_tup.getValue1());\n                                               ^\n/tmp/tmpj5sfe9o6.java:16: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpj5sfe9o6.java:17: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpj5sfe9o6.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> result = new HashMap<Long,Long>();\n        // Write your code here\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122724,
      "stdout": "",
      "stderr": "/tmp/tmphn5id2s0.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmphn5id2s0.java:16: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmphn5id2s0.java:17: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmphn5id2s0.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for(int i = 0; i < arr.length; i++) {\n            if(i % 2 == 0) {\n                dict.put(arr[i], arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "/tmp/tmp7vah1j__.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp7vah1j__.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmp7vah1j__.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmp7vah1j__.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp7vah1j__.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp7vah1j__.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[(int)test_tup];\n        for (int i = 0; i < test_tup; i++) {\n            test_arr[i] = i;\n        }\n        for (int i = 0; i < test_tup; i++) {\n            if (i % 2 == 0) {\n                dict.put(test_arr[i], test_arr[i+1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp_rm_q934.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_rm_q934.java:24: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_rm_q934.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_rm_q934.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            test_dict.put(test_arr[i], test_arr[i+1]);\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpa1fhwgwn.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpa1fhwgwn.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmpa1fhwgwn.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmpa1fhwgwn.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpa1fhwgwn.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpa1fhwgwn.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        for(int i = 0; i < test_tup.length; i+=2) {\n            test_dict.put(test_tup[i], test_tup[i+1]);\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122724,
      "stdout": "",
      "stderr": "/tmp/tmpwvbivy91.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpwvbivy91.java:12: error: long cannot be dereferenced\n        for(int i = 0; i < test_tup.length; i+=2) {\n                                   ^\n/tmp/tmpwvbivy91.java:13: error: array required, but long found\n            test_dict.put(test_tup[i], test_tup[i+1]);\n                                  ^\n/tmp/tmpwvbivy91.java:13: error: array required, but long found\n            test_dict.put(test_tup[i], test_tup[i+1]);\n                                               ^\n/tmp/tmpwvbivy91.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpwvbivy91.java:19: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpwvbivy91.java:20: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup / 1000000000;\n        arr[1] = test_tup % 1000000000;\n        for (int i = 0; i < arr.length; i++) {\n            if (i == arr.length - 1) {\n                dict.put(arr[i], -1L);\n            } else {\n                dict.put(arr[i], arr[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122724,
      "stdout": "",
      "stderr": "/tmp/tmpa_f0rpyk.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpa_f0rpyk.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpa_f0rpyk.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpa_f0rpyk.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] tup_arr = new long[2];\n        tup_arr[0] = test_tup.getValue0();\n        tup_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < tup_arr.length; i++) {\n            if (i == tup_arr.length - 1) {\n                dict.put(tup_arr[i], 0L);\n            } else {\n                dict.put(tup_arr[i], tup_arr[i + 1]);\n            }\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122724,
      "stdout": "",
      "stderr": "/tmp/tmppgynjw1e.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmppgynjw1e.java:13: error: long cannot be dereferenced\n        tup_arr[0] = test_tup.getValue0();\n                             ^\n/tmp/tmppgynjw1e.java:14: error: long cannot be dereferenced\n        tup_arr[1] = test_tup.getValue1();\n                             ^\n/tmp/tmppgynjw1e.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmppgynjw1e.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmppgynjw1e.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        for (int i = 0; i < test_tup.getSize(); i++) {\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1665509859,
      "stdout": "",
      "stderr": "/tmp/tmpi6rxiznq.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpi6rxiznq.java:12: error: long cannot be dereferenced\n        for (int i = 0; i < test_tup.getSize(); i++) {\n                                    ^\n/tmp/tmpi6rxiznq.java:13: error: long cannot be dereferenced\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n                                  ^\n/tmp/tmpi6rxiznq.java:13: error: long cannot be dereferenced\n            test_dict.put(test_tup.getValue(i), test_tup.getValue(i+1));\n                                                        ^\n/tmp/tmpi6rxiznq.java:18: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpi6rxiznq.java:19: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpi6rxiznq.java:20: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup.getValue0();\n        arr[1] = test_tup.getValue1();\n        for (int i = 0; i < arr.length; i++) {\n            dict.put(arr[i], arr[i+1]);\n        }\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp_t7fp5ko.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp_t7fp5ko.java:13: error: long cannot be dereferenced\n        arr[0] = test_tup.getValue0();\n                         ^\n/tmp/tmp_t7fp5ko.java:14: error: long cannot be dereferenced\n        arr[1] = test_tup.getValue1();\n                         ^\n/tmp/tmp_t7fp5ko.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_t7fp5ko.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp_t7fp5ko.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            if (i == test_arr.length - 1) {\n                test_dict.put(test_arr[i], test_arr[0]);\n            } else {\n                test_dict.put(test_arr[i], test_arr[i + 1]);\n            }\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp62gum9ma.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmp62gum9ma.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmp62gum9ma.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmp62gum9ma.java:25: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62gum9ma.java:26: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmp62gum9ma.java:27: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> dict = new HashMap<Long,Long>();\n        long[] arr = new long[2];\n        arr[0] = test_tup;\n        arr[1] = test_tup + 1;\n        dict.put(arr[0], arr[1]);\n        return dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122724,
      "stdout": "",
      "stderr": "/tmp/tmpzar_y2a2.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpzar_y2a2.java:19: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpzar_y2a2.java:20: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpzar_y2a2.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/\n    public static HashMap<Long,Long> tupleToDict(long test_tup) {\n        HashMap<Long,Long> test_dict = new HashMap<Long,Long>();\n        long[] test_arr = new long[2];\n        test_arr[0] = test_tup.getValue0();\n        test_arr[1] = test_tup.getValue1();\n        for (int i = 0; i < test_arr.length; i++) {\n            test_dict.put(test_arr[i], test_arr[i+1]);\n        }\n        return test_dict;\n    }\n    public static void main(String[] args) {\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n    }\n\n}\n",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpa1fhwgwn.java:3: error: package org.javatuples does not exist\nimport org.javatuples.*;\n^\n/tmp/tmpa1fhwgwn.java:13: error: long cannot be dereferenced\n        test_arr[0] = test_tup.getValue0();\n                              ^\n/tmp/tmpa1fhwgwn.java:14: error: long cannot be dereferenced\n        test_arr[1] = test_tup.getValue1();\n                              ^\n/tmp/tmpa1fhwgwn.java:21: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 5l, 7l, 10l, 13l, 5l)).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpa1fhwgwn.java:22: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(1l, 2l, 3l, 4l, 5l, 6l)).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n/tmp/tmpa1fhwgwn.java:23: error: cannot find symbol\n    assert(tupleToDict((long)Pair.with(7l, 8l, 9l, 10l, 11l, 12l)).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));\n                             ^\n  symbol:   variable Pair\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}